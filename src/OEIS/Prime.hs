module OEIS.Prime where

import OEIS.OEIS
import Data.Bits
import Data.List
import qualified Data.Set as S
import Data.Numbers.Primes hiding (isPrime)
import Math.NumberTheory.Primes.Testing
import Math.NumberTheory.Powers.Squares.Internal
import Data.Ratio
import Control.Monad
import Data.Function (fix, on)
import Data.Char (intToDigit, digitToInt)
import Math.NumberTheory.Moduli (powMod)
import Math.NumberTheory.Primes.Factorisation (factorise)
import qualified Math.NumberTheory.ArithmeticFunctions as A
import Math.NumberTheory.Recurrences
import Data.Maybe (fromJust)
import Data.Ord (Down (..))
import Data.Proxy
import Data.Tuple



class Table (n :: Nat) where
  tabl :: Integral i => [[i]]
  tabl = tabf @n

  tabf :: Integral i => [[i]]
  tabf = tabl @n

  rowT :: Integral i => i -> [i]
  rowT = genericIndex $ tabl @n

  rowCol :: Integral i => i -> i -> i
  rowCol n k = rowT @n n `genericIndex` k

  tablList :: Integral i => [i]
  tablList = concat (tabl @n)


rowT_off :: forall n (o :: Nat) i. (Table n, KnownNat o, Integral i) => i -> [i]
rowT_off n = tabl @n `genericIndex` (n - do fi . natVal $ Proxy @o)

rowCol_off :: forall n (o1 :: Nat) (o2 :: Nat) i. (Table n, KnownNat o1, KnownNat o2, Integral i) => i -> i -> i
rowCol_off n k = (tabl @n `genericIndex` (n - do fi . natVal $ Proxy @o1)) `genericIndex` (k - do fi . natVal $ Proxy @o2)




choices = concat . map permutations . subsequences

zipTail f = zipWith f =<< tail

fact n = product [2..n]
facts = tail factorial
-- facts  = scanl1 (*) [1..]

divisors n = map fi $ A.divisorsList (fi n :: Int)
-- divisors 1 = [1]
-- divisors n = (1:filter ((==0) . rem n) [2..n `div` 2]) ++ [n]
--
totient 0 = 0
totient n = fi . A.totient $ (fi n :: Int)
-- totient n = genericLength $ filter (==1) $ map (gcd n) [1..n]

sumTo n = (n + r) * q
  where
    (q,r) = (shiftR (n + 1) 1, (n + 1) .&. 1)
    -- (q,r) = quotRem (n + 1) 2

bin n 0 = 1
bin 0 k = 0
bin n k = bin (n - 1) (k - 1) * n `div` k

fibs = 0 : 1 : zipTail (+) fibs

fib = fibonacci
-- fib :: Int -> Integer
-- fib n = snd . foldl_ fib_ (1, 0) . dropWhile not $
--             [testBit n k | k <- let s = finiteBitSize n in [s - 1,s - 2..0]]
--     where
--         fib_ (f, g) p
--             | p         = (f* (f+2*g), ss)
--             | otherwise = (ss, g* (2*f-g))
--             where ss = f*f+g*g
--         foldl_ = foldl'



instance OEIS 2 where
  oeis = let a = 1:2: drop 2 (concat . zipWith (replicate . fi) a . cycle $ [1, 2]) in a

instance OEIS 4 where
  oeis   = repeat 0
  oeisIx = const 0

instance OEIS 5 where
  oeisIx = genericLength . divisors . succ
  -- product . map (+1) . (rowT @124010)

-- TODO: This one is interesting
instance OEIS 6 where
  oeisIx = oeisIx @196 . oeisIx @40

instance OEIS 7 where
  oeis   = 1 : repeat 0
  oeisIx = (0 ^)

instance OEIS 8 where
  oeisIx = p [1,2,5,10] where
    p _          0 = 1
    p []         _ = 0
    p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 9 where
--   import Data.MemoCombinators (memo2, integral)
--   oeisIx n = (oeis @9) !! n
--   oeis = map (pM 1) [0..] where
--      pM = memo2 integral integral p
--      p _ 0 = 1
--      p k m | m < k     = 0
--            | otherwise = pM (k + 1) (m - k) + pM (k + 1) m

instance OEIS 10 where
  oeisIx (succ->n) = totient n

instance OEIS 12 where
  oeis   = repeat 1
  oeisIx = const 1

instance OEIS 13 where
  oeisIx 0 = 1
  oeisIx n = sum (zipWith (*)
   (map (oeisIx @10 . pred . (* 2)) ds) (map (2 ^) $ reverse ds)) `div` (2 * n)
    where ds = (rowT @27750) n

instance OEIS 15 where
  oeis = 1 : concat do zipTail f $ oeis @961
    where
      f pp qq = replicate (fi (pp - qq)) pp

-- instance OEIS 16 where
--   oeisIx 0 = 1
--   oeisIx n =  (`div` (2 * n)) $ sum $
--    zipWith (*) (map (oeisIx @10) oddDivs) (map ((2 ^) . (div n)) $ oddDivs)
--     where oddDivs = rowT @182469 n

instance OEIS 21 where
  oeisIx n = genericLength [ () | k <- [1..2^n],
        sum [oeisIx @10052 (k - 12*y^2) | y <- [0..oeisIx @196 (k `div` 12)]] > 0]

instance OEIS 23 where
  oeisIx n = foldl g 1 [1..n]
    where g n m = n*m + (-2)^m

instance OEIS 26 where
  oeisIx (succ->n) = f primes n 1 (0^ (n - 1)) 1 where
    f _  1 q e y  = y * e * q
    f ps'@ (p:ps) x q e y
      | m == 0    = f ps' x' p (e+1) y
      | e > 0     = f ps x q 0 (y * e * q)
      | x < p * p = f ps' 1 x 1 y
      | otherwise = f ps x 1 0 y
      where (x', m) = divMod x p

instance OEIS 27 where
  oeis   = [1..]
  oeisIx = succ

instance OEIS 28 where
  oeis = filter (odd . sum . map (oeisIx @120) . rowT @124010) [1..]

instance OEIS 30 where
  oeisIx = until (< 10) (`div` 10)

instance OEIS 31 where
  oeisIx = f
    where
      f 0 = 1
      f n = (`div` n) $ sum $
        zipWith (*) (map (oeisIx @10 . pred) divs) (map (oeisIx @79) $ reverse divs)
        where divs = (rowT @27750) n


instance OEIS 32 where
  oeis = let r = 2 : 1 : do zipTail (+) r in r

instance OEIS 33 where
  oeisIx (succ->n) = sum $ map f [2..n]
    where f k = g k `div` h k
          g k = (-1)^k * n * fac (2*n - k - 1) * fac (n - k)
          h k = fac (2*n - 2*k) * fac (k - 2)
          fac = (oeisIx @142)

instance OEIS 34 where
  oeis   = cycle [1,2]
  oeisIx = succ . (`mod` 2)

instance OEIS 35 where
  oeis   = cycle [0,1]
  oeisIx = (`mod` 2)

instance OEIS 37 where
  oeisIx (succ->n) = n + f (n + f n)
    where f = oeisIx @196

instance OEIS 38 where
  oeis     = 2 : repeat 0
  oeisIx 0 = 2
  oeisIx n = 0


instance OEIS 40 where
  oeis = primes

-- instance OEIS 41 where
--   import Data.MemoCombinators (memo2, integral)
--   oeisIx n = (oeis @41) !! n
--   oeis = map (p' 1) [0..] where
--      p' = memo2 integral integral p
--      p _ 0 = 1
--      p k m = if m < k then 0 else p' k (m - k) + p' (k + 1) m

instance OEIS 42 where
  oeis     = iterate (\x -> 10*x + 1) 1
  oeisIx (succ->n) = (10 ^ n - 1) `div` 9

-- TODO: Lucas Lehmer
instance OEIS 43 where
  oeis = [ i | (i, n) <- iterate (\ (i,n) -> (i+1, shiftL n 1)) (1,2), isPrime (n - 1) ]

instance OEIS 44 where
  oeis = rabs where
    rabs = 1 : take 12 (tail fibs)
        ++ zipWith3 (\x y z -> x + y - z)
             (drop 12 rabs)
             (drop 11 rabs)
                      rabs

instance OEIS 45 where
  oeis   = fibs
  oeisIx = fi . fib . fi

instance OEIS 50 where
  oeisIx n = foldl f 0 [1..2^n]
    where
      f i j | g j > 0 = i + 1 | let = i
      g k = foldl f 0 (h k)
        where f i y = g y + i
                where g y = oeisIx @10052 (k - y^2)
              h k = [0..oeisIx @196 k]


instance OEIS 51 where
  oeisIx = succ . oeisIx @79
  oeis   = iterate (subtract 1 . (* 2)) 2

instance OEIS 58 where
  oeisIx = f
    where
      f 0 = 2
      f n = f m ^ 2 - f m + 1 where m = n - 1
  oeis = iterate (oeisIx @2061) 2

instance OEIS 59 where
  oeis = [ fi i | i <- [1..], isPrime $ (2*i)^4 + 1 ]

instance OEIS 62 where
  oeisIx n = fi . floor $ fi (n + 1) / (exp 1 - 2)

instance OEIS 69 where
  oeis = [x | x <- [0..], odd $ oeisIx @120 x]

instance OEIS 70 where
  oeisIx = p (oeis @28310) where
     p _          0 = 1
     p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

instance OEIS 71 where
  oeis = map (subtract 1) $ tail $ oeis @45

instance OEIS 73 where
  oeis = xs where xs = 0 : 0 : 1 : zipWith (+) xs do tail $ zipTail (+) xs


instance OEIS 78 where
  oeis = 0 : 0 : 0 : f [0,0,0,1]
    where
      f xs = y : f (y:xs) where
        y = sum $ head $ transpose $ take 4 $ tails xs

instance OEIS 79 where
  oeis   = iterate (*2) 1
  oeisIx = (2 ^)

instance OEIS 81 where
  oeis = 0 : 1 : f 1 [1,0] where
   f x ys = y : f (x + 1) (y : ys) where
     y = sum (zipWith (*) (map h [1..x]) ys) `div` x
     h = sum . map (\d -> d * (oeisIx @81) d) . (rowT @27750)

-- instance OEIS 82 where
--   oeisIx n = product $ zipWith (\p e -> p ^ (2*e - 1) * (p + 1))
--                               (rowT @27748 n) (rowT @124010 n)

instance OEIS 85 where
  oeis = xs
    where
      xs = 1 : 1 : zipWith (+) (zipWith (*) [1..] xs) (tail xs)

-- instance OEIS 86 where
--   oeisIx n = if n `mod` 9 == 0 then 0
--   else product $ map ((* 2) . (oeisIx @79978) . (+ 2)) $ rowT @27748 $ oeisIx @38502 n

-- instance OEIS 89 where
--   oeisIx (succ->n) = product $ zipWith f (rowT @27748 n) (rowT @124010 n) where
--    f 2 e = if e == 1 then 1 else 0
--    f p _ = if p `mod` 4 == 1 then 2 else 0

instance OEIS 93 where
  oeisIx = oeisIx @196 . oeisIx @578

-- instance OEIS 95 where
--   oeisIx n = product $ zipWith f ((rowT @27748) n) ((rowT @124010) n) where
--    f 2 e = if e == 1 then 2 else 0
--    f p _ = if p `mod` 4 == 1 then 2 else 0

instance OEIS 96 where
  oeisIx n = n * (n + 3) `div` 2
-- (oeis @96) = [x | x <- [0..], (oeisIx @23531) x == 1]

instance OEIS 100 where
  oeis = f (tail $ oeis @45) [head $ oeis @45] where
   f (x:xs) ys = (sum . zipWith (*) ys $ oeis @73) : f xs (x:ys)

instance OEIS 106 where
  oeis = drop 2 $ conv (oeis @81) [] where
    conv (v:vs) ws = (sum $ zipWith (*) ws' $ reverse ws') : conv vs ws'
      where ws' = v : ws

instance OEIS 108 where
  oeis = map last $ iterate (scanl1 (+) . (++ [0])) [1]

instance OEIS 110 where
  oeisIx = sum . rowT @48993

instance OEIS 111 where
  oeisIx 0 = 1
  oeisIx n = sum $ (rowT @8280) (n - 1)

instance OEIS 116 where
  oeis = bis $ oeis @13 where bis (x:_:xs) = x : bis xs

-- instance OEIS 118 where
--   oeisIx 0 = 1
--   oeisIx n = 8 * (oeisIx @46897) n

instance OEIS 119 where
  oeisIx = p $ drop 2 $ oeis @45 where
    p _      0 = 1
    p (f:fs) m = if m < f then 0 else p fs (m - f) + p fs m

instance OEIS 120 where
  oeis = concat r
    where r = [0] : (map.map) (+1) (scanl1 (++) r)

  oeisIx = fi . popCount . fi

instance OEIS 123 where
  oeis = xs
    where xs = 1 : zipWith (+) xs (tail $ concat $ transpose [xs,xs])

instance OEIS 124 where
  oeisIx = succ . oeisIx @217

instance OEIS 127 where
  oeisIx = sum . take 5 . rowT @7318

instance OEIS 129 where
  oeis = xs where xs = 0 : 1 : zipWith (+) xs do map (2 *) $ tail xs

-- instance OEIS 139 where
--   oeis   0 = 2
--   oeisIx n = ((3 * n) `a007318` (2 * n + 1)) `div` (oeisIx @217) n

instance OEIS 141 where
  oeisIx 0 = 1
  oeisIx (pred->n) = 16 * (oeisIx @50470) n - 4 * (oeisIx @2173) n

instance OEIS 142 where
  oeis     = xs where xs = 1 : zipWith (*) [1..] xs
  oeisIx n = product [1..n]

instance OEIS 149 where
  oeisIx = floor . (exp 1 ^)
  oeis   = let e = exp 1 in map floor $ iterate (* e) 1

instance OEIS 153 where
  oeis = xs
    where
      xs = 0 : 1 : zipWith (+) (zipWith (*) [0..] xs) do zipWith (*) [2..] $ tail xs

-- instance OEIS 161 where
  -- oeisIx n = sum $ map ((oeisIx @10052) . (n -)) $ takeWhile (<= n `div` 2) (oeis @290)

instance OEIS 165 where
  oeisIx n = product [2, 4 .. 2 * n]

instance OEIS 166 where
  oeis = xs where xs = 1 : 0 : zipWith (*) [1..] do zipTail (+) xs

instance OEIS 169 where
  oeisIx 0 = 1
  oeisIx (succ->n) = n ^ (n - 1)

instance OEIS 172 where
  oeisIx = sum . map (oeisIx @578) . rowT @7318

instance OEIS 178 where
  oeis = 1 : scanl1 (*) facts

-- instance OEIS 179 where
--   oeisIx n = (oeis @179) !! n
--   oeis = 1 : 0 : 0 : 1 : zipWith5
--    (\v w x y z -> (x * y + (v + 2) * z - w) `div` v) [2..] (cycle [4,-4])
--    (drop 4 (oeis @67998)) (drop 3 (oeis @179)) (drop 2 (oeis @179))

-- instance OEIS 188 where
--   oeisIx (succ->n) = product $ zipWith (^)
--                       (rowT @27748 n) $ map (`div` 2) (rowT @124010 n)

instance OEIS 193 where
  oeisIx = round . log . succ . fi
  oeis   = concat [ replicate n i
                  | n <- 1 : do zipTail (-) $ oeis @219092
                  | i <- [0..] ]

-- TODO: finite precision
instance OEIS 194 where
  oeis = 0 : do concat $ zipWith ($) (map replicate [2,4..]) [1..]

instance OEIS 195 where
  oeisIx = floor . log . succ . fi

instance OEIS 196 where
  oeis     = concat $ zipWith replicate [1,3..] [0..]
  oeisIx 0 = 0
  oeisIx n = isqrtA n

instance OEIS 197 where
  oeisIx = fact . fact

instance OEIS 201 where
  oeis = f [1..] [1..] where
    f (x:xs) (y:ys) = y : f xs do delete (x + y) ys

-- instance OEIS 203 where
--   oeisIx (succ->n)
--     = product $ zipWith (\p e -> (p^ (e+1) - 1) `div` (p - 1))
--           (rowT @27748  n)
--           (rowT @124010 n)

instance OEIS 204 where
  oeis = xs where xs = 1 : 3 : do zipTail (+) xs

instance OEIS 208 where
  oeis = map (`div` 2) $ concat $ transpose
   [zipWith (+) (oeis @116) $ bis (oeis @116), bis $ tail (oeis @116)]
   where bis (x:_:xs) = x : bis xs

instance OEIS 209 where
  oeisIx = round . tan . fi

instance OEIS 210 where
  oeisIx (succ.fi->n) = floor $ n * (exp 1 - 1)

instance OEIS 211 where
  oeis = xs where xs = 4 : 3 : map (subtract 2) do zipTail (+) xs

instance OEIS 212 where
  oeisIx n = div (n*n) 3

instance OEIS 213 where
  oeis = xs where xs = 1 : 1 : 1 : zipWith (+) xs (tail $ zipTail (+) xs)

instance OEIS 215 where
  oeisIx = (+ 1) . (2 ^) . (2 ^)

instance OEIS 216 where
  oeis = iterate (oeisIx @3132) 2

instance OEIS 217 where
  oeis     = scanl1 (+) [0..]
  oeisIx n = div (n* (n+1)) 2

instance OEIS 218 where
  oeis = iterate (oeisIx @3132) 3

instance OEIS 221 where
  oeis = iterate (oeisIx @3132) 5

-- instance OEIS 224 where
--   oeisIx (succ->n) = product $ zipWith f ((rowT @27748) n) ((rowT @124010) n) where
--    f 2 e = 2 ^ e `div` 6 + 2
--    f p e = p ^ (e + 1) `div` (2 * p + 2) + 1

instance OEIS 225 where
  oeis   = iterate ((+ 1) . (* 2)) 0
  oeisIx = (subtract 1) . (2 ^)

instance OEIS 227 where
  oeisIx n = round $ exp 1 ^ fi n

instance OEIS 230 where
  oeisIx 0 = 2
  oeisIx n
    | Just (p,_) <- find ((==2*n).snd) . zip primes $ zipTail (-) primes = p

instance OEIS 244 where
  oeis   = iterate (*3) 1
  oeisIx = (3 ^)

instance OEIS 246 where
  oeis' (A r) = 1 : 1 : zipWith (+) (tail r) (zipWith (*) r $ oeis @2378)

instance OEIS 247 where
  oeisIx ((+2)->n) = 2 ^ n - n - 2

instance OEIS 248 where
  oeisIx n = sum [ bin n k * (n-k)^k | k <- [0..n] ]

instance OEIS 253 where
  oeis = go 0 1 4 2
    where
      go a b c n
        | x <- 2 * c - b + a + 2^n = a : go b c x (n+1)

instance OEIS 255 where
  oeis = xs where xs = 1 : 1 : zipTail (+) do zipWith (*) [1..] xs

-- instance OEIS 262 where
--   oeis = 1 : 1 : zipWith (-)
--                (tail $ zipWith (*) (oeis @5408) (oeis @262))
--                       (zipWith (*) (oeis @2378) (oeis @262))

instance OEIS 265 where
  oeisIx = until odd (`div` 2) . succ

instance OEIS 267 where
  oeisIx = oeisIx @196 . oeisIx @16813

instance OEIS 272 where
  oeisIx 0 = 1
  oeisIx 1 = 1
  oeisIx n = n ^ (n - 2)


instance OEIS 277 where
  oeisIx n = 3*n - 2 * isqrtA (4 * n + 5) + 5

instance OEIS 278 where
  oeisIx = go where
    go n | n < 2 = n
         | let = go (n - 1) + go (n - 2) ^ 2

instance OEIS 285 where
  oeis' (A r) = 1 : 4 : zipTail (+) r

instance OEIS 290 where
  oeis   = scanl (+) 0 [1,3..]
  oeisIx = (^ 2)

instance OEIS 292 where
  oeisIx n = n * (n + 1) * (n + 2) `div` 6
  oeis = scanl1 (+) $ oeis @217

instance OEIS 295 where
  oeisIx n = 2^n - n - 1

instance OEIS 297 where
  oeisIx (pred->n) = (n + 1) * (n + 3) * (n+8) `div` 6

instance OEIS 301 where
  oeisIx      = oeisIx @79 . oeisIx @45
  oeis' (A r) = 1 : scanl (*) 2 r

instance OEIS 302 where
  oeis   = iterate (* 4) 1
  oeisIx = (4 ^)

instance OEIS 304 where
  oeis = fix \r -> 2 : 3 : zipTail (*) r

instance OEIS 312 where
  oeis     = zipWith (^) [0..] [0..]
  oeisIx n = n ^ n

instance OEIS 325 where
  oeis = zipWith (-) (oeis @79) [0..]
  oeisIx n = 2 ^ n - n

instance OEIS 326 where
  oeisIx n = n * (3 * n - 1) `div` 2

instance OEIS 328 where
  oeisIx n = genericLength [ (x,y) | x <- [-n..n], y <- [-n..n], x^2 + y^2 <= n^2]

instance OEIS 330 where
  oeis = scanl1 (+) $ oeis @290
  oeisIx n = n * (n + 1) * (2 * n + 1) `div` 6

instance OEIS 340 where
  oeisIx n = div (3 ^ (n+2) - 2*n - 5) 4

instance OEIS 350 where
  oeis = map fi . elemIndices True $ zipWith (isSuffixOf `on` show) [0..] $ oeis @45

instance OEIS 351 where
  oeis   = iterate (* 5) 1
  oeisIx = (5 ^)

-- instance OEIS 360 where
--   oeis = fix \r -> 1 : concat (transpose
--     [ zipWith (+) r $ drop 2 $ oeis @57078
--     , zipTail (+) r ])

instance OEIS 379 where
  oeis = filter (even . sum . map (oeisIx @120) . rowT @124010) [1..]

instance OEIS 384 where
  oeisIx n = n * (2 * n - 1)
  -- oeis = scanl (+) 0 (oeis @16813)

-- instance OEIS 385 where
--   oeisIx n = sum $ zipWith (*) sigmas $ reverse sigmas
--     where
--       sigmas = take (fi n) $ oeis @203

instance OEIS 389 where
  oeis = 0 : 0 : f [] (oeis @217)
    where
      f xs (t:ts) = (sum $ zipWith (*) xs $ oeis @217) : f (t:xs) ts

-- instance OEIS 396 where
--   oeis = [ x | x <- [1..], oeisIx @203 x == 2 * x ]

instance OEIS 400 where
  oeisIx = (6 ^)
  oeis   = iterate (* 6) 1

-- instance OEIS 404 where
--   oeis = map fi . findIndices (> 0) $ oeis @25426

-- instance OEIS 408 where
--   oeis = filter ((> 0) . oeisIx @25427) [1..]

-- instance OEIS 419 where
--   oeis = filter ((== 3) . oeisIx @2828) [1..]

instance OEIS 420 where
  oeisIx = (7 ^)
  oeis   = iterate (* 7) 1

instance OEIS 430 where
  oeis = m (oeis @40) (oeis @1248)
    where
      m (x:xs) (y:ys)
        | x < y = x : m xs (y:ys)
        | x > y = y : m (x:xs) ys

instance OEIS 433 where
  oeisIx 0 = 0
  oeisIx n = fi . read $ map intToDigit $ t n $ reverse $ takeWhile (<= n) $ tail $ oeis @578
    where
      t _ []          = []
      t m (x:xs)
          | x > m     = 0 : t m xs
          | otherwise = (fi m') : t r xs
          where (m',r) = divMod m x

instance OEIS 447 where
  oeis = (0 :) . scanl1 (+) $ oeis @16754

instance OEIS 461 where
  oeisIx = fi . f . fi . succ
    where
      f n = (read $ concat $ replicate n $ show n) :: Integer

instance OEIS 462 where
  oeisIx (succ->fi->n) = fi . g [] n $ reverse $ takeWhile (<= n) $ tail (oeis @217)
    where
      g as 0 []     = read $ concat $ map show $ reverse as :: Integer
      g as x (t:ts) = g (a:as) r ts where (a,r) = divMod x t

instance OEIS 463 where
  oeis = concatMap (\x -> [x,x^2]) [1..]

-- instance OEIS 469 where
--   oeis = filter ((== 0) . oeisIx @10051) (oeis @5117)

instance OEIS 472 where
  oeis = 2 : 5 : zipWith (+) (map (^ 2) $ tail $ oeis @472)
    do zipWith (*) (map (+ 1) $ oeis @472)
                $ zipWith (-) (tail $ oeis @472)
                $ map (^ 2) $ oeis @472

instance OEIS 522 where
  oeisIx = genericLength . choices . enumFromTo 1 . fi

instance OEIS 523 where
  oeisIx 0 = 0
  oeisIx n = 1 + oeisIx @523 (div (n - 1) 2)
  oeis = 0 : f [0] where
    f xs = ys ++ f ys where ys = map (+1) ( xs ++ xs )

instance OEIS 537 where
  oeisIx = oeisIx @290 . oeisIx @217

instance OEIS 538 where
  oeisIx n = (3 * n * (n + 1) - 1) * (2 * n + 1) * (n + 1) * n `div` 30

instance OEIS 540 where
  oeis = scanl1 (+) $ oeis @1014

instance OEIS 566 where
  oeisIx n = n * (5 * (n - 1) + 2) `div` 2
  -- oeis = scanl (+) 0 $ oeis @16861

instance OEIS 567 where
  oeisIx n = n * (3 * n - 2)

instance OEIS 578 where
  oeisIx = (^ 3)
  oeis =  0 : 1 : 8 : zipWith (+)
    (map (+ 6) $ oeis @578)
    (map (* 3) $ tail $ zipWith (-) (tail $ oeis @578) $ oeis @578)


instance OEIS 583 where
  oeisIx = (^ 4)
  -- oeis = scanl (+) 0 $ oeis @5917

instance OEIS 584 where
  oeisIx = (^ 5)

instance OEIS 586 where
  oeisIx = p $ oeis @40 where
    p _ 0 = 1
    p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

instance OEIS 587 where
  oeis =  1 : f (tabl @7318) [1] where
   f (bs:bss) xs = y : f bss (y : xs)
     where y = - sum (zipWith (*) xs bs)

instance OEIS 593 where
  oeisIx = sum . rowT @182469

instance OEIS 603 where
  oeisIx n = genericLength [ (x,y) | x <- [0..n], y <- [0..n], x^2 + y^ 2 <= n^2]

instance OEIS 607 where
  oeisIx = p $ oeis @40 where
    p _      0 = 1
    p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

instance OEIS 657 where
  oeisIx n = (rowCol @8280) (2 * n) n


-- instance OEIS 658 where
--   oeisIx n = sum $ map c3 [0..n] where
--      c3 k = ((oeisIx @7318)' n k)^2 * ((oeisIx @7318)' (2*k) k)^2 * (oeisIx @7318)' (2*k) (n-k)

-- instance OEIS 660 where
--   oeisIx n = sum $ zipWith (*) (rowT @109449 n) (1 : [1..])

-- instance OEIS 667 where
--   oeisIx n = if x == 1 then last xs else x
--               where xs@ (x:_) = rowT @227862 n

instance OEIS 670 where
  oeis = 1 : f [1] (map tail $ tail (tabl @7318)) where
    f xs (bs:bss) = y : f (y : xs) bss where y = sum $ zipWith (*) xs bs

-- instance OEIS 674 where
--   oeisIx n = sum $ zipWith (*) ((rowT @109449) n) (1 : repeat 2)

-- instance OEIS 688 where
--   oeisIx = product . map (oeisIx @41) . (rowT @124010)

instance OEIS 689 where
  oeis = 1 : cycle [2,4,8,6]

instance OEIS 695 where
  oeisIx n = if n == 0 then 0 else 4 * oeisIx @695 n' + b
    where (n',b) = divMod n 2

instance OEIS 697 where
  oeisIx n = sum $ zipWith (*) (rowT @109449 n) (1 : tail (oeis @290))

instance OEIS 703 where
  oeisIx = fi . floor . (/ 2) . (+ 7) . sqrt . (+ 1) . (* 24) . fi

-- instance OEIS 712 where
--   oeis = p $ oeis @8619 where
--     p _          0 = 1
--     p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 718 where
  -- oeisIx n = sum $ zipWith (*) ((rowT @109449) n) (1 : tail (oeis @217))

instance OEIS 720 where
  oeis = scanl1 (+) $ oeis @10051

instance OEIS 726 where
  oeisIx n = p (oeis @1651) n where
     p _  0 = 1
     p ks'@ (k:ks) m | m < k     = 0
                    | otherwise = p ks' (m - k) + p ks m

-- instance OEIS 732 where
--   oeisIx n = sum $ zipWith (*) (rowT @109449 n) (oeis @8578)

-- instance OEIS 733 where
--   oeisIx n = sum $ zipWith (*) (rowT @109449 n) (1 : (oeis @41))

instance OEIS 734 where
  oeisIx n = sum $ zipWith (*) (rowT @109449 n) (1 : (oeis @79))

instance OEIS 736 where
  oeisIx n = sum $ zipWith (*) (rowT @109449 n) (1 : (oeis @108))

instance OEIS 737 where
  oeisIx n = sum $ zipWith (*) (rowT @109449 n) [1..]

instance OEIS 738 where
  oeisIx n = sum $ zipWith (*) (rowT @109449 n) (oeis @45)

instance OEIS 744 where
  oeisIx n = sum $ zipWith (*) (rowT @109449 n) $ tail (oeis @45)

instance OEIS 745 where
  oeisIx n = sum $ zipWith (*) (rowT @109449 n) $ tail (oeis @290)

instance OEIS 746 where
  oeisIx n = sum $ zipWith (*) (rowT @109449 n) $ tail (oeis @217)

instance OEIS 747 where
  oeisIx n = sum $ zipWith (*) (rowT @109449 n) $ oeis @40

instance OEIS 749 where
  oeis = fix \r -> 0 : 0 : 0 : 1 : zipWith3 (\u v w -> 4 * u - 6 * v + 4 * w)
    (drop 3 r) (drop 2 r) (drop 1 r)

-- instance OEIS 751 where
--   oeisIx n = sum $ zipWith (*) (rowT @109449 n) $ oeis @41

instance OEIS 752 where
  oeisIx n = sum $ zipWith (*) (rowT @109449 n) $ oeis @79

instance OEIS 753 where
  oeisIx n = sum $ zipWith (*) (rowT @109449 n) $ oeis @108

instance OEIS 754 where
  oeisIx n = sum $ zipWith (*) (rowT @109449 n) [1, 3 ..]

instance OEIS 756 where
  oeisIx n = sum $ zipWith (*) (rowT @109449 n) (1 : 1 : [0, 0 ..])

instance OEIS 788 where
  oeis = scanl1 (+) $ oeis @120
  oeisIx 0 = 0
  oeisIx n = (oeisIx @788) n2 + (oeisIx @788) (n - n2 - 1) + (n - n2)
    where n2 = n `div` 2

-- instance OEIS 790 where
--   oeisIx n = head [c | c <- oeis @2808, powMod n c c == mod n c]

instance OEIS 792 where
  oeis = 1 : f [1] where
     f xs = y : f (y:xs) where y = maximum $ zipWith (*) [1..] xs

instance OEIS 793 where
  oeisIx = maximum . map (foldl lcm 1) . partitions where
     partitions n = ps 1 n where
        ps x 0 = [[]]
        ps x y = [t:ts | t <- [x..y], ts <- ps t (y - t)]

-- instance OEIS 796 where
--   oeisIx n = (oeis @796) (n + 1) !! (n + 1)
--  oeisIx len = map digitToInt $ show $ machin' `div` (10 ^ 10) where
--      machin' = 4 * (4 * arccot 5 unity - arccot 239 unity)
--      unity = 10 ^ (len + 10)
--      arccot x unity = arccot' x unity 0 (unity `div` x) 1 1 where
--        arccot' x unity summa xpow n sign
--         | term == 0 = summa
--         | otherwise = arccot'
--           x unity (summa + sign * term) (xpow `div` x ^ 2) (n + 2) (- sign)
--         where term = xpow `div` n

instance OEIS 803 where
  oeis = fix \r -> 0 : 0 : 8 : zipWith (+)
                 (tail $ zipWith (+) (tail r) r)
                 (map (subtract 4) r)

-- instance OEIS 891 where
--   oeisIx n = (oeisIx @1263) (2 * n - 1) n

-- instance OEIS 894 where
--   oeisIx n = (oeisIx @132813) (2 * n) n

instance OEIS 898 where
  oeis = fix \r -> 1 : 2 : do map (* 2) $ zipWith (+) (tail r) (zipWith (*) [1..] r)

instance OEIS 902 where
  oeis = fix \r -> 1 : 1 : 3 : map (* 2) (zipWith (+)
     (drop 2 r) (zipWith (*) [2..] $ tail r))

instance OEIS 904 where
  oeis = fix \r -> 0 : 3 : 13 : zipWith (+) r
     (zipWith (+) (zipWith (*) [6..] $ drop 1 r)
                  (zipWith (*) [5..] $ drop 2 r))

-- instance OEIS 914 where
--   oeis = scanl1 (+) $ oeis @6002

instance OEIS 918 where
  oeisIx = (subtract 2) . (2 ^)
  oeis = iterate ((subtract 2) . (* 2) . (+ 2)) (- 1)

instance OEIS 925 where
  oeisIx n = sum $ map (oeisIx @10052 . (n -)) $ takeWhile (<= n) $ oeis @290

instance OEIS 930 where
  oeis = fix \r -> 1 : 1 : 1 : zipWith (+) r (drop 2 r)

instance OEIS 931 where
  oeis = fix \r -> 1 : 0 : 0 : zipWith (+) r (tail r)

instance OEIS 934 where
  oeisIx = floor . (/ 2) . (+ 7) . sqrt . (+ 1) . (* 48) . fi


instance OEIS 957 where
  oeis = fix \r -> 0 : 1 : (map (`div` 2) $ tail $ zipWith (-) (oeis @108) r)

instance OEIS 959 where
  oeis = 1 : sieve 2 [1,3..] where
     sieve k xs = z : sieve (k + 1) (lucky xs) where
        z = genericIndex xs (k - 1 )
        lucky ws = us ++ lucky vs where
              (us, _:vs) = splitAt (fi z - 1) ws

instance OEIS 960 where
  oeis = sieve 1 [1..] where
     sieve k (x:xs) = x : sieve (k+1) (flavius xs) where
        flavius xs = us ++ flavius vs where (u:us,vs) = splitAt (k+1) xs

instance OEIS 961 where
  oeis = 1 : g (S.singleton 2) (tail primes)
    where
      g s (p:ps) = m : g (S.insert (m * (oeisIx @20639 . pred) m) $ S.insert p s') ps
        where
          (m, s') = S.deleteFindMin s

-- instance OEIS 967 where
--   oeisIx n = round $ sum $
--               zipWith ((/) `on` fi) ((rowT @258993) n) [1, 3 ..]

-- instance OEIS 969 where
--   (oeisIx @969) = flip div 3 . (oeisIx @14105) . (+ 1)

-- instance OEIS 970 where
--   oeisIx n = (oeisIx @258708) n (n - 5)

-- instance OEIS 971 where
--   oeisIx n = (oeisIx @258708) n (n - 6)

-- instance OEIS 972 where
--   oeisIx n = (oeisIx @258708) n (n - 7)

-- instance OEIS 973 where
--   oeisIx n = (oeisIx @258708) n (n - 8)

instance OEIS 975 where
  oeis = fix \r -> 0 : 1 : map (+ 1) (zipWith (+) (tail r) (map (* 2) r))

-- instance OEIS 977 where
--   oeis = filter ((> 2) . oeisIx @1221) [1..]

-- instance OEIS 978 where
--   oeisIx n = (oeis @978) !! (n - 1)
--  oeis = filter ((== 1) . (oeisIx @10051) . (oeisIx @1045)) (oeis @65091)

-- instance OEIS 979 where
--   oeisIx n = (oeis @979) !! (n - 1)
--  oeis = filter ((== 1) . (oeisIx @10051)) (oeis @7583)

instance OEIS 980 where
  oeisIx n = genericLength $ filter ((== 0) . sum) $ subsequences [-n..n]

instance OEIS 982 where
  oeisIx = (`div` 2) . (+ 1) . (^ 2)

instance OEIS 984 where
  oeisIx (fi->n) = rowCol @7318 (2*n) n

-- instance OEIS 989 where
--   (oeisIx @989) = (oeisIx @7949) . (oeisIx @984)

-- instance OEIS 990 where
--   (oeisIx @990) = p $ tail (oeis @8619) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

instance OEIS 992 where
  oeis = 1 : f 1 0 [1] where
     f x y zs = z : f (x + y) (1 - y) (z:zs) where
       z = sum $ take x $ zipWith (*) zs $ reverse zs

-- instance OEIS 994 where
--   oeisIx n = (oeis @994) !! n
--   oeis = 1 : 0 : us where
--      us = 1 : 1 : f 2 where
--        f x = (1 + sum (zipWith (*) (map ((oeisIx @7318)' x) [2..x]) us)) : f (x + 1)

-- instance OEIS 995 where
--   oeisIx n = (oeis @995) !! n
--   oeis = 0 : 1 : vs where
--      vs = 0 : 1 : g 2 where
--        g x = (x + sum (zipWith (*) (map ((oeisIx @7318)' x) [2..x]) vs)) : g (x + 1)

-- instance OEIS 1003 where
--   (oeisIx @1003) = last . (rowT @144944)

-- instance OEIS 1006 where
--   oeisIx n = (oeis @1006) !! n
--  oeis = zipWith (+) (oeis @5043) $ tail (oeis @5043)

instance OEIS 1008 where
  oeisIx = numerator . sum . map (1 %) . enumFromTo 1 . succ
  oeis   = map numerator $ scanl1 (+) $ map (1 %) [1..]

-- instance OEIS 1013 where
--   import Data.Set (empty, fromList, deleteFindMin, union)
--   import qualified Data.Set as Set (null)
--   oeisIx n = (oeis @1013) !! (n - 1)
--  oeis = 1 : h 0 empty [1] (drop 2 (oeis @142)) where
--      h z s mcs xs'@ (x:xs)
--       | Set.null s || x < m = h z (union s (fromList $ map (* x) mcs)) mcs xs
--       | m == z = h m s' mcs xs'
--       | otherwise = m : h m (union s' (fromList (map (* m) $ init (m:mcs)))) (m:mcs) xs'
--       where (m, s') = deleteFindMin s

instance OEIS 1014 where
  oeis = map (^ 6) [0..]

instance OEIS 1018 where
  oeisIx = (8 ^)
  oeis   = iterate (* 8) 1

instance OEIS 1019 where
  oeisIx = (9 ^)
  oeis   = iterate (* 9) 1

instance OEIS 1021 where
  oeisIx = (12 ^)
  oeis   = iterate (* 12) 1

instance OEIS 1025 where
  oeisIx = (16 ^)
  oeis   = iterate (* 16) 1

instance OEIS 1030 where
  oeis = [2, 1, 1, 2] ++ f [2] [2, 1, 1, 2] where
     f us vs = ws ++ f vs (vs ++ ws) where
               ws = 1 : us ++ 1 : vs

-- instance OEIS 1031 where
--   oeisIx n = sum (map (oeisIx @10051) gs) + fromEnum (1 `elem` gs)
--      where gs = map (2 * n -) $ takeWhile (<= n) (oeis @8578)

-- instance OEIS 1037 where
--   oeisIx 0 = 1
--   oeisIx n = (sum $ map (\d -> ((oeisIx @79) d) * (oeisIx @8683) (n `div` d)) $
--                          (rowT @27750) n) `div` n

instance OEIS 1040 where
  oeis = fix \r -> 0 : 1 : zipWith (+) r (zipWith (*) [1..] $ tail r)

instance OEIS 1042 where
  oeis = 1 : 2 : zipWith (-) (tail xs) xs
    where xs = map (^ 2) $ oeis @1042

instance OEIS 1043 where
  oeis = zipTail (+) (oeis @40)

instance OEIS 1044 where
  oeis = fix \r -> 1 : zipWith (*) (tail (oeis @290)) r

instance OEIS 1045 where
  oeisIx = (`div` 3) . (+ 1) . oeisIx @79
  oeis   = fix \r -> 0 : 1 : zipWith (+) (map (2 *) r) (tail r)

instance OEIS 1047 where
  oeis = map fst $ iterate (\ (u, v) -> (3 * u + v, 2 * v)) (0, 1)

instance OEIS 1053 where
  oeis = fix \r -> 1 : 0 : zipWith (+) r (zipWith (*) [1..] $ tail r)

-- instance OEIS 1055 where
--   oeisIx = (map last (tabl @66032) !!) . (subtract 1)

instance OEIS 1056 where
  oeis = fix \r -> 1 : 3 : (map (+ 1 ) $ zipWith (*) r $ tail r)

instance OEIS 1057 where
  oeisIx n = (n' + m) * (-1) ^ (1 - m) where (n',m) = divMod n 2
  oeis     = 0 : concatMap (\x -> [x,-x]) [1..]

instance OEIS 1064 where
  oeis = fix \r -> 1 : 1 : 0 : zipWith (+) r (tail $ zipWith (*) r (tail r))

-- instance OEIS 1065 where
--   oeisIx n = oeisIx @203 n - n

-- instance OEIS 1066 where
--   import Data.Set (deleteFindMin, fromList, insert)
--   oeisIx n = (oeis @1066) !! (n - 1)
--  oeis = f (fromList [h, 2 * h]) $ tail (oeis @3038) where
--      h = head (oeis @3038)
--      f s (x:xs) = m : f (x `insert` (( 2 * x) `insert` s')) xs where
--        (m, s') = deleteFindMin s

instance OEIS 1075 where
  oeis = fix \r -> 1 : 2 : zipWith (-) (map (4 *) $ tail r) r

instance OEIS 1078 where
  oeis = fix \r -> 0 : 2 : zipWith (-) (map (10*) $ tail r) r

-- instance OEIS 1082 where
--   oeis = scanl (+) 0 $ tail (oeis @22998)

instance OEIS 1088 where
  oeis = scanl1 (*) $ oeis @10

instance OEIS 1093 where
  oeisIx = (+ 1) . (^ 3) . pred

-- instance OEIS 1097 where
--   oeis = filter ((== 1) . (oeisIx @164292)) [1..]

-- instance OEIS 1101 where
--  oeis = map succ $ findIndices p [1..] where
--      p n = m == 0 && (oeisIx @10051) n' == 1 where
--         (n', m) = divMod n ((oeisIx @7953) n)

-- instance OEIS 1102 where
--   oeis = filter (\x -> (oeisIx @10052) (x `div` (oeisIx @7953 x)) == 1) $ oeis @5349

-- instance OEIS 1103 where
--   oeisIx n = (oeis @1103) !! (n - 1)
--  oeis = filter f (oeis @52382) where
--      f x = m == 0 && (x' == 1 || (oeisIx @10051) x' == 1) where
--          (x',m) = divMod x $ (oeisIx @7954) x

-- instance OEIS 1105 where
--   (oeisIx @1105) = (oeisIx @5843) . (oeisIx @290)

instance OEIS 1106 where
  -- oeisIx n = genericLength [ (x,y) | x <- [-n+1..n - 1], y <- [-n+1..n-1], x + y <= n]
  oeisIx n = n* (7*n - 5) `div` 2

instance OEIS 1108 where
  oeis = fix \r -> 0 : 1 : map (+ 2) (zipWith (-) (map (* 6) (tail r)) r)

instance OEIS 1109 where
  oeis = fix \r -> 0 : 1 : zipWith (-) (map (* 6) $ tail r) r

instance OEIS 1110 where
  oeis = fix \r -> 0 : 1 : (map (+ 2) $ zipWith (-) (map (* 34) (tail r)) r)

instance OEIS 1113 where
  oeis = step $ sum $ take 100 $ map (1%) $ 1 : facts
    where
      step r | x <- div (numerator r) (denominator r) = x : step ((r - x%1)*10)

-- instance OEIS 1113 where
--   oeis = eStream (1, 0, 1)
--      [ (n, a * d, d) | (n, d, a) <- map (\k -> (1, k, 1)) [1..]] where
--      eStream z xs'@ (x:xs)
--        | lb /= approx z 2 = eStream (mult z x) xs
--        | otherwise = lb : eStream (mult (10, -10 * lb, 1) z) xs'
--        where lb = approx z 1
--              approx (a, b, c) n = div (a * n + b) c
--              mult (a, b, c) (d, e, f) = (a * d, a * e + b * f, c * f)

-- instance OEIS 1127 where
--   oeis = iterate (oeisIx @56964) 1

-- instance OEIS 1129 where
--   oeisIx n = (oeis @1129) !! n
--  oeis = 0 : 1 : zipWith (+) iccanobifs (tail iccanobifs)
--   where (succ->iccanobifs) = map (oeisIx @4086) (oeis @1129)

-- instance OEIS 1132 where
--   oeisIx n = (oeis @1132) !! (n - 1)
--  oeis = [x | x <- (oeis @47522), (oeisIx @10051) x == 1]

instance OEIS 1140 where
  oeis = fix \r -> 4 : map (fi . say . fi) r where
     say :: Integer -> Integer
     say = read . concatMap saygroup . group . show
           where saygroup s = (show $ length s) ++ [head s]

instance OEIS 1142 where
  oeisIx = product . rowT @7318

instance OEIS 1146 where
  oeisIx = (2 ^) . (2 ^)
  oeis = iterate (^ 2) 2

instance OEIS 1147 where
  oeisIx n = product [1, 3 .. 2 * n - 1]
  oeis     = fix \r -> 1 : zipWith (*) [1, 3 ..] r


instance OEIS 1156 where
  oeisIx = p (tail $ oeis @290) where
     p _          0 = 1
     p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

instance OEIS 1157 where
  oeisIx (succ->n) = s n 1 1 $ oeis @40 where
     s 1 1 y _          = y
     s m x y ps'@ (p:ps)
       | m `mod` p == 0 = s (m `div` p) (x * p^2) y ps'
       | x > 1          = s m 1 (y * (x * p^2 - 1) `div` (p^2 - 1)) ps
       | otherwise      = s m 1 y ps

-- instance OEIS 1158 where
--   oeisIx n = product $ zipWith (\p e -> (p^ (3*e + 3) - 1) `div` (p^3 - 1))
--                         ((rowT @27748) n) ((rowT @124010) n)

instance OEIS 1175 where
  oeisIx = q . succ
    where
      q 1 = 1
      q n = f 1 ps 0 where
        f 0 (1 : xs) pi = pi
        f _ (x : xs) pi = f x xs (pi + 1)
        ps = 1 : 1 : zipWith (\u v -> (u + v) `mod` n) (tail ps) ps

instance OEIS 1176 where
  oeisIx = q . succ
    where
      q 1 = 1
      q n = f 1 ps 0 where
        f 0 (1 : xs) z = z
        f _ (x : xs) z = f x xs (z + 0 ^ x)
        ps = 1 : 1 : zipWith (\u v -> (u + v) `mod` n) (tail ps) ps

instance OEIS 1177 where
  oeisIx (succ->n) = head [k | k <- [1..], oeisIx @45 k `mod` n == 0]

-- instance OEIS 1178 where
--   oeisIx = f 0 where
--      f j x = if x == y then j else f (j + 1) y  where y = oeisIx @1175 x

instance OEIS 1179 where
  oeisIx = f . succ
    where
      f 1 = 0
      f n = if p == n then ll (p `div` 24) 1 else f p
              where p = oeisIx @1175 (pred n)
                    ll x k = if x == 1 then k else ll (x `div` 5) (k + 1)

-- instance OEIS 1181 where
--   oeisIx 0 = 0
--   oeisIx n =
--      (sum $ map (\k -> product $ map ((oeisIx @7318) (n+1)) [k - 1..k+1]) [1..n])
--       `div` ((oeisIx @6002) n)

instance OEIS 1196 where
  oeisIx n = if n == 0 then 0 else 4 * oeisIx @1196 n' + 3 * b
              where (n',b) = divMod n 2

-- instance OEIS 1220 where
--   oeis = map (oeis @40 . (+ 1)) $ elemIndices 1 (oeis @196202)

instance OEIS 1221 where
  oeisIx = genericLength . snd . unzip . factorise . fi . succ

instance OEIS 1222 where
  oeisIx = fi . sum . snd . unzip . factorise . fi . succ

instance OEIS 1223 where
  oeis = zipWith (-) (tail $ oeis @40) $ oeis @40

-- instance OEIS 1227 where
--   (oeisIx @1227) = sum . (rowT @247795)

instance OEIS 1248 where
  oeis = map (^ 2) $ oeis @40

instance OEIS 1250 where
  oeisIx n = if n < 2 then 1 else 2 * oeisIx @111 n

-- instance OEIS 1255 where
--   oeisIx = (^ 2) . oeisIx @41

instance Table 1263 where
  tabl = zipWith dt (tabl @7318) (tail (tabl @7318)) where
     dt us vs = zipWith (-) (zipWith (*) us (tail vs)) (zipWith (*) (tail us ++ [0]) (init vs))

  rowT   = rowT_off   @1263 @1
  rowCol = rowCol_off @1263 @1 @1

instance OEIS 1263 where
  oeis = tablList @1263

instance OEIS 1274 where
  oeis = map (fi . (+ 1)) $ elemIndices 0 $ zipWith (-) (tail $ oeis @10) $ oeis @10

instance OEIS 1285 where
 oeis = map (+ 1) (oeis @10060)

instance OEIS 1286 where
  oeisIx ((+2)->n) = sum [1..n - 1] * product [1..n - 1]

instance OEIS 1299 where
  oeisIx = p [1,5,10,25] where
     p _          0 = 1
     p []         _ = 0
     p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

instance OEIS 1300 where
  oeisIx = p [1,5,10,25,50] where
     p _          0 = 1
     p []         _ = 0
     p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

instance OEIS 1316 where
  -- oeisIx = sum . (rowT @47999)
  oeis = 1 : zs where
     zs = 2 : (concat $ transpose [zs, map (* 2) zs])

-- instance OEIS 1317 where
--   (oeisIx @1317) = foldr (\u v-> 2*v + u) 0 . map toInteger . (rowT @47999)

instance OEIS 1318 where
  oeis = scanl1 (+) (oeis @26741)

instance OEIS 1333 where
  oeis = fix \r -> 1 : 1 : zipWith (+) r (map (* 2) $ tail r)


instance OEIS 1353 where
  oeis = fix \r -> 0 : 1 : zipWith (-) (map (4 *) $ tail r) r

instance OEIS 1358 where
  oeis = map (+1) $ filter ((== 2) . oeisIx @1222) [1..]

-- instance OEIS 1359 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (+ 2)) (oeis @40)

instance OEIS 1370 where
  oeisIx = (oeisIx @7953) . (oeisIx @79)

instance OEIS 1399 where
  oeisIx = p [1,2,3] where
     p _      0 = 1
     p []     _ = 0
     p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 1400 where
--   oeisIx n = (oeis @1400) !! n
--  oeis = scanl1 (+) (oeis @5044)

instance OEIS 1405 where
  oeisIx (fi->n) = rowCol @7318 n (n `div` 2)

-- instance OEIS 1414 where
--   oeisIx 1 = 0
--   oeisIx n = sum $ (rowT @27746) n

instance OEIS 1444 where
  oeisIx n = div (3 ^ n + 3 ^ (div n 2)) 2


-- instance OEIS 1461 where
--   oeisIx n = (oeis @1461) !! (n - 1)
--  oeis = scanl1 (+) (oeis @6206)

instance OEIS 1462 where
  oeis = 1 : 2 : 2 : g 3  where
     g x = (genericReplicate (oeisIx @1462 $ pred x) x) ++ g (x + 1)

instance OEIS 1463 where
  oeis = scanl1 (+) $ oeis @1462

-- instance OEIS 1468 where
--   oeisIx n = (oeis @1468) !! n
--  oeis = map length $ group (oeis @5206)

instance OEIS 1477 where
  oeisIx = id
  oeis   = [0..]

-- instance OEIS 1479 where
--   oeisIx n = (oeisIx @196) $ head $
--      filter ((== 1) . (oeisIx @10052)) $ map ((oeisIx @7645) n -) $ tail (oeis @33428)

-- instance OEIS 1480 where
--   oeisIx n = (oeisIx @196) $ (`div` 3) $ ((oeisIx @7645) n) - ((oeisIx @1479) n) ^ 2

-- instance OEIS 1481 where
--   oeis = [x | x <- [0..], oeisIx @161 x > 0]

instance OEIS 1494 where
  oeis = map (fi . (+ 1)) $ elemIndices 0 $ zipWith (-) (drop 2 (oeis @10)) (oeis @10)


instance Table 1497 where
  tabl = [1] : f [1] 1 where
    f xs z = ys : f ys (z + 2) where
        ys = zipWith (+) ([0] ++ xs) (zipWith (*) [z, z - 1 ..] (xs ++ [0]))

instance OEIS 1497 where
  oeis = tablList @1497

instance Table 1498 where
  tabl = map reverse $ tabl @1497

instance OEIS 1498 where
  oeis = tablList @1498

-- instance OEIS 1499 where
--   oeisIx n = (oeis @1499) !! n
--  oeis = 1 : 0 : 1 : zipWith (*) (drop 2 (oeis @2411))
--      (zipWith (+) (zipWith (*) [3, 5 ..] $ tail (oeis @1499))
--                   (zipWith (*) (tail (oeis @290)) (oeis @1499)))

instance OEIS 1511 where
  oeisIx (succ->n) = genericLength $ takeWhile ((== 0) . (mod n)) $ oeis @79
  -- oeisIx n | odd n = 1 | otherwise = 1 + (oeisIx @1511) (n `div` 2)

instance OEIS 1515 where
  oeisIx = sum . rowT @1497

-- instance OEIS 1519 where
--   oeisIx n = (oeis @1519) !! n
--  oeis = 1 : zipWith (-) (tail (oeis @1906)) (oeis @1906)
--  oeis = 1 : f (oeis @45) where f (_:x:xs) = x : f xs

instance OEIS 1521 where
  oeis = fix \r -> 1 : (map (oeisIx @196) $ zipWith (*) (map (* 2) r) (map (+ 1) r))

instance OEIS 1541 where
  oeis = fix \r -> 1 : 3 : zipWith (-) (map (* 6) $ tail r) r

instance OEIS 1542 where
  oeis = fix \r -> 0 : 2 : zipWith (-) (map (* 6) $ tail r) r

instance OEIS 1550 where
  oeisIx n = sum $ map (^ n) [1..3]


instance OEIS 1563 where
  oeis = zipWith (-) (tail $ oeis @142) $ oeis @142

-- instance OEIS 1583 where
--  oeis = filter
--      (\p -> mod ((oeisIx @45) $ div (p - 1) 5) p == 0) (oeis @30430)

instance OEIS 1595 where
  oeis = fix \r -> 1 : 1 : do map (+ 1) $ zipTail (+) r

-- instance OEIS 1597 where
--   import Data.Map (singleton, findMin, deleteMin, insert)
--   oeisIx n = (oeis @1597) !! (n-1)
--   ((oeis @1597), (oeis @25478), (oeis @25479)) =
--      unzip3 $ (1, 1, 2) : f 9 (3, 2) (singleton 4 (2, 2)) where
--      f zz (bz, ez) m
--       | xx < zz = (xx, bx, ex) :
--                   f zz (bz, ez+1) (insert (bx*xx) (bx, ex+1) $ deleteMin m)
--       | xx > zz = (zz, bz, 2) :
--                   f (zz+2*bz+1) (bz+1, 2) (insert (bz*zz) (bz, 3) m)
--       | otherwise = f (zz+2*bz+1) (bz+1, 2) m
--       where (xx, (bx, ex)) = findMin m

instance OEIS 1599 where
  oeis = [ fi n | (n :: Int) <- [1..], 1 == denominator do n * A.tau n % A.sigma 1 n ]


instance OEIS 1600 where
  oeis =
    [ fi $ numerator m
    | (n :: Int) <- [1..]
    , let m = n * A.tau n % A.sigma 1 n
    , 1 == denominator m ]


instance OEIS 1602 where
  oeisIx n = fi . (+ 1) . fromJust $ findIndex ((== 0) . (`mod` (oeisIx @40) n)) $ tail $ oeis @45

instance OEIS 1608 where
  oeis = fix \r -> 3 : 0 : 2 : zipTail (+) r

instance OEIS 1610 where
  oeis = fix \r -> 0 : 2 : do map (+ 1) $ zipTail (+) r

instance OEIS 1611 where
  oeisIx = (+ 1) . oeisIx @45
  oeis = fix \r -> 1 : 2 : do map (subtract 1) $ zipTail (+) r

instance OEIS 1612 where
  oeis = fix \r -> 3 : 2 : do map (subtract 1) $ zipTail (+) r

-- instance OEIS 1614 where
--   oeis = f 0 0 (oeis @57211) where
--      f c z (x:xs) = z' : f x z' xs where z' = z + 1 + 0 ^ abs (x - c)

-- instance OEIS 1615 where
--   oeis n = numerator (fi n * (product $
--               map ((+ 1) . recip . fi) $ (rowT @27748) n))

instance OEIS 1616 where
  oeisIx (succ->n) = sum $ map (oeisIx @10 . pred) $ zipWith gcd ds $ reverse ds
    where ds = (rowT @27750) n

instance OEIS 1629 where
  oeis = f [] $ tail $ oeis @45 where
     f us (v:vs) = (sum $ zipWith (*) us $ oeis @45) : f (v:us) vs

-- instance OEIS 1633 where
--  oeis = filter (odd . (oeisIx @55642)) [0..]

instance OEIS 1634 where
  oeis = fix \r -> 0 : 2 : 3 : 6 : zipWith (+) r (zipWith (+) (tail r) (drop 2 r))

-- instance OEIS 1637 where
--   oeis = filter (even . (oeisIx @55642)) [0..]

instance OEIS 1644 where
  oeis = fix \r -> 3 : 1 : 3 : zipWith3 (((+) .) . (+)) r (tail r) (drop 2 r)

-- instance OEIS 1650 where
--   (oeisIx @1650) n k = (tabf @1650) !! (n - 1) !! (k-1)
--  (rowT @1650) n = (tabf @1650) !! (n - 1)
--  (tabf @1650) = iterate (\xs@ (x:_) -> map (+ 2) (x:x:xs)) [1]
--  oeis = concat (tabf @1650)

instance OEIS 1651 where
  oeisIx = (`div` 2) . (subtract 1) . (* 3) . succ
  oeis   = filter ((/= 0) . (`mod` 3)) [1..]

instance OEIS 1652 where
  oeis = fix \r -> 0 : 3 : map (+ 2) (zipWith (-) (map (* 6) (tail r)) r)

instance OEIS 1653 where
  oeis = fix \r -> 1 : 5 : zipWith (-) (map (* 6) $ tail r) r

instance OEIS 1654 where
  oeis = zipWith (*) (tail (oeis @45)) (oeis @45)

-- instance OEIS 1682 where
--   oeis = [k | k <- [0..], let m = 3^k, (oeisIx @55642) m == (oeisIx @55642) (9*m)]

-- instance OEIS 1690 where
--   oeis = filter ((== 0) . (oeisIx @10056)) [0..]

-- instance OEIS 1692 where
--   oeisIx n = flip div n $ sum $
--               zipWith (*) (map (oeisIx @8683) divs) (map (oeisIx @351) $ reverse divs)
--               where divs = (rowT @27750) n

-- instance OEIS 1694 where
--   oeis = filter ((== 1) . (oeisIx @112526)) [1..]

instance OEIS 1696 where
  oeis = fix \r -> 0 : 1 : zipWith (-)
     (zipWith (+) f $ map (^ 2) f)
     (zipWith (*) r f)
     where f = tail $ oeis @1696

instance OEIS 1697 where
  oeis = 1 : 1 : f [1,1] where
     f xs@ (x:_) = y : f (y : xs) where y = x * sum xs

instance OEIS 1700 where
  oeisIx (fi->n) = rowCol @7318 (2*n+1) (n+1)

instance OEIS 1704 where
  oeis = map fi f
    where f = map read (zipWith (++) iss $ tail iss) :: [Integer]
                 where iss = map show [1..]

instance OEIS 1715 where
  oeisIx = (flip div 6) . oeisIx @142 . (+3)

instance OEIS 1720 where
  oeisIx  = (flip div 24) . oeisIx @142 . (+4)

instance OEIS 1725 where
  oeisIx  = (flip div 120) . oeisIx @142 . (+5)

instance OEIS 1730 where
  oeisIx  = (flip div 720) . oeisIx @142 . (+6)

instance OEIS 1748 where
  oeisIx = (* 3) . oeisIx @40

instance OEIS 1749 where
  oeisIx = (* 4) . oeisIx @40

-- instance OEIS 1751 where
--   oeis = 2 : filter (\n -> ((oeisIx @10051) $ div n $ gcd 2 n) == 1) [1..]


-- instance OEIS 1764 where
--  oeis = 1 : [a258708 (2 * n) n | n <- [1..]]

-- instance OEIS 1768 where
--   oeisIx n = n * (z - 1) - (2 ^ (z + 2) - 3 * z) `div` 6
--      where z = (oeisIx @85423) $ n + 1

-- instance OEIS 1783 where
--   oeisIx = product . (rowT @38566)

instance OEIS 1787 where
  oeisIx 0 = 0
  oeisIx n = n * 2 ^ (n - 1)
  oeis = zipWith (*) [0..] $ 0 : oeis @79

instance OEIS 1788 where
  oeisIx n = if n < 2 then n else n * (n + 1) * 2 ^ (n - 2)
  oeis = zipWith (*) (oeis @217) $ 1 : oeis @79

instance OEIS 1789 where
  -- oeisIx n = (oeisIx @7318) (fi n) 3 * 2 ^ (n - 3)
  oeis     = 1 : zipWith (+) (map (* 2) $ oeis @1789) (drop 2  $ oeis @1788)

-- instance OEIS 1792 where
--   oeis = scanl1 (+) (oeis @45623)

instance OEIS 1817 where
  oeisIx (succ->n) = genericLength [d | d <- [1,4..n], mod n d == 0]

instance OEIS 1822 where
  oeisIx (succ->n) = genericLength [d | d <- [2,5..n], mod n d == 0]

instance OEIS 1834 where
  oeis = fix \r -> 1 : 5 : zipWith (-) (map (* 4) $ tail r) r

instance OEIS 1835 where
  oeis = fix \r -> 1 : 1 : zipWith (-) (map (4 *) $ tail r) r

instance OEIS 1836 where
  oeis = f (oeis @10) 1 where
     f (u:v:ws) x = if u < v then x : f ws (x + 1) else f ws (x + 1)

instance OEIS 1838 where
  oeis = map (fi . (+ 1)) $ elemIndices 2 $ zipWith (-) (drop 2 $ oeis @10) $ oeis @10

instance OEIS 1840 where
  oeis = scanl (+) 0 $ oeis @8620

instance OEIS 1844 where
  oeisIx n = 2 * n * (n + 1) + 1
  oeis = zipWith (+) (oeis @290) $ tail (oeis @290)

instance OEIS 1845 where
  oeisIx n = (2 * n + 1) * (2 * n ^ 2 + 2 * n + 3) `div` 3


instance OEIS 1855 where
  oeis = fix \r -> 0 : zipWith (+) [1..] do zipTail (+) . concat $ transpose [r, r]

-- instance OEIS 1857 where
--   oeisIx n = (oeis @1857) !! (n - 1)
--  oeis = 2 : 3 : ulam 2 3 (oeis @1857)

-- instance OEIS 1859 where
--   oeisIx n = (oeisIx @217) n + (oeisIx @2620) (n + 1)

instance OEIS 1870 where
  oeis = uncurry c $ splitAt 1 $ tail (oeis @45) where
     c us vs'@ (v:vs) = (sum $ zipWith (*) us vs') : c (v:us) vs

instance OEIS 1906 where
  oeis = fix \r -> 0 : 1 : zipWith (-) (map (* 3) $ tail r) r

instance OEIS 1911 where
  oeis = fix \r -> 0 : 1 : map (+ 2) do zipTail (+) r

instance OEIS 1923 where
  oeis = scanl (+) 0 $ tail $ oeis @312

instance OEIS 1924 where
  oeis = drop 3 $ zipWith (-) (tail $ oeis @45) [0..]

-- instance OEIS 1935 where
--   (oeisIx @1935) = p (oeis @42968) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

instance OEIS 1945 where
  oeis = fix \r -> 0 : 1 : 1 : 1 : 5 : 1 : zipWith6
     (\u v w x y z -> - u + v + 3*w + x - y - z)
       (drop 5 r) (drop 4 r) (drop 3 r)
       (drop 2 r) (drop 1 r) (drop 0 r)

instance OEIS 1950 where
  oeisIx n = oeisIx @201 n + n + 1

instance OEIS 1951 where
  oeisIx = floor . (* sqrt 2) . fi

instance OEIS 1952 where
  oeisIx = floor . (* (sqrt 2 + 2)) . fi . succ

instance OEIS 1969 where
  oeis = [x | x <- [0..], even $ oeisIx @120 x]

-- instance OEIS 1970 where
--   oeisIx n = (oeis @1970) !! (n - 1)
--  oeis = 1 : f 1 [1] where
--      f x ys = y : f (x + 1) (y : ys) where
--               y = sum (zipWith (*) ys (oeis @61259)) `div` x

instance OEIS 1971 where
  oeisIx = floor . (+ 0.5) . (/ 8) . fi . (^ 2)

-- instance OEIS 1983 where
--   oeisIx n = (oeis @1983) !! (n - 1)
--  oeis = [x | x <- [0..], (oeisIx @25435) x > 0]

-- instance OEIS 2019 where
--   oeisIx n = (oeis @2019) !! n
--  oeis = 1 : 1 : zipWith (-)
--      (tail (oeis @2019)) (zipWith (*) (oeis @2019) (oeis @2378))

instance Table 2024 where
  tabl   = iterate (\xs@ (x:_) -> map (+ 1) (x : xs)) [1]
  rowT   = rowT_off   @2024 @1
  rowCol = rowCol_off @2024 @1 @1

instance OEIS 2024 where
  oeisIx = round . sqrt . (* 2) . fi . succ
  oeis = [1..] >>= \n -> genericReplicate n n

-- instance OEIS 2034 where
--   oeisIx 1 = 1
--   oeisIx n = fromJust ((oeisIx @92495) n `elemIndex` (oeis @142))

-- instance OEIS 2035 where
--  oeis = filter (all odd . (rowT @124010)) [1..]

instance OEIS 2048 where
  oeis = f [1..] [] where
     f (x:xs) ys = x : f (xs \\ scanl (+) x ys) (x : ys)

instance OEIS 2049 where
  oeis = g [1..] [] where
     g (x:xs) ys = (last zs) : g (xs \\ zs) (x : ys) where
       zs = scanl (+) x ys

instance OEIS 2061 where
  oeisIx n = n * (n - 1) + 1

instance OEIS 2062 where
  oeisIx n = oeisIx @45 n + n
  oeis = fix \r -> 0 : 2 : 3 : (map (subtract 1) $ zipWith (-) (map (* 2) $ drop 2 r) r)

instance OEIS 2064 where
  oeisIx n = n * 2 ^ n + 1
  oeis = 1 : 3 : (map (+ 1) $ zipWith (-) (tail xs) xs)
     where xs = map (* 4) $ oeis @2064

instance OEIS 2081 where
  oeis = filter ((`elem` [2,4,8,16]) . (`mod` 20)) [1..]

instance OEIS 2083 where
  oeis = 1 : f [1] where
     f xs = x : f (x:xs) where x = sum $ take (div (1 + length xs) 2) xs

instance OEIS 2088 where
  oeis = scanl (+) 0 $ oeis @10

-- instance OEIS 2095 where
--   (oeisIx @2095) = p (oeis @18252) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 2100 where
--   (oeisIx @2100) = p (oeis @6881) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m


instance OEIS 2104 where
  oeisIx = genericLength . filter (\xs -> head xs == minimum xs)
         . tail . choices . enumFromTo 1

instance OEIS 2109 where
  oeis = scanl1 (*) $ oeis @312

instance OEIS 2110 where
  oeisIx n = product . genericTake n $ oeis @40
  oeis = scanl (*) 1 $ oeis @40

-- instance OEIS 2113 where
--    oeis = filter ((== 1) . (oeisIx @136522)) [1..]

-- instance OEIS 2121 where
--   oeis = 1 : 0 : -1 : f 0 (-1) 3 where
--      f v w x = y : f w y (x + 1) where
--        y = sum (map ((oeisIx @2121) . (x -)) $ takeWhile (<= x) (oeis @65091)) - v

-- instance OEIS 2122 where
--   oeis = uncurry conv $ splitAt 1 $ oeis @2121 where
--      conv xs (z:zs) = sum (zipWith (*) xs $ reverse xs) : conv (z:xs) zs

-- instance OEIS 2123 where
--  oeis = 0 : 0 : f 3 where
--      f x = y : f (x + 1) where
--        y = (oeisIx @61397) x -
--            sum (map ((oeisIx @2123) . (x -)) $ takeWhile (< x) (oeis @65091))

-- instance OEIS 2124 where
--  oeis = 1 : f 1 [] (oeis @65091) where
--      f x qs ps'@ (p:ps)
--        | p <= x    = f x (p:qs) ps
--        | otherwise = sum (map ((oeisIx @2124) . (x -)) qs) : f (x + 1) qs ps'

-- instance OEIS 2125 where
--   oeis = uncurry conv $ splitAt 1 (oeis @2124) where
--      conv xs (z:zs) = sum (zipWith (*) xs $ reverse xs) : conv (z:xs) zs

instance OEIS 2131 where
  oeisIx (succ->n) = sum [d | d <- [1..n], mod n d == 0, odd $ div n d]

instance OEIS 2144 where
  oeis = map succ $ filter ((== 1) . oeisIx @10051) [0,4..]

-- instance OEIS 2145 where
--  oeis = filter ((== 1) . (oeisIx @10051)) [3, 7 ..]

instance OEIS 2173 where
  oeisIx n = (oeisIx @50450) n - (oeisIx @50453 n)

-- instance OEIS 2180 where
--   oeisIx = flip div 2 . oeisIx @2202

instance OEIS 2183 where
  oeis = nub $ 1 : map (oeisIx @5 . oeisIx @61799) [1..]

instance OEIS 2187 where
  oeis = tail g where
     g = 0 : 0 : [mex [xor (g !! (a + 1)) (g !! (n - a - 2)) |
                       a <- [-1 .. n - 2]] | n <- [1 ..]]
     xor 0 0 = 0
     xor x y = let ((q,r), (s,t)) = (divMod x 2, divMod y 2)
                in (if r == t then 0 else 1) + 2 * xor q s
     mex xs = head [x | x <- [0..], not (elem x xs)]

instance OEIS 2193 where
  oeis = w 2 0 where
    w x r = dig : w (100 * (x - (20 * r + dig) * dig)) (10 * r + dig)
      where dig = head (dropWhile (\d -> (20 * r + d) * d < x) [0..]) - 1


-- instance OEIS 2202 where
--   import Data.List.Ordered (insertSet)
--   oeisIx n = (oeis @2202) !! (n - 1)
--  oeis = f [1..] (tail (oeis @2110)) [] where
--      f (x:xs) ps'@ (p:ps) us
--        | x < p = f xs ps' $ insertSet ((oeisIx @10)' x) us
--        | otherwise = vs ++ f xs ps ws
--        where (vs, ws) = span (<= (oeisIx @10)' x) us

instance OEIS 2203 where
  oeis' (A r) = 2 : 2 : zipWith (+) (map (* 2) $ tail r) r

instance Table 2260 where
  tabl       = iterate (\row -> map (+ 1) (0 : row)) [1]
  rowT   n   = [1..n]
  rowCol _ k = k

instance OEIS 2260 where
  oeis = tablList @2260

instance Table 2262 where
  tabl = map (enumFromTo 0) [0..]

instance OEIS 2262 where
  oeis = tablList @2262

instance OEIS 2264 where
  oeis' (A r) = 0 : 0 : 0 : map (+ 1) r

instance OEIS 2266 where
  oeisIx = (`div` 5)
  oeis' (A r) = [0,0,0,0,0] ++ map (+ 1) r

instance OEIS 2275 where
  oeisIx = (`div` 9) . subtract 1 . (10 ^)
  oeis = iterate ((+ 1) . (* 10)) 0

instance OEIS 2283 where
  oeisIx = subtract 1 . (10 ^)

-- instance OEIS 2294 where
--   oeis = [oeisIx @258708 (3 * n) (2 * n) | n <- [1..]]

-- instance OEIS 2296 where
--   oeisIx n = (oeis @2296) !! n
--  oeis = [a258708 (4 * n) (3 * n) | n <- [1..]]


instance OEIS 2311 where
  -- oeis = filter f [1..] where
  --    f x = not $ null $ intersect txs $ map (tx -) $ txs where
  --        (txs,tx:_) = splitAt (fi x) $ oeis @292
  oeis =
    [ i
    | (i,tx,txs) <- ap (zip3 [0..]) inits $ oeis @292
    , not $ null $ intersect txs $ map (tx -) $ txs
    ]


-- instance OEIS 2312 where
--   oeis = filter (\x -> 2 * x > (oeisIx @6530) (x ^ 2 + 1)) [1..]

instance OEIS 2313 where
  oeis = filter ((`elem` [1,2]) . (`mod` 4)) $ oeis @40

instance OEIS 2315 where
  oeis' (A r) = 1 : 7 : zipWith (-) (map (* 6) (tail r)) r

instance OEIS 2321 where
  oeis = scanl1 (+) (oeis @8683)

-- instance OEIS 2322 where
--   oeisIx n = foldl lcm 1 $ map ((oeisIx @207193) . (oeisIx @95874)) $
--                             zipWith (^) ((rowT @27748) n) ((rowT @124010) n)

instance OEIS 2324 where
  oeisIx n = oeisIx @1817 n - oeisIx @1822 n

instance OEIS 2326 where
  oeisIx n = fi . (+ 1) $ fromJust $ findIndex ((== 0) . (`mod` (2 * n + 1))) $ tail $ oeis @225

-- instance OEIS 2327 where
--   oeisIx n = (oeis @2327) !! (n - 1)
--  oeis = filter ((== 1) . (oeisIx @10051)') (oeis @28387)

-- instance OEIS 2348 where
--   oeisIx n = product (zipWith d ps es) * 4 ^ e0 `div` 8 where
--      d p e = (p ^ 2 - 1) * p ^ e
--      e0 = if even n then head $ (rowT @124010) n else 0
--      es = map ((* 2) . subtract 1) $
--               if even n then tail $ (rowT @124010) n else (rowT @124010) n
--      ps = if even n then tail $ (rowT @27748) n else (rowT @27748) n

-- instance OEIS 2372 where
--   oeisIx n = sum $ map ((oeisIx @10051) . (2*n -)) $ takeWhile (< 2*n) (oeis @65091)

-- instance OEIS 2373 where
--   oeisIx n = head $ dropWhile ((== 0) . (oeisIx @10051) . (2*n -)) (oeis @65091)

-- instance OEIS 2375 where
--   oeisIx n = sum $ map ((oeisIx @10051) . (2 * n -)) $ takeWhile (<= n) (oeis @65091)

instance OEIS 2378 where
  oeisIx n = n * (n + 1)
  oeis = zipWith (*) [0..] [1..]

instance OEIS 2379 where
  oeisIx n = 3^n `div` 2^n

instance OEIS 2380 where
  oeisIx n = 3^n `mod` 2^n

-- instance OEIS 2385 where
--   oeisIx n = (oeis @2385) !! (n - 1)
--  oeis = filter ((== 1) . (oeisIx @136522)) (oeis @40)

instance OEIS 2387 where
  -- oeis = f 0 1 where
  --    f x k = if genericIndex hs k > fi x
  --            then k : f (x + 1) (k + 1) else f x (k + 1)
  --            where hs = scanl (+) 0 $ map recip [1..]
  oeis = (1:) . (2:) . tail
       . scanl (\n xs -> n + genericLength xs) 1
       . groupBy (on (==) floor)
       . scanl1 (+) $ map recip [1..]


instance OEIS 2411 where
  oeisIx n = n * oeisIx @217 n

-- instance OEIS 2426 where
--   oeisIx n = (oeisIx @27907) n n

instance OEIS 2450 where
  -- oeisIx = (`div` 3) . (oeisIx @24036)
  oeis = iterate ((+ 1) . (* 4)) 0

-- instance OEIS 2457 where
--   oeisIx n = (oeisIx @116666) (2 * n + 1) (n + 1)

-- instance OEIS 2471 where
--   oeisIx n = sum $ map ((oeisIx @10051) . (n -)) $ takeWhile (< n) (oeis @290)

instance OEIS 2472 where
  oeisIx (succ->n) = genericLength [x | x <- [1..n], gcd n x == 1, gcd n (x + 2) == 1]

-- instance OEIS 2473 where
--   import Data.Set (singleton, deleteFindMin, fromList, union)
--   oeisIx n = (oeis @2473) !! (n - 1)
--  oeis = f $ singleton 1 where
--      f s = x : f (s' `union` fromList (map (* x) [2,3,5,7]))
--            where (x, s') = deleteFindMin s

instance OEIS 2476 where
  oeis = filter ((== 1) . (`mod` 6)) $ oeis @40

-- instance OEIS 2479 where
--   oeisIx n = (oeis @2479) !! (n - 1)
--  oeis = 0 : filter f [1..] where
--      f x = all (even . snd) $ filter ((`elem` [5,7]) . (`mod` 8) . fst) $
--                               zip ((rowT @27748) x) ((rowT @124010) x)

instance OEIS 2487 where
  oeis = 0 : 1 : stern [1] where
     stern fuscs = fuscs' ++ stern fuscs' where
       fuscs' = interleave fuscs $ zipWith (+) fuscs $ (tail fuscs) ++ [1]
     interleave []     ys = ys
     interleave (x:xs) ys = x : interleave ys xs

instance OEIS 2491 where
  oeis = sieve 1 [1..] where
     sieve k (x:xs) = x : sieve (k+1) (mancala xs) where
        mancala xs = us ++ mancala vs where (us,v:vs) = splitAt k xs

-- instance OEIS 2496 where
--   oeisIx n = (oeis @2496) !! (n - 1)
--  oeis = filter ((== 1) . (oeisIx @10051)') (oeis @2522)


-- instance OEIS 2503 where
--   oeisIx n = (oeis @2503) !! (n - 1)
--  oeis = map (+ 1) $ elemIndices 0 (oeis @65350)

-- instance OEIS 2516 where
--   oeisIx n = (oeis @2516) !! n
--  oeis = 0 : concat (transpose
--   [a004767_list, f (oeis @2516), (oeis @17089), g $ drop 2 (oeis @2516)])
--   where f [z] = []; f (_:z:zs) = 2 * z : f zs

instance OEIS 2517 where
  oeis' (A r) = 0 : concat (transpose [[2, 5 ..], [3, 12 ..], map (* 3) $ tail r])

instance OEIS 2522 where
  oeisIx = (+ 1) . (^ 2)
  oeis   = scanl (+) 1 [1,3..]

instance OEIS 2541 where
  oeisIx (succ->n) = sum $ zipWith div [n - 1, n - 2 ..] [1 .. n - 1]

-- instance OEIS 2577 where
--   import Data.MemoCombinators (memo2, list, integral)
--   oeisIx n = (oeis @2577) !! n
--  oeis = f [1] where
--      f xs = (p' xs $ last xs) : f (1 : map (* 2) xs)
--      p' = memo2 (list integral) integral p
--      p _ 0 = 1; p [] _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p' ks' (m - k) + p' ks m


instance OEIS 2605 where
  oeis' (A r) = 0 : 1 : map (* 2) (zipTail (+) r)

-- instance OEIS 2616 where
--   oeisIx = flip div 2 . oeisIx @2322

-- instance OEIS 2618 where
--   oeisIx n = oeisIx @10 n * n

instance OEIS 2620 where
  oeisIx = (`div` 4) . (^ 2)

instance OEIS 2627 where
  oeis' (A r) = 0 : map (+ 1) (zipWith (*) [1..] r)

instance OEIS 2635 where
  oeisIx = p (tail $ oeis @290) 4 where
    p ks'@ (k:ks) c m = if m == 0 then 1 else
      if c == 0 || m < k then 0 else p ks' (c - 1) (m - k) + p ks c m

-- instance OEIS 2645 where
--   oeisIx n = (oeis @2645) !! (n - 1)
--  oeis = 2 : (map (oeisIx @40) $ filter ((> 1) . (oeisIx @256852)) [1..])

-- instance OEIS 2646 where
--   oeisIx n = (oeis @2646) !! (n - 1)
--  oeis = [hqp | x <- [1, 3 ..], y <- [1, 3 .. x - 1],
--                         let hqp = div (x ^ 4 + y ^ 4) 2, (oeisIx @10051)' hqp == 1]

-- instance OEIS 2654 where
--   oeisIx n = product $ zipWith f ((rowT @27748) m) ((rowT @124010) m) where
--      f p e | p `mod` 4 == 1 = e + 1
--            | otherwise      = (e + 1) `mod` 2
--      m = (oeisIx @265) n

-- instance OEIS 2658 where
--   oeis = 1 : 1 : f [1,1] where
--      f (x:xs) = y : f (y:x:xs') where y = x * sum xs + x * (x + 1) `div` 2

instance OEIS 2662 where
  oeis = map (sum . drop 3) (tabl @7318)

instance OEIS 2663 where
  oeis = map (sum . drop 4) (tabl @7318)

instance OEIS 2664 where
  oeis = map (sum . drop 5) (tabl @7318)

-- instance OEIS 2690 where
--   oeisIx n = (oeisIx @245334) (2 * n) n

-- instance OEIS 2694 where
--   oeisIx (fi->n) = (oeisIx @7318)' (2 * n) (n - 2)

-- instance OEIS 2731 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (oeisIx @982)) [1, 3 ..]

-- instance OEIS 2733 where
--   oeisIx = oeisIx @196 . (subtract 1) . (* 10) . (oeisIx @207337)

-- instance OEIS 2778 where
--  oeis = filter ((== 1) . (oeisIx @136522) . (^ 2)) [0..]

-- instance OEIS 2779 where
--  oeis = filter ((== 1) . (oeisIx @136522)) (oeis @290)

instance OEIS 2782 where
 oeis = tail $ f 1 1 (map fi $ tail (oeis @7376)) where
     f x y (d:ds) | mod y x == 0 = y : f y d ds
                  | otherwise    = f x (10*y + d) ds

instance OEIS 2796 where
  oeis = filter f [1..] where
     f x = all ((== 0) . mod x) ds where
       ds = map (fi.digitToInt) (if c == '0' then cs else cs')
       cs'@ (c:cs) = nub $ sort $ (show :: Int -> String) (fi x)


instance OEIS 2805 where
  oeisIx = denominator . sum . map (1 %) . enumFromTo 1 . succ
  oeis = map denominator $ scanl1 (+) $ map (1 %) [1..]

instance OEIS 2808 where
  oeis = map (+1) $ filter ((== 1) . (oeisIx @66247)) [2..]

instance OEIS 2814 where
  oeis = 1 : zipWith div (tail xs) xs
     where xs = map (oeisIx @45) (oeis @244)

-- instance OEIS 2815 where
--   oeisIx 0 = 0
--   oeisIx n = oeisIx @46992 n + n

-- instance OEIS 2819 where
--  oeis = scanl (+) 0 (oeis @8836)

instance OEIS 2821 where
  oeisIx = round . sqrt . fi . (^ 3)

instance OEIS 2822 where
  oeis = f $ oeis @40 where
     f (q:ps'@ (p:ps)) | p > q + 2 || r > 0 = f ps'
                      | otherwise = y : f ps where (y,r) = divMod (q + 1) 6

-- instance OEIS 2828 where
--   oeisIx 0 = 0
--   oeisIx n
--      | (oeisIx @10052) n == 1 = 1
--      | (oeisIx @25426) n > 0 = 2 | (oeisIx @25427) n > 0 = 3 | otherwise = 4

-- instance OEIS 2858 where
--   oeisIx n = (oeis @2858) !! (n - 1)
--  oeis = 1 : 2 : ulam 2 2 (oeis @2858)
--   ulam :: Int -> Integer -> [Integer] -> [Integer]
--   ulam n u us = u' : ulam (n + 1) u' us where
--      u' = f 0 (u+1) us'
--      f 2 z _                         = f 0 (z + 1) us'
--      f e z (v:vs) | z - v <= v       = if e == 1 then z else f 0 (z + 1) us'
--                   | z - v `elem` us' = f (e + 1) z vs
--                   | otherwise        = f e z vs
--      us' = take n us

-- instance OEIS 2859 where
--   oeisIx n = (oeis @2859) !! (n - 1)
--  oeis = 1 : 3 : ulam 2 3 (oeis @2859)

-- instance OEIS 2868 where
--   oeisIx n = if n == 0 then 1 else maximum $ map abs $ (rowT @8297) n

-- instance OEIS 2869 where
--   oeisIx 0 = 1
--   oeisIx n = maximum $ (rowT @19538) n

instance OEIS 2878 where
  oeis = zipWith (+) (tail $ oeis @1906) $ oeis @1906

-- instance OEIS 2889 where
--   oeis' (A r) = 1 : 10 : 56 : zipWith (+)
--      (zipWith (-) (map (* 2) $ drop 2 r) r)
--      (drop 2 $ zipWith (+) (tail $ oeis @2941) $ oeis @2941)

-- instance OEIS 2939 where
--   oeisIx = (* 2) . (oeisIx @384)
--   oeis   = scanl1 (+) (oeis @17089)

instance OEIS 2940 where
  oeis = 1 : 4 : 11 : zipWith (+)
     (zipWith (-) (map (* 2) $ drop 2 (oeis @2940)) (oeis @2940))
     (drop 5 (oeis @45))

instance OEIS 2941 where
  oeis = 1 : 7 : 29 : zipWith (+)
     (zipWith (-) (map (* 2) $ drop 2 (oeis @2941)) (oeis @2941))
     (drop 2 $ zipWith (+) (tail (oeis @2940)) (oeis @2940))

instance OEIS 2942 where
  oeisIx = (oeisIx @4086) . (oeisIx @290) . succ

instance OEIS 2943 where
  oeisIx n = 2 * n * (2 * n + 1)

-- instance OEIS 2944 where
--   oeisIx n = oeisIx @3418 n `div` n

-- instance OEIS 2961 where
--   oeis = map (fi . (+ 1)) $ elemIndices 0 (oeis @53222)

-- instance OEIS 2963 where
--   oeisIx = ch 0 . oeisIx @61493 where
--        ch s 0 = s
--        ch s x = ch (s + [0,1,2,2,2,2,3,4] !! d') x'
--                 where  (x',d) = divMod x 10; d' = fromInteger d

-- instance OEIS 2964 where
--   oeisIx = fi . (+ 1) . fromJust . (`elemIndex` (map (oeisIx @2963) [1..3888]))

instance OEIS 2965 where
  oeis = concat $ transpose [oeis @129, (oeis @1333)]

instance OEIS 2977 where
  oeis = f $ S.singleton 1 where
     f s = m : (f $ S.insert (3*m+1) $ S.insert (2*m+1) s') where
          (m, s') = S.deleteFindMin s

instance OEIS 2984 where
  oeis = iterate (\x -> x + oeisIx @196 x) 1

instance OEIS 2993 where
  oeisIx = (oeisIx @30) . (oeisIx @290)

instance OEIS 2994 where
  oeisIx = (oeisIx @30) . (oeisIx @578)

-- instance OEIS 2996 where
--   oeisIx n = sum $ zipWith (*) (map (oeisIx @8683) divs) (map (oeisIx @108) $ reverse divs)
--      where divs = (rowT @27750) n

-- instance OEIS 2997 where
--   oeis = [x | x <- (oeis @24556),
--       all (== 0) $ map ((mod (x - 1)) . (subtract 1)) $ (rowT @27748) x]

instance OEIS 3016 where
  oeisIx n = fi . sum $ map (fromEnum . (== n)) $
                        concat $ genericTake (fi n + 1) (tabl @7318)

-- instance OEIS 3038 where
--   import Data.Set (deleteFindMin, fromList, insert)
--   oeisIx n = (oeis @3038) !! (n - 1)
--   oeis = f (fromList (3 : [14, 52, 78, 133, 248]))
--      (drop 2 (oeis @5563)) (drop 4 (oeis @217)) where
--      f s (x:xs) (y:ys) = m : f (x `insert` (y `insert` s')) xs ys where
--        (m, s') = deleteFindMin s

instance OEIS 3044 where
  oeis = 1 : 2 : 3 : 4 : f [4,3..1] where
     f xs@ (x:_) = y : f (y : xs) where
       y = head [w | w <- [x + 1 ..],
           length [ () | v <- xs, (w - v) `elem` dropWhile (>= v) xs] == 2]

instance OEIS 3046 where
  oeis = scanl1 (*) (oeis @108)

-- instance OEIS 3052 where
  -- oeis = filter ((== 0) . (oeisIx @230093)) [1..]

instance Table 3056 where
  tabl   = map (rowT @3056) [0..]
  rowT n = genericReplicate (n + 1) n

instance OEIS 3056 where
  oeisIx = fi . floor . (/ 2) . (subtract 1) . sqrt . (+ 1) . (* 8) . fi
  oeis   = tablList @3056

instance OEIS 3059 where
  oeis = concat $ zipWith ($) (map replicate [1,3..]) [1..]

-- instance OEIS 3071 where
--   oeisIx n = 1 - 2 ^ last es +
--      sum (zipWith (*) (zipWith (+) es [0..]) (map (2 ^) es))
--      where es = reverse $ (rowT @133457) n

-- instance OEIS 3072 where
--   oeis = filter c3 [1..] where
--      c3 x = any (== 1) $ map (oeisIx @10057 . fromInteger) $
--                          takeWhile (> 0) $ map (x -) $ (oeis @3325)

instance OEIS 3101 where
  oeisIx n = sum $ zipWith (^) [0 ..] [n + 1, n .. 1]

instance OEIS 3105 where
  oeisIx n = p 1 n where
     p k m | m == 0 = 1 | m < k = 0 | otherwise = q k (m-k) + p (k+2) m
     q k m | m == 0 = 1 | m < k = 0 | otherwise = p (k+2) (m-k) + p (k+2) m

-- instance OEIS 3106 where
--   oeisIx = p (oeis @47221) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 3107 where
--   import Data.MemoCombinators (memo2, integral)
--   oeisIx n = (oeis @3107) !! n
--   oeis = map (p' 2) [0..] where
--      p' = memo2 integral integral p
--      p _ 0 = 1
--      p k m | m < fib   = 0
--            | otherwise = p' k (m - fib) + p' (k + 1) m where fib = (oeisIx @45) k

instance OEIS 3108 where
  oeisIx = p $ tail (oeis @578) where
     p _          0 = 1
     p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 3114 where
--   oeisIx = p (oeis @47209) where
--      p _      0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 3116 where
--   oeisIx n = (oeisIx @168396) (2 * n + 1) n

-- instance OEIS 3128 where
--   oeis = zipWith3 (\x y z -> (x - 3 * y + z) `div` 2)
--                  (oeis @110) (tail (oeis @110)) (drop 2 (oeis @110))

instance OEIS 3132 where
  oeisIx 0 = 0
  oeisIx x = d ^ 2 + (oeisIx @3132) x' where (x', d) = divMod x 10

-- instance OEIS 3136 where
--   import Data.Set (singleton, union, fromList, deleteFindMin)
--   oeisIx n = (oeis @3136) !! (n - 1)
--   oeis = f 0 $ singleton 0 where
--   f x s | m < x ^ 2 = m : f x s'
--   | otherwise = m : f x'
--   (union s' $ fromList $ map (\y -> x'^2+ (x'+y)*y) [0..x'])
--   where x' = x + 1
--   (m,s') = deleteFindMin s

-- instance OEIS 3137 where
--   oeis = tablList @3137
-- instance Table 3137 where
--   rowCol n k = (tabf @3137) !! (n - 1) !! k
--   rowT n = (tabf @3137) !! (n - 1)
--   tabf = map reverse $ tail (tabf @30341)
--   oeis = concat (tabf @3137)

instance OEIS 3148 where
  oeis = 1 : 1 : zipWith (+) (tail (oeis @3148))
                            (zipWith (*) (tail (oeis @2943)) (oeis @3148))

instance OEIS 3159 where
  oeis = f [1..] where f (x:xs) = x : f (delete  (2*x) xs)

-- instance OEIS 3160 where
  -- oeis = 1 : 1 : zipWith (-) [3..] (zipWith (+) xs $ tail xs)
  --    where xs = map (oeisIx @3160) (oeis @3160)

instance OEIS 3168 where
  oeisIx 0 = 1
  oeisIx n = sum (zipWith (*)
     (tail $ (tabl @7318) !! fi n)
     ((transpose $ take (3 * fi n + 1) (tabl @7318)) !! (2 * fi n + 1)))
     `div` fi n

-- instance OEIS 3169 where
--   oeisIx = flip (oeisIx @100326) 0

instance OEIS 3188 where
  oeisIx n = fi $ (fi n) `xor` (shiftR (fi n) 1 :: Integer)

instance OEIS 3215 where
  oeisIx n = 3 * n * (n + 1) + 1

-- instance OEIS 3226 where
--   oeis = filter (\x -> show x `isSuffixOf` show (x^2)) (oeis @8851)

instance OEIS 3229 where
  oeis = 1 : 1 : 3 : zipWith (+) (map (* 2) (oeis @3229)) (drop 2 (oeis @3229))

instance OEIS 3231 where
  oeisIx = floor . (/ 2) . (* (sqrt 5 + 5)) . (+ 1) . fi

instance OEIS 3233 where
  oeis = [x+1 | x <- [0..], (oeisIx @3231 . pred) (oeisIx @1950 x) == (oeisIx @1950 . pred) (oeisIx @3231 x)]

instance OEIS 3234 where
  oeis = [x+1 | x <- [1..], (oeisIx @3231 . pred) (oeisIx @1950 x) == (oeisIx @1950 . pred) (oeisIx @3231 x) - 1]

instance OEIS 3238 where
  oeis = 1 : f 1 where
     f x = (sum (map (oeisIx @3238 . pred) $ (rowT @27750) x)) : f (x + 1)

-- instance OEIS 3242 where
--   oeis = 1 : f [1] where
--      f xs = y : f (y : xs) where
--             y = sum $ zipWith (*) xs (oeis @48272)

instance OEIS 3249 where
  oeisIx = (+ 1) . (oeisIx @1950 . pred) . (oeisIx @3234)

-- instance OEIS 3256 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @242094)) . (oeisIx @1950)

-- instance OEIS 3261 where
--   oeisIx = (subtract 1) . (oeisIx @36289)

instance OEIS 3266 where
  oeis = (1 :) . scanl1 (*) $ tail (oeis @45)

instance OEIS 3269 where
  oeis = 0 : 1 : 1 : 1 : zipWith (+) (oeis @3269) (drop 3 (oeis @3269))

-- instance OEIS 3271 where
  -- oeis = map ((+ 1) . fromJust . (`elemIndex` (oeis @49865))) [0..]

instance OEIS 3275 where
  oeisIx = (oeisIx @10) . fi . (oeisIx @1274)

-- instance OEIS 3277 where
  -- oeis = map (+ 1) $ elemIndices 1 (oeis @9195)

instance OEIS 3309 where
  oeis = 1 : f [2..]
     where f (x:xs) = x : f (map snd [ (u, v) | (u, v) <- zip [1..] xs, mod u x > 0])

instance OEIS 3310 where
  oeis = f [3..] where
     f (x:xs) = x : f (g xs) where
       g zs = us ++ g vs where (us, _:vs) = splitAt (fi x - 1) zs

instance OEIS 3311 where
  oeis = f [3..] where
     f (x:xs) = x : f (g xs) where
       g zs = us ++ g vs where (_:us, vs) = splitAt (fi x) zs

instance OEIS 3312 where
  oeis = sieve [3..] where
     sieve (x:xs) = x : (sieve $ xOff xs)
     xOff (x:x':_:xs) = x : x': (xOff xs)

instance OEIS 3314 where
  oeis = 0 : f [0] [2..] where
     f vs (w:ws) = y : f (y:vs) ws where
       y = w + minimum (zipWith (+) vs $ reverse vs)

instance OEIS 3320 where
  oeisIx n = maximum $ zipWith (^) [0 .. n] [n, n - 1 ..]

-- instance OEIS 3325 where
--   oeis = filter c2 [1..] where
--      c2 x = any (== 1) $ map (oeisIx . fromInteger) $
--                          takeWhile (> 0) $ map (x -) $ tail (oeis @578)

-- instance OEIS 3401 where
  -- oeis = map (+ 1) $ elemIndices 1 $ map (oeisIx @209229) (oeis @10)

instance OEIS 3415 where
--   oeisIx 0 = 0
  oeisIx n = ad n (oeis @40) where
    ad n _ | n < 2     = 0
    ad n ps'@ (p:ps)
       | n < p * p     = 1
       | r > 0         = ad n ps
       | otherwise     = n' + p * ad n' ps' where
         (n',r) = divMod n p

instance OEIS 3418 where
  oeisIx = foldl lcm 1 . enumFromTo 2

instance OEIS 3422 where
  oeis = scanl (+) 0 (oeis @142)

instance OEIS 3434 where
  oeisIx n = fst $ until ((== 1) . snd)
                          (\ (i, x) -> (i + 1, (oeisIx @10 . pred) x)) (0, succ n)

-- instance OEIS 3459 where
--   oeis = filter isAbsPrime (oeis @40) where
--      isAbsPrime = all (== 1) . map (oeisIx . read) . permutations . show

instance OEIS 3462 where
  oeisIx = (`div` 2) . (subtract 1) . (3 ^)
  oeis = iterate ((+ 1) . (* 3)) 0

instance OEIS 3480 where
  oeis = 1 : 2 : 7 : (tail $ zipWith (-)
     (tail $ map (* 4) (oeis @3480)) (map (* 2) (oeis @3480)))

-- instance OEIS 3484 where
--   oeisIx n = 2 * e + cycle [1,0,0,2] `genericIndex` e  where e = (oeisIx @7814) n

instance OEIS 3485 where
  oeis = 1 : 2 : 4 : 8 : 9 : zipWith (+)
     (drop 4 (oeis @3485)) (zipWith (-) (tail (oeis @3485)) (oeis @3485))

instance OEIS 3500 where
  oeis = 2 : 4 : zipWith (-)
     (map (* 4) $ tail (oeis @3500)) (oeis @3500)

instance Table 3506 where
  tabl   = scanl1 (\xs ys -> zipWith (+) (zipWith (+) ([0] ++ xs) (xs ++ [0])) ys) (tabl @7318)
  rowT   = rowT_off   @3506 @1
  rowCol = rowCol_off @3506 @1 @1

instance OEIS 3506 where
  oeis = tablList @3506

-- instance OEIS 3508 where
  -- oeis = 1 : map
  --       (\x -> x + 1 + sum (takeWhile (< x) $ ((rowT @27748) x))) (oeis @3508)

-- instance OEIS 3557 where
--   oeisIx n = product $ zipWith (^)
--                         (oeisIx_row n) (map (subtract 1) $ (rowT @124010) n)

instance OEIS 3586 where
--   import Data.Set (Set, singleton, insert, deleteFindMin)
  oeis = smooth (S.singleton 1)
    where
      smooth s = x : smooth (S.insert (3*x) $ S.insert (2*x) s')
        where (x, s') = S.deleteFindMin s

instance OEIS 3591 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @3591) !! (n - 1)
  oeis = f $ S.singleton 1 where
     f s = y : f (S.insert (2 * y) $ S.insert (7 * y) s')
                 where (y, s') = S.deleteFindMin s

instance OEIS 3592 where
--   import Data.Set (singleton, deleteFindMin, insert)
  -- oeisIx n = (oeis @3592) !! (n - 1)
  oeis = f $ S.singleton 1 where
     f s = y : f (S.insert (2 * y) $ S.insert (5 * y) s')
                 where (y, s') = S.deleteFindMin s

instance OEIS 3593 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @3593) !! (n - 1)
  oeis = f (S.singleton 1) where
     f s = m : f (S.insert (3*m) $ S.insert (5*m) s') where
       (m,s') = S.deleteFindMin s

instance OEIS 3594 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @3594) !! (n - 1)
  oeis = f $ S.singleton 1 where
     f s = y : f (S.insert (3 * y) $ S.insert (7 * y) s')
                 where (y, s') = S.deleteFindMin s

instance OEIS 3595 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @3595) !! (n - 1)
  oeis = f $ S.singleton 1 where
     f s = y : f (S.insert (5 * y) $ S.insert (7 * y) s')
                 where (y, s') = S.deleteFindMin s

instance OEIS 3596 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @3596) !! (n - 1)
  oeis = f $ S.singleton (1,0,0) where
     f s = y : f (S.insert (2 * y, i + 1, j) $ S.insert (11 * y, i, j + 1) s')
           where ((y, i, j), s') = S.deleteFindMin s

instance OEIS 3597 where
--   import Data.Set (singleton, deleteFindMin, insert)
  oeis = f $ S.singleton (1,0,0) where
     f s = y : f (S.insert (3 * y, i + 1, j) $ S.insert (11 * y, i, j + 1) s')
           where ((y, i, j), s') = S.deleteFindMin s

instance OEIS 3598 where
--   import Data.Set (singleton, deleteFindMin, insert)
  oeis = f $ S.singleton (1,0,0) where
     f s = y : f (S.insert (5 * y, i + 1, j) $ S.insert (11 * y, i, j + 1) s')
           where ((y, i, j), s') = S.deleteFindMin s

instance OEIS 3599 where
--   import Data.Set (singleton, deleteFindMin, insert)
  oeis = f $ S.singleton (1,0,0) where
     f s = y : f (S.insert (7 * y, i + 1, j) $ S.insert (11 * y, i, j + 1) s')
           where ((y, i, j), s') = S.deleteFindMin s

-- instance OEIS 3601 where
  -- oeis = filter ((== 1) . (oeisIx @245656)) [1..]

instance OEIS 3602 where
  oeisIx = (`div` 2) . (+ 1) . (oeisIx @265)

-- instance OEIS 3607 where
  -- oeis = map fi $ elemIndices 0 (oeis @30190)

instance OEIS 3619 where
  oeisIx (succ->n) = n + floor (log (x + fi (floor $ log x)))
    where x = fi n + 1

instance OEIS 3622 where
  oeis = filter ((elem 1) . (rowT @35516)) [1..]

-- instance OEIS 3624 where
--   oeis = filter ((== 1) . (oeisIx @9194)) (oeis @2808)

instance OEIS 3627 where
  -- oeisIx n = (oeis @3627) !! (n - 1)
  oeis = filter ((== 2) . (`mod` 3)) (oeis @40)

-- instance OEIS 3628 where
  -- oeis = filter ((== 1) . (oeisIx @10051)) (oeis @47566)

-- instance OEIS 3631 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @47221)

-- instance OEIS 3666 where
--   oeis = 1 : 4 : ulam 2 4 (oeis @3666)

-- instance OEIS 3667 where
--   oeis = 1 : 5 : ulam 2 5 (oeis @3667)

-- instance OEIS 3668 where
--   oeis = 2 : 7 : ulam 2 7 (oeis @3668)

-- instance OEIS 3669 where
--   oeis = 3 : 4 : ulam 2 4 (oeis @3669)

-- instance OEIS 3670 where
--   oeis = 4 : 7 : ulam 2 7 (oeis @3670)

instance OEIS 3714 where
  oeisIx n = (oeis @3714) `genericIndex` n
  oeis = 0 : f (S.singleton 1) where
     f s = m : (f $ S.insert (4*m + 1) $ S.insert (2*m) s')
           where (m, s') = S.deleteFindMin s

instance OEIS 3726 where
  oeis = filter f [0..] where
     f x = x < 7 || (x `mod` 8) < 7 && f (x `div` 2)

instance OEIS 3754 where
  oeis = filter f [0..] where
     f x = x == 0 || x `mod` 4 > 0 && f (x `div` 2)

instance OEIS 3796 where
  oeis = filter f [0..] where
     f x  = x < 4 || x `mod` 8 /= 0 && f (x `div` 2)

instance OEIS 3817 where
--   oeisIx n = if n == 0 then 0 else 2 * (oeisIx @53644) n - 1
  oeis = map fi (scanl (.|.) 0 [1..] :: [Integer])

instance OEIS 3842 where
  oeis = tail $ concat fws where
     fws = [2] : [1] : (zipWith (++) fws $ tail fws)

instance OEIS 3849 where
  oeis = tail $ concat fws where
     fws = [1] : [0] : (zipWith (++) fws $ tail fws)

instance OEIS 3893 where
  oeis = 0 : 1 : zipWith (\u v -> (u + v) `mod` 10)
                         (tail (oeis @3893)) (oeis @3893)

-- instance OEIS 3958 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map (subtract 1) $ (rowT @27746) n

-- instance OEIS 3959 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map (+ 1) $ (rowT @27746) n

-- instance OEIS 3961 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map (oeisIx . (+ 1) . (oeisIx @49084)) $ (rowT @27746) n

-- instance OEIS 3963 where
--   oeisIx n = product $
--      zipWith (^) (map (oeisIx @49084) $ (rowT @27748) n) (oeisIx_row n)

instance Table 3983 where
  tabl = map (rowT @3983) [1..]
  rowT n = hs ++ drop (fi m) (reverse hs)
     where hs = [1..n' + m]
           (n',m) = divMod n 2
  rowCol = rowCol_off @3983 @1 @1

instance OEIS 3983 where
  oeis = tablList @3983


instance Table 3986 where
  rowCol (fi->n) (fi->k) = fi $ ((n - k) .|. k :: Int)
  rowT n = map (rowCol @3986 n) [0..n]
  tabl = map (rowT @3986) [0..]

instance OEIS 3986 where
  oeis = tablList @3986

instance Table 3988 where
  rowCol n k = fi $ (n + 1 - k) `div` k
  rowT n = zipWith div [n,n - 1..1] [1..n]
  tabl = map (rowT @3988) [1..]

instance OEIS 3988 where
  oeis = tablList @3988

-- instance OEIS 3990 where
--   oeisIx x y = (oeisIx @3990)_adiag x !! (y-1)
--   oeisIx_adiag n = (tabl @3990) !! (n - 1)
--   oeisIx_tabl = zipWith (zipWith lcm) (tabl @2260) $ map reverse (tabl @2260)

instance OEIS 3995 where
  oeis = filter (p (oeis @290)) [0..]
     where p (q:qs) m = m == 0 || q <= m && (p qs (m - q) || p qs m)

-- instance OEIS 4000 where
--   oeis = iterate (oeisIx @36839) 1

instance OEIS 4001 where
  oeis = 1 : 1 : h 3 1  {- memoization -}
    where h n x = x' : h (n + 1) x'
            where x' = (oeisIx @4001 . pred) x + (oeisIx @4001 . pred) (n - x)

instance OEIS 4006 where
  oeisIx 0 = 0
  oeisIx (pred->n) = (oeisIx @292) n + n + 1

instance OEIS 4019 where
  oeis = iterate (oeisIx @290 . (+ 1)) 0

instance OEIS 4050 where
--   import Data.Set (singleton, deleteFindMin, insert)
  oeis = f 1 $ S.singleton (2, 1, 1) where
     f x s = if y /= x then y : f y s'' else f x s''
             where s'' = S.insert (u * 2 + v, u * 2, v) $
                         S.insert (u + 3 * v, u, 3 * v) s'
                   ((y, u, v), s') = S.deleteFindMin s

-- instance OEIS 4051 where
--   oeis = filter ((== 1) . (oeisIx @10051)'') (oeis @4050)

instance OEIS 4080 where
  oeisIx n = fi . fromJust $ findIndex (fi n <=) $ scanl (+) 0 $ map recip [1..]

instance OEIS 4086 where
  oeisIx = fi . (read :: String -> Integer) . reverse . (show :: Integer -> String) . fi

instance OEIS 4087 where
  oeis = map (oeisIx @4086) (oeis @40)

instance OEIS 4090 where
  oeisIx = (oeisIx @7953) . (oeisIx @45)

instance OEIS 4091 where
  oeisIx = (oeisIx @4086) . (oeisIx @45)

instance OEIS 4093 where
  oeisIx = (oeisIx @4086) . (* 2)

instance OEIS 4094 where
  oeisIx = (oeisIx @4086) . (oeisIx @79)

instance OEIS 4111 where
  oeis = 0 : 1 : f 1 [1] where
     f x zs = y : f (x + 1) (y : zs) where
              y = (sum $ zipWith (*) zs $ map g [1..]) `div` x
     g k = sum $ zipWith (*) (map (((-1) ^) . (+ 1)) $ reverse divs)
                             (zipWith (*) divs $ map (oeisIx @4111) divs)
                             where divs = (rowT @27750) k

instance OEIS 4125 where
  oeisIx (succ->n) = sum $ map (mod n) [1..n]

-- instance OEIS 4128 where
--   oeis = scanl (+) 0 (oeis @51064)

-- instance OEIS 4144 where
--   oeisIx n = (oeis @4144) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @5089)

instance OEIS 4148 where
  oeis = 1 : f [1] where
    f xs'@ (x:xs) = y : f (y : xs') where
      y = x + sum (zipWith (*) xs $ reverse $ tail xs)

instance OEIS 4149 where
  oeis = 1 : 1 : 1 : f [1,1,1] where
     f xs = y : f (y : xs) where
       y = head xs + sum (zipWith (*) (init $ init $ tail xs) (reverse xs))

instance OEIS 4151 where
  oeisIx = until ((> 0) . (`mod` 10)) (`div` 10) . succ

instance OEIS 4154 where
  oeisIx = (oeisIx @4151 . pred) . (oeisIx @142)
  -- oeis = scanl (\u v -> (oeisIx @4151) $ u * v) 1 [1..]

instance OEIS 4159 where
  oeisIx = (oeisIx @7953) . (oeisIx @290)

-- instance OEIS 4169 where
--   oeis = map (+ 1) $ elemIndices 0 $ map (oeisIx @209229) (oeis @10)

instance OEIS 4170 where
  oeis = 0 : 1 : f (S.fromList us) vs where
     f s (x:xs) = m : f (S.insert x s') xs
       where (m,s') = S.deleteFindMin s
     (us,vs) = splitAt 120 $ drop 2 $ oeis @4091

instance OEIS 4171 where
  oeisIx = (* 2) . (oeisIx @302)
  oeis = iterate (* 4) 2

instance OEIS 4185 where
  oeisIx n = fi (read $ sort $ show (fi n) :: Integer)

instance OEIS 4186 where
  oeisIx n = fi (read $ sortOn Down $ show (fi n) :: Integer)

instance Table 4197 where
  rowT n = hs ++ drop (1 - fi n `mod` 2) (reverse hs) where hs = [0..n `div` 2]
  tabl = map (rowT @4197) [0..]

instance OEIS 4197 where
  oeis = tablList @4197

instance OEIS 4201 where
  oeis = f 1 [1..] where
     f k xs = us ++ f (k + 1) (drop (k) vs) where (us, vs) = splitAt k xs

instance OEIS 4202 where
  oeis = skipTake 1 [1..] where
     skipTake k xs = take k (drop k xs) ++ skipTake (k + 1) (drop (2*k) xs)

-- instance OEIS 4207 where
--   oeis = 1 : iterate (oeisIx @62028) 1

instance OEIS 4210 where
  oeis = magics 1 [0] [0] where
     magics n ms tests
        | tests `intersect` nMinus == [] && tests `intersect` nPlus == []
        = n : magics (n+1) (n:ms) (nMinus ++ nPlus ++ tests)
        | otherwise
        = magics (n+1) ms tests
        where nMinus = map (n -) ms
              nPlus  = map (n +) ms

-- instance OEIS 4214 where
--   oeis = filter ((== 0) . (oeisIx @25427)) [1..]

-- instance OEIS 4215 where
--   oeis = filter ((== 4) . (oeisIx @2828)) [1..]

instance OEIS 4216 where
  oeisIx (succ->n) = if n <= 9 then 0 else 1 + (oeisIx @4216) (n `div` 10)

instance OEIS 4233 where
  oeisIx = ceiling . log . fi . succ

instance OEIS 4275 where
  oeisIx n = 2 * n - 1 + signum (1 - n)
  oeis = 0 : 1 : [2, 4 ..]

instance OEIS 4277 where
  oeisIx (succ->n) = 2 * n - 1 + signum (1 - n)
  oeis = 1 : [2, 4 ..]

instance OEIS 4278 where
  oeisIx (succ->n) = if n <= 3 then n else 2 * (n - 2)
  oeis = [1, 2, 3] ++ [4, 6 ..]

-- instance OEIS 4290 where
--   oeisIx 0 = 0
--   oeisIx n = head [x | x <- tail (oeis @7088), mod x n == 0]

-- instance OEIS 4302 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @103371) (n + 1) 2

instance OEIS 4396 where
  oeis = 0 : 1 : 1 : map (+ 2) (oeis @4396)

-- instance OEIS 4426 where
--   oeisIx n = (oeisIx @7953 n) `div` (oeisIx @55642 n)

-- instance OEIS 4431 where
--   oeis = findIndices (> 1) (oeis @63725)

instance OEIS 4432 where
  oeis = filter (p 3 $ tail (oeis @290)) [1..] where
     p k (q:qs) m = k == 0 && m == 0 ||
                    q <= m && k >= 0 && (p (k - 1) qs (m - q) || p k qs m)

instance OEIS 4433 where
  oeis = filter (p 4 $ tail (oeis @290)) [1..] where
     p k (q:qs) m = k == 0 && m == 0 ||
                    q <= m && k >= 0 && (p (k - 1) qs (m - q) || p k qs m)

instance OEIS 4434 where
  oeis = filter (p 5 $ tail (oeis @290)) [1..] where
     p k (q:qs) m = k == 0 && m == 0 ||
                    q <= m && k >= 0 && (p (k - 1) qs (m - q) || p k qs m)

-- instance OEIS 4435 where
--   oeis = [x | x <- [1..], (oeisIx @25435) x == 0]

instance OEIS 4442 where
  oeisIx = fi . (xor 1 :: Integer -> Integer) . fi
--   oeis = concat $ transpose [oeis, (oeis @5843)]

instance OEIS 4458 where
  oeisIx n = fi (fi n `xor` 17 :: Integer)

instance OEIS 4488 where
  oeisIx 0 = 0
  oeisIx n = if d == 0 then 3 * (oeisIx @4488) n' else 3 * (oeisIx @4488) n' + 3 - d
              where (n', d) = divMod n 3

-- instance OEIS 4514 where
--   oeisIx = (oeisIx @63695) . (+ 1) . (* 2)

instance OEIS 4523 where
  oeis = 0 : 0 : 1 : map (+ 2) (oeis @4523)

instance OEIS 4524 where
  oeisIx n = n `div` 4 + (n + 1) `div` 4
  oeis = 0 : 0 : 0 : 1 : map (+ 2) (oeis @4524)

instance OEIS 4525 where
  oeis' (A xs) = 0 : 1 : 1 : zipWith3 (\x y z -> x - y + z + 1)
    xs (tail xs) (drop 2 xs)

instance OEIS 4526 where
  oeisIx = (`div` 2)
  oeis = concatMap (\x -> [x, x]) [0..]

instance OEIS 4539 where
  oeis = w 2 0 where
     w x r = bit : w (4 * (x - (4 * r + bit) * bit)) (2 * r + bit)
       where bit = head (dropWhile (\b -> (4 * r + b) * b < x) [0..]) - 1

-- instance OEIS 4613 where
--   oeis = filter (all (== 1) . map (oeisIx @79260) . (rowT @27748)) [1..]

-- instance OEIS 4614 where
--   oeis = filter (all (== 1) . map (oeisIx @79261) . (rowT @27748)) [1..]

-- instance OEIS 4615 where
--   oeis = filter (all (== 1) . (map (`mod` 5) . (rowT @27748))) [1..]

instance OEIS 4648 where
  oeis = zipWith mod (oeis @40) [1..]

instance OEIS 4652 where
  oeisIx = ceiling . (/ 4) . fi . (^ 2)
  oeis = 0 : 1 : zipWith (+) (oeis @4652) [1..]

-- instance OEIS 4676 where
--   oeisIx = (oeisIx @7088) . (oeisIx @40)

-- instance OEIS 4709 where
--   oeis = filter ((== 1) . (oeisIx @212793)) [1..]

instance OEIS 4718 where
  oeis' (A xs) = 0 : concat do transpose [ map (+1) xs, map negate $ tail xs ]

instance OEIS 4719 where
  oeisIx = fi . (read . filter (/= '0') . show :: Integer -> Integer) . fi . succ

instance OEIS 4730 where
  oeis = map (fi.denominator) ggs where
     ggs = 1 : 2 : zipWith (+) ggs (map (1 /) $ tail ggs) :: [Rational]

instance OEIS 4731 where
  oeis = (1 :) . tail $ map (fi . numerator) ggs where
     ggs = 0 : 1 : zipWith (+) ggs (map (1 /) $ tail ggs) :: [Rational]

instance Table 4736 where
  rowCol n k = n - k + 1
  rowT = rowT @4736
  tabl = map reverse (tabl @2260)

instance OEIS 4736 where
  oeis = tablList @4736

instance OEIS 4737 where
  oeis = concatMap f $ tail $ inits [1..]
     where f xs = xs ++ tail (reverse xs)

instance OEIS 4739 where
  oeis = concat $ map (\n -> [1..n] ++ [n,n - 1..1]) [1..]

instance OEIS 4741 where
  oeis = concat $ map (\n -> [1,3..2*n - 1] ++ [2*n,2*n - 2..2]) [1..]

instance OEIS 4742 where
  oeis = filter f [0..] where
     f x  = x < 4 || x `mod` 8 /= 5 && f (x `div` 2)

instance OEIS 4743 where
  oeis = filter f [0..] where
     f x  = x < 4 || x `mod` 8 /= 6 && f (x `div` 2)

instance OEIS 4744 where
  oeis = filter f [0..] where
     f x  = x < 4 || x `mod` 8 /= 3 && f (x `div` 2)

instance OEIS 4745 where
  oeis = filter f [0..] where
     f x  = x < 4 || x `mod` 8 /= 1 && f (x `div` 2)

instance OEIS 4746 where
  oeis = filter f [0..] where
     f x  = x < 4 || x `mod` 8 /= 2 && f (x `div` 2)

instance OEIS 4753 where
  oeis = filter f [0..] where
     f 0 = False; f x = x `mod` 4 == 0 || f (x `div` 2)

instance OEIS 4754 where
  oeis = 2 : concat (transpose [zs, map (+ 1) zs]) where zs = map (* 2) (oeis @4754)

instance OEIS 4755 where
  oeis = 3 : concat (transpose [zs, map (+ 1) zs]) where zs = map (* 2) (oeis @4755)

instance OEIS 4756 where
  oeis = 4 : concat (transpose [zs, map (+ 1) zs]) where zs = map (* 2) (oeis @4756)

instance OEIS 4757 where
  oeis = 5 : concat (transpose [zs, map (+ 1) zs]) where zs = map (* 2) (oeis @4757)

instance OEIS 4758 where
  oeis = 6 : concat (transpose [zs, map (+ 1) zs]) where zs = map (* 2) (oeis @4758)

instance OEIS 4759 where
  oeis = 7 : concat (transpose [zs, map (+ 1) zs]) where zs = map (* 2) (oeis @4759)

instance OEIS 4765 where
  oeis = filter f [0..] where
     f x | x <= 8    = x /= 7
         | otherwise = f (x `div` 2)

instance OEIS 4767 where
  oeisIx = (+ 3) . (* 4)
  oeis = [3, 7 ..]

instance OEIS 4770 where
  oeisIx = (subtract 3) . (* 8) . succ
  oeis = [5, 13 ..]

instance OEIS 4771 where
  oeisIx = (+ 7) . (* 8)
  oeis = [7, 15 ..]

instance OEIS 4776 where
  oeis = filter ((/= 5) . (`mod` 8)) [0..]

-- instance OEIS 4780 where
--   oeis = filter ((> 1) . (oeisIx @48728)) [1..]

instance OEIS 4781 where
  oeis = filter f [0..] where
     f x | x < 7     = False
         | otherwise = (x `mod` 8) == 7 || f (x `div` 2)

-- instance OEIS 4788 where
--   oeisIx = (oeisIx @1221) . (oeisIx @1142)

-- instance OEIS 4789 where
--   oeisIx = fi . fromJust . (`elemIndex` (oeis @4788))

instance OEIS 4831 where
  oeis = [x ^ 4 + y ^ 4 | x <- [0..], y <- [0..x]]

-- instance OEIS 4957 where
--   oeis = findIndices even (oeis @60142)

-- instance OEIS 4999 where
--   oeis = filter c2 [1..] where
--      c2 x = any (== 1) $ map (oeisIx @10057 . fi) $
--                          takeWhile (>= 0) $ map (x -) $ tail (oeis @578)

-- instance OEIS 5002 where
--   oeis = 1 : zipWith (+) (map (* 2) (oeis @5002))
--                                  (drop 2 (oeis @110))

instance OEIS 5009 where
  oeisIx = (* 7) . (2 ^)

instance OEIS 5013 where
  oeis = alt (oeis @45) (oeis @32) where
     alt (f:_:fs) (_:l:ls) = f : l : alt fs ls

instance OEIS 5041 where
  oeis = 1 : f 1 1 (tail ts) where
     f y i gs'@ ((j,a):gs) | i < j  = y : f y (i+1) gs'
                          | i == j = a : f a (i+1) gs
     ts = [ (6*k + 3*k* (k - 1) `div` 2 + r* (k+2), 3*k+r+1) |
           k <- [0..], r <- [0,1,2]]

instance OEIS 5043 where
  oeis = 1 : 0 : zipWith div
     (zipWith (*) [1..] (zipWith (+)
         (map (* 2) $ tail (oeis @5043)) (map (* 3) (oeis @5043)))) [3..]

instance OEIS 5044 where
  oeisIx = p [2,3,4] . (subtract 3) where
    p _ 0 = 1
    p [] _ = 0
    p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

instance OEIS 5055 where
  oeisIx = (* 7) . (5 ^)
  oeis = iterate (* 5) 7

instance OEIS 5087 where
  oeisIx (succ->n) = (oeisIx @1221 . pred) n + n `mod` 2 - 1

-- instance OEIS 5089 where
--   oeisIx = sum . map (oeisIx @79260) . (rowT @27748)

-- instance OEIS 5091 where
--   oeisIx = sum . map (oeisIx @79261) . (rowT @27748)

-- instance OEIS 5094 where
--   oeisIx n = (oeisIx @5089) n - (oeisIx @5091) n

-- instance OEIS 5097 where
--   oeisIx = (`div` 2) . (oeisIx @65091)

-- instance OEIS 5098 where
--   oeisIx = (`div` 4) . (subtract 1) . (oeisIx @2144)
--
-- instance OEIS 5100 where
--   oeis = filter (\x -> (oeisIx @1065) x < x) [1..]
--
-- instance OEIS 5101 where
--   oeis = filter (\x -> (oeisIx @1065) x > x) [1..]

-- instance OEIS 5117 where
--   oeis = filter ((== 1) . (oeisIx @8966)) [1..]

instance OEIS 5132 where
  oeis = 0 : recaman (S.singleton 0) 1 0 where
     -- recaman :: Set Integer -> Integer -> Integer -> [Integer]
     recaman s n x = if x > n && (x - n) `S.notMember` s
                        then (x - n) : recaman (S.insert (x-n) s) (n+1) (x-n)
                        else (x + n) : recaman (S.insert (x+n) s) (n+1) (x+n)

-- instance OEIS 5145 where
--   oeis = tablList @5145
-- instance Table 5145 where
--   rowCol = rowCol_off @5145 @1 @1
--   rowT   = rowT_off   @5145 @1
--   tabl = zipWith ($) (map replicate [1..]) (oeis @40)

instance OEIS 5150 where
  oeis = map fi look_and_say

say :: Integer -> Integer
say = read . concatMap saygroup . group . show
  where saygroup s = (show $ length s) ++ [head s]
look_and_say :: [Integer]
look_and_say = 1 : map say look_and_say


instance OEIS 5151 where
  oeis = map fi (1 : f [1] :: [Integer]) where
     f xs = (read $ concatMap show ys) : f ys where
            ys = concat $ transpose [map length zss, map head zss]
            zss = group $ sort xs

-- instance OEIS 5153 where
--   oeis = filter (\x -> all (p $ (rowT @27750) x) [1..x]) [1..]
--      where p _  0 = True
--            p [] _ = False
--            p ds'@ (d:ds) m = d <= m && (p ds (m - d) || p ds m)

instance OEIS 5165 where
  oeis = 0 : zipWith (-) (tail (oeis @142)) (oeis @5165)

-- instance OEIS 5169 where
--   oeisIx 0 = 1
--   oeisIx n = (oeisIx @168396) n 1

instance OEIS 5171 where
  oeisIx = (1 -) . (oeisIx @10051)

instance OEIS 5179 where
  oeisIx (succ->n) = fi . succ $ fromJust $ elemIndex n $ map (oeisIx @5) [0..]

-- instance OEIS 5185 where
--   oeis = 1 : 1 : zipWith (+)
--      (map (oeisIx @5185) $ zipWith (-) [3..] (oeis @5185))
--      (map (oeisIx @5185) $ zipWith (-) [3..] $ tail (oeis @5185))

instance OEIS 5187 where
  oeis = 0 : zipWith (+) [1..] (map (oeisIx @5187 . (`div` 2)) [1..])

instance OEIS 5206 where
  oeis = 0 : zipWith (-) [1..] (map (oeisIx @5206) (oeis @5206))

instance OEIS 5210 where
  oeis = 1 : 1 : (zipWith ((abs .) . (-))
      [3..] $ zipWith (+) (tail (oeis @5210)) (map (2 *) (oeis @5210)))

-- instance OEIS 5211 where
--   (oeis, (oeis @242014)) = unzip $ (1, 1) : f 1 1 where
--      f i x | y > x     = (y, i) : f (i + 1) y
--            | otherwise = f (i + 1) x
--            where y = (oeisIx @5210) i

-- instance OEIS 5214 where
--   import Data.List.Ordered (union)
--   oeisIx n = (oeis @5214) !! (n - 1)
--   oeis = tail $ union (oeis @290) (oeis @217)

instance OEIS 5228 where
  oeis = 1 : figure 1 [2..] where
     figure n (x:xs) = n' : figure n' (delete n' xs) where n' = n + x

-- instance OEIS 5229 where
--   oeis = 1 : 1 : zipWith ((+) `on` (oeisIx @5229))
--                          (oeis @5229) (zipWith (-) [3..] (oeis @5229))

-- instance OEIS 5235 where
--   oeisIx n = head [m | m <- [3, 5 ..], (oeisIx @10051)'' (oeisIx n + m) == 1]

-- instance OEIS 5236 where
--   oeis = filter (\x -> all (<= x) $ map (oeisIx @229109) [1..x-1]) [2..]

instance OEIS 5238 where
  oeis = map (fi . (+ 1)) $ elemIndices 0 $ zipWith (+) ds $ tail ds where
     ds = map abs $ zipWith (-) (tail (oeis @5)) (oeis @5)

instance OEIS 5242 where
  oeis = f [1..] 0 0 where
     f (x:xs) y z = x : f (xs \\ [x + y, x + y + z]) x y

instance OEIS 5243 where
  oeis = 1 : h [1] (S.singleton 2) where
     h xs s = m : h (m:xs) (S.union s' $ S.fromList $ map (+ m) $ scanl1 (+) xs)
       where (m, s') = S.deleteFindMin s

instance OEIS 5244 where
  oeis = f [2] (S.singleton 2) where
     f xs s = y :
       f (y : xs) (s' `S.union` S.fromList (map ((subtract 1) . (* y)) xs))
       where (y,s') = S.deleteFindMin s

-- instance OEIS 5245 where
--   oeis = 1 : f 2 [1] where
--      f x ys = y : f (x + 1) (y : ys) where
--        y = minimum $
--            (zipWith (+) (take (x `div` 2) ys) (reverse ys)) ++
--            (zipWith (+) (map (oeisIx @5245) $ tail $ (rowT @161906) x)
--                         (map (oeisIx @5245) $ reverse $ init $ (rowT @161908) x))

instance OEIS 5246 where
  oeis = 1 : 1 : 1 : map (+ 1) (zipWith div
     (zipWith (*) (drop 2 (oeis @5246)) (tail (oeis @5246))) (oeis @5246))

instance OEIS 5247 where
  oeis = f (oeis @32) (oeis @45) where
     f (x:_:xs) (_:y:ys) = x : y : f xs ys

-- instance OEIS 5248 where
--   oeis = zipWith (+) (tail (oeis @1519)) (oeis @1519)

instance OEIS 5250 where
  oeis = f 0 (oeis @1223)
     where f m (x:xs) = if x <= m then f m xs else x : f x xs

-- instance OEIS 5251 where
--   oeis = 0 : 1 : 1 : 1 : zipWith (+) (oeis @5251)
--      (drop 2 $ zipWith (+) (oeis @5251) (tail (oeis @5251)))

instance OEIS 5252 where
  oeisIx (fi->n) = sum $ map (\x -> rowCol @7318 (n - x) x) [0, 2 .. 2 * div n 4]

-- instance OEIS 5254 where
--   oeisIx = sum . (rowT @37254)

-- instance OEIS 5255 where
--   oeis = scanl (+) 0 $ tail (oeis @2083)

-- instance OEIS 5256 where
--   oeis = map (subtract 2) $ drop 3 (oeis @62178)

instance OEIS 5258 where
  oeisIx (fi->n) = sum [rowCol @7318 n k ^ 2 * rowCol @7318 (n + k) k | k <- [0..n]]

-- instance OEIS 5259 where
--   oeis = 1 : 5 : zipWith div (zipWith (-)
--      (tail $ zipWith (*) (oeis @6221) (oeis @5259))
--      (zipWith (*) (tail (oeis @578)) (oeis @5259))) (drop 2 (oeis @578))

-- instance OEIS 5276 where
--   oeis = filter p [1..] where
--      p z = p' z [0, z] where
--        p' x ts = if y `notElem` ts then p' y (y:ts) else y == z
--                  where y = (oeisIx @48050) x

-- instance OEIS 5277 where
--   oeis = filter even (oeis @7617)

-- instance OEIS 5279 where
--   oeis = filter ((> 0) . (oeisIx @174903)) [1..]

-- instance OEIS 5282 where
--   import Data.Set (Set, empty, insert, member)
--   oeisIx n = (oeis @5282) !! (n - 1)
--   oeis = sMianChowla [] 1 empty where
--      sMianChowla :: [Integer] -> Integer -> Set Integer -> [Integer]
--      sMianChowla sums z s | s' == empty = sMianChowla sums (z+1) s
--                           | otherwise   = z : sMianChowla (z:sums) (z+1) s
--         where s' = try (z:sums) s
--               try :: [Integer] -> Set Integer -> Set Integer
--               try []     s                      = s
--               try (x:sums) s | (z+x) `member` s = empty
--                              | otherwise        = try sums $ insert (z+x) s

-- instance OEIS 5314 where
--   oeis = 0 : 1 : 2 : zipWith (+) (oeis @5314)
--      (tail $ zipWith (-) (map (2 *) $ tail (oeis @5314)) (oeis @5314))

-- instance OEIS 5318 where
--   oeis = 0 : 1 : zipWith (-)
--      (map (* 2) $ tail (oeis @5318)) (map (oeisIx @5318) (oeis @83920))

-- instance OEIS 5341 where
--   oeisIx = genericLength . (rowT @34002)

-- instance OEIS 5349 where
--   oeis = filter ((== 0) . (oeisIx @70635)) [1..]

instance OEIS 5350 where
  oeis = 1 : 1 : 1 : h 4 1 where
     h x y = z : h (x + 1) z where z = (oeisIx @5350) y + (oeisIx @5350) (x - y)

instance OEIS 5351 where
  oeisIx 0 = 0
  oeisIx n = (oeisIx @5351) n' * 2 + m where
     (n', m) = if r < 0 then (q + 1, r + 2) else (q, r)
               where (q, r) = quotRem n (negate 2)

instance OEIS 5352 where
  oeisIx = (oeisIx @5351) . negate . succ

instance OEIS 5361 where
  oeisIx 0 = 1
  oeisIx n = product . (rowT @124010) . succ $ n

instance OEIS 5369 where
  oeisIx = (oeisIx @10052) . (+ 1) . (* 4)

-- instance OEIS 5374 where
--   oeis = 0 : 1 : zipWith (-)
--      [2..] (map (oeisIx . (oeisIx @5374)) $ tail (oeis @5374))

-- instance OEIS 5375 where
--   oeis =  0 : 1 : zipWith (-)
--      [2..] (map (oeisIx @5375) (map (oeisIx @5375) (map (oeisIx @5375) (tail (oeis @5375)))))

-- instance OEIS 5378 where
--   oeis = 1 : zipWith (-) [1..] (map (oeisIx @5379) (oeis @5378))
--   oeisIx n = (oeis @5379) !! n
--   oeis = 0 : zipWith (-) [1..] (map (oeisIx @5378) (oeis @5379))

-- instance OEIS 5382 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (subtract 1) . (* 2)) (oeis @40)

-- instance OEIS 5383 where
--   oeis = [p | p <- (oeis @65091), (oeisIx @10051) ((p + 1) `div` 2) == 1]

-- instance OEIS 5385 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (`div` 2)) (oeis @40)

-- instance OEIS 5408 where
--   oeisIx n = (+ 1) . (* 2)
--   oeis = [1, 3 ..]

-- instance OEIS 5409 where
--   oeis = 1 : scanl1 (+) (tail (oeis @1333))

-- instance OEIS 5412 where
--   oeis = 1 : f 2 [1] where
--      f v ws@ (w:_) = y : f (v + 2) (y : ws) where
--                     y = v * w + (sum $ zipWith (*) ws $ reverse ws)

-- instance OEIS 5413 where
--   oeis = 1 : zipWith (*) [1 ..]
--                              (zipWith (+) (tail (oeis @5412))
--                              (zipWith (*) [4, 6 ..] (oeis @5413)))

-- instance OEIS 5418 where
--   oeisIx n = sum $ (rowT @34851) (n - 1)

-- instance OEIS 5425 where
--   oeis = 1 : 2 : zipWith (+)
--      (map (* 2) (tail (oeis @5425))) (zipWith (*) [1..] (oeis @5425))

-- instance OEIS 5428 where
--   oeis = (iterate j (1, 1)) where
--      j (a, s) = (a', (s + a') `mod` 2) where
--        a' = (3 * a + (1 - s) * a `mod` 2) `div` 2

-- instance OEIS 5448 where
--   oeisIx n = 3 * n * (n - 1) `div` 2 + 1
--   oeis = 1 : zipWith (+) (oeis @5448) [3, 6 ..]

-- instance OEIS 5473 where
--   oeis = filter ((== 1) . (oeisIx @10051)') $ map (+ 4) (oeis @290)

-- instance OEIS 5528 where
--   oeis = filter (\x -> 2 * x <= (oeisIx @6530) (x ^ 2 + 1)) [1..]

-- instance OEIS 5563 where
--   oeisIx n = n * (n + 2)
--   oeis = zipWith (*) [0..] [2..]

-- instance OEIS 5574 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (+ 1) . (^ 2)) [0..]

-- instance OEIS 5590 where
--   oeisIx n = (oeis @5590) !! n
--   oeis = 0 : 1 : concat (tail $ transpose
--      [oeis, zipWith (-) (tail (oeis @5590)) (oeis @5590)])

-- instance OEIS 5592 where
--   oeis = map (subtract 1) $
--                      tail $ zipWith (+) (oeis @1519) $ tail (oeis @1519)

-- instance OEIS 5598 where
--   oeisIx n = 1 + sum (zipWith (*) [n, n - 1 .. 1] (oeis @10))

-- instance OEIS 5599 where
--   oeis = scanl (+) 0 $ f (oeis @106400)
--      where f (x:_:_:xs) = x : f xs

-- instance OEIS 5605 where
--   oeis = 0 : 1 : zipWith (+) (tail (oeis @5605))
--      (zipWith (*) (cycle [-1,1]) (map (^ 2) $ (oeis @5605)))

-- instance OEIS 5614 where
--   oeis = map (1 -) (oeis @3849)

-- instance OEIS 5658 where
--   import Data.Set (Set, fromList, insert, deleteFindMin)
--   oeisIx n = (oeis @5658) !! (n - 1)
--   oeis = klarner $ fromList [1,2] where
--      klarner :: Set Integer -> [Integer]
--      klarner s = m : (klarner $
--                       insert (2*m) $ insert (3*m+2) $ insert (6*m+3) s')
--         where (m,s') = deleteFindMin s

-- instance OEIS 5665 where
--   oeis = 0 : 1 : 5 : zipWith (-)
--                  (map (* 3) $ drop 2 (oeis @5665)) (map (* 2) (oeis @5665))

-- instance OEIS 5707 where
--   oeis = 1 : 1 : 1 : 1 : h 5 1 where
--      h x y = z : h (x + 1) z where z = (oeisIx @5707) y + (oeisIx @5707) (x - y)

-- instance OEIS 5713 where
--   oeis = 1 : 1 : concat (sibb [0] [1,1]) where
--      sibb xs ys = zs : sibb ys zs where zs = xs ++ ys

-- instance OEIS 5728 where
--   oeis = scanl (+) 1 (oeis @10)

instance OEIS 5732 where
  oeis = 1 : 8 : f (drop 5 (tabl @7318)) where
     f (us:pss@ (vs:_:ws:_)) = (us !! 5 + vs !! 5 + ws !! 6) : f pss

-- instance OEIS 5773 where
--   oeis = 1 : f (oeis @1006) [] where
--      f (x:xs) ys = y : f xs (y : ys) where
--        y = x + sum (zipWith (*) (oeis @1006) ys)

-- instance OEIS 5774 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @38622) n 1

-- instance OEIS 5775 where
--   oeisIx = flip (oeisIx @38622) 2 . (subtract 1)

-- instance OEIS 5803 where
--   oeisIx n = 2 ^ n - 2 * n
--   oeis = 1 : f 1 [0, 2 ..] where
--      f x (z:zs@ (z':_)) = y : f y zs  where y = (x + z) * 2 - z'

instance OEIS 5809 where
  oeisIx (fi->n) = rowCol @7318 (3*n) n

instance OEIS 5810 where
  oeisIx (fi->n) = rowCol @7318 (4*n) n

-- instance OEIS 5811 where
--   oeisIx 0 = 0
--   oeisIx n = genericLength $ group $ (rowT @30308) n
--   oeis = 0 : f [1] where
--      f (x:xs) = x : f (xs ++ [x + x `mod` 2, x + 1 - x `mod` 2])

-- instance OEIS 5831 where
--   oeis = 0:1:zipWith (*) (tail (oeis @5831)) (map succ (oeis @5831))

-- instance OEIS 5835 where
--   oeis = filter ((== 1) . (oeisIx @210455)) [1..]

-- instance OEIS 5836 where
--   oeis = filter ((== 1) . (oeisIx @39966)) [0..]

-- instance OEIS 5843 where
--   oeisIx = (* 2)
--   oeis = [0, 2 ..]

-- instance OEIS 5845 where
--   oeis = filter (\x -> (oeisIx x - 1) `mod` x == 0) (oeis @2808)

-- instance OEIS 5846 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @202018)

-- instance OEIS 5867 where
--   oeis = scanl (*) 1 (oeis @6093)

-- instance OEIS 5900 where
--   oeisIx n = sum $ zipWith (*) odds $ reverse odds
--               where odds = take n (oeis @5408)
--   oeis = scanl (+) 0 (oeis @1844)

instance OEIS 5912 where
  oeisIx n = (n * (n * (77 * n + 69) + 19) + 3) `div` 3

-- instance OEIS 5917 where
--   oeis = map sum $ f 1 [1, 3 ..] where
--      f x ws = us : f (x + 2) vs where (us, vs) = splitAt x ws

instance OEIS 5920 where
  oeisIx n = (n * (n * (3 * n + 7) + 6) + 2) `div` 2

-- instance OEIS 5940 where
--   oeisIx n = f (n - 1) 1 1 where
--      f 0 y _          = y
--      f x y i | m == 0 = f x' y (i + 1)
--              | m == 1 = f x' (y * (oeisIx @40) i) i
--              where (x',m) = divMod x 2

-- instance OEIS 5942 where
--   oeisIx n = (oeis @5942) !! n
--   oeis = 1 : 2 : 4 : 6 : zipWith (+) (drop 6 ts) (drop 5 ts) where
--      ts = concat $ transpose [oeis, (oeis @5942)]

-- instance OEIS 6003 where
--   oeisIx n = n * (n ^ 2 + 1) `div` 2
--   oeis = scanl (+) 0 (oeis @5448)

-- instance OEIS 6012 where
--   oeis = 1 : 2 : zipWith (-) (tail $ map (* 4) (oeis @6012))
--   (map (* 2) (oeis @6012))

instance OEIS 6013 where
  oeisIx (fi->n) = fi $ rowCol @7318 (3 * n + 1) n `div` (n + 1)
  -- oeisIx' n = (oeisIx @258708) (2 * n + 1) n

-- instance OEIS 6022 where
--   oeisIx 1 = 0
--   oeisIx n = (+ 1) $ sum $ takeWhile (> 1) $
--             iterate (\x -> x `div` (oeisIx @20639) x) (oeisIx n)

-- instance OEIS 6036 where
--   oeis = filter (all (== 0) . map (oeisIx @210455) . (rowT @27751)) (oeis @5835)

-- instance OEIS 6037 where
--   oeis = filter ((== 0) . (oeisIx @210455)) (oeis @5101)

-- instance OEIS 6038 where
--   oeis = filter f [1, 3 ..] where
--      f x = sum pdivs > x && all (<= 0) (map (\d -> (oeisIx @203) d - 2 * d) pdivs)
--            where pdivs = (rowT @27751) x

-- instance OEIS 6046 where
--   oeisIx = sum . concat . (`take` (tabl @47999))

-- instance OEIS 6047 where
--   oeisIx = sum . map signum . (rowT @83093)

-- instance OEIS 6049 where
--   oeisIx n = (oeis @6049) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 $
--      zipWith (-) (tail (oeis @1221)) (oeis @1221)

-- instance OEIS 6053 where
--   oeis = 0 : 0 : 1 : zipWith (+) (drop 2 (oeis @6053))
--      (zipWith (-) (map (2 *) $ tail (oeis @6053)) (oeis @6053))

-- instance OEIS 6054 where
--   oeisIx n = (oeis @6053) !! n
--   oeis = 0 : 0 : 1 : zipWith (+) (map (2 *) $ drop 2 (oeis @6054))
--      (zipWith (-) (tail (oeis @6054)) (oeis @6054))

-- instance OEIS 6068 where
--   oeisIx n = foldl xor 0 $
--                     map (div n) $ takeWhile (<= n) (oeis @79) :: Integer

-- instance OEIS 6086 where
--   oeis = filter ((== 1) . (oeisIx @103340)) [1..]

-- instance OEIS 6087 where
--   oeisIx n = (oeis @6087) !! (n - 1)
--   oeis = map numerator $ filter ((== 1) . denominator) $
--      map uhm [1..]  where uhm n = (n * (oeisIx @34444) n) % (oeisIx n)

-- instance OEIS 6093 where
--   oeisIx = (subtract 1) . (oeisIx @40)

-- instance OEIS 6094 where
--   oeis = zipWith (*) (oeis @40) (oeis @65091)

-- instance OEIS 6127 where
--   oeisIx n = (oeisIx @79) n + n
--   oeis = s [1] where
--      s xs = last xs : (s $ zipWith (+) [1..] (xs ++ reverse xs))

-- instance OEIS 6128 where
--   oeisIx = genericLength . concat . ps 1 where
--      ps _ 0 = [[]]
--      ps i j = [t:ts | t <- [i..j], ts <- ps t (j - t)]

-- instance OEIS 6190 where
--   oeis = 0 : 1 : zipWith (+) (map (* 3) $ tail (oeis @6190)) (oeis @6190)

-- instance OEIS 6206 where
--   oeisIx n = sum (map f $ (rowT @27750) n) `div` n where
--      f d = (oeisIx @8683) (n `div` d) * (oeisIx (d - 1) + (oeisIx @45) (d + 1))

instance OEIS 6218 where
  oeisIx n = sum $ map (div n) [1..n]

instance OEIS 6221 where
  oeisIx n = (17 * n * (n + 1) + 5) * (2 * n + 1)

-- instance OEIS 6231 where
--   oeisIx n = numerator $
--      sum $ tail $ zipWith (%) (scanl1 (*) [n, (n - 1)..1]) [1..n]

-- instance OEIS 6252 where
--   oeisIx 0 = 1
--   oeisIx n = sum $ (rowT @48594) n

-- instance OEIS 6256 where
--   oeis = f (tail (oeis @5809)) [1] where
--      f (x:xs) zs = (sum $ zipWith (*) zs (oeis @5809)) : f xs (x : zs)

-- instance OEIS 6257 where
--   oeis =
--      0 : 1 : (map (+ 1) $ zipWith mod (map (+ 1) $ tail (oeis @6257)) [2..])

instance OEIS 6261 where
  oeisIx = sum . take 6 . rowT @7318

-- instance OEIS 6277 where
--   oeis = 1 : scanl ((*) . (+ 1)) 2 (oeis @6277)

-- instance OEIS 6285 where
--   oeis = filter ((== 0) . (oeisIx @109925)) [1, 3 ..]

-- instance OEIS 6318 where
--   oeisIx n = (oeis @4148) !! n
--   oeis = 1 : f [1] where
--      f xs = y : f (y : xs) where
--        y = head xs + sum (zipWith (*) xs $ reverse xs)

instance OEIS 6331 where
  oeisIx n = sum $ zipWith (*) [2*n - 1, 2*n - 3 .. 1] [2, 4 ..]

-- instance OEIS 6336 where
--   oeis = 1 : h 2 1 0 where
--     h n last evens = x : h (n + 1) x (evens + 1 - x `mod` 2) where
--       x = last + (oeisIx @6336) (n - 1 - evens)

-- instance OEIS 6337 where
--   oeis = f [1] where
--      f xs = ys ++ f ys where
--             ys = concatMap (\z -> if z == 1 then [1,2] else [1,1,2]) xs

-- instance OEIS 6338 where
--   oeis = tail (oeis @214848)

-- instance OEIS 6343 where
--   oeisIx 0 = 1
--   oeisIx n = sum $ zipWith div
--      (zipWith (*) (map (oeisIx n) ks)
--                   (map (\k -> (oeisIx @7318) (2*n - 3*k - 4) (n - 2*k - 2)) ks))
--      (map (toInteger . (n - 1 -)) ks)
--      where ks = [0 .. (n - 2) `div` 2]

-- instance OEIS 6355 where
--   oeis = 1 : fib2s where
--      fib2s = 0 : map (+ 1) (scanl (+) 1 fib2s)

-- instance OEIS 6356 where
--   oeisIx n = (oeis @6056) !! n
--   oeis = 1 : 3 : 6 : zipWith (+) (map (2 *) $ drop 2 (oeis @6056))
--      (zipWith (-) (tail (oeis @6056)) (oeis @6056))

instance OEIS 6364 where
  oeis = filter (even . (oeisIx @120). (`div` 2)) [0..]

-- instance OEIS 6368 where
--   oeisIx n | u' == 0   = 3 * u
--             | otherwise = 3 * v + (v' + 1) `div` 2
--             where (u,u') = divMod n 2; (v,v') = divMod n 4

-- instance OEIS 6369 where
--   oeisIx n | m > 0     = round (4 * fi n / 3)
--             | otherwise = 2 * n' where (n',m) = divMod n 3

-- instance OEIS 6370 where
--   oeisIx n | m /= 0    = 3 * n + 1
--             | otherwise = n' where (n',m) = divMod n 2

-- instance OEIS 6378 where
--   oeis = map (oeisIx @40) $ filter ((== 0) . (oeisIx @107740)) [1..]

-- instance OEIS 6431 where
--   oeis = filter ((== 1) . (oeisIx @2635)) [0..]

-- instance OEIS 6446 where
--   oeis = filter (\x -> x `mod` (oeisIx @196) x == 0) [1..]

-- instance OEIS 6449 where
--   oeisIx = sum . (rowT @45995)

-- instance OEIS 6450 where
--   oeisIx = (oeisIx @40) . (oeisIx @40)
--   oeis = map (oeisIx @40) (oeis @40)

-- instance OEIS 6451 where
--   oeis = 0 : 2 : 5 : 15 : map (+ 2)
--      (zipWith (-) (map (* 6) (drop 2 (oeis @6451))) (oeis @6451))

-- instance OEIS 6460 where
--   oeisIx = f 0 where
--      f k x | mod k 3 == 0 && x `elem` [1, 2, 4] = x
--            | otherwise                          = f (k+1) (oeisIx x)

-- instance OEIS 6463 where
--   oeis = 0 : scanl1 (+) (oeis @3056)

-- instance OEIS 6478 where
--   oeis = scanl1 (+) $ drop 2 (oeis @1629)

-- instance OEIS 6489 where
--   oeis = filter
--      ((== 1) . (oeisIx @10051) . (subtract 6)) $ dropWhile (<= 6) (oeis @23201)

-- instance OEIS 6497 where
--   oeis = 2 : 3 : zipWith (+) (map (* 3) $ tail (oeis @6497)) (oeis @6497)

-- instance OEIS 6498 where
--   oeis = 1 : 1 : 1 : 2 : zipWith (+) (drop 3 (oeis @6498))
--      (zipWith (+) (tail (oeis @6498)) (oeis @6498))

instance OEIS 6504 where
  oeisIx (succ->n) = n * (42 + n * (59 + n * (18 + n))) `div` 24

-- instance OEIS 6507 where
--   oeis = iterate (oeisIx @62028) 7

-- instance OEIS 6508 where
--   oeis = iterate (oeisIx @2808) 1

-- instance OEIS 6509 where
--   oeis = 1 : f [1] (oeis @40) where
--      f xs'@ (x:_) (p:ps) | x' > 0 && x' `notElem` xs = x' : f (x':xs) ps
--                         | x'' `notElem` xs          = x'' : f (x'':xs) ps
--                         | otherwise                 = 0 : f (0:xs) ps
--                         where x' = x - p; x'' = x + p

-- instance OEIS 6512 where
--   oeisIx = (+ 2) . (oeisIx @1359)

-- instance OEIS 6516 where
--   oeis = 0 : 1 :
--       zipWith (-) (map (* 6) $ tail (oeis @6516)) (map (* 8) (oeis @6516))

instance OEIS 6519 where
  oeisIx (succ->fi->n) = fi (n .&. (-n) :: Integer)

-- instance OEIS 6521 where
--   oeis = filter (\x -> (oeisIx @51) x `mod` x == 0) [1..]

instance OEIS 6527 where
  oeisIx n = n * (n ^ 2 + 2) `div` 3

-- instance OEIS 6532 where
--   oeis = filter ((== 1) . (oeisIx @10052) . (oeisIx @203)) [1..]

-- instance OEIS 6549 where
--   oeis = [1,2,3,4,7,8] ++ f (drop 4 (oeis @40)) where
--      f (p:ps) | (oeisIx @10055) (p - 1) == 1 = (p - 1) : f ps
--               | (oeisIx @10055) (p + 1) == 1 = p : f ps
--               | otherwise            = f ps

-- instance OEIS 6562 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @75540)

instance OEIS 6564 where
  oeisIx (succ->n) = n * (5 * n * (n - 1) + 2) `div` 2

-- instance OEIS 6566 where
--   oeisIx n = n * (3 * n - 1) * (3 * n - 2) `div` 2
--   oeis = scanl (+) 0 (oeis @93485)

-- instance OEIS 6567 where
--   oeis = filter f (oeis @40) where
--      f p = (oeisIx @10051)' q == 1 && q /= p  where q = (oeisIx @4086) p

-- instance OEIS 6577 where
--   oeisIx n = fromJust $ findIndex (n `elem`) (tabf @127824)

-- instance OEIS 6580 where
--   oeis = map sum (tabl @3990)

-- instance OEIS 6590 where
--   oeisIx n = sum $ map f [1..n] where
--      f x = y + 1 - 0 ^ r where (y, r) = divMod n x

-- instance OEIS 6601 where
--   oeisIx n = (oeis @6601) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 $
--      zipWith3 (((+) .) . (+)) ds (tail ds) (drop 2 ds) where
--      ds = map abs $ zipWith (-) (tail (oeis @5)) (oeis @5)

-- instance OEIS 6659 where
--   oeisIx n = 2 * (oeisIx @7318)' (2 * n + 2) (n - 1)

-- instance OEIS 6666 where
--   oeisIx = genericLength . filter even . takeWhile (> 1) . (iterate (oeisIx @6370))

-- instance OEIS 6667 where
--   oeisIx = genericLength . filter odd . takeWhile (> 2) . (iterate (oeisIx @6370))
--   oeis = map (oeisIx @6667) [1..]

-- instance OEIS 6696 where
--   oeis = 0 : f 1 [0] where
--      f u vs = w : f (u + 1) (w : vs) where
--        w = minimum $ zipWith (+)
--            (reverse vs) (zipWith (*) (tail (oeis @79)) (map (+ u) vs))

-- instance OEIS 6711 where
--   oeis = iterate (oeisIx . (oeisIx @4086)) 1

-- instance OEIS 6720 where
--   oeis = [1,1,1,1] ++
--      zipWith div (foldr1 (zipWith (+)) (map b [1..2])) (oeis @6720)
--      where b i = zipWith (*) (drop i (oeis @6720)) (drop (4-i) (oeis @6720))

-- instance OEIS 6721 where
--   oeis = [1,1,1,1,1] ++
--     zipWith div (foldr1 (zipWith (+)) (map b [1..2])) (oeis @6721)
--     where b i = zipWith (*) (drop i (oeis @6721)) (drop (5-i) (oeis @6721))

-- instance OEIS 6722 where
--   oeis = [1,1,1,1,1,1] ++
--     zipWith div (foldr1 (zipWith (+)) (map b [1..3])) (oeis @6722)
--     where b i = zipWith (*) (drop i (oeis @6722)) (drop (6-i) (oeis @6722))

-- instance OEIS 6723 where
--   oeis = [1,1,1,1,1,1,1] ++
--     zipWith div (foldr1 (zipWith (+)) (map b [1..3])) (oeis @6723)
--     where b i = zipWith (*) (drop i (oeis @6723)) (drop (7-i) (oeis @6723))

-- instance OEIS 6751 where
--   oeisIx = foldl1 (\v d -> 10 * v + d) . map toInteger . (rowT @88203)

-- instance OEIS 6753 where
--   oeis = [x | x <- (oeis @2808),
--                       oeisIx x == sum (map (oeisIx @7953) (oeisIx_row x))]

-- instance OEIS 6769 where
--   oeisIx n = (oeis @50512) !! n
--   oeis = 0 : 1 : 1 : (-1) : 1 : zipWith div (zipWith (+) (zipWith (*)
--      (drop 4 (oeis @6769)) (drop 2 (oeis @6769)))
--        (map (^ 2) (drop 3 (oeis @6769)))) (tail (oeis @6769))

-- instance OEIS 6844 where
--   oeis = 4 : 5 : ulam 2 5 (oeis @6844)

-- instance OEIS 6872 where
--   oeis = filter (\x -> (oeisIx @10)' x == (oeisIx @10)' (oeisIx' x)) [1..]

-- instance OEIS 6881 where
--   oeis = filter chi [1..] where
--      chi n = p /= q && (oeisIx @10051) q == 1 where
--         p = (oeisIx @20639) n
--         q = n `div` p

-- instance OEIS 6882 where
--   oeis = 1 : 1 : zipWith (*) [2..] (oeis @6882)

-- instance OEIS 6884 where
--   oeis = f 1 0 (oeis @25586) where
--      f i r (x:xs) = if x > r then i : f (i + 1) x xs else f (i + 1) r xs

-- instance OEIS 6885 where
--   oeisIx = (oeisIx @25586) . (oeisIx @6884)

-- instance OEIS 6889 where
--   oeisIx = fromJust . (`elemIndex` (oeis @224782))

-- instance OEIS 6895 where
--   oeis = 1 : f 0 0 (tail (oeis @79)) (tail (oeis @244)) where
--      f x y us'@ (u:us) vs'@ (v:vs)
--        | x > 0     = (u - x) : f 0 (u - x + y) us vs'
--        | y > v - u = (v - y) : f (v + x - y) 0 us' vs
--        | otherwise =       u : f 0 (u + y) us vs'

instance OEIS 6899 where
  oeis = 1 : m (tail (oeis @79)) (tail (oeis @244)) where
     m us'@ (u:us) vs'@ (v:vs) = if u < v then u : m us vs' else v : m us' vs

instance OEIS 6906 where
  oeisIx n = p 1 n 1 where
     p _ 0 s = s
     p k m s | m<k = 0 | otherwise = p k (m-k) (k*s) + p (k+1) m s

instance OEIS 6918 where
  oeis = scanl (+) 0 (oeis @8805)

-- instance OEIS 6921 where
--   oeisIx = sum . zipWith (*)
--                   (oeis @79) . map (flip mod 2) . reverse . (rowT @11973)

-- instance OEIS 6933 where
--   import Data.Text (Text); import qualified Data.Text as T (unpack)
--   import Text.Numeral.Grammar.Reified (defaultInflection)
--   import qualified Text.Numeral.Language.EN as EN
--   oeisIx n = (oeis @6933) !! (n - 1)
--   oeis = filter (T.all (/= 'e') . numeral) [0..] where
--      numeral :: Integer -> Text
--      numeral = fromJust . EN.gb_cardinal defaultInflection

-- instance OEIS 6939 where
--   oeis = scanl1 (*) (oeis @2110)

-- instance OEIS 6942 where
--   oeis = [6,2,5,5,4,5,6,3,7,6] ++ f 10 where
--      f x = (oeisIx x' + (oeisIx @6942) d) : f (x + 1)
--            where (x',d) = divMod x 10

-- instance OEIS 6949 where
--   oeis = 1 : 1 : 1 : zipWith (+) xs (tail xs)
--      where xs = map (oeisIx @6949) $ zipWith (-) [1..] $ tail (oeis @6949)

-- instance OEIS 6960 where
--   oeis = iterate (oeisIx @56964) 196

-- instance OEIS 6968 where
--   oeisIx = lenRom 3 where
--      lenRom 0 z = z
--      lenRom p z = [0, 1, 2, 3, 2, 1, 2, 3, 4, 2] !! m + lenRom (p - 1) z'
--                   where (z',m) = divMod z 10

-- instance OEIS 6985 where
--   oeis = 1 : map (oeisIx . (+ 2)) (oeis @6985)

-- instance OEIS 6992 where
--   oeis = iterate (oeisIx . (* 2)) 2

-- instance OEIS 6995 where
--   oeis = 0 : filter ((== 1) . (oeisIx @178225)) (oeis @5408)

-- instance OEIS 6996 where
--   oeisIx n = (oeisIx @83093) (2 * n) n

-- instance OEIS 6999 where
--   oeis = 0 : map ((`div` 2) . (+ 2) . (* 3)) (oeis @6999)

-- instance OEIS 7000 where
--   import Data.MemoCombinators (memo2, integral)
--   oeisIx n = (oeis @7000) !! n
--   oeis = map (p' 1) [0..] where
--      p' = memo2 integral integral p
--      p _ 0 = 1
--      p k m | m < fib   = 0
--            | otherwise = p' k (m - fib) + p' (k + 1) m where fib = (oeisIx @45) k

-- instance OEIS 7012 where
--   oeis = 1 : map (sum . map signum) (tail (tabl @53200))

-- instance OEIS 7015 where
--   oeisIx n = 1 + (fromJust $
--               elemIndex 0 $ zipWith (-) (oeis @10) $ drop n (oeis @10))

-- instance OEIS 7018 where
--   oeis = iterate (oeisIx @2378) 1

-- instance OEIS 7047 where
--   oeisIx = sum . (rowT @38719)

-- instance OEIS 7061 where
--   oeis = 1 : f [1] where
--      f us = a' : f (us ++ [a']) where
--        a' = b $ reverse $ map (`splitAt` us) [0..length us - 1] where
--           b ((xs,ys):xyss) | vs `isSuffixOf` xs = 3 - head ys
--                            | otherwise          = b xyss
--        vs = fromJust $ find (`isInfixOf` init us) $ tails us

-- instance OEIS 7066 where
--   oeis = 1 : f 2 [1] where
--      f x zs@ (z:_) = y : f (x + 1) (y : zs) where
--        y = if x `elem` zs then z + 2 else z + 3

-- instance OEIS 7068 where
--   oeis = 1 : 3 : zipWith (+)
--      (tail (oeis @7068)) (zipWith (*) (oeis @34) (oeis @7068))

-- instance OEIS 7070 where
--   oeis = 1 : 4 : (map (* 2) $ zipWith (-)
--      (tail $ map (* 2) (oeis @7070)) (oeis @7070))

-- instance OEIS 7088 where
--   oeisIx 0 = 0
--   oeisIx n = 10 * (oeisIx @7088) n' + m where (n',m) = divMod n 2

-- instance OEIS 7089 where
--   oeisIx 0 = 0
--   oeisIx n = 10 * (oeisIx @7089) n' + m where (n', m) = divMod n 3

-- instance OEIS 7090 where
--   oeisIx 0 = 0
--   oeisIx n = 10 * (oeisIx @7090) n' + m where (n', m) = divMod n 4

-- instance OEIS 7092 where
--   oeisIx 0 = 0
--   oeisIx n = 10 * (oeisIx @7092) n' + m where (n', m) = divMod n 6

-- instance OEIS 7094 where
--   oeisIx 0 = 0
--   oeisIx n = 10 * (oeisIx @7094) n' + m where (n', m) = divMod n 8

-- instance OEIS 7095 where
--   oeisIx = f . subtract 1 where
--      f 0 = 0
--      f v = 10 * f w + r   where (w, r) = divMod v 9

-- instance OEIS 7097 where
--   oeis = iterate (oeisIx @40) 1

-- instance OEIS 7283 where
--   oeisIx = (* 3) . (2 ^)
--   oeis = iterate (* 2) 3

instance OEIS 7290 where
  oeisIx (fi->n) = if n < 3 then 0 else 2 * rowCol @7318 n 3

-- instance OEIS 7294 where
--   oeisIx = p $ tail (oeis @217) where
--      p _      0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 7300 where
--   oeis = 2 : 5 : ulam 2 5 (oeis @7300)

instance OEIS 7302 where
  oeisIx (fi->n) = fi do (oeisIx @120) $ xor n (3 * n) :: Integer

-- instance OEIS 7304 where
--   oeis = filter f [1..] where
--   f u = p < q && q < w && (oeisIx @10051) w == 1 where
--   p = (oeisIx @20639) u; v = div u p; q = (oeisIx @20639) v; w = div v q

-- instance OEIS 7310 where
--   oeis = 1 : 5 : map (+ 6) (oeis @7310)


instance Table 7318 where
  tabl = iterate (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [1]

instance OEIS 7318 where
  oeis = tablList @7318

-- instance OEIS 7335 where
--   oeis = 2 : 3 : f [3, 2] (singleton 6 1) where
--      f xs m | v == 1    = y : f (y : xs) (g (map (y *) xs) m')
--             | otherwise = f xs m'
--             where g [] m = m
--                   g (z:zs) m = g zs $ insertWith (+) z 1 m
--                   ((y,v),m') = deleteFindMin m

-- instance OEIS 7340 where
--   oeis = filter ((== 0) . (oeisIx @54025)) (oeis @1599)

-- instance OEIS 7367 where
--   oeis = map fst $
--                  filter ((== 3) . snd) $ zip (oeis @2202) (oeis @58277)

instance OEIS 7376 where
  oeis = concatMap (map (fi . (read :: String -> Integer) . return) . show) [0..]

-- instance OEIS 7377 where
--   oeisIx n = (oeis @7377) !! (n - 1)
--   oeis = elemIndices 0 (oeis @27870)

-- instance OEIS 7395 where
--   oeisIx = const 2
--   oeis = repeat 2

-- instance OEIS 7401 where
--   oeis = [x | x <- [0..], (oeisIx @23531) x == 0]

-- instance OEIS 7406 where
--   oeisIx n = (oeis @7406) !! (n - 1)
--   oeis = map numerator $ scanl1 (+) $ map (1 %) $ tail (oeis @290)

-- instance OEIS 7407 where
--   oeisIx n = (oeis @7407) !! (n - 1)
--   oeis = map denominator $
--                      scanl1 (+) $ map (1 %) $ tail (oeis @290)

-- instance OEIS 7412 where
--   oeisIx n = n + (oeisIx @48766) (n + (oeisIx @48766) n)

-- instance OEIS 7416 where
--   oeis = f 1 [] where
--      f x ts = if tau `elem` ts then f (x + 1) ts else x : f (x + 1) (tau:ts)
--               where tau = (oeisIx @5)' x

-- instance OEIS 7417 where
--   oeisIx n = (oeis @7417) !! (n - 1)
--   oeis = s [1..] where
--      s (x:xs) = x : s (delete (3*x) xs)

-- instance OEIS 7420 where
--   oeis = 0 : 0 : 1 : (map (* 2) $ zipWith (+) (drop 2 (oeis @7420))
--      (map (* 2) $ zipWith (-) (oeis @7420) (tail (oeis @7420))))

-- instance OEIS 7421 where
--   oeisIx = (2 -) . (`mod` 2) . (oeisIx @1222)

-- instance OEIS 7422 where
--   oeis = [x | x <- [1..], (oeisIx @7956) x == x]

instance OEIS 7423 where
  oeisIx = (+ 1) . (oeisIx @8683)

-- instance OEIS 7425 where
--   oeisIx = sum . map (oeisIx @5) . (rowT @27750)

-- instance OEIS 7427 where
--   oeisIx n = sum $ zipWith (*) mds $ reverse mds where
--      mds = (rowT @225817) n

-- instance OEIS 7428 where
--   oeisIx n = product
--      [oeisIx' 3 e * cycle [1,-1] !! fi e | e <- (rowT @124010) n]

-- instance OEIS 7430 where
--   oeisIx n = sum $ zipWith (*) (map (oeisIx @5) ds) (map (oeisIx @203) $ reverse ds)
--               where ds = (rowT @27750) n

-- instance OEIS 7431 where
--   oeisIx 0 = 0
--   oeisIx n = sum $ map (oeisIx . gcd n) [1..n]

-- instance OEIS 7434 where
--   oeisIx n = sum $ zipWith3 (\x y z -> x * y * z)
--                     tdivs (reverse tdivs) (reverse divs)
--                     where divs = (rowT @27750) n;  tdivs = map (oeisIx @10) divs

-- instance OEIS 7439 where
--   oeis = 1 : 1 : f 2 where
--      f x = (sum $ map (oeisIx @7439) $ (rowT @27750) (x - 1)) : f (x + 1)

-- instance OEIS 7448 where
--   oeis = f [0] [0] where
--      f (x:xs) (y:ys) = z : f (xs ++ [2*z,2*z]) (ys ++ [3*z,3*z,3*z])
--        where z = 1 + min x y

-- instance OEIS 7455 where
--   oeis = 1 : 1 : 3 : 5 : zipWith (+)
--      (map (* 2) (oeis @7455)) (map (* 3) $ drop 2 (oeis @7455))
--   oeisIx n = (oeis @7455) !! n

-- instance OEIS 7456 where
--   oeisIx 1 = 0
--   oeisIx n = (oeisIx @523) (n - 1) + mod n 2 + 1

-- instance OEIS 7457 where
--   oeisIx n = genericLength [k | k <- [1..n - 1], gcd k n == 1, (oeisIx @8966) k == 1,
--                           let j = n - k, gcd j n == 1, (oeisIx @8966) j == 1]

-- instance OEIS 7459 where
--   oeis = f 1 (oeis @40) where
--     f q (p:ps) = if mod q (p - 1) == 0 then p : f (q * p ^ 2) ps else f q ps

-- instance OEIS 7460 where
--   oeisIx n = (oeis @7460) !! n
--   oeis = 1 : f [1,1] where
--      f xs = x : f (x:xs) where
--        x = sum $ zipWith (.|.) xs $ tail $ reverse xs :: Integer

-- instance OEIS 7461 where
--   oeisIx n = (oeis @7461) !! n
--   oeis = 1 : f [1,1] where
--      f xs = x : f (x:xs) where
--        x = sum $ zipWith (.&.) xs $ tail $ reverse xs :: Integer

-- instance OEIS 7462 where
--   oeisIx n = (oeis @7462) !! n
--   oeis = 0 : 1 : f [1,0] where
--      f xs = y : f (y : xs) where
--        y = sum $ zipWith xor xs $ reverse xs :: Integer

-- instance OEIS 7464 where
--   oeis = 1 : 1 : f [1,1] where
--      f xs = y : f (y:xs) where y = sum $ zipWith gcd xs $ reverse xs

-- instance OEIS 7466 where
--   oeisIx n = (oeisIx @228643) n n

-- instance OEIS 7477 where
--   oeis = 1 : 1 : f [1,1] where
--      f xs = y : f (y:xs) where y = sum $ zipWith (*) (tail xs) (reverse xs)

-- instance OEIS 7481 where
--   oeis = 1 : 2 : 3 : 7 : zipWith (+)
--                  (map (* 3) $ drop 2 (oeis @7481)) (map (* 2) (oeis @7481))

-- instance OEIS 7482 where
--   oeis = 1 : 3 : zipWith (+)
--                  (map (* 3) $ tail (oeis @7482)) (map (* 2) (oeis @7482))

-- instance OEIS 7483 where
--   oeis = 1 : 5 : zipWith (+)
--                  (map (* 3) $ tail (oeis @7483)) (map (* 2) (oeis @7483))

-- instance OEIS 7484 where
--   oeis = 2 : 7 : zipWith (+)
--                  (map (* 3) $ tail (oeis @7484)) (map (* 2) (oeis @7484))

-- instance OEIS 7489 where
--   oeis = scanl (+) 0 $ tail (oeis @142)

-- instance OEIS 7491 where
--   oeisIx = (oeisIx @7918) . (oeisIx @290)

instance OEIS 7494 where
  oeisIx =  flip div 2 . (+ 1) . (* 3)

-- instance OEIS 7497 where
--   oeis = iterate (oeisIx @203) 2

-- instance OEIS 7500 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (oeisIx @4086)) (oeis @40)

instance OEIS 7501 where
  oeis = iterate (oeisIx @217) 2

instance OEIS 7502 where
  oeis = zipWith (+) (oeis @45925) $ tail (oeis @45)

-- instance OEIS 7503 where
--   oeisIx = sum . map (+ 1) . (rowT @27750)'

instance OEIS 7504 where
  oeis = scanl (+) 0 (oeis @40)

-- instance OEIS 7505 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @83329)

instance OEIS 7510 where
  oeis = map (fi . (+ 1)) $ elemIndices (0, 1, 0) $
    zip3 (drop 2 (oeis @10051)) (oeis @10051) (0 : 0 : (oeis @10051))

-- instance OEIS 7513 where
--   oeisIx n = (oeis @40) !! (fromJust $ elemIndex 0 $
--      zipWith ((-) `on` (oeisIx @7953)) (oeis @40) $ drop (n - 1) (oeis @40))

-- instance OEIS 7519 where
--   oeis = filter ((== 1) . (oeisIx @10051)) [1,9..]

-- instance OEIS 7521 where
--   oeis = filter ((== 1). (oeisIx @10051)) (oeis @4770)

-- instance OEIS 7522 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @4771)

-- instance OEIS 7526 where
--   oeis = 0 : zipWith (*) [1..] (map (+ 1) (oeis @7526))

-- instance OEIS 7528 where
--   oeis = [x | k <- [0..], let x = 6 * k + 5, (oeisIx @10051)' x == 1]

instance OEIS 7531 where
  oeisIx n = product [n - 2..n]

-- instance OEIS 7532 where
--   oeis = filter f [1..] where
--      f x = g x 0 where
--        g 0 v = v == x
--        g u v = if d <= 1 then g u' (v + d) else v <= x && h d
--                where h p = p <= x && (g u' (v + p) || h (p * d))
--                      (u', d) = divMod u 10

-- instance OEIS 7534 where
--   import qualified Data.Set as Set (map, null)
--   import Data.Set (empty, insert, intersection)
--   oeisIx n = (oeis @7534) !! (n - 1)
--   oeis = f [2,4..] empty 1 (oeis @1097) where
--      f xs'@ (x:xs) s m ps'@ (p:ps)
--        | x > m = f xs' (insert p s) p ps
--        | Set.null (s `intersection` Set.map (x -) s) = x : f xs s m ps'
--        | otherwise = f xs s m ps'

-- instance OEIS 7535 where
--   import Math.NumberTheory.Moduli (powerMod)
--   oeisIx n = head [m | m <- dropWhile (<= n) (oeis @2808),
--                         powerMod n (m - 1) m == 1]

-- instance OEIS 7538 where
--   oeisIx n = f n 2 2 2 where
--      f 1 b _ _ = b
--      f n b 0 i = f (n - 1) 2 (oeisIx i) (i + 1)
--      f n b c i = f (n - 1) 3 (c - 1) i

-- instance OEIS 7542 where
--   oeis = iterate (oeisIx @203907) 2

-- instance OEIS 7547 where
--   oeisIx n = (oeis @7547) !! n
--   oeis = tail $ elemIndices 2 $ map (oeisIx @6530) (oeis @7542)

-- instance OEIS 7554 where
--   oeisIx n = genericIndex (oeis @7554) (n - 1)
--   oeis = 1 : f 1 where
--      f x = (sum $ zipWith (*) (map (oeisIx @8683) divs)
--                               (map (oeisIx @7554) $ reverse divs)) : f (x + 1)
--             where divs = (rowT @27750) x

-- instance OEIS 7556 where
--   oeisIx 0 = 1
--   oeisIx n = (oeisIx @7318)' (8 * n) (n - 1) `div` n

-- instance OEIS 7559 where
--   oeis = scanl (*) 1 (oeis @16777)

-- instance OEIS 7583 where
--   oeisIx = (`div` 3) . (+ 1) . (oeisIx @4171)

instance OEIS 7590 where
  oeisIx = flip div 2 . (^ 2)

-- instance OEIS 7598 where
--   oeisIx = (^ 2) . (oeisIx @45)

-- instance OEIS 7599 where
--   oeis = 1 : f 1 1  where
--      f x m = y : f y (m + 1) where
--        y = x + (iterate (oeisIx @7599) (m-2)) !! (m `div` 2)

-- instance OEIS 7602 where
--   oeis = map succ $ elemIndices 1 $ map (oeisIx @188642) [1..]

instance OEIS 7604 where
  oeis = concat $ map tail $ tail (tabl @46936)

instance OEIS 7605 where
  oeis = map (oeisIx @7953) (oeis @40)

-- instance OEIS 7606 where
--   oeis = takeSkip 1 [1..] where
--      takeSkip k xs = take k xs ++ takeSkip (k + 2) (drop (2*k + 1) xs)

-- instance OEIS 7607 where
--   oeis = skipTake 1 [1..] where
--      skipTake k xs = take (k + 1) (drop k xs)
--                      ++ skipTake (k + 2) (drop (2*k + 1) xs)

-- instance OEIS 7608 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @7608) n' * 10 + m where
--      (n', m) = if r < 0 then (q + 1, r + 4) else (q, r)
--                where (q, r) = quotRem n (negate 4)

-- instance OEIS 7612 where
--   oeis = iterate (oeisIx @64806) 1

-- instance OEIS 7614 where
--   import Data.List.Ordered (insertBag)
--   oeisIx n = (oeis @7614) !! (n - 1)
--   oeis = f [1..] (oeis @2110) [] where
--      f xs'@ (x:xs) ps'@ (p:ps) us
--        | x < p = f xs ps' $ insertBag (oeisIx' x) us
--        | otherwise = vs ++ f xs' ps ws
--        where (vs, ws) = span (<= (oeisIx @10)' x) us

-- instance OEIS 7617 where
--   import Data.List.Ordered (minus)
--   oeisIx n = (oeis @7617) !! (n - 1)
--   oeis = [1..] `minus` (oeis @2202)

-- instance OEIS 7618 where
--   oeis = iterate (oeisIx @62028) 5

-- instance OEIS 7620 where
--   oeis = 1 : filter (\x -> all (p $ (rowT @27751) x) [1..x]) [2..]
--      where p _  0 = True
--            p [] _ = False
--            p ds'@ (d:ds) m = d <= m && (p ds (m - d) || p ds m)

-- instance OEIS 7623 where
--   oeisIx n | n <= 36287999 = read $ concatMap show (oeisIx_row n) :: Int
--             | otherwise     = error "representation would be ambiguous"

-- instance OEIS 7627 where
--   oeisIx n = (oeis @7627) !! (n - 1)
--   oeis = filter modest' [1..] where
--      modest' x = or $ zipWith m
--                  (map read $ (init $ tail $ inits $ show x) :: [Integer])
--                  (map read $ (tail $ init $ tails $ show x) :: [Integer])
--         where m u v = u < v && (x - u) `mod` v == 0 && gcd u v == 1

-- instance OEIS 7628 where
--   oeis = filter f (oeis @125308) where
--      f p = (oeisIx @10051)' q == 1 && q /= p  where q = (oeisIx @4086) p

-- instance OEIS 7629 where
--   oeisIx n = (oeis @7629) !! (n - 1)
--   oeis = filter isKeith [10..] where
--      isKeith n = repfigit $ reverse $ map digitToInt $ show n where
--         repfigit ns = s == n || s < n && (repfigit $ s : init ns) where
--            s = sum ns

-- instance OEIS 7632 where
--   oeis = filter ((== 1) . (oeisIx @178225)) (oeis @2113)

-- instance OEIS 7645 where
--   oeis = filter ((== 1) . (oeisIx @10051)) $ tail (oeis @3136)

-- instance OEIS 7651 where
--   oeisIx = foldl1 (\v d -> 10 * v + d) . map toInteger . (rowT @220424)

-- instance OEIS 7660 where
--   oeis = 0 : 0 : map (+ 1)
--                          (zipWith (*) (oeis @7660) $ tail (oeis @7660))

instance OEIS 7661 where
  oeis = 1 : 1 : 2 : zipWith (*) (oeis @7661) [3..]
instance Table 7661 where
  rowCol n k = (oeis @7661) `genericIndex` n
  tabl = undefined

-- instance OEIS 7664 where
--   oeisIx = sum . map (oeisIx . (oeisIx @3056)) . enumFromTo 0 . subtract 1

instance OEIS 7675 where
  oeis = f 1 (oeis @8966) where
     f n (u:xs'@ (v:w:x:xs)) | u == 1 && w == 1 && v == 1 = n : f (n+4) xs
                            | otherwise = f (n+1) xs'

-- instance OEIS 7689 where
--   oeisIx n = (oeisIx @79) n + (oeisIx @244) n

-- instance OEIS 7691 where
--   oeis = filter ((== 1) . (oeisIx @17666)) [1..]

-- instance OEIS 7692 where
--   oeisIx n = (oeis @7692) !! (n - 1)
--   oeis = findIndices (> 1) (oeis @25426)

-- instance OEIS 7694 where
--   oeis = 1 : filter even (oeis @3586)

-- instance OEIS 7697 where
--   oeisIx n = 2 * (fromJust $ findIndex (>= n) (oeis @46921)) + 1

-- instance OEIS 7731 where
--   oeis = 1 : (zipWith3 (\u v w -> u + v + w)
--      (map (oeisIx . (`div` 2)) [1..])
--      (map (oeisIx . (`div` 3)) [1..])
--      (map (oeisIx . (`div` 6)) [1..]))

-- instance OEIS 7733 where
--   oeisIx = (oeisIx @2326) . flip div 2 . subtract 1 . (oeisIx @265)

instance OEIS 7745 where
  oeisIx (succ->fi->n) = fi $ n .|. (n ^ 2)

-- instance OEIS 7755 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @3434)) . (subtract 1)

-- instance OEIS 7770 where
--   oeis = filter ((== 1) . (oeisIx @103369)) [1..]

-- instance OEIS 7774 where
--   oeis = filter ((== 2) . (oeisIx @1221)) [1..]

-- instance OEIS 7775 where
--   oeis = 1 : filter ((> 5) . (oeisIx @20639)) [1..]

-- instance OEIS 7805 where
--   oeisIx = (`div` 2) . (oeisIx @45) . (* 3) . (+ 1) . (* 2)

-- instance OEIS 7811 where
--   oeis = map (pred . head) $ filter (all (== 1) . map (oeisIx @10051)') $
--      iterate (zipWith (+) [10, 10, 10, 10]) [1, 3, 7, 9]

-- instance OEIS 7814 where
--   oeisIx n = if m == 0 then 1 + (oeisIx @7814) n' else 0
--               where (n', m) = divMod n 2

-- instance OEIS 7821 where
--   oeisIx = (oeisIx @40) . (oeisIx @18252)
--   oeis = map (oeisIx @40) (oeis @18252)

-- instance OEIS 7862 where
--   oeisIx = sum . map (oeisIx @10054) . (rowT @27750)

-- instance OEIS 7875 where
--   oeisIx = genericLength . filter (> 0) . (rowT @225817)

instance OEIS 7882 where
  oeisIx (succ->n) = genericLength [ (x, y) | x <- [1..n], y <- [1..n], x^2 + y^2 < n^2]

instance OEIS 7895 where
  oeisIx 0 = 0
  oeisIx n = genericLength $ rowT @35516 n

instance OEIS 7908 where
  oeisIx = fi . (read . concatMap show . enumFromTo 1 :: Integer -> Integer) . fi . succ

-- instance OEIS 7913 where
--   oeisIx n = product $ zipWith (^) (oeisIx_row n) (map (`mod` 2) $ (rowT @124010) n)

instance OEIS 7916 where
  oeis = filter ((== 1) . foldl1 gcd . (rowT @124010)) [2..]

-- instance OEIS 7917 where
--   oeisIx n = if (oeisIx @10051)' n == 1 then n else (oeisIx @7917) (n - 1)

-- instance OEIS 7918 where
--   oeis = 2 : 2 : 2 : concat (zipWith
--                 (\p q -> (replicate (fromInteger (q - p)) q))
--                                      (oeis @40) $ tail (oeis @40))

-- instance OEIS 7921 where
--   oeis = filter ((== 0) . (oeisIx @10051)' . (+ 2)) [1, 3 ..]

-- instance OEIS 7928 where
--   oeisIx n = (oeis @7928) !! (n - 1)
--   oeis = findIndices (> 0) (oeis @196563)

-- instance OEIS 7931 where
--   oeisIx n = f (n + 1) where
--      f x = if x < 2 then 0 else (10 * f x') + m + 1
--        where (x', m) = divMod x 2

-- instance OEIS 7947 where
--   oeisIx = product . (rowT @27748) . succ

-- instance OEIS 7948 where
--   oeisIx = last . filter ((== 1) . (oeisIx @212793)) . (rowT @27750)

-- instance OEIS 7949 where
--   oeisIx n = if m > 0 then 0 else 1 + (oeisIx @7949) n'
--               where (n', m) = divMod n 3

-- instance OEIS 7952 where
--   oeis = f 1 [0..] where
--      f k (x:xs) = x : f (k + 1) (g xs) where
--        g ws = us ++ (g vs) where (us, _:vs) = splitAt k ws

instance OEIS 7953 where
  oeisIx n | n < 10 = n | otherwise = (oeisIx @7953) n' + r where (n',r) = divMod n 10

instance OEIS 7954 where
  oeisIx n | n < 10 = n
           | otherwise = m * (oeisIx @7954) n' where (n', m) = divMod n 10

-- instance OEIS 7955 where
--   oeisIx = product . (rowT @27750)

-- instance OEIS 7956 where
--   oeisIx = product . (rowT @27751)

-- instance OEIS 7957 where
--   oeisIx n = (oeis @7957) !! (n - 1)
--   oeis = findIndices (> 0) (oeis @196564)

-- instance OEIS 7961 where
--   oeisIx :: Integer -> Integer
--   oeisIx n = read $ map intToDigit $
--     t n $ reverse $ takeWhile (<= n) $ tail (oeis @290) where
--       t _ []          = []
--       t m (x:xs)
--           | x > m     = 0 : t m xs
--           | otherwise = (fromInteger m') : t r xs
--           where (m',r) = divMod m x

-- instance OEIS 7966 where
--   oeisIx n = genericIndex (oeis @7966) n
--   oeis = map fst hCouples

-- instance OEIS 7967 where
--   oeisIx n = genericIndex (oeis @7967) n
--   oeis = map snd hCouples

-- instance OEIS 7968 where
--   oeisIx = (\ (hType,_,_,_,_) -> hType) . h
--   h 0 = (0, 0, 0, 0, 0)
--   h x = if a > 0 then (0, a, a, a, a) else h' 1 divs
--         where a = (oeisIx @37213) x
--               divs = (rowT @27750) x
--               h' r []                                = h' (r + 1) divs
--               h' r (d:ds)
--                | d' > 1 && rest1 == 0 && ss == s ^ 2 = (1, d, d', r, s)
--                | rest2 == 0 && odd u && uu == u ^ 2  = (2, d, d', t, u)
--                | otherwise                           = h' r ds
--                where (ss, rest1) = divMod (d * r ^ 2 + 1) d'
--                      (uu, rest2) = divMod (d * t ^ 2 + 2) d'
--                      s = (oeisIx @196) ss; u = (oeisIx @196) uu; t = 2 * r - 1
--                      d' = div x d
--   hs = map h [0..]
--   hCouples = map (\ (_, factor1, factor2, _, _) -> (factor1, factor2)) hs
--   sqrtPair n = genericIndex sqrtPairs (n - 1)
--   sqrtPairs = map (\ (_, _, _, sqrt1, sqrt2) -> (sqrt1, sqrt2)) hs

-- instance OEIS 7969 where
--   oeis = filter ((== 1) . (oeisIx @7968)) [0..]

-- instance OEIS 7970 where
--   oeis = filter ((== 2) . (oeisIx @7968)) [0..]

-- instance OEIS 7978 where
--   oeisIx = head . ([1..] \\) . (rowT @27750)

-- instance OEIS 7997 where
--   oeisIx n = ceiling $ (fi $ (n - 3) * (n - 4)) / 6
--   oeis = 0 : 0 : 1 : zipWith (+) (oeis @7997) [1..]

instance OEIS 8133 where
  oeis = zipWith (*) (tail ts) ts where ts = map (`div` 3) [0..]

instance OEIS 8217 where
  oeis = zipWith (*) (tail qs) qs where qs = map (`div` 4) [0..]

instance OEIS 8233 where
  oeisIx n = product $ map (`div` 4) [n..n+3]

-- instance OEIS 8275 where
--   oeis = tablList @8275
-- instance Table 8275 where
--   rowCol = rowCol_off @8275 @1 @1
--   rowT   = rowT_off   @8275 @1
--   tabl = map tail $ tail (tabl @48994)

-- instance OEIS 8276 where
--   oeis = tablList @8276
-- instance Table 8276 where
--   rowCol = rowCol_off @8276 @1 @1
--   rowT   = rowT_off   @8276 @1
--   tabl = map init $ tail (tabl @54654)

-- instance OEIS 8277 where
--   oeis = tablList @8277
-- instance Table 8277 where
--   rowCol = rowCol_off @8277 @1 @1
--   rowT   = rowT_off   @8277 @1
--   tabl = map tail $ (tabl @48993)

-- instance OEIS 8278 where
--   oeis = tablList @8278
-- instance Table 8278 where
--   rowCol = rowCol_off @8278 @1 @1
--   rowT   = rowT_off   @8278 @1
--   tabl = iterate st2 [1] where
--     st2 row = zipWith (+) ([0] ++ row') (row ++ [0])
--               where row' = reverse $ zipWith (*) [1..] $ reverse row

-- instance OEIS 8279 where
--   oeis = tablList @8279
-- instance Table 8279 where
--   rowT n = (tabl @8279) !! n
--   tabl = iterate f [1] where
--      f xs = zipWith (+) ([0] ++ zipWith (*) xs [1..]) (xs ++ [0])

instance OEIS 8280 where
  oeis = tablList @8280
instance Table 8280 where
  tabl = ox True (tabl @8281) where
    ox turn (xs:xss) = (if turn then reverse xs else xs) : ox (not turn) xss

instance OEIS 8281 where
  oeis = tablList @8281
instance Table 8281 where
  tabl = iterate (scanl (+) 0 . reverse) [1]

-- instance OEIS 8282 where
--   oeis = tablList @8282
-- instance Table 8282 where
--   rowCol = rowCol_off @8282 @1 @1
--   rowT   = rowT_off   @8282 @1
--   tabl = iterate f [1] where
--      f xs = zs ++ [last zs] where zs = scanl1 (+) (reverse xs)

-- instance OEIS 8284 where
--   oeis = tablList @8284
-- instance Table 8284 where
--   rowCol = rowCol_off @8284 @1 @1
--   rowT   = rowT_off   @8284 @1
--   tabl = [1] : f [[1]] where
--      f xss = ys : f (ys : xss) where
--        ys = (map sum $ zipWith take [1..] xss) ++ [1]

-- instance OEIS 8287 where
--   oeis = concat $ iterate ([1,1,1,1] *) [1]
--   instance Num a => Num [a] where
--      fromInteger k = [fromInteger k]
--      (p:ps) + (q:qs) = p + q : ps + qs
--      ps + qs         = ps ++ qs
--      (p:ps) * qs'@ (q:qs) = p * q : ps * qs' + [p] * qs
--      _ * _               = []

-- instance OEIS 8288 where
--   oeis = tablList @8288
-- instance Table 8288 where
--   rowT n = (tabl @8288) !! n
--   tabl = map fst $ iterate
--       (\ (us, vs) -> (vs, zipWith (+) ([0] ++ us ++ [0]) $
--                          zipWith (+) ([0] ++ vs) (vs ++ [0]))) ([1], [1, 1])

-- instance OEIS 8290 where
--   oeis = tablList @8290
-- instance Table 8290 where
--   rowT n = (tabl @8290) !! n
--   tabl = map reverse (tabl @98825)

-- instance OEIS 8292 where
--   oeis = tablList @8292
-- instance Table 8292 where
--   rowCol = rowCol_off @8292 @1 @1
--   rowT   = rowT_off   @8292 @1
--   tabl = iterate f [1] where
--      f xs = zipWith (+)
--        (zipWith (*) ([0] ++ xs) (reverse ks)) (zipWith (*) (xs ++ [0]) ks)
--        where ks = [1 .. 1 + genericLength xs]

-- instance OEIS 8297 where
--   oeis = tablList @8297
-- instance Table 8297 where
--   rowCol = rowCol_off @8297 @1 @1
--   rowT   = rowT_off   @8297 @1
--   tabl = [-1] : f [-1] 2 where
--      f xs i = ys : f ys (i + 1) where
--        ys = map negate $
--             zipWith (+) ([0] ++ xs) (zipWith (*) [i, i + 1 ..] (xs ++ [0]))

-- instance OEIS 8301 where
--   oeis = tablList @8301
-- instance Table 8301 where
--   rowCol n k = (tabf @8301) !! n !! k
--   rowT n = (tabf @8301) !! n
--   tabf = iterate f [1] where
--      f zs = zs' ++ tail (reverse zs') where
--        zs' = (sum zs) : h (0 : take (length zs `div` 2) zs) (sum zs) 0
--        h []     _  _ = []
--        h (x:xs) y' y = y'' : h xs y'' y' where y'' = 2*y' - 2*x - y

-- instance OEIS 8306 where
--   oeis = tablList @8306
-- instance Table 8306 where
--   rowCol n k = (tabf @8306) !! (n - 2) !! (k-1)
--   rowT n = (tabf @8306) !! (n - 2)
--   tabf = map (fst . fst) $ iterate f (([1], [2]), 3) where
--      f ((us, vs), x) =
--        ((vs, map (* x) $ zipWith (+) ([0] ++ us) (vs ++ [0])), x + 1)

-- instance OEIS 8313 where
--   oeis = tablList @8313
-- instance Table 8313 where
--   rowCol n k = (tabf @8313) !! n !! k
--   rowT n = (tabf @8313) !! n
--   tabf = map (filter (> 0)) (tabl @53121)

-- instance OEIS 8315 where
--   oeis = tablList @8315
-- instance Table 8315 where
--   rowCol n k = (tabf @8315) !! n !! k
--   rowT n = (tabf @8315) !! n
--   tabf = map reverse (tabf @8313)

-- instance OEIS 8318 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @8318) !! (n - 1)
--   oeis = f [1] (singleton 1) where
--      f xs s =
--        m : f (m:xs) (foldl (flip insert) s' (map (+ m^2) (map (^ 2) xs)))
--        where (m,s') = deleteFindMin s

-- instance OEIS 8336 where
--   oeis = 1 : zipWith (/*) (oeis @8336) [1..] where
--       x /* y = if x `mod` y == 0 then x `div` y else x*y

-- instance OEIS 8344 where
--   oeis = 0 : f 0 [1..] where
--      f x (z:zs) = y : f y zs where y = if x < z then x + z else x - z

-- instance OEIS 8347 where
--   oeis = 0 : zipWith (-) (oeis @40) (oeis @8347)

-- instance OEIS 8364 where
--   oeis = 1 : filter ((> 7) . (oeisIx @20639)) [1..]

-- instance OEIS 8365 where
--   oeis = 1 : filter ((> 11) . (oeisIx @20639)) [1..]

-- instance OEIS 8438 where
--   oeisIx = (oeisIx @203) . (oeisIx @5408)

-- instance OEIS 8441 where
--   oeisIx = (flip div 2) . (+ 1) . (oeisIx @8441)

-- instance OEIS 8472 where
--   oeisIx = sum . (rowT @27748)

-- instance OEIS 8473 where
  -- oeisIx n = product $ zipWith (+) (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 8474 where
--   oeisIx n = sum $ zipWith (+) (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 8475 where
--   oeisIx 1 = 0
--   oeisIx n = sum $ (rowT @141809) n

-- instance OEIS 8477 where
--   oeisIx n = product $ zipWith (^) (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 8480 where
--   oeisIx n = foldl div (oeisIx $ sum es) (map (oeisIx @142) es)
--               where es = (rowT @124010) n

-- instance OEIS 8486 where
--   oeisIx 0 = 1; (oeisIx @8486) n = 3 * n
--   oeis = 1 : [3, 6 ..]

-- instance OEIS 8520 where
--   import Data.Text (Text); import qualified Data.Text as T (any)
--   import Text.Numeral.Grammar.Reified (defaultInflection)
--   import qualified Text.Numeral.Language.EN as EN
--   oeisIx n = (oeis @8520) !! (n - 1)
--   oeis = filter (T.any (== 'e') . numeral) [0..] where
--      numeral :: Integer -> Text
--      numeral = fromJust . EN.gb_cardinal defaultInflection

-- instance OEIS 8521 where
--   import Data.Text (Text); import qualified Data.Text as T (all)
--   import Text.Numeral.Grammar.Reified (defaultInflection)
--   import qualified Text.Numeral.Language.EN as EN
--   oeisIx n = (oeis @8521) !! (n - 1)
--   oeis = filter (T.all (/= 'o') . numeral) [0..] where
--      numeral :: Integer -> Text
--      numeral = fromJust . EN.gb_cardinal defaultInflection

-- instance OEIS 8523 where
--   import Data.Text (Text); import qualified Data.Text as T (all)
--   import Text.Numeral.Grammar.Reified (defaultInflection)
--   import qualified Text.Numeral.Language.EN as EN
--   oeisIx n = (oeis @8523) !! (n - 1)
--   oeis = filter (T.all (/= 't') . numeral) [0..] where
--      numeral :: Integer -> Text
--      numeral = fromJust . EN.gb_cardinal defaultInflection

-- instance OEIS 8544 where
--   oeis = scanl (*) 1 (oeis @16789)

-- instance OEIS 8545 where
--   oeis = scanl (*) 1 (oeis @4767)

-- instance OEIS 8557 where
--   oeis = iterate (oeisIx @7094) 8

-- instance OEIS 8574 where
--   oeisIx 0 = 1; (oeisIx @8574) n = 4 * n
--   oeis = 1 : [4, 8 ..]

-- instance OEIS 8578 where
--   oeis = 1 : (oeis @40)

-- instance OEIS 8579 where
--   oeisIx 0 = 1
--   oeisIx 1 = 4
--   oeisIx n = (10 - 2*m) * n' + 8*m - 2 where (n',m) = divMod n 2
--   oeis = 1 : 4 : concatMap (\x -> map (* 2) [5*x-1,4*x+3]) [1..]

-- instance OEIS 8585 where
--   oeisIx = (* 3)
--   oeis = iterate (+ 3) 0

-- instance OEIS 8586 where
--   oeisIx = (* 4)
--   oeis = [0, 4 ..]

-- instance OEIS 8588 where
--   oeisIx = (* 6)
--   oeis = [0, 6 ..]

-- instance OEIS 8589 where
--   oeisIx = (* 7)
--   oeis = [0, 7 ..]

instance OEIS 8590 where
  oeisIx = (* 8)
  oeis = [0,8..]

instance OEIS 8592 where
  oeisIx = (10 *)

-- instance OEIS 8593 where
--   oeisIx = (* 11)
--   oeis = [0, 11 ..]

-- instance OEIS 8594 where
--   oeisIx = (* 12)
--   oeis = [0, 12 ..]

-- instance OEIS 8597 where
--   oeisIx = (* 15)
--   oeis = [0, 15 ..]

-- instance OEIS 8611 where
--   oeisIx n = n' + mod r 2 where (n', r) = divMod (n + 1) 3
--   oeis = f [1,0,1] where f xs = xs ++ f (map (+ 1) xs)

instance OEIS 8615 where
  oeisIx n = n `div` 2 - n `div` 3

-- instance OEIS 8619 where
--   oeisIx = (+ 1) . (`div` 2)
--   oeis = concatMap (\x -> [x,x]) [1..]

instance OEIS 8620 where
  oeisIx = (+ 1) . (`div` 3)
  oeis   = concatMap (replicate 3) [1..]

instance OEIS 8683 where
  oeisIx = fi . mu . snd . unzip . factorise . fi . succ
    where
      mu [] = 1; mu (1:es) = - mu es; mu (_:es) = 0

-- instance OEIS 8684 where
--   oeis = concatMap (enumFromTo 1)
--                            [31,28,31,30,31,30,31,31,30,31,30,31]

-- instance OEIS 8685 where
--   oeis = concatMap t [1..] where
--      t y = [31, 28 + leap, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
--            where leap = if mod y 4 == 0 &&
--                            (mod y 100 > 0 || mod y 400 == 0) then 1 else 0

instance OEIS 8687 where
  oeis = 0 : 1 : c [1] where c (e:es) = e : c (es ++ [e+1,e])

-- instance OEIS 8776 where
--   oeisIx = (* 2) . (3 ^)
--   oeis = iterate (* 3) 2

-- instance OEIS 8784 where
--   import Data.List.Ordered (union)
--   oeisIx n = (oeis @8784) !! (n - 1)
--   oeis = 1 : 2 : union (oeis @4613) (map (* 2) (oeis @4613))

instance OEIS 8805 where
  oeisIx = (oeisIx @217) . (`div` 2) . (+ 2)
  oeis = drop 2 $ concat $ transpose [oeis @217, oeis @217]

-- instance OEIS 8810 where
--   oeisIx = ceiling . (/ 3) . fromInteger . (oeisIx @290)
--   oeis = [0,1,2,3,6] ++ zipWith5
--                  (\u v w x y -> 2 * u - v + w - 2 * x + y)
--      (drop 4 (oeis @8810)) (drop 3 (oeis @8810)) (drop 2 (oeis @8810))
--      (tail (oeis @8810)) (oeis @8810)

-- instance OEIS 8833 where
--   oeisIx n = head $ filter ((== 0) . (mod n)) $
--      reverse $ takeWhile (<= n) $ tail (oeis @290)

-- instance OEIS 8836 where
--   oeisIx = (1 -) . (* 2) . (oeisIx @66829)

-- instance OEIS 8846 where
--   oeis = filter f [1..] where
--      f n = all ((== 1) . (`mod` 4)) $ filter ((== 0) . (n `mod`)) [1..n]

-- instance OEIS 8847 where
--   oeis = filter ((== 1) . (oeisIx @10052) . (oeisIx @203) . (oeisIx @290)) [1..]

instance OEIS 8851 where
  oeis = [10*n + m | n <- [0..], m <- [0,1,5,6]]

instance OEIS 8859 where
  oeisIx = sum . take 7 . rowT @7318 . fi

instance OEIS 8860 where
  oeisIx = sum . take 8 . rowT @7318 . fi

instance OEIS 8861 where
  oeisIx = sum . take 9 . rowT @7318 . fi

instance OEIS 8862 where
  oeisIx = sum . take 10 .rowT @7318 . fi

instance OEIS 8863 where
  oeisIx = sum . take 11 .rowT @7318 . fi

-- instance OEIS 8864 where
--   oeisIx = (+ 1) . (oeisIx @40)

-- instance OEIS 8865 where
--   oeisIx = (subtract 2) . (^ 2) :: Integral t => t -> t
--   oeis = scanl (+) (-1) [3, 5 ..]

-- instance OEIS 8873 where
--   oeis = 97 : iterate (oeisIx @6370) 97

-- instance OEIS 8874 where
--   oeis = 63 : iterate (oeisIx @6370) 63

-- instance OEIS 8875 where
--   oeis = drop 2 (oeis @8874)

-- instance OEIS 8876 where
--   oeis = 81 : iterate (oeisIx @6370) 81

-- instance OEIS 8877 where
--   oeis = 57 : iterate (oeisIx @6370) 57

-- instance OEIS 8904 where
--   oeis = 1 : 1 : f 2 1 where
--      f n x = x' `mod` 10 : f (n+1) x' where
--         x' = g (n * x) where
--            g m | m `mod` 5 > 0 = m
--                | otherwise     = g (m `div` 10)

-- instance OEIS 8905 where
--   oeisIx = (oeisIx @30) . (oeisIx @142)

-- instance OEIS 8908 where
--   oeisIx = genericLength . (rowT @70165)

-- instance OEIS 8919 where
--   oeis = [x | x <- [1..],
--                       let (x',m) = divMod (oeisIx x) x, m == 0, x' > 1]

-- instance OEIS 8935 where
--   oeisIx = f 1 where
--      f k x | x == 0    = 0
--            | r == 0    = f (k+1) x'
--            | otherwise = k^2 + f (k+1) x' where (x',r) = divMod x 2

-- instance OEIS 8937 where
--   oeis = tail $ scanl1 (+) (oeis @73)

-- instance OEIS 8949 where
--   oeis = tablList @8949
-- instance Table 8949 where
--   rowT n = (tabl @8949) !! n
--   tabl = map (scanl1 (+)) (tabl @7318)

-- instance OEIS 8955 where
--   oeis = tablList @8955
-- instance Table 8955 where
--   rowT n = (tabl @8955) !! n
--   tabl = [1] : f [1] 1 1 where
--      f xs u t = ys : f ys v (t * v) where
--        ys = zipWith (+) (xs ++ [t^2]) ([0] ++ map (* u^2) (init xs) ++ [0])
--        v = u + 1

-- instance OEIS 8956 where
--   oeis = tablList @8956
-- instance Table 8956 where
--   rowT n = (tabl @8956) !! n
--   tabl = [1] : f [1] 1 1 where
--      f xs u t = ys : f ys v (t * v) where
--        ys = zipWith (+) (xs ++ [t^2]) ([0] ++ map (* u^2) (init xs) ++ [0])
--        v = u + 2

-- instance OEIS 8957 where
--   oeis = tablList @8957
-- instance Table 8957 where
--   rowCol = rowCol_off @8957 @1 @1
--   rowT   = rowT_off   @8957 @1
--   tabl = map reverse (tabl @36969)

instance OEIS 8963 where
  oeisIx = (oeisIx @30) . (oeisIx @45)

instance OEIS 8966 where
  oeisIx = abs . (oeisIx @8683)

-- instance OEIS 8975 where
--   oeis = tablList @8975
-- instance Table 8975 where
--   rowT n = (tabl @8975) !! n
--   tabl = iterate
--      (\row -> map (`mod` 10) $ zipWith (+) ([0] ++ row) (row ++ [0])) [1]

-- instance OEIS 8996 where
--   oeis = 1 : f 0 (filter (> 1) $
--                           map length $ group $ drop 3 (oeis @10051))
--      where f m (u : us) = if u <= m then f m us else u : f u us

-- instance OEIS 9003 where
--   oeisIx n = (oeis @9003) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (> 0) (oeis @5089)

-- instance OEIS 9023 where
--   oeis = filter ((> 1) . (oeisIx @227481)) [1..]

-- instance OEIS 9087 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (+ 1) . (oeisIx @100995)) (oeis @961)

-- instance OEIS 9191 where
--   oeisIx n = gcd n $ (oeisIx @5) n

-- instance OEIS 9194 where
--   oeisIx n = gcd (oeisIx n) n

-- instance OEIS 9195 where
--   oeisIx n = n `gcd` (oeisIx @10) n

-- instance OEIS 9223 where
--   oeisIx n = gcd (oeisIx n) (oeisIx n)

-- instance OEIS 9293 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @9293) !! (n - 1)
--   oeis = f [2] (singleton 2) where
--      f xs s = m : f xs' (foldl (flip insert) s' (map ((+ 1) . (* m)) xs'))
--        where xs' = m : xs
--              (m,s') = deleteFindMin s

-- instance OEIS 9299 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @9299) !! (n - 1)
--   oeis = f [2] (singleton 2) where
--      f xs s = m : f xs' (foldl (flip insert) s' (map ((+ 2) . (* m)) xs'))
--        where xs' = m : xs
--              (m,s') = deleteFindMin s

-- instance OEIS 9388 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @9388) !! (n - 1)
--   oeis = f [2] (singleton 2) where
--      f xs s = m : f xs' (foldl (flip insert) s' (map (pred . (* m)) xs'))
--        where xs' = m : xs
--              (m,s') = deleteFindMin s

-- instance OEIS 9445 where
--   oeisIx n = product [1..2*n+1]
--   T = taylor (sin (x^2), x, 0, 70)

-- instance OEIS 9766 where
--   oeis = tablList @9766
-- instance Table 9766 where
--   rowT n = (tabl @9766) !! n
--   tabl = iterate (\row -> scanl1 (+) (row ++ [0])) [1]

instance OEIS 9947 where
  oeis = concatMap (\x -> [2 * x, x, 2 * x + 1]) [0..]

-- instance OEIS 9994 where
--   import Data.Set (fromList, deleteFindMin, insert)
--   oeisIx n = (oeis @9994) !! n
--   oeis = 0 : f (fromList [1..9]) where
--      f s = m : f (foldl (flip insert) s' $ map (10*m +) [m `mod` 10 ..9])
--            where (m,s') = deleteFindMin s

-- instance OEIS 9995 where
--   import Data.Set (fromList, minView, insert)
--   oeisIx n = (oeis @9995) !! n
--   oeis = 0 : f (fromList [1..9]) where
--      f s = case minView s of
--            Nothing     -> []
--            Just (m,s') -> m : f (foldl (flip insert) s' $
--                                 map (10*m +) [0..m `mod` 10 - 1])

-- instance OEIS 9998 where
--   oeis = tablList @9998
--   rowCol n k = (k + 1) ^ (n - k)
--   rowT n = (tabl @9998) !! n
--   tabl = map reverse (tabl @9999)

-- instance OEIS 9999 where
--   oeis = tablList @9999
--   rowCol n k = (n + 1 - k) ^ k
--   rowT n = (tabl @9999) !! n
--   tabl = [1] : map snd (iterate f ([1,1], [1,1])) where
--      f (us@ (u:_), vs) = (us', 1 : zipWith (*) us' vs)
--                         where us' = (u + 1) : us

-- instance OEIS 10049 where
--   oeis = uncurry c $ splitAt 1 (oeis @45) where
--      c us (v:vs) = (sum $ zipWith (*) us (1 : reverse us)) : c (v:us) vs

instance OEIS 10051 where
  oeis = unfoldr ch (1, (oeis @40)) where
     ch (i, ps'@ (p:ps))
       = Just (fi $ fromEnum (i == p), (i + 1, if i == p then ps else ps'))

instance OEIS 10052 where
  oeis     = concat (iterate (\xs -> xs ++ [0,0]) [1])
  oeisIx n = fi . fromEnum $ oeisIx @196 n ^ 2 == n

-- instance OEIS 10052 where
--   oeisIx n = fromEnum $ (oeisIx @196) n ^ 2 == n
--   oeis = concat (iterate (\xs -> xs ++ [0,0]) [1])

-- instance OEIS 10054 where
--   oeisIx = (oeisIx @10052) . (+ 1) . (* 8)
--   oeis = concatMap (\x -> 1 : replicate x 0) [0..]

-- instance OEIS 10055 where
--   oeisIx n = if (oeisIx @1221) n <= 1 then 1 else 0

-- instance OEIS 10056 where
--   oeisIx = genericIndex (oeis @10056)
--   oeis = 1 : 1 : ch [2..] (drop 3 (oeis @45)) where
--      ch (x:xs) fs'@ (f:fs) = if x == f then 1 : ch xs fs else 0 : ch xs fs'

-- instance OEIS 10057 where
--   oeisIx 0 = 1
--   oeisIx n = fromEnum $ all ((== 0) . (`mod` 3)) $ (rowT @124010) n
--   oeis = concatMap (\x -> 1 : replicate (oeisIx x - 1) 0) [0..]

instance OEIS 10060 where
  oeis =
     0 : interleave (complement (oeis @10060)) (tail (oeis @10060))
     where complement = map (1 - )
           interleave (x:xs) ys = x : interleave ys xs

-- instance OEIS 10061 where
--   oeis = filter ((== 0) . (oeisIx @228085)) [1..]

-- instance OEIS 10062 where
--   oeis = iterate (oeisIx @92391) 1

-- instance OEIS 10065 where
--   oeis = iterate (oeisIx @230631) 1

-- instance OEIS 10078 where
--   oeisIx = x . subtract 1 where
--      x m = if m == 0 then 1 else 2 * x m' + 1 - b
--               where (m',b) = divMod m 2

-- instance OEIS 10096 where
--   oeisIx = genericLength . takeWhile (/= 0) . iterate (oeisIx @523)

-- instance OEIS 10120 where
--   oeisIx = (oeisIx @70167) . (oeisIx @79)

-- instance OEIS 10330 where
--   oeisIx = (+ 2) . (oeisIx @2311)

-- instance OEIS 10371 where
--   oeis = [6,2,5,5,4,5,6,4,7,6] ++ f 10 where
--      f x = (oeisIx x' + (oeisIx @10371) d) : f (x + 1)
--            where (x',d) = divMod x 10

-- instance OEIS 10551 where
--   oeis = scanl (*) 1 (oeis @8619)

-- instance OEIS 10554 where
--   oeisIx = (oeisIx @10) . (oeisIx @10)

-- instance OEIS 10683 where
--   oeisIx = sum . (rowT @144944)

-- instance OEIS 10693 where
--   oeisIx = (+ 2) . (`mod` 2)
--   oeis = cycle [2,3]

-- instance OEIS 10701 where
--   oeisIx = const 3
--   oeis = repeat 3

-- instance OEIS 10702 where
--   oeisIx = (+ 3) . (`mod` 2)
--   oeis = cycle [3,4]

-- instance OEIS 10704 where
--   oeisIx n = (* 3) . (oeisIx @34)
--   oeis = cycle [3,6]

-- instance OEIS 10712 where
--   oeisIx = (+ 3) . (4 ^) . flip mod 2
--   oeis = cycle [4, 7]

-- instance OEIS 10766 where
--   oeisIx = div
--   oeisIx_row n = (tabl @10766) !! (n - 1)
--   oeisIx_tabl = zipWith (map . div) [1..] (tabl @2260)

-- instance OEIS 10783 where
--   oeis = tablList @10783
-- instance Table 10783 where
--   rowCol n k = (n + 1 - k) `div` k
--   rowT   = rowT_off   @10783 @1
--   tabl = map reverse (tabl @10766)

-- instance OEIS 10784 where
--   oeis = filter ((== 1) . (oeisIx @178788)) [1..]

-- instance OEIS 10785 where
--   oeis = 0 : r [1..9] where
--      r (x:xs) = x : r (xs ++ [10*x + x `mod` 10])

instance OEIS 10786 where
  oeisIx (succ->n) = product $ map (div n) [1..n]

instance OEIS 10807 where
  oeisIx = (^ 19)

-- instance OEIS 10872 where
--   oeisIx = (`mod` 3)
--   oeis = cycle [0,1,2]

-- instance OEIS 10873 where
--   oeisIx n = (`mod` 4)
--   oeis = cycle [0..3]

-- instance OEIS 10878 where
--   oeisIx = (`mod` 9)
--   oeis = cycle [0..8]

-- instance OEIS 10879 where
--   oeisIx = (`mod` 10)
--   oeis = cycle [0..9]

-- instance OEIS 10882 where
--   oeisIx = (+ 1) . (`mod` 3)
--   oeis = cycle [1,2,3]

-- instance OEIS 10887 where
--   oeisIx = (+ 1) . flip mod 8
--   oeis = cycle [1..8]

instance OEIS 10888 where
  oeisIx = until (< 10) (oeisIx @7953)

instance OEIS 11199 where
  oeisIx n = product $ map ((+ 1) . (* n)) [1, 2, 3]

-- instance OEIS 11262 where
--   oeisIx n = product $ zipWith (^)
--                         (oeisIx_row n) (map (oeisIx @103889) $ (rowT @124010) n)

-- instance OEIS 11264 where
--   oeisIx n = product $ zipWith (^)
--                         (oeisIx_row n) (map (oeisIx @4442) $ (rowT @124010) n)

instance OEIS 11371 where
  oeisIx n = n - (oeisIx @120) n

-- instance OEIS 11379 where
--   oeisIx n = (oeisIx @290) n + (oeisIx @578) n

instance OEIS 11531 where
  oeis = filter ((elem '1') . show . fi) [0..]

instance OEIS 11532 where
  oeis = filter ((elem '2') . show . fi) [0..]

instance OEIS 11533 where
  oeis = filter ((elem '3') . show . fi) [0..]

-- instance OEIS 11539 where
--   oeis = filter ((> 0) . (oeisIx @102683)) [1..]

-- instance OEIS 11540 where
--   oeis = filter ((== 0) . (oeisIx @168046)) [0..]

instance OEIS 11557 where
  oeisIx = (10 ^)
  oeis   = iterate (* 10) 1

-- instance OEIS 11655 where
--   oeisIx = fromEnum . ((/= 0) . (`mod` 3))
--   oeis = cycle [0,1,1]

-- instance OEIS 11754 where
--   oeisIx = (oeisIx @120) . (oeisIx @244)

-- instance OEIS 11756 where
--   oeis = map (oeisIx @40) $ tail (oeis @217)

-- instance OEIS 11769 where
--   oeis = 1 : zipWith (-) (map (* 3) (oeis @11769)) (oeis @59727)

instance OEIS 11772 where
  oeisIx (succ->n) = fi . (+ 1) $ fromJust $
     findIndex ((== 0) . (`mod` n)) $ tail (oeis @217)

-- instance OEIS 11773 where
--   oeisIx n = foldl lcm 1 $ map (oeisIx . (oeisIx @95874)) $
--                             zipWith (^) (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 11776 where
--   oeisIx 1 = 1
--   oeisIx n = genericLength $
--      takeWhile ((== 0) . (mod (oeisIx n))) $ iterate (* n) n

-- instance OEIS 11782 where
--   oeis = 1 : scanl1 (+) (oeis @11782)

-- instance OEIS 11784 where
--   oeisIx = last . (rowT @12257)

instance OEIS 11848 where
  oeisIx (fi->n) = if n < 2 then 0 else flip div 2 $ rowCol @7318 n 2

-- instance OEIS 11971 where
--   oeis = tablList @11971
-- instance Table 11971 where
--   rowT n = (tabl @11971) !! n
--   tabl = iterate (\row -> scanl (+) (last row) row) [1]

-- instance OEIS 11973 where
--   oeis = tablList @11973
-- instance Table 11973 where
--   rowCol n k = (tabf @11973) !! n !! k
--   rowT n = (tabf @11973) !! n
--   tabf = zipWith (zipWith (oeisIx @7318)) (tabl @25581) (tabf @55087)

-- instance OEIS 12257 where
--   oeis = tablList @12257
-- instance Table 12257 where
--   rowCol n k = (tabf @12257) !! (n - 1) !! (k-1)
--   rowT n = (tabf @12257) !! (n - 1)
--   tabf = iterate (\row -> concat $
--                           zipWith replicate (reverse row) [1..]) [1, 1]

instance OEIS 13589 where
  oeis = iterate (oeisIx @217) 4

-- instance OEIS 13609 where
--   oeis = concat $ iterate ([1,2] *) [1]
--   instance Num a => Num [a] where
--      fromInteger k = [fromInteger k]
--      (p:ps) + (q:qs) = p + q : ps + qs
--      ps + qs         = ps ++ qs
--      (p:ps) * qs'@ (q:qs) = p * q : ps * qs' + [p] * qs
--      _ * _               = []

-- instance OEIS 13610 where
--   oeis = tablList @13610
-- instance Table 13610 where
--   rowT n = (tabl @13610) !! n
--   tabl = iterate (\row ->
--      zipWith (+) (map (* 1) (row ++ [0])) (map (* 3) ([0] ++ row))) [1]

-- instance OEIS 13613 where
--   oeis = tablList @13613
-- instance Table 13613 where
--   rowT n = (tabl @13613) !! n
--   tabl = zipWith (zipWith (*))
--                  (tail $ inits (oeis @400)) (tabl @7318)

-- instance OEIS 13620 where
--   oeis = tablList @13620
-- instance Table 13620 where
--   rowT n = (tabl @13620) !! n
--   tabl = iterate (\row ->
--      zipWith (+) (map (* 2) (row ++ [0])) (map (* 3) ([0] ++ row))) [1]

-- instance OEIS 13638 where
--   oeisIx n = (oeisIx @151799) n * (oeisIx @151800) n

-- instance OEIS 13918 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @7504)

-- instance OEIS 13928 where
--   oeis = scanl (+) 0 $ map (oeisIx @8966) [1..]

instance OEIS 13929 where
  oeis = map (fi . (+1)) $ filter ((== 0) . (oeisIx @8966)) [1..]

-- instance OEIS 13939 where
--   oeis = scanl1 (+) $ map (oeisIx @1221) [1..]

-- instance OEIS 13942 where
--   oeis = tablList @13942
-- instance Table 13942 where
--   rowCol n k = (tabf @13942) !! (n - 1) !! (k-1)
--   rowT n = map (div (n * 2)) [1 .. 2 * n]
--   tabf = map (rowT @13942) [1 ..]

-- instance OEIS 13979 where
--   oeis = 1 : 0 : 1 : 1 : zipWith (+) (oeis @13979)
--      (zipWith (+) (tail (oeis @13979)) (drop 2 (oeis @13979)))

-- instance OEIS 14011 where
--   oeis = 1 : f 2 [1] where
--      f u vs = w : f (u + 1) (w : vs) where
--        w = maximum $ zipWith (*) [u, u-1 ..] $ map (u -) vs

-- instance OEIS 14076 where
--   oeis = filter ((== 0) . (oeisIx @10051)) (oeis @5408)

-- instance OEIS 14081 where
--   oeisIx n = (oeisIx @120) (n .&. div n 2)

-- instance OEIS 14082 where
--   oeisIx = sum . map (fromEnum . ([1,1,1] `isPrefixOf`)) .
--                       tails . (rowT @30308)

-- instance OEIS 14085 where
--   oeisIx n = sum $ map (oeisIx @10051) [n^2.. (n+1)^2]

-- instance OEIS 14091 where
--   oeis = filter (\x -> any ((== 1) . (oeisIx @10051)) $
--                         map (x -) $ takeWhile (< x) (oeis @40)) [1..]

-- instance OEIS 14092 where
--   oeis = filter (\x ->
--      all ((== 0) . (oeisIx @10051)) $ map (x -) $ takeWhile (< x) (oeis @40)) [1..]

-- instance OEIS 14105 where
--   oeisIx n = n * (2 * n + 1)
--   oeis = scanl (+) 0 (oeis @4767)

-- instance OEIS 14113 where
--   oeis = 0 : 2 : zipWith (+)
--                          (map (* 2) (oeis @14113)) (tail (oeis @14113))

-- instance OEIS 14118 where
--   oeis = iterate (oeisIx . (+ 1)) 2

-- instance OEIS 14132 where
--   oeisIx n = n + round (sqrt $ 2 * fromInteger n)
--   oeis = filter ((== 0) . (oeisIx @10054)) [0..]

-- instance OEIS 14138 where
--   oeis = scanl1 (+) (oeis @108)

-- instance OEIS 14148 where
--   oeis = (iterate (scanl1 (+)) (oeis @40)) !! 2

-- instance OEIS 14150 where
--   oeis = (iterate (scanl1 (+)) (oeis @40)) !! 3

-- instance OEIS 14217 where
--   oeis = 1 : 1 : zipWith (+)
--      (oeis @35) (zipWith (+) (oeis @14217) $ tail (oeis @14217))

-- instance OEIS 14237 where
--   oeisIx n = (oeisIx @40) n - (oeisIx @18252) n

instance OEIS 14261 where
  oeis = filter (all (`elem` "13579") . show . fi) [1,3..]

instance OEIS 14263 where
  oeis = filter (all (`elem` "02468") . show . fi) [0,2..]

-- instance OEIS 14284 where
--   oeis = scanl1 (+) (oeis @8578)

-- instance OEIS 14311 where
--   oeis = [2^x + 2^y + 2^z |
--                   x <- [2..], y <- [1..x-1], z <- [0..y-1]]

-- instance OEIS 14313 where
--   oeisIx = f . (oeisIx @38447) where
--      f x = if x == 0 then 0 else 2 * f x' + b  where (x', b) = divMod x 10

-- instance OEIS 14320 where
--   oeisIx n = (oeis @14320) !! (n - 1)
--   oeis = nub $ (oeis @1223)

-- instance OEIS 14342 where
--   oeis= f (tail (oeis @40)) [head (oeis @40)] 1 where
--      f (p:ps) qs k = sum (zipWith (*) qs $ reverse qs) :
--                      f ps (p : qs) (k + 1)

-- instance OEIS 14410 where
--   oeis = tablList @14410
-- instance Table 14410 where
--   rowCol = rowCol_off @14410 @2 @1
--   rowT = rowT_off @14410 @2
--   tabl = map (init . tail) $ drop 2 (tabl @7318)

-- instance OEIS 14413 where
--   oeis = tablList @14413
-- instance Table 14413 where
--   rowCol n k = (tabf @14413) !! (n - 1) !! (k-1)
--   rowT n = (tabf @14413) !! (n - 1)
--   tabf = [1] : f 1 [1] where
--      f 0 us'@ (_:us) = ys : f 1 ys where
--                       ys = zipWith (+) us' (us ++ [0])
--      f 1 vs@ (v:_) = ys' : f 0 ys where
--                     ys@ (_:ys') = zipWith (+) (vs ++ [0]) ([v] ++ vs)

-- instance OEIS 14417 where
--   oeisIx 0 = 0
--   oeisIx n = foldl (\v z -> v * 10 + z) 0 $ (rowT @189920) n

-- instance OEIS 14430 where
--   oeis = tablList @14430
-- instance Table 14430 where
--   rowT n = (tabl @14430) !! n
--   tabl = map (init . tail) $ drop 2 (tabl @14473)

-- instance OEIS 14454 where
--   oeisIx n = sum $ zipWith gcd kfs $ map (div nf) kfs
--      where (nf:kfs) = reverse $ (rowT @166350) n

-- instance OEIS 14462 where
--   oeis = tablList @14462
-- instance Table 14462 where
--   rowCol n k = (tabf @14462) !! (n - 1) !! (k-1)
--   rowT n = (tabf @14462) !! (n - 1)
--   tabf = map reverse (tabf @14413)

-- instance OEIS 14473 where
--   oeis = tablList @14473
-- instance Table 14473 where
--   rowT n = (tabl @14473) !! n
--   tabl = map (map (subtract 1)) (tabl @7318)

-- instance OEIS 14480 where
--   oeis = 1 : 6 : map (* 4)
--      (zipWith (-) (tail (oeis @14480)) (oeis @14480))

-- instance OEIS 14481 where
--   oeisIx n = (oeisIx @9445) n `div` (oeisIx @1147) n

instance OEIS 14499 where
  oeisIx = (oeisIx @120) . (oeisIx @40)

-- instance OEIS 14551 where
--   oeisIx n = (oeisIx @79) n + (oeisIx @33999) n
--   oeis = map fst $ iterate (\ (x,s) -> (2 * x - 3 * s, -s)) (2, 1)

-- instance OEIS 14563 where
--   oeisIx n = (oeis @14563) !! n
--   oeis = 1 : f 1 (drop 2 (oeis @290)) where
--      f x (q:qs) | null $ xs \\ (show q) = y : f y qs
--                 | otherwise             = f x qs
--                 where y = (oeisIx @196) q; xs = show (x * x)

-- instance OEIS 14567 where
--   oeis = filter ((== 1) . (oeisIx @9194)) [1..]

-- instance OEIS 14574 where
--   oeis = [x | x <- [2,4..], (oeisIx @10051) (x-1) == 1, (oeisIx @10051) (x+1) == 1]

-- instance OEIS 14597 where
--   oeisIx n = (oeis @14597) !! (n - 1)
--   oeis = tail $ elemIndices 1 $ map (oeisIx @197183) [0..]

instance OEIS 14601 where
  oeis = [x | x <- [0..], mod x 4 `elem` [0, 3]]

instance OEIS 14616 where
  oeisIx (succ->n) = (n * (n + 6) + 1) `div` 4

-- instance OEIS 14631 where
--   oeisIx n = (oeis @14631) !! (n - 1)
--   oeis = 1 : (nub $ concatMap tail (tabf @34868))

-- instance OEIS 14657 where
--   oeisIx n = (oeis @14657) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (> 0) $ map (oeisIx @195470) [1..]

-- instance OEIS 14661 where
--   oeisIx n = (oeis @14661) !! (n - 1)
--   oeis = 2 : map (+ 1) (elemIndices 0 $ map (oeisIx @195470) [1..])

-- instance OEIS 14682 where
--   oeisIx n = if r > 0 then div (3 * n + 1) 2 else n'
--               where (n', r) = divMod n 2

-- instance OEIS 14683 where
--   oeisIx n = n + (oeisIx @10051)' n

-- instance OEIS 14684 where
--   oeisIx n = n - fi (oeisIx n)

-- instance OEIS 14688 where
--   oeis = zipWith (+) [1..] (oeis @40)

-- instance OEIS 14689 where
--   oeisIx n = (oeisIx @40) n - fi n

-- instance OEIS 14701 where
--   oeisIx 1 = 0
--   oeisIx n = (oeisIx @7953) $ (oeisIx @7931) (n - 1)

-- instance OEIS 14707 where
--   oeis = f 0 $ cycle [0,0,1,0] where
--      f i (x:_:xs) = x : (oeisIx @14707) i : f (i+1) xs

-- instance OEIS 14963 where
--   oeisIx 1 = 1
--   oeisIx n | until ((> 0) . (`mod` spf)) (`div` spf) n == 1 = spf
--             | otherwise = 1
--             where spf = (oeisIx @20639) n

-- instance OEIS 14980 where
--   oeis = iterate (oeisIx @2620) 5

-- instance OEIS 15614 where
--   oeisIx = (subtract 1) . (oeisIx @2088)

-- instance OEIS 15632 where
--   oeisIx n = genericLength [ (x,y,z) | z <- [1..n], y <- [1..z], gcd y z == 1,
--                                 x <- [1..y], gcd x z == 1, gcd x y == 1]

-- instance OEIS 15633 where
--   oeisIx n = genericLength [ (x,y,z) | x <- [2..n], y <- [x..n], z <- [y..n],
--                                 gcd (gcd x y) z == 1]

-- instance OEIS 15910 where
--   import Math.NumberTheory.Moduli (powerMod)
--   oeisIx n = powerMod 2 n n

-- instance OEIS 15976 where
--   oeis = filter ((== 1) . (oeisIx @136522) . (oeisIx @56964)) [1..]

-- instance OEIS 16035 where
--   oeisIx 1 = 0
--   oeisIx n = sum $ map (oeisIx @10) $ init $ tail $ (rowT @27750) n

-- instance OEIS 16052 where
--   oeis = iterate (oeisIx @62028) 3

-- instance OEIS 16067 where
--   oeisIx n = (oeis @16067) !! (n - 1)
--   oeis = (map (+ 1) $ findIndices (> 1) $
--      zipWith (-) (tail rs) rs where rs = scanl max 0 (oeis @46920)

-- instance OEIS 16069 where
--   oeisIx n = (oeis @16069) !! (n - 1)
--   oeis = filter ((== 2) . length . nub . show . (^ 2)) [0..]

-- instance OEIS 16096 where
--   oeis = iterate (oeisIx @62028) 9

-- instance OEIS 16105 where
--   import Data.Set (singleton, fromList, deleteFindMin, union)
--   oeisIx n = (oeis @16105) !! (n - 1)
--   oeis = f [3,7] (drop 2 (oeis @2145)) 21 (singleton 21) where
--      f qs (p:p':ps) t s
--        | m < t     = m : f qs (p:p':ps) t s'
--        | otherwise = m : f (p:qs) (p':ps) t' (s' `union` (fromList pqs))
--        where (m,s') = deleteFindMin s
--              t' = head $ dropWhile (> 3*p') pqs
--              pqs = map (p *) qs

instance OEIS 16125 where
  oeis = iterate ((+ 1) . (* 12)) 1

-- instance OEIS 16189 where
--   oeisIx n = 10 ^ n - 9 ^ n
--   oeis = 0 : zipWith (+) (map (* 9) (oeis @16189)) (oeis @11557)

-- instance OEIS 16726 where
--   oeis = [1,2,6,9] ++ (f 5 $ drop 4 (oeis @1751)) where
--      f n qs'@ (q:qs) | q < 2*n   = f n qs
--                     | otherwise = q : f (n+1) qs'

-- instance OEIS 16742 where
--   oeisIx = (* 4) . (^ 2)
--   oeis = 0 : map (subtract 4) (zipWith (+) (oeis @16742) [8, 16 ..])

instance OEIS 16754 where
  oeis = scanl (+) 1 $ tail (oeis @8590)

instance OEIS 16777 where
  oeisIx = (+ 1) . (* 3)
  oeis = [1, 4 ..]

instance OEIS 16789 where
  oeisIx = (+ 2) . (* 3)

instance OEIS 16813 where
  oeisIx = (+ 1) . (* 4)
  oeis = [1, 5 ..]

instance OEIS 16825 where
  oeisIx = (+ 2) . (* 4)
  oeis = [2, 6 ..]

instance OEIS 16861 where
  oeisIx = (+ 1) . (* 5)
  oeis = [1, 6 ..]

instance OEIS 16921 where
  oeisIx = (+ 1) . (* 6)
  oeis = [1, 7 ..]

instance OEIS 16933 where
  oeisIx = (+ 2) . (* 6)

instance OEIS 16945 where
  oeisIx = (+ 3) . (* 6)
  oeis = [3, 9 ..]

instance OEIS 16957 where
  oeisIx = (+ 4) . (* 6)

instance OEIS 16993 where
  oeisIx = (+ 1) . (* 7)
  oeis = [1, 8 ..]

instance OEIS 17077 where
  oeisIx = (+ 1) . (* 8)
  oeis = [1, 9 ..]

instance OEIS 17089 where
  oeisIx = (+ 2) . (* 8)
  oeis = [2, 10 ..]

instance OEIS 17113 where
  oeisIx = (+ 4) . (* 8)
  oeis = [4, 12 ..]

instance OEIS 17137 where
  oeisIx = (+ 6) . (* 8)

instance OEIS 17173 where
  oeisIx = (+ 1) . (* 9)
  oeis = [1, 10 ..]

instance OEIS 17197 where
  oeisIx = (+ 3) . (* 9)
  oeis = [3, 12 ..]

instance OEIS 17257 where
  oeisIx = (+ 8) . (* 9)
  oeis = 8 : map (+ 9) (oeis @17257)

instance OEIS 17281 where
  oeisIx = (+ 1) . (* 10)
  oeis = [1,11..]

instance OEIS 17329 where
  oeisIx = (+ 5) . (* 10)
  oeis = [5, 15 ..]

instance OEIS 17557 where
  oeisIx = (+ 3) . (* 12)

instance OEIS 17569 where
  oeisIx = (+ 4) . (* 12)

instance OEIS 17581 where
  oeisIx = (+ 5) . (* 12)

instance OEIS 17617 where
  oeisIx = (+ 8) . (* 12)

instance OEIS 17629 where
  oeisIx = (+ 9) . (* 12)

instance OEIS 17653 where
  oeisIx = (+ 11) . (* 12)

-- instance OEIS 17665 where
--   oeisIx = numerator . sum . map (1 %) . (rowT @27750)

-- instance OEIS 17666 where
--   oeisIx = denominator . sum . map (1 %) . (rowT @27750)

-- instance OEIS 18194 where
--   oeisIx n = 1 + length (takeWhile (/= 0) $ zipWith (-) ks $ tail ks)
--      where ks = iterate (oeisIx @2034) n

-- instance OEIS 18252 where
--   oeis = filter ((== 0) . (oeisIx @10051)) [1..]

-- instance OEIS 18800 where
--   oeisIx n = read $ fromJust $
--               find (show n `isPrefixOf`) $ map show (oeis @40) :: Int

instance OEIS 18804 where
  oeisIx (succ->n) = sum $ map (gcd n) [1..n]

instance OEIS 18805 where
  oeisIx (succ->n) = genericLength [ ()| x <- [1..n], y <- [1..n], gcd x y == 1]

-- instance OEIS 18818 where
--   oeisIx n = p (init $ (rowT @27750) n) n + 1 where
--      p _      0 = 1
--      p []     _ = 0
--      p ks'@ (k:ks) m | m < k     = 0
--                     | otherwise = p ks' (m - k) + p ks m

-- instance OEIS 18819 where
--   oeis = 1 : f (tail (oeis @8619)) where
--      f (x:xs) = (sum $ take x (oeis @18819)) : f xs

-- instance OEIS 18825 where
--   oeisIx n = (oeis @18825) !! (n - 1)
--   oeis = tail $ elemIndices 0 (oeis @25426)

-- instance OEIS 18834 where
--   oeisIx n = (oeis @18834) !! (n - 1)
--   oeis = filter (\x -> show x `isInfixOf` show (x^2)) [0..]

-- instance OEIS 18856 where
--   oeisIx n =
--      fromJust $ findIndex (show n `isPrefixOf`) $ map show (oeis @79)

instance OEIS 18892 where
  oeisIx (succ->n) = genericLength [d | d <- [1..n], n^2 `mod` d == 0]

-- instance OEIS 18896 where
--   oeis = replicate 8 1 ++ f 8 where
--      f x = ((oeisIx (x - 1) * (oeisIx @18896) (x - 7) + (oeisIx @18896) (x - 4) ^ 2)
--            `div` (oeisIx @18896) (x - 8)) : f (x + 1)

-- instance OEIS 18900 where
--   oeis = elemIndices 2 (oeis @73267)

-- instance OEIS 19268 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @19269))

-- instance OEIS 19269 where
--   oeisIx n = snd $ until ((== 1) . (oeisIx @65333) . fst)
--                           (\ (x, i) -> (oeisIx x, i+1)) (n, 0)

-- instance OEIS 19294 where
--   oeisIx n = snd $ until ((== 0) . (`mod` n) . fst)
--                           (\ (x, i) -> (oeisIx x, i + 1)) (oeisIx n, 1)

-- instance OEIS 19302 where
--   oeisIx = sum . zipWith (*) (oeis @10060) . rowT @7318

-- instance OEIS 19312 where
--   oeisIx = t . enumFromTo 1 where
--      t xs = foldl max 0 [z + t (xs \\ ds) | z <- xs,
--                let ds = (rowT @27750) z, not $ null $ intersect xs $ init ds]

-- instance OEIS 19446 where
--   oeis = 1 : zipWith (-) [3..] (map (oeisIx @19446) (oeis @19446))

-- instance OEIS 19464 where
--   oeis = 1 : concat (unfoldr ma (1, [1, 1])) where
--      ma (x, [_, j]) = Just (ij', (x + 1, ij')) where ij' = [x * j, x * j + x]

-- instance OEIS 19506 where
--   oeis = [x | x <- (oeis @2808),
--                       oeisIx x == sum (map (oeisIx @7953) (oeisIx_row x))]

-- instance OEIS 19518 where
--   oeis = map read $ scanl1 (++) $ map show (oeis @40) :: [Integer]

-- instance OEIS 19521 where
--   oeis = f "" $ tail (oeis @290) where
--      f xs (q:qs) = (read ys :: Integer) : f ys qs
--        where ys = xs ++ show q

-- instance OEIS 19523 where
--   oeisIx n = read $ concatMap show $ take n $ tail (oeis @45) :: Integer

-- instance OEIS 19538 where
--   oeis = tablList @19538
-- instance Table 19538 where
--   rowCol = rowCol_off @19538 @1 @1
--   rowT   = rowT_off   @19538 @1
--   tabl = iterate f [1] where
--      f xs = zipWith (*) [1..] $ zipWith (+) ([0] ++ xs) (xs ++ [0])

-- instance OEIS 19546 where
--   oeis = filter (all (`elem` "2357") . show )
--                         ([2,3,5] ++ (drop 2 (oeis @3631)))
--   oeis = filter ((== 1) . (oeisIx @10051)) $
--                         [2,3,5,7] ++ h ["3","7"] where
--      h xs = (map read xs') ++ h xs' where
--        xs' = concat $ map (f xs) "2357"
--        f xs d = map (d :) xs

-- instance OEIS 19554 where
--   oeisIx n = product $ zipWith (^)
--               (oeisIx_row n) (map ((`div` 2) . (+ 1)) $ (rowT @124010) n)

-- instance OEIS 19565 where
--   oeisIx n = product $ zipWith (^) (oeis @40) (oeisIx_row n)

-- instance OEIS 19587 where
--   oeisIx n = genericLength $ filter (<= nTau) $
--               map (snd . properFraction . (* tau) . fromInteger) [1..n]
--      where (_, nTau) = properFraction (tau * fromInteger n)
--            tau = (1 + sqrt 5) / 2

-- instance OEIS 19588 where
--   oeisIx n = genericLength $ filter (nTau <=) $
--               map (snd . properFraction . (* tau) . fromInteger) [1..n]
--      where (_, nTau) = properFraction (tau * fromInteger n)
--            tau = (1 + sqrt 5) / 2

-- instance OEIS 20330 where
--   oeisIx n = foldr (\d v -> 2 * v + d) 0 (bs ++ bs) where
--      bs = (rowT @30308) n

instance OEIS 20338 where
  oeisIx (succ->n) = fi (read (ns ++ ns) :: Integer) where ns = show $ fi n

-- instance OEIS 20474 where
--   oeis = tablList @20474
-- instance Table 20474 where
--   rowCol = rowCol_off @20474 @2 @2
--   rowT = rowT_off @20474 @2
--   tabl = map fst $ iterate f ([1], [0,1]) where
--      f (us,vs) = (vs, scanl (+) 0 ws) where
--        ws = zipWith (+) (us ++ [0]) vs

-- instance OEIS 20475 where
--   oeis = 0 : map (sum . map (0 ^)) (tail (tabl @53200))

-- instance OEIS 20481 where
--   oeisIx n = head [p | p <- (oeis @40), (oeisIx @10051)' (2 * n - p) == 1]

-- instance OEIS 20482 where
--   oeisIx = last . (rowT @171637)

-- instance OEIS 20483 where
--   oeisIx n = head [p | p <- (oeis @40), (oeisIx @10051)' (p + 2 * n) == 1]

-- instance OEIS 20484 where
--   oeisIx n = head [q | p <- (oeis @40), let q = p + 2*n, (oeisIx @10051)' q == 1]

-- instance OEIS 20486 where
--   oeis = filter (\x -> (oeisIx @1157) x `mod` (oeisIx @5) x == 0) [1..]

-- instance OEIS 20487 where
--   oeis = filter (\x -> (oeisIx @1157) x `mod` (oeisIx @203) x == 0) [1..]

-- instance OEIS 20522 where
--   oeisIx = (* 2) . (oeisIx @6516)

instance OEIS 20639 where
  oeisIx (succ->n) = spf primes where
    spf (p:ps) | n < p^2      = n
               | mod n p == 0 = p
               | otherwise    = spf ps

-- instance OEIS 20639 where
--   oeisIx n = spf (oeis @40) where
--     spf (p:ps) | n < p^2      = n
--                | mod n p == 0 = p
--                | otherwise    = spf ps

-- instance OEIS 20650 where
--   oeis = map numerator ks where
--      ks = 1 : concat (transpose [map (+ 1) ks, map (recip . (+ 1)) ks])

-- instance OEIS 20651 where
--   oeis = map denominator ks where
--      ks = 1 : concat (transpose [map (+ 1) ks, map (recip . (+ 1)) ks])

instance OEIS 20652 where
  oeis = map fst [ (u,v) | v <- [1..], u <- [1..v - 1], gcd u v == 1]

-- instance OEIS 20653 where
--   oeis = concat $ map reverse $ tail (tabf @38566)

-- instance OEIS 20696 where
--   oeisIx = product . map (+ 1) . (rowT @27750)'

-- instance OEIS 20756 where
--   oeis = filter ((> 0) . (oeisIx @52343)) [0..]

-- instance OEIS 20757 where
--   oeis = filter ((== 0) . (oeisIx @52343)) [0..]

-- instance OEIS 20884 where
--   oeis = f 1 1 where
--      f u v | v > uu `div` 2        = f (u + 1) (u + 2)
--            | gcd u v > 1 || w == 0 = f u (v + 2)
--            | otherwise             = u : f u (v + 2)
--            where uu = u ^ 2; w = (oeisIx @37213) (uu + v ^ 2)

-- instance OEIS 20893 where
--   oeis = filter (\x -> any (== 1) $ map (oeisIx . (x -)) $
--                                takeWhile (<= x) (oeis @290)) (oeis @5117)

-- instance OEIS 20899 where
--   oeis = filter (odd . (oeisIx @7895)) [1..]

instance OEIS 20914 where
  oeisIx = (oeisIx @70939) . (oeisIx @244)

instance OEIS 20915 where
  oeisIx = (oeisIx @81604) . (oeisIx @79)

instance OEIS 20944 where
  oeis = -1 : f [1,0] where f (x:y:xs) = x : f (y:xs ++ [x,x+y])

instance OEIS 20951 where
  oeis = 1 : ws where
     ws = 0 : 1 : concat (zipWith (\u v -> [u, u + v]) ws $ tail ws)

instance OEIS 20985 where
  oeis = 1 : 1 : f (tail (oeis @20985)) (-1) where
     f (x:xs) w = x : x*w : f xs (0 - w)

instance OEIS 20986 where
  oeis = scanl1 (+) (oeis @20985)

instance OEIS 20987 where
  oeisIx = (`div` 2) . (1 -) . (oeisIx @20985)

instance OEIS 20990 where
  oeis = scanl1 (+) $ zipWith (*) (oeis @33999) (oeis @20985)

instance OEIS 22112 where
  oeis = 2 : 6 : zipWith (+) (tail (oeis @22112)) (oeis @22112)

instance OEIS 22155 where
  oeis = map fi $ elemIndices (- 1) (oeis @20985)

instance OEIS 22290 where
  oeisIx 0 = 0
  oeisIx n = h n 0 $ drop 2 (oeis @45) where
     h 0 y _      = y
     h x y (f:fs) = h x' (y + f * r) fs where (x',r) = divMod x 2

-- instance OEIS 22307 where
--   oeisIx n = if n == 0 then 0 else (oeisIx @1221) $ (oeisIx @45) n

instance OEIS 22319 where
  oeis = 1 : 5 : zipWith (+)
     (map (+ 1) (oeis @22319)) (tail (oeis @22319))

(oeis22328, (oeis22329)) = unzip $ f $ S.singleton (1, (0, 0)) where
    f s = (i, j) :
          f (S.insert (2 * y, (i + 1, j)) $ S.insert (3 * y, (i, j + 1)) s')
          where ((y, (i, j)), s') = S.deleteFindMin s

instance OEIS 22328 where
  oeis = oeis22328

instance OEIS 22329 where
  oeis = oeis22329

instance OEIS 22340 where
  oeisIx = (* 2) . (oeisIx @3714)

instance OEIS 22342 where
  oeis = filter ((notElem 1) . (rowT @35516)) [0..]

-- instance OEIS 22449 where
--   oeisIx = (oeisIx @2808) . (oeisIx @8578)
--   oeis = map (oeisIx @2808) (oeis @8578)

instance OEIS 22481 where
  oeis = map fi do 1 : f [1] :: [Integer] where
     f xs = (read $ concatMap show ys) : f ys where
            ys = concat $ transpose [map head zss, map length zss]
            zss = reverse $ group xs

-- instance OEIS 22482 where
--   oeis = iterate (oeisIx @45918 . oeisIx @4086) 2

-- instance OEIS 22488 where
--   oeisIx n = (oeis @22488) !! (n - 1)
--   oeis = 2 : f [2] :: [Integer] where
--      f xs = (read $ concatMap show ys) : f ys where
--             ys = concat $ transpose [map head zss, map length zss]
--             zss = reverse $ group xs

-- instance OEIS 22506 where
--   oeis = 0 : 10 : iterate (oeisIx . (oeisIx @4086)) 1011

-- instance OEIS 22507 where
--   oeis = iterate (oeisIx . (oeisIx @4086)) 3

-- instance OEIS 22514 where
--   oeisIx n = (oeis @22514) !! n
--   oeis = 3 : f [3] :: [Integer] where
--      f xs = (read $ concatMap show ys) : f ys where
--             ys = concat $ transpose [map head zss, map length zss]
--             zss = reverse $ group xs

-- instance OEIS 22515 where
--   oeisIx n = (oeis @22515) !! n
--   oeis = 4 : f [4] :: [Integer] where
--      f xs = (read $ concatMap show ys) : f ys where
--             ys = concat $ transpose [map head zss, map length zss]
--             zss = reverse $ group xs

-- instance OEIS 22516 where
--   oeisIx n = (oeis @22516) !! n
--   oeis = 5 : f [5] :: [Integer] where
--      f xs = (read $ concatMap show ys) : f ys where
--             ys = concat $ transpose [map head zss, map length zss]
--             zss = reverse $ group xs

-- instance OEIS 22517 where
--   oeisIx n = (oeis @22517) !! n
--   oeis = 6 : f [6] :: [Integer] where
--      f xs = (read $ concatMap show ys) : f ys where
--             ys = concat $ transpose [map head zss, map length zss]
--             zss = reverse $ group xs

-- instance OEIS 22518 where
--   oeisIx n = (oeis @22518) !! n
--   oeis = 7 : f [7] :: [Integer] where
--      f xs = (read $ concatMap show ys) : f ys where
--             ys = concat $ transpose [map head zss, map length zss]
--             zss = reverse $ group xs

-- instance OEIS 22519 where
--   oeisIx n = (oeis @22519) !! n
--   oeis = 8 : f [8] :: [Integer] where
--      f xs = (read $ concatMap show ys) : f ys where
--             ys = concat $ transpose [map head zss, map length zss]
--             zss = reverse $ group xs

-- instance OEIS 22520 where
--   oeisIx n = (oeis @22520) !! n
--   oeis = 9 : f [9] :: [Integer] where
--      f xs = (read $ concatMap show ys) : f ys where
--             ys = concat $ transpose [map head zss, map length zss]
--             zss = reverse $ group xs

-- instance OEIS 22544 where
--   oeisIx n = (oeis @22544) !! (n - 1)
--   oeis = elemIndices 0 (oeis @161)

-- instance OEIS 22559 where
--   oeis = scanl (+) 0 $ map (oeisIx @1222) [1..]

instance OEIS 22819 where
  oeisIx n = floor $ sum $ zipWith (%) [1 .. n - 1] [n - 1, n - 2 .. 1]

-- instance OEIS 22831 where
--   oeis = 2 : f 2 (tail (oeis @40)) where
--      f x (p:ps) | x' > 0    = x' : f x' ps
--                 | otherwise = xp : f xp ps where x' = x - p; xp = x + p

instance OEIS 22838 where
  oeisIx = floor . (* sqrt 3) . fi . succ

instance OEIS 22840 where
  oeisIx = floor . (* sqrt 6) . fi . succ

instance OEIS 22843 where
  oeis = map (floor . (* e) . fi) [0..] where e = exp 1

instance OEIS 22846 where
  oeisIx = round . (* sqrt 2) . fi

instance OEIS 22852 where
  oeisIx = round . (* exp 1) . fi

-- instance OEIS 22941 where
--   oeisIx n = (oeis @22941) !! (n - 1)
--   oeis = 1 : 2 : f 2 [3..] where
--      f x (z:zs) = y : f y (delete y zs) where y = x + z

instance OEIS 22998 where
  oeisIx n = (oeisIx @34) (n + 1) * n
  oeis = zipWith (*) [0..] $ tail (oeis @34)

instance OEIS 23022 where
  oeisIx ((+2)->n) = genericLength [ (u, v) | u <- [1 .. div n 2],
                               let v = n - u, gcd u v == 1]

instance OEIS 23105 where
  oeisIx n = f (n) where
    f 0 = 1
    f 1 = 2
    f n | even n = 2 * f (n - 1) - 2
    f n | odd  n = 2 * f (n - 1) - 1

-- instance OEIS 23143 where
--   oeisIx n = (oeis @23143) !! (n - 1)
--   oeis = 1 : map (+ 1) (elemIndices 1 (oeis @4648))

-- instance OEIS 23172 where
--   oeisIx n = (oeis @23172) !! (n - 1)
--   oeis =
--      map (+ 1) $ elemIndices 0 $ zipWith mod (tail (oeis @45)) [1..]

-- instance OEIS 23200 where
--   oeis = filter ((== 1) . (oeisIx @10051)') $
--                  map (subtract 4) $ drop 2 (oeis @40)

-- instance OEIS 23201 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (+ 6)) (oeis @40)
--
-- instance OEIS 23208 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (+ 2) . (* 3)) (oeis @40)

-- instance OEIS 23416 where
--   oeisIx 0 = 1
--   oeisIx 1 = 0
--   oeisIx n = (oeisIx @23416) n' + 1 - m where (n', m) = divMod n 2
--   oeis = 1 : c [0] where c (z:zs) = z : c (zs ++ [z+1,z])

-- instance OEIS 23431 where
--   oeis = 1 : 1 : f [1,1] where
--      f xs'@ (x:_:xs) = y : f (y : xs') where
--        y = x + sum (zipWith (*) xs $ reverse $ xs')

-- instance OEIS 23432 where
--   oeis = 1 : 1 : f [1,1] where
--      f xs'@ (x:_:xs) = y : f (y : xs') where
--        y = x + sum (zipWith (*) xs $ reverse $ tail xs)

-- instance OEIS 23523 where
--   oeis =  map (+ 1) $ zipWith (*) (oeis @40) (oeis @8578)

-- instance OEIS 23531 where
--   oeis = concat $ iterate ([0,1] *) [1]
--   instance Num a => Num [a] where
--      fromInteger k = [fromInteger k]
--      (p:ps) + (q:qs) = p + q : ps + qs
--      ps + qs         = ps ++ qs
--      (p:ps) * qs'@ (q:qs) = p * q : ps * qs' + [p] * qs
--      _ * _               = []

-- instance OEIS 23532 where
--   oeisIx = (1 -) . (oeisIx @10052) . (+ 9) . (* 8)
--   oeis = concat $ iterate (\rs -> 1 : rs) [0]

-- instance OEIS 23607 where
--   oeis = zipWith (*) [0..] $ tail (oeis @45)

-- instance OEIS 23610 where
--   oeis = f [1] $ drop 3 (oeis @45) where
--      f us (v:vs) = (sum $ zipWith (*) us $ tail (oeis @45)) : f (v:us) vs

-- instance OEIS 23626 where
--   oeis = f (oeis @40) [1] where
--      f (p:ps) rs = (sum $ zipWith (*) rs (oeis @8578)) : f ps (p : rs)

-- instance OEIS 23705 where
--   oeis = iterate f 1 where
--      f x = 1 + if r < 3 then x else 4 * f x'
--            where (x', r) = divMod x 4

-- instance OEIS 23717 where
--   oeis = filter f [0..] where
--      f x = x < 3 || (q < 3 && f x') where (x', q) = divMod x 4

-- instance OEIS 23758 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @23758) !! (n - 1)
--   oeis = 0 : f (singleton 1) where
--   f s = x : f (if even x then insert z s' else insert z $ insert (z+1) s')
--   where z = 2*x; (x, s') = deleteFindMin s

instance OEIS 23811 where
  oeisIx (succ->n) = foldl (\val dig -> val * n + dig) 0 [0 .. n - 1]

instance OEIS 23855 where
  oeisIx (succ->n) = sum $ zipWith (*) [1 .. div (n+1) 2] [n, n - 1 ..]

-- instance OEIS 23888 where
--   oeisIx = sum . (rowT @210208)

-- instance OEIS 23890 where
--   oeisIx n = sum $ zipWith (*) divs $ map ((1 -) . (oeisIx @10051)) divs
--               where divs = (rowT @27750) n

-- instance OEIS 23895 where
--   oeisIx = p (oeis @2808) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 23896 where
--   oeisIx = sum . (rowT @38566)

-- instance OEIS 23900 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map (1 -) $ (rowT @27748) n

-- instance OEIS 23989 where
--   oeisIx n = (oeis @23989) !! (n - 1)
--   oeis = 2 : f [2] :: [Integer] where
--      f xs = (read $ concatMap show ys) : f (ys) where
--             ys = concat $ transpose [map length zss, map head zss]
--             zss = group $ sort xs

-- instance OEIS 23998 where
--   oeis = 1 : f 2 [1] (tabl @132813) where
--      f x ys (zs:zss) = y : f (x + 1) (ys ++ [y]) zss where
--                        y = sum $ zipWith (*) ys zs

instance OEIS 24004 where
  oeisIx = (1 -) . (^ 6)

-- instance OEIS 24023 where
--   oeisIx = subtract 1 . (oeisIx @244)

-- instance OEIS 24036 where
--   oeisIx = (subtract 1) . (oeisIx @302)
--   oeis = iterate ((+ 3) . (* 4)) 0

-- instance OEIS 24166 where
--   oeisIx n = sum $ zipWith (*) [n+1,n..0] (oeis @578)

-- instance OEIS 24206 where
--   oeisIx n = (n - 1) * (n + 3) `div` 4
--   oeis = scanl (+) 0 $ tail (oeis @8619)

-- instance OEIS 24316 where
--   oeisIx n = sum $ take (div (n + 1) 2) $ zipWith (*) zs $ reverse zs
--               where zs = take n $ tail (oeis @23531)

-- instance OEIS 24352 where
--   oeis = 3 : drop 4 (oeis @42965)

-- instance OEIS 24359 where
--   oeis = f 0 1 (oeis @20884) where
--      f c u vs'@ (v:vs) | u == v = f (c + 1) u vs
--                       | u /= v = c : f 0 (u + 1) vs'

-- instance OEIS 24362 where
--   oeisIx n = sum [oeisIx y | x <- takeWhile (< nn) $ tail (oeis @290),
--                                let y = nn - x, y <= x, gcd x y == 1]
--               where nn = n ^ 2

-- instance OEIS 24409 where
--   oeisIx n = (oeis @24409) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (> 1) (oeis @24362)

-- instance OEIS 24431 where
--   oeisIx n = (oeis @24431) !! n
--   oeis = 1 : 2 : f [2, 1] [2 ..] where
--      f ks@ (k:_) (j:js) =
--        x : y : f (y : x : ks) ((js \\ map (y -) ks) \\ map (x -) ks)
--        where y = x + j; x = 2 * k + 2

instance OEIS 24450 where
  oeis = scanl1 (+) (oeis @1248)

instance OEIS 24483 where
  oeisIx (succ->n) = (rowCol @51631) (2* n) n

-- instance OEIS 24556 where
--   oeis = filter ((== 0) . (oeisIx @10051)) $ tail (oeis @56911)

-- instance OEIS 24619 where
--   oeis = filter ((== 0) . (oeisIx @10055)) [1..]

-- instance OEIS 24620 where
--   oeis = filter ((== 1) . (oeisIx @25474)) [1..]

-- instance OEIS 24629 where
--   oeisIx 0 = 0
--   oeisIx n = 10 * (oeisIx @24629) (2 * n') + t where (n', t) = divMod n 3

-- instance OEIS 24697 where
--   oeis = f (tail (oeis @40)) [head (oeis @40)] 2 where
--      f (p:ps) qs k = sum (take (div k 2) $ zipWith (*) qs $ reverse qs) :
--                      f ps (p : qs) (k + 1)

-- instance OEIS 24770 where
--   oeisIx n = (oeis @24770) !! (n - 1)
--   oeis = filter (\x ->
--      all (== 1) $ map (oeisIx . read) $ tail $ inits $ show x) (oeis @38618)

-- instance OEIS 24785 where
--   oeisIx n = (oeis @24785) !! (n - 1)
--   oeis = filter (\x ->
--      all (== 1) $ map (oeisIx . read) $ init $ tails $ show x) (oeis @38618)

-- instance OEIS 24816 where
--   oeisIx = sum . (rowT @173541)

-- instance OEIS 24894 where
--   oeisIx = flip div 5 . subtract 1 . (oeisIx @30430)

instance OEIS 24916 where
  oeisIx (succ->n) = sum $ map (\k -> k * div n k) [1..n]

-- instance OEIS 24939 where
--   oeisIx = p (oeis @65091) where
--      p _  0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

instance OEIS 24940 where
  oeisIx = p $ tail (oeis @217) where
     p _  0 = 1
     p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

instance OEIS 25065 where
  oeisIx = p (1:[2,4..]) where
     p [] _ = 0
     p _  0 = 1
     p ks'@ (k:ks) m | m < k     = 0
                    | otherwise = p ks' (m - k) + p ks m

instance OEIS 25129 where
  oeis= f (tail (oeis @40)) [head (oeis @40)] 1 where
     f (p:ps) qs k = sum (take (div k 2) $ zipWith (*) qs $ reverse qs) :
                     f ps (p : qs) (k + 1)

instance OEIS 25147 where
  oeisIx = p 2 where
     p _ 0 = 1
     p k m = if m < k then 0 else p (k + 1) (m - k) + p (k + 1) m

instance OEIS 25169 where
  oeis = 2 : 6 : zipWith (-) (map (* 3) $ tail (oeis @25169)) (oeis @25169)

instance OEIS 25192 where
  oeisIx 0 = 1
  oeisIx n = 2 * 3 ^ (n - 1)
  oeis = 1 : iterate (* 3) 2

instance OEIS 25250 where
  oeis = 0 : 1 : 1 : f 1 [1,1,0] where
     f k xs = x' : f (k+1) (x':xs) where
       x' = sum $ zipWith (*) (oeis @25250) $ take k xs

instance OEIS 25276 where
  oeis = 1 : 0 : 0 : 1 : f [1,0,0,1] where
     f xs = x' : f (x':xs) where
       x' = sum $ zipWith (*) xs (oeis @25276)

instance OEIS 25284 where
  oeis = map fi $ elemIndices 1 (oeis @25426)

instance OEIS 25285 where
  oeis = filter ((== 2) . (oeisIx @25426)) [1..]

instance OEIS 25286 where
  oeis = filter ((== 3) . (oeisIx @25426)) [1..]

instance OEIS 25294 where
  oeis = filter ((> 2) . (oeisIx @25426)) [1..]

instance OEIS 25302 where
  oeis = [x | x <- [1..], (oeisIx @25441) x == 1]

instance OEIS 25414 where
  oeisIx = fi . fromJust . (`elemIndex` (oeis @25427))

instance OEIS 25426 where
  oeisIx n = sum $ map (oeisIx @10052 . (n -)) $
                        takeWhile (<= n `div` 2) $ tail (oeis @290)
  oeis = map (oeisIx @25426) [0..]

instance OEIS 25427 where
  oeisIx n = sum $ map f zs where
     f x = sum $ map (oeisIx @10052 . (n - x -)) $
                     takeWhile (<= div (n - x) 2) $ dropWhile (< x) zs
     zs = takeWhile (< n) $ tail (oeis @290)

instance OEIS 25435 where
  oeisIx 0 = 0
  oeisIx n = (oeisIx @10052) n + sum
     (map (oeisIx @10052 . (n -)) $ takeWhile (< n `div` 2) $ tail (oeis @290))

instance OEIS 25441 where
  oeisIx n = sum $ map (oeisIx @10052 . (n -)) $
                        takeWhile (< n `div` 2) $ tail (oeis @290)

instance OEIS 25473 where
  oeisIx = (oeisIx @20639) . pred . (oeisIx @961)

instance OEIS 25474 where
  oeisIx = (oeisIx @1222) . pred . (oeisIx @961)

-- instance OEIS 25475 where
--   oeis = filter ((== 0) . (oeisIx @10051)) (oeis @961)

-- instance OEIS 25478 where

-- instance OEIS 25479 where

-- instance OEIS 25480 where
--   interleave xs ys = concat . transpose $ [xs,ys]
--   oeisIx = interleave [0..] (oeisIx @25480)
--   oeisIx n k = (tabf @25480) !! n !! k
--   oeisIx_row n = (tabf @25480) !! n
--   oeisIx_tabf = iterate (\xs -> concat $
--      transpose [xs, [length xs .. 2 * length xs - 1]]) [0]
--   oeis = concat $ (tabf @25480)

-- instance OEIS 25487 where
--   import Data.Set (singleton, fromList, deleteFindMin, union)
--   oeisIx n = (oeis @25487) !! (n - 1)
--   oeis = 1 : h [b] (singleton b) bs where
--      (_ : b : bs) = (oeis @2110)
--      h cs s xs'@ (x:xs)
--        | m <= x    = m : h (m:cs) (s' `union` fromList (map (* m) cs)) xs'
--        | otherwise = x : h (x:cs) (s  `union` fromList (map (* x) (x:cs))) xs
--        where (m, s') = deleteFindMin s

-- instance OEIS 25492 where
--   oeisIx n = fst $ until (uncurry (==)) (\ (x,x') -> (oeisIx x, x)) (n,0)

-- instance OEIS 25530 where
--   oeisIx n = sum $ map (div (oeisIx $ fromInteger n))
--                         (zipWith (*) [1..n] (oeis @33999))

instance OEIS 25543 where
  oeis = scanl lcm 1 (oeis @2808)

-- instance OEIS 25547 where
--   oeis = scanl1 lcm (oeis @5408)

instance OEIS 25550 where
  oeisIx (succ->n) = numerator $ sum $ map (1 %) $ take (fi n) [1, 3 ..]

instance OEIS 25555 where
  oeis = scanl1 lcm $ tail (oeis @217)

-- instance OEIS 25565 where
--   oeis = 1 : f (oeis @1006) [1] where
--      f (x:xs) ys = y : f xs (y : ys) where
--        y = x + sum (zipWith (*) (oeis @1006) ys)

-- instance OEIS 25581 where
--   oeis = tablList @25581
-- instance Table 25581 where
--   rowCol n k = n - k
--   rowT n = [n, n - 1 .. 0]
--   tabl = iterate (\xs@ (x:_) -> (x + 1) : xs) [0]

-- instance OEIS 25583 where
--   oeis = filter f (oeis @2808) where
--      f x = all (== 0) $ map (oeisIx . (x -)) $ takeWhile (< x) (oeis @40)

-- instance OEIS 25586 where
--   oeisIx = last . (rowT @220237)

-- instance OEIS 25613 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @25613) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m) $ insert (4*m) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 25616 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @25616) !! (n - 1)
--   oeis = f $ singleton (1,0,0) where
--      f s = y : f (insert (3 * y, i + 1, j) $ insert (10 * y, i, j + 1) s')
--            where ((y, i, j), s') = deleteFindMin s

-- instance OEIS 25620 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @25620) !! (n - 1)
--   oeis = f $ singleton 1 where
--      f s = y : f (insert (4 * y) $ insert (9 * y) s')
--                  where (y, s') = deleteFindMin s

-- instance OEIS 25632 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @25632) !! (n - 1)
--   oeis = f $ singleton (1,0,0) where
--      f s = y : f (insert (7 * y, i + 1, j) $ insert (10 * y, i, j + 1) s')
--            where ((y, i, j), s') = deleteFindMin s

-- instance OEIS 25635 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @25635) !! (n - 1)
--   oeis = f $ singleton (1,0,0) where
--      f s = y : f (insert (9 * y, i + 1, j) $ insert (10 * y, i, j + 1) s')
--            where ((y, i, j), s') = deleteFindMin s

-- instance OEIS 26150 where
--   oeis = 1 : 1 : map (* 2) (zipWith (+) (oeis @26150) (tail
--   oeis))

-- instance OEIS 26233 where
--   oeisIx n = (oeisIx @49084) n + (oeisIx @239968) n

-- instance OEIS 26238 where
--   oeisIx n = (oeisIx @49084) n + (oeisIx @66246) n

-- instance OEIS 26239 where
--   oeisIx 1 = 1
--   oeisIx n | (oeisIx @10051) n == 1 = (oeisIx @2808) $ (oeisIx @49084) n
--             | otherwise      = (oeisIx @40) $ (oeisIx @66246) n

-- instance OEIS 26274 where
--   oeis = map (subtract 1) $ tail $ filter ((== 1) . (oeisIx @35612)) [1..]

-- instance OEIS 26300 where
--   oeis = tablList @26300
-- instance Table 26300 where
--   rowT n = (tabl @26300) !! n
--   tabl = iterate (\row -> zipWith (+) ([0,0] ++ row) $
--                                   zipWith (+) ([0] ++ row) (row ++ [0])) [1]

-- instance OEIS 26351 where
--   oeisIx n = (oeis @26351) !! n
--   oeis = findIndices odd (oeis @60142)

-- instance OEIS 26374 where
--   oeis = tablList @26374
-- instance Table 26374 where
--   rowT n = (tabl @26374) !! n
--   tabl = [1] : map fst (map snd $ iterate f (1, ([1, 1], [1]))) where
--      f (0, (us, vs)) = (1, (zipWith (+) ([0] ++ us) (us ++ [0]), us))
--      f (1, (us, vs)) = (0, (zipWith (+) ([0] ++ vs ++ [0]) $
--                                zipWith (+) ([0] ++ us) (us ++ [0]), us))

-- instance OEIS 26375 where
--   oeisIx n = (oeisIx @26374) (2 * n) n

-- instance OEIS 26381 where
--   oeisIx = flip (oeisIx @26374) 2

-- instance OEIS 26382 where
--   oeisIx = flip (oeisIx @26374) 3

-- instance OEIS 26424 where
--   oeis = filter (odd . (oeisIx @1222)) [1..]

-- instance OEIS 26430 where
--   oeis = scanl (+) 0 (oeis @1285)

-- instance OEIS 26465 where
--   oeisIx n = (oeis @26465) !! (n - 1)
--   oeis = map length $ group (oeis @10060)

-- instance OEIS 26490 where
--   oeisIx n = (oeis @26490) !! (n - 1)
--   oeis = map length $ group (oeis @26465)

-- instance OEIS 26532 where
--   oeis = scanl (*) 1 $ (oeis @176059)

-- instance OEIS 26549 where
--   oeis = scanl (*) 1 $ (oeis @10693)

-- instance OEIS 26637 where
--   oeis = tablList @26637
-- instance Table 26637 where
--   rowT n = (tabl @26637) !! n
--   tabl = [1] : [1,1] : map (fst . snd)
--      (iterate f (0, ([1,2,1], [0,1,1,0]))) where
--      f (i, (xs, ws)) = (1 - i,
--        if i == 1 then (ys, ws) else (zipWith (+) ys ws, ws'))
--           where ys = zipWith (+) ([0] ++ xs) (xs ++ [0])
--                 ws' = [0,1,0,0] ++ drop 2 ws

instance OEIS 26741 where
  oeis = concat $ transpose [[0..], [1,3..]]

-- instance OEIS 26807 where
--   oeis = tablList @26807
-- instance Table 26807 where
--   rowCol = rowCol_off @26807 @1 @1
--   rowT   = rowT_off   @26807 @1
--   tabl = map
--      (\row -> map (p $ last row) $ init $ tails row) (tabl @2260)
--      where p 0  _ = 1
--            p _ [] = 0
--            p m ks'@ (k:ks) = if m < k then 0 else p (m - k) ks' + p m ks

-- instance OEIS 26820 where
--   oeis = tablList @26820
-- instance Table 26820 where
--   rowCol = rowCol_off @26820 @1 @1
--   rowT   = rowT_off   @26820 @1
--   tabl = zipWith
--      (\x -> map (p x) . tail . inits) [1..] $ tail $ inits [1..] where
--      p 0 _ = 1
--      p _ [] = 0
--      p m ks'@ (k:ks) = if m < k then 0 else p (m - k) ks' + p m ks

-- instance OEIS 26832 where
--   oeisIx n = p 1 n where
--      p _ 0 = 1
--      p k m = if m < k then 0 else p (k+1) (m-k) + p (k+1+0^ (n-m)) m

-- instance OEIS 26835 where
--   oeis = tablList @26835
-- instance Table 26835 where
--   rowCol = rowCol_off @26835 @1 @1
--   rowT   = rowT_off   @26835 @1
--   tabl = map
--      (\row -> map (p $ last row) $ init $ tails row) (tabl @2260)
--      where p 0      _ = 1
--            p _     [] = 0
--            p m (k:ks) = if m < k then 0 else p (m - k) ks + p m ks

instance OEIS 26898 where
  oeisIx n = sum $ zipWith (^) [n + 1, n .. 1] [0 ..]

-- instance OEIS 27023 where
--   oeis = tablList @27023
-- instance Table 27023 where
--   rowCol n k = (tabf @27023) !! (n - 1) !! (k-1)
--   rowT n = (tabf @27023) !! (n - 1)
--   tabf = [1] : iterate f [1, 1, 1] where
--      f row = 1 : 1 : 1 :
--              zipWith3 (((+) .) . (+)) (drop 2 row) (tail row) row ++ [1]

-- instance OEIS 27306 where
--   oeisIx n = (oeisIx @8949) n (n `div` 2)

-- instance OEIS 27383 where
--   oeisIx n = (oeis @27383) !! n
--   oeis = concat $ transpose [oeis, drop 2 (oeis @918)]

instance OEIS 27384 where
  oeisIx n = genericLength $ nub [i*j | i <- [0..n], j <- [0..n]]

-- instance OEIS 27420 where
--   oeis = tablList @27420
-- instance Table 27420 where
--   rowT n = (tabl @27420) !! n
--   tabl = zipWith (zipWith z) (tabl @2262) (tabl @25581)
--                  where z u v = length $ nub $ [i * j | i <- zs, j <- zs]
--                                where zs = [min u v .. max u v]

-- instance OEIS 27423 where
--   oeisIx n = f 1 $ map (\p -> iterate (* p) p) (oeis @40) where
--      f y ((pps@ (p:_)):ppss)
--        | p <= n = f (y * (sum (map (div n) $ takeWhile (<= n) pps) + 1)) ppss
--        | otherwise = y

instance OEIS 27424 where
  oeisIx (succ->n) = genericLength $ nub [i*j | i <- [1..n], j <- [1..n]]

instance OEIS 27425 where
  oeisIx (succ->n) = genericLength $ nub [i*j*k | i <- [1..n], j <- [1..n], k <- [1..n]]

instance OEIS 27426 where
  oeisIx n = genericLength $ nub [i*j*k | i <- [0..n], j <- [0..n], k <- [0..n]]

instance OEIS 27427 where
  oeisIx n = genericLength $ nub [i*j | j <- [1..n], i <- [0..j - 1]]

instance OEIS 27428 where
  oeisIx (succ->n) = genericLength $ nub [i*j | j <- [2..n], i <- [1..j - 1]]

instance OEIS 27429 where
  oeisIx n = genericLength $ nub [i*j*k | k<-[2..n], j<-[1..k - 1], i<-[0..j - 1]]

instance OEIS 27430 where
  oeisIx (succ->n) = genericLength $ nub [i*j*k | k<-[3..n], j<-[2..k - 1], i<-[1..j - 1]]

-- instance OEIS 27434 where
--   oeisIx = (+ 1) . (oeisIx @196) . (subtract 3) . (* 4)
--   oeis = 2 : concat (map (\x -> replicate (x `div` 2) x) [3..])

-- instance OEIS 27465 where
--   oeis = tablList @27465
-- instance Table 27465 where
--   rowT n = (tabl @27465) !! n
--   tabl = iterate (\row ->
--      zipWith (+) (map (* 3) (row ++ [0])) (map (* 1) ([0] ++ row))) [1]

instance OEIS 27611 where
  oeisIx (succ->n) = denominator $ sum $ map (n %) [1..n]

instance OEIS 27612 where
  oeisIx (succ->n) = numerator $ sum $ zipWith (%) [1 .. n] [n, n - 1 .. 1]

-- instance OEIS 27642 where
--   oeis = 1 : map (denominator . sum) (zipWith (zipWith (%))
--      (zipWith (map . (*)) (tail (oeis @142)) (tabf @242179)) (oeisIx @106831)_tabf)

instance OEIS 27649 where
  oeis = map fst $ iterate (\ (u, v) -> (3 * u + v, 2 * v)) (1, 1)

instance OEIS 27665 where
  oeisIx (succ->n) = round $ 100000 * log (fi n) / (log 10)

-- instance OEIS 27709 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @27434) n * 2

-- instance OEIS 27746 where
--   oeis = tablList @27746
-- instance Table 27746 where
--   rowCol = rowCol_off @27746 @1 @1
--   tabl = map (rowT @27746) [1..]
--   rowT 1 = [1]
--   rowT n = unfoldr fact n where
--      fact 1 = Nothing
--      fact x = Just (p, x `div` p) where p = (oeisIx @20639) x

instance OEIS 27748 where
  oeis = 1 : (map (fi.fst) do factorise =<< [2..])

instance Table 27748 where
  rowCol = rowCol_off @27748 @1 @1
  tabl = rowT @27748 <$> [1..]
  rowT 1 = [1]
  rowT n = unfoldr fact n where
     fact 1 = Nothing
     fact x = Just (p, until ((> 0) . (`mod` p)) (`div` p) x)
              where p = (oeisIx @20639) x

-- instance OEIS 27749 where
--   oeis = tablList @27749
-- instance Table 27749 where
--   rowCol n k = (tabf @27749) !! (n - 1) !! (k-1)
--   rowT n = (tabf @27749) !! n
--   tabf = [1] : map tail (tail (tabf @27750))

instance OEIS 27750 where
  oeis = tablList @27750
instance Table 27750 where
  rowCol n k = (rowT @27750) n `genericIndex` (k - 1)
  rowT = divisors
  tabf = map (rowT @27750) [1..]

-- instance OEIS 27751 where
--   oeis = tablList @27751
-- instance Table 27751 where
--   rowCol n k = (tabf @27751) !! (n - 1) !! (k-1)
--   rowT n = (tabf @27751) !! (n - 1)
--   tabf = [1] : map init (tail (tabf @27750))

-- instance OEIS 27810 where
--   oeisIx n = (n + 1) * (oeisIx @7318)' (n + 5) 5

-- instance OEIS 27818 where
--   oeisIx n = (n + 1) * (oeisIx @7318)' (n + 6) 6

-- instance OEIS 27837 where
--   oeis = f 1 [] where
--      f x ys = y : f (x + 1) (y : ys) where
--               y = (oeisIx @1044) x * x - sum (zipWith (*) ys $ tail (oeis @1044))

-- instance OEIS 27861 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (oeisIx @1844)) [0..]

-- instance OEIS 27868 where
--   oeisIx n = sum $ takeWhile (> 0) $ map (n `div`) $ tail (oeis @351)

-- instance OEIS 27907 where
--   oeis = tablList @27907
-- instance Table 27907 where
--   rowCol n k = (tabf @27907) !! n !! k
--   rowT n = (tabf @27907) !! n
--   tabf = [1] : iterate f [1, 1, 1] where
--      f row = zipWith3 (((+) .) . (+))
--                       (row ++ [0, 0]) ([0] ++ row ++ [0]) ([0, 0] ++ row)
--   oeis = concat (tabf @27907)

-- instance OEIS 27914 where
--   oeisIx n = sum $ take (n + 1) $ (rowT @27907) n

-- instance OEIS 27926 where
--   oeis = tablList @27926
-- instance Table 27926 where
--   rowCol n k = (tabf @27926) !! n !! k
--   rowT n = (tabf @27926) !! n
--   tabf = iterate (\xs -> zipWith (+)
--                                  ([0] ++ xs ++ [0]) ([1,0] ++ xs)) [1]
--   oeisIx_tabf' = zipWith (++) (tabl @104763) (map tail (tabl @105809))

-- instance OEIS 27934 where
--   oeis = 0 : 1 : 2 : zipWith3 (\x y z -> 3 * x - y - 2 * z)
--                  (drop 2 (oeis @27934)) (tail (oeis @27934)) (oeis @27934)

-- instance OEIS 27941 where
--   oeisIx = (subtract 1) . (oeisIx @45) . (+ 1) . (* 2)

-- instance OEIS 27988 where
--   oeisIx = maximum . (rowT @27926)

-- instance OEIS 27990 where
--   oeis = c [1] (oeis @45) where
--      c us (v:vs) = (sum $ zipWith (*) us vs) : c (v:us) vs

-- instance OEIS 28233 where
--   oeisIx = head . (rowT @141809)

-- instance OEIS 28234 where
--   oeisIx n = n `div` (oeisIx @28233) n

-- instance OEIS 28236 where
--   oeisIx n = sum $ map (div n) $ (rowT @141809) n

-- instance OEIS 28242 where
--   oeisIx n = n' + 1 - m where (n',m) = divMod n 2
--   oeis = concat $ transpose [oeis, (oeis @1477)]

-- instance OEIS 28260 where
--   oeis = filter (even . (oeisIx @1222)) [1..]

-- instance OEIS 28262 where
--   oeis = tablList @28262
-- instance Table 28262 where
--   rowT n = (tabl @28262) !! n
--   tabl = [1] : [1,1] : iterate
--      (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [1,3,1]

-- instance OEIS 28263 where
--   oeis = tablList @28263
-- instance Table 28263 where
--   rowT n = (tabl @28263) !! n
--   tabl = zipWith (zipWith (+)) (tabl @7318) (tabl @14410)

-- instance OEIS 28290 where
--   import Data.MemoCombinators (memo2, integral)
--   oeisIx n = (oeis @28290) !! n
--   oeis = map (p' 0) [0..] where
--      p' = memo2 integral integral p
--      p _ 0 = 1
--      p 5 _ = 0
--      p k m | m < parts !! k = 0
--            | otherwise = p' k (m - parts !! k) + p' (k + 1) m
--      parts = [1, 2, 3, 5, 8]

instance OEIS 28310 where
  oeisIx n = 0 ^ n + n
  oeis = 1 : [1..]

-- instance OEIS 28326 where
--   oeis = tablList @28326
-- instance Table 28326 where
--   rowT n = (tabl @28326) !! n
--   tabl = iterate
--      (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [2]

instance OEIS 28387 where
  oeisIx n = n + (n + 1) ^ 2

-- instance OEIS 28391 where
--   oeisIx n = n - (oeisIx @196) n

-- instance OEIS 28392 where
--   oeisIx n = n + (oeisIx @196) n

-- instance OEIS 28393 where
--   oeis = iterate (oeisIx @6368) 8

-- instance OEIS 28394 where
--   oeis = iterate (oeisIx @6369) 8

-- instance OEIS 28395 where
--   oeis = iterate (oeisIx @6368) 14

-- instance OEIS 28396 where
--   oeis = iterate (oeisIx @6369) 14

-- instance OEIS 28422 where
--   oeisIx 1 = 0
--   oeisIx n = (map (last . init) (tabl @66032)) !! (n - 1)

instance OEIS 28560 where
  oeisIx n = n * (n + 6)

-- instance OEIS 28834 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (oeisIx @7953)) [1..]

-- instance OEIS 28835 where
--   oeisIx n = (oeis @28835) !! (n - 1)
--   oeis = findIndices (`elem` [2,3,5,7]) $ map (oeisIx @10888) [0..]

-- instance OEIS 28846 where
--   oeis = f [1] where
--      f ds = foldr (\d v -> 10 * v + d) 0 ds : f (s ds)
--      s [] = [1]; s (8:ds) = 1 : s ds; s (d:ds) = 2*d : ds

-- instance OEIS 28859 where
--   oeis =
--      1 : 3 : map (* 2) (zipWith (+) (oeis @28859) (tail (oeis @28859)))

-- instance OEIS 28860 where
--   oeis =
--      -1 : 1 : map (* 2) (zipWith (+) (oeis @28860) (tail (oeis @28860)))

-- instance OEIS 28871 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @8865)

-- instance OEIS 28884 where
  -- oeisIx n = (n * (n + 6) + 1) `div` 4

-- instance OEIS 28897 where
--   oeisIx 0 = 0
--   oeisIx n = 2 * (oeisIx @28897) n' + d where (n', d) = divMod n 10

instance OEIS 28905 where
  oeisIx = (oeisIx @4185) . (oeisIx @40)

-- instance OEIS 28906 where
--   oeisIx = (oeisIx @4186) . (oeisIx @40)

-- instance OEIS 28916 where
--   oeis = map (oeisIx @40) $ filter ((> 0) . (oeisIx @256852)) [1..]

-- instance OEIS 28982 where
--   import Data.List.Ordered (union)
--   oeisIx n = (oeis @28982) !! (n - 1)
--   oeis = tail $ union (oeis @290) (oeis @1105)

-- instance OEIS 29145 where
--   import Data.MemoCombinators (memo2, integral)
--   oeisIx n = (oeis @29145) !! n
--   oeis = map (p' 0) [0..] where
--      p' = memo2 integral integral p
--      p _ 0 = 1
--      p 4 _ = 0
--      p k m | m < parts !! k = 0
--            | otherwise = p' k (m - parts !! k) + p' (k + 1) m
--      parts = [2, 3, 5, 8]

-- instance OEIS 29549 where
--   oeis = [0,6,210] ++
--      zipWith (+) (oeis @29549)
--                  (map (* 35) $ tail delta)
--      where delta = zipWith (-) (tail (oeis @29549)) (oeis @29549)

-- instance OEIS 29578 where
--   oeisIx n =  (n - n `mod` 2) `div` (2 - n `mod` 2)
--   oeis = concat $ transpose [oeis, (oeis @5843)]

-- instance OEIS 29579 where
--   oeisIx n = if m == 0 then n' + 1 else n  where (n', m) = divMod n 2
--   oeis = concat $ transpose [[1 ..], [1, 3 ..]]

-- instance OEIS 29600 where
--   oeis = tablList @29600
-- instance Table 29600 where
--   rowT n = (tabl @29600) !! n
--   tabl = [1] : iterate
--      (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [2,3]

-- instance OEIS 29609 where
--   oeisIx n = (oeisIx @29600) (2*n) n

-- instance OEIS 29635 where
--   oeis = tablList @29635
-- instance Table 29635 where
--   rowT n = (tabl @29635) !! n
--   tabl = [2] : iterate
--      (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [1,2]

-- instance OEIS 29653 where
--   oeis = tablList @29653
-- instance Table 29653 where
--   rowT n = (tabl @29653) !! n
--   tabl = [1] : iterate
--                  (\xs -> zipWith (+) ([0] ++ xs) (xs ++ [0])) [2, 1]

-- instance OEIS 29730 where
--   oeis = map (foldr (\h v -> 16 * v + h) 0) $
--                      filter (\xs -> xs == reverse xs) (tabf @262437)

-- instance OEIS 29742 where
--   oeis = filter ((== 0) . (oeisIx @136522)) [1..]

-- instance OEIS 29743 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @10784)

-- instance OEIS 29744 where
--   oeis = 1 : iterate
--      (\x -> if x `mod` 3 == 0 then 4 * x `div` 3 else 3 * x `div` 2) 2

-- instance OEIS 29783 where
--   oeis = filter (\x -> (oeisIx @258682) x == x ^ 2) [1..]

-- instance OEIS 29793 where
--   oeisIx n = (oeis @29793) !! (n - 1)
--   oeis = filter (\x -> digs x == digs (x^2)) [0..]
--      where digs = sort . nub . show

-- instance OEIS 29837 where
--   oeis = scanl1 (+) (oeis @209229)

-- instance OEIS 29854 where
--   oeis = zipWith gcd (oeis @1043) $ tail (oeis @1043)

-- instance OEIS 29858 where
--   oeisIx = (`div` 2) . (subtract 3) . (3 ^)
--   oeis = iterate ((+ 3) . (* 3)) 0

-- instance OEIS 29885 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) (1 : map fi (oeis @1285))

-- instance OEIS 29907 where
--   oeis = 0 : 1 : zipWith (+) (tail (oeis @45))
--                         (zipWith (+) (tail (oeis @29907)) (oeis @29907))

-- instance OEIS 29931 where
--   oeisIx = sum . zipWith (*) [1..] . (rowT @30308)

-- instance OEIS 29942 where
--   oeisIx n = (oeis @29942) !! (n - 1)
--   oeis = [x | x <- [0..], show x `isInfixOf` show (x^3)]

-- instance OEIS 29943 where
--   oeisIx n = (oeis @29943) !! (n - 1)
--   oeis = filter f [0..] where
--      f x = show x `isInfixOf` show (x^2) && show x `isInfixOf` show (x^3)

-- instance OEIS 30000 where
--   oeisIx n =
--      fromJust $ findIndex (show n `isInfixOf`) $ map show (oeis @79)

-- instance OEIS 30001 where
--   oeisIx n = head $ filter ((show n `isInfixOf`) . show) (oeis @79)

-- instance OEIS 30057 where
--   oeisIx n = head $ filter ((== 0) . p (oeisIx_row n)) [1..] where
--      p _      0 = 1
--      p []     _ = 0
--      p (k:ks) x = if x < k then 0 else p ks (x - k) + p ks x

-- instance OEIS 30067 where
--   oeisIx n = (oeis @30067) !! (n - 1)
--   oeis = concat $ transpose [scanl (+) 1 (oeis @30067), (oeis @30067)]

-- instance OEIS 30078 where
--   oeisIx = (oeisIx @578) . (oeisIx @40)
--   oeis = map (oeisIx @578) (oeis @40)

-- instance OEIS 30079 where
--   oeisIx n = (oeis @30079) !! (n - 1)
--   oeis = filter f (oeis @40) where
--      f p = pd == pd `intersect` (nub $ show (p^2)) where
--          pd = nub $ show p

-- instance OEIS 30091 where
--   oeisIx n = (oeis @30091) !! (n - 1)
--   oeis =
--      filter (\x -> ((==) `on` (nub . sort . show)) x (x^2)) (oeis @40)

-- instance OEIS 30096 where
--   oeis = filter f (oeis @40) where
--      f x = odd d && (x < 10 || f x') where (x', d) = divMod x 10

-- instance OEIS 30099 where
--   oeisIx n = (oeis @30099) !! (n - 1)
--   oeis = filter (null . (intersect "86420") . show . (^ 3)) [1,3..]

-- instance OEIS 30101 where
--   oeisIx = f 0 where
--      f y 0 = y
--      f y x = f (2 * y + b) x'  where (x', b) = divMod x 2

-- instance OEIS 30102 where
--   oeisIx = foldl (\v d -> 3 * v + d) 0 . (rowT @30341)

-- instance OEIS 30103 where
--   oeisIx n = foldl (\v d -> 4*v + d) 0 $ unfoldr dig n where
--       dig x = if x == 0 then Nothing else Just $ swap $ divMod x 4

-- instance OEIS 30109 where
--   oeisIx = flip div 2 . subtract 1 . (oeisIx @30101)

-- instance OEIS 30124 where
--   oeisIx n = (oeis @30124) !! n
--   oeis = figureDiff 1 [2..] where
--      figureDiff n (x:xs) = x : figureDiff n' (delete n' xs) where n' = n + x

-- instance OEIS 30130 where
--   oeis = filter ((== 1) . (oeisIx @23416)) [0..]

-- instance OEIS 30132 where
--   oeis =
--      0 : 1 : map (oeisIx @7953) (zipWith (+) (oeis @30132) (tail (oeis @30132)))

-- instance OEIS 30133 where
--   oeis =
--      2 : 1 : map (oeisIx @7953) (zipWith (+) (oeis @30133) $ tail (oeis @30133))

-- instance OEIS 30141 where
--   oeis = filter ((== 1) . (oeisIx @228710)) [0..]

-- instance OEIS 30142 where
--   oeis = filter odd (oeis @30141)

-- instance OEIS 30143 where
--   oeis = filter even (oeis @30141)

-- instance OEIS 30144 where
--   oeis = filter ((== 1) . (oeisIx @228710)) (oeis @40)

-- instance OEIS 30147 where
--   oeis = filter ((== 1) . (oeisIx @228710)) (oeis @2113)

-- instance OEIS 30152 where
--   oeis = filter ((== 1) . (oeisIx @228710)) (oeis @290)

-- instance OEIS 30173 where
--   import Data.List.Ordered (union)
--   oeisIx n = (oeis @30173) !! (n - 1)
--   oeis = union [2, 4 ..] $ tail (oeis @40976)

-- instance OEIS 30186 where
--   oeis = 1 : 2 : 7 : zipWith (-) (tail $
--      zipWith (+) (oeis @30186) $ tail $ map (* 3) (oeis @30186)) (oeis @30186)

-- instance OEIS 30190 where
--   oeisIx n = (oeis @30190) !! n
--   oeis = concatMap reverse (tabf @30308)

-- instance OEIS 30195 where
--   oeis =
--      0 : 1 : map (* 3) (zipWith (+) (oeis @30195) (tail (oeis @30195)))

instance OEIS 30229 where
--   oeisIx n = (oeis @30229) !! (n - 1)
  oeis = map (fi . succ) $ elemIndices 1 (oeis @8683)

-- instance OEIS 30230 where
--   oeis = filter (odd . (oeisIx @1221)) [1..]

-- instance OEIS 30231 where
--   oeis = filter (even . (oeisIx @1221)) [1..]

-- instance OEIS 30237 where
--   oeis = tablList @30237
-- instance Table 30237 where
--   rowT n = (tabl @30237) !! n
--   tabl = map init $ tail (tabl @9766)

-- instance OEIS 30273 where
--   oeisIx n = p (map (^ 2) [1..]) (n^2) where
--      p _  0 = 1
--      p (k:ks) m | m < k     = 0
--                 | otherwise = p ks (m - k) + p ks m

-- instance OEIS 30283 where
--   oeis = 0 : f 1 9 0 where
--      f u v w = w' : f u' v' w' where
--        w' = until (> w) ((+ v) . (* 10)) u
--        (u',v') = h u v
--        h 1 0 = (2,2); h 9 0 = (1,1); h 9 1 = (2,0); h 9 9 = (1,0)
--        h u 2 = (u+1,0); h u v = (u+1,1-v)

-- instance OEIS 30284 where
--   oeisIx n = (oeis @30284) !! (n - 1)
--   oeis = f [] (oeis @40) where
--      f xs (p:ps) = if null $ intersect xs ys then p : f ys ps else f xs ps
--                    where ys = show p

-- instance OEIS 30293 where
--   oeis = filter ((<= 2) . (oeisIx @43537)) (oeis @578)

-- instance OEIS 30298 where
--   oeis = tablList @30298
-- instance Table 30298 where
--   rowCol n k = (tabf @30298) !! (n - 1) (k-1)
--   rowT = concat . sort . permutations . enumFromTo 1
--   tabf = map (rowT @30298) [1..]

-- instance OEIS 30303 where
--   oeisIx n = (oeis @30303) !! n
--   oeis = elemIndices 1 (oeis @30190)

instance OEIS 30308 where
  oeis = tablList @30308
instance Table 30308 where
  -- rowCol n k = (tabf @30308) !! n !! k
  -- rowT n = (tabf @30308) !! n
  tabf = iterate bSucc [0] where
     bSucc []       = [1]
     bSucc (0 : bs) = 1 : bs
     bSucc (1 : bs) = 0 : bSucc bs

-- instance OEIS 30332 where
--   oeisIx n = (oeis @30332) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @3137)

-- instance OEIS 30333 where
--   oeisIx n = (oeis @30333) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 1 (oeis @3137)

-- instance OEIS 30334 where
--   oeisIx n = (oeis @30334) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 2 (oeis @3137)

-- instance OEIS 30336 where
--   oeisIx n = (oeis @30336) !! (n - 1)
--   oeis = map length $ filter ((== 0) . head) $ group (oeis @3137)

-- instance OEIS 30337 where
--   oeisIx n = (oeis @30337) !! (n - 1)
--   oeis = map length $ filter ((== 1) . head) $ group (oeis @3137)

-- instance OEIS 30338 where
--   oeisIx n = (oeis @30338) !! (n - 1)
--   oeis = map length $ filter ((== 2) . head) $ group (oeis @3137)

-- instance OEIS 30339 where
--   oeis = scanl1
--      (\u v -> u + fromEnum (v == 1) - fromEnum (v == 0)) (oeis @3137)

-- instance OEIS 30340 where
--   oeis = scanl1
--      (\u v -> u + fromEnum (v == 1) - fromEnum (v == 2)) (oeis @3137)

-- instance OEIS 30341 where
--   oeis = tablList @30341
-- instance Table 30341 where
--   rowCol n k = (tabf @30341) !! n !! k
--   rowT n = (tabf @30341) !! n
--   tabf = iterate succ [0] where
--      succ []     = [1]
--      succ (2:ts) = 0 : succ ts
--      succ (t:ts) = (t + 1) : ts

-- instance OEIS 30386 where
--   oeis = tablList @30386
-- instance Table 30386 where
--   rowCol n k = (tabf @30386) !! n !! k
--   rowT n = (tabf @30386) !! n
--   tabf = iterate succ [0] where
--      succ []     = [1]
--      succ (3:ts) = 0 : succ ts
--      succ (t:ts) = (t + 1) : ts

-- instance OEIS 30430 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @17281)

-- instance OEIS 30457 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @1704)) [1..]

-- instance OEIS 30461 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @45533)

-- instance OEIS 30514 where
--   oeisIx = (^ 4) . (oeisIx @40)
--   oeis = map (^ 4) (oeis @40)

-- instance OEIS 30516 where
--   oeisIx = (^ 6) . (oeisIx @40)
--   oeis = map (^ 6) (oeis @40)

-- instance OEIS 30530 where
--   oeisIx n = (oeis @30530) !! (n - 1)
--   oeis = 0 : concatMap (\n -> unfoldr
--      (\x -> if x == 0 then Nothing else Just (n, div x 2)) n) [1..]

-- instance OEIS 30658 where
--   oeisIx = fromEnum . (<= 0) . (oeisIx @95916)

-- instance OEIS 30664 where
--   oeisIx n = (oeisIx @7917) n * (oeisIx @7918) n

-- instance OEIS 30717 where
--   oeis = tablList @30717
-- instance Table 30717 where
--   rowCol n k = (tabf @30717) !! (n - 1) !! (k-1)
--   rowT n = (tabf @30717) !! (n - 1)
--   tabf = [1] : f [1] where
--      f xs = ys : f ((filter (> 0) ys) ++ xs) where
--             ys = h (group $ sort xs) [1..] where
--                  h [] _ = []
--                  h vss'@ (vs:vss) (w:ws)
--                    | head vs == w = (length vs) : h vss ws
--                    | otherwise    = 0 : h vss' ws

-- instance OEIS 30719 where
--   oeis = tail $ zipWith (-) (tail (oeis @253170)) (oeis @253170)

-- instance OEIS 31076 where
--   oeis = concat $ map reverse $ tail (tabf @31087)

-- instance OEIS 31087 where
--   oeis = tablList @31087
-- instance Table 31087 where
--   rowCol n k = (rowT @31087) n !! (k-1)
--   rowT n | n < 9     = [n]
--                 | otherwise = m : (rowT @31087) n' where (n',m) = divMod n 9
--   tabf = map (rowT @31087) [0..]

-- instance OEIS 31131 where
--   oeis = zipWith (-) (drop 2 (oeis @40)) (oeis @40)

-- instance OEIS 31165 where
--   oeis = zipWith (-) (drop 3 (oeis @40)) (oeis @40)

-- instance OEIS 31167 where
--   oeis = zipWith (-) (drop 5 (oeis @40)) (oeis @40)

-- instance OEIS 31168 where
--   oeis = zipWith (-) (drop 6 (oeis @40)) (oeis @40)

-- instance OEIS 31169 where
--   oeis = zipWith (-) (drop 7 (oeis @40)) (oeis @40)

-- instance OEIS 31170 where
--   oeis = zipWith (-) (drop 8 (oeis @40)) (oeis @40)

-- instance OEIS 31171 where
--   oeis = zipWith (-) (drop 9 (oeis @40)) (oeis @40)

-- instance OEIS 31177 where
--   oeis = filter ((/= 1) . (oeisIx @103369)) [1..]

-- instance OEIS 31218 where
--   oeisIx n = last $ takeWhile (<= n) (oeis @961)

-- instance OEIS 31235 where
--   oeis = tablList @31235
-- instance Table 31235 where
--   rowCol n k = (tabf @31235) !! n !! k
--   rowT n = (tabf @31235) !! n
--   tabf = iterate succ [0] where
--      succ []     = [1]
--      succ (4:ts) = 0 : succ ts
--      succ (t:ts) = (t + 1) : ts

instance OEIS 31287 where
  oeis = tail $ map fi $ elemIndices 0 (oeis @7376)

instance OEIS 31288 where
  oeis = map fi $ elemIndices 1 (oeis @7376)

instance OEIS 31289 where
  oeis = map fi $ elemIndices 2 (oeis @7376)

instance OEIS 31290 where
  oeis = map fi $ elemIndices 3 (oeis @7376)

instance OEIS 31291 where
  oeis = map fi $ elemIndices 4 (oeis @7376)

instance OEIS 31292 where
  oeis = map fi $ elemIndices 5 (oeis @7376)

instance OEIS 31293 where
  oeis = map fi $ elemIndices 6 (oeis @7376)

instance OEIS 31294 where
  oeis = map fi $ elemIndices 7 (oeis @7376)

instance OEIS 31295 where
  oeis = map fi $ elemIndices 8 (oeis @7376)

instance OEIS 31296 where
  oeis = map fi $ elemIndices 9 (oeis @7376)

-- instance OEIS 31298 where
--   oeis = tablList @31298
-- instance Table 31298 where
--   rowCol n k = (tabf @31298) !! n !! k
--   rowT n = (tabf @31298) !! n
--   tabf = iterate succ [0] where
--      succ []     = [1]
--      succ (9:ds) = 0 : succ ds
--      succ (d:ds) = (d + 1) : ds

instance OEIS 31347 where
  oeisIx = until (< 10) (oeisIx @7954)

-- instance OEIS 31359 where
--   oeisIx = (oeisIx @1615) . (subtract 1) . (* 2)

-- instance OEIS 31368 where
--   oeisIx = (oeisIx @40) . ((subtract 1) . (* 2))
--   oeis = map (oeisIx @40) [1, 3 ..]

-- instance OEIS 31444 where
--   oeis = filter ((== 1) . (oeisIx @37861)) [1..]

-- instance OEIS 31448 where
--   oeis = filter ((== -1) . (oeisIx @37861)) [1..]

-- instance OEIS 31877 where
--   oeis = [x | x <- [1..], x `mod` 10 > 0,
--                       let x' = (oeisIx @4086) x, x' /= x && x `mod` x' == 0]

-- instance OEIS 31883 where
--   oeis = zipWith (-) (tail (oeis @959)) (oeis @959)

-- instance OEIS 31944 where
--   oeisIx n = (oeis @31944) !! (n - 1)
--   oeis = elemIndices 3 (oeis @212193)

-- instance OEIS 31955 where
--   oeis = filter ((== 2) . (oeisIx @43537)) [0..]

-- instance OEIS 31971 where
--   oeisIx = sum . (rowT @89072)

instance OEIS 31972 where
  oeisIx n = sum $ take (fi n) $ iterate (* n) n

-- instance OEIS 32031 where
--   oeis = scanl (*) 1 $ tail (oeis @8585)

-- instance OEIS 32352 where
--   oeis = filter
--      (\x -> all (== 0) $ map (oeisIx . (10*x +)) [1..9]) [1..]

-- instance OEIS 32358 where
--   oeisIx = genericLength . takeWhile (/= 2) . (iterate (oeisIx @10))

-- instance OEIS 32447 where
--   import Data.List.Ordered (insertBag)
--   oeisIx n = (oeis @32447) !! (n - 1)
--   oeis = f [1..] (oeis @2110) [] where
--      f xs'@ (x:xs) ps'@ (p:ps) us
--        | x < p = f xs ps' $ insertBag (oeisIx' x, x) us
--        | otherwise = map snd vs ++ f xs' ps ws
--        where (vs, ws) = span ((<= (oeisIx @10)' x) . fst) us

-- instance OEIS 32448 where
--   oeisIx n = head [q | q <- (oeis @40), let p = (oeisIx @40) n,
--                         q `mod` p == p - 1]

-- instance OEIS 32527 where
--   oeis = scanl (+) 0 (oeis @47209)

-- instance OEIS 32528 where
--   oeis = scanl (+) 0 (oeis @7310)

-- instance OEIS 32740 where
--   oeisIx n = (oeis @32740) !! (n - 1)
--   oeis = [x | x <- [0..], show x `isInfixOf` (show $ 2 ^ x)]

-- instance OEIS 32741 where
--   oeisIx n = if n == 0 then 0 else (oeisIx @5) n - 1

-- instance OEIS 32742 where
--   oeisIx n = n `div` (oeisIx @20639) n

-- instance OEIS 32759 where
--   oeis = 2 : map read (zipWith (++) vs (tail us)) :: [Integer]
--      where (us,vs) = unzip $ map ((splitAt 1) . show) (oeis @40)

-- instance OEIS 32760 where
--   oeis = 0 : map read (zipWith (++) vs (tail us)) :: [Integer]
--      where (us,vs) = unzip $ map ((splitAt 1) . show) (oeis @290)

-- instance OEIS 32761 where
--   oeis = 0 : map read (zipWith (++) vs (tail us)) :: [Integer]
--      where (us,vs) = unzip $ map ((splitAt 1) . show) (oeis @578)

-- instance OEIS 32762 where
--   oeis = 0 : map read (zipWith (++) vs (tail us)) :: [Integer]
--      where (us,vs) = unzip $ map ((splitAt 1) . show) [0..]

-- instance OEIS 32763 where
--   oeis = 0 : map read (zipWith (++) vs (tail us)) :: [Integer]
--      where (us,vs) = unzip $ map ((splitAt 1) . show) [0, 2 ..]

-- instance OEIS 32764 where
--   oeis = 1 : map read (zipWith (++) vs (tail us)) :: [Integer]
--      where (us,vs) = unzip $ map ((splitAt 1) . show) [1, 3 ..]

instance OEIS 32766 where
  oeisIx n = div n 2 + n

-- instance OEIS 32810 where
--   oeisIx = f 0 . (+ 1) where
--      f y 1 = (oeisIx @4086) y
--      f y x = f (10 * y + m + 2) x' where (x', m) = divMod x 2

-- instance OEIS 32924 where
--   oeis = iterate f 1 where
--      f x = 1 + if r < 2 then x else 3 * f x'  where (x', r) = divMod x 3

-- instance OEIS 32925 where
--   oeisIx n = (oeis @32925) !! (n - 1)
--   oeis = 1 : 2 : (concat $ transpose [map (+ 1) fs, map (+ 2) fs])
--                  where fs = map (* 4) (oeis @32925)

-- instance OEIS 32981 where
--   oeis = map read $ filter f $ map show [1..] :: [Int] where
--      f ps = all (`elem` neighbours) $ zipWith ((. return) . (:)) ps (tail ps)
--      neighbours = "09" : "90" : zipWith ((. return) . (:))
--         (digs ++ tail digs ++ init digs) (digs ++ init digs ++ tail digs)
--      digs = "0123456789"

-- instance OEIS 33048 where
--   oeisIx n = (oeis @33048) !! (n - 1)
--   oeis = filter (all (< 2) . unfoldr (\x ->
--      if x == 0 then Nothing else Just $ swap $ divMod x 12)) [1..]

-- instance OEIS 33075 where
--   -- import Data.Set (fromList, deleteFindMin, insert)
--   oeisIx n = (oeis @33075) !! (n - 1)
--   oeis = f (fromList [1..9]) where
--      f s | d == 0    = m : f (insert (10*m+1) s')
--          | d == 9    = m : f (insert (10*m+8) s')
--          | otherwise = m : f (insert (10*m+d-1) (insert (10*m+d+1) s'))
--          where (m,s') = deleteFindMin s
--                d = mod m 10

-- instance OEIS 33180 where
--   oeis = filter ((> 0) . (oeisIx @67109)) [1..]

-- instance OEIS 33184 where
--   oeis = tablList @33184
-- instance Table 33184 where
--   rowCol = rowCol_off @33184 @1 @1
--   rowT   = rowT_off   @33184 @1
--   tabl = map reverse (tabl @9766)

-- instance OEIS 33200 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @47471)

-- instance OEIS 33203 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @47476)

instance OEIS 33264 where
  oeisIx = f 0 . (rowT @30308) . succ where
     f c [] = c
     f c (0 : 1 : bs) = f (c + 1) bs
     f c (_ : bs) = f c bs

-- instance OEIS 33270 where
--   oeis = 0 : 0 : scanl1 (+) (drop 2 (oeis @10051))

-- instance OEIS 33273 where
--   oeisIx = genericLength . filter ((== 0) . (oeisIx @10051)) . (rowT @27750)

-- instance OEIS 33274 where
--   oeisIx n = (oeis @33274) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 0 (oeis @79066)

-- instance OEIS 33286 where
--   oeisIx n = (oeisIx @40) n * n

-- instance OEIS 33291 where
--   oeis = tablList @33291
-- instance Table 33291 where
--   rowCol = rowCol_off @33291 @1 @1
--   rowT   = rowT_off   @33291 @1
--   tabl = f 1 [1..] where
--      f k xs = ys : f (k+1) (dropWhile (<= last ys) xs) where
--        ys  = take k $ filter ((== 0) . (`mod` k)) xs
--   oeisIx n = head $ (tabl @33291) !! (n - 1)
--   oeisIx n = last $ (tabl @33291) !! (n - 1)

-- instance OEIS 33292 where
--   oeis = tablList @33292
-- instance Table 33292 where
--   rowCol = rowCol_off @33292 @1 @1
--   rowT   = rowT_off   @33292 @1
--   tabl = f 1 [1..] where
--      f k xs = ys : f (k+1) (dropWhile (<= last ys) xs) where
--        ys  = take k $ filter ((== 0) . (`mod` 3) . (subtract k)) xs

-- instance OEIS 33293 where
--   oeis = tablList @33293
-- instance Table 33293 where
--   rowCol = rowCol_off @33293 @1 @1
--   rowT   = rowT_off   @33293 @1
--   tabl = f 1 [1..] where
--      f k xs = ys : f (k+1) (dropWhile (<= last ys) xs) where
--        ys  = take k $ filter ((== 0) . (`mod` 8) . (subtract k)) xs

-- instance OEIS 33294 where
--   oeis = filter chi (oeis @290) where
--     chi m = m `mod` 10 > 0 && head ds `elem` [1,4,5,6,9] &&
--             (oeisIx @10052) (foldl (\v d -> 10 * v + d) 0 ds) == 1 where
--       ds = unfoldr
--            (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 10) m

instance OEIS 33307 where
  oeis = concatMap (map (fi . read . return) . show . fi) [1..]

-- instance OEIS 33308 where
--   oeis = concatMap (map (read . return) . show) (oeis @40) :: [Int]

-- instance OEIS 33428 where
--   oeisIx = (* 3) . (^ 2)
--   oeis = 0 : 3 : 12 : zipWith (+) (oeis @33428)
--      (map (* 3) $ tail $ zipWith (-) (tail (oeis @33428)) (oeis @33428))

-- instance OEIS 33484 where
--   oeisIx = (subtract 2) . (* 3) . (2 ^)
--   oeis = iterate ((subtract 2) . (* 2) . (+ 2)) 1

-- instance OEIS 33485 where
--   oeisIx n = (oeis @33485) !! (n - 1)
--   oeis = 1 : zipWith (+)
--      (oeis @33485) (concat $ transpose [oeis, (oeis @33485)])

-- instance OEIS 33491 where
--   oeisIx = head . (rowT @127824)

-- instance OEIS 33493 where
--   oeisIx = sum . (rowT @70165)

-- instance OEIS 33496 where
--   oeis = 1 : filter f [2, 4 ..] where
--      f x = x == maximum (takeWhile (/= 1) $ iterate (oeisIx @6370) x)

-- instance OEIS 33538 where
--   oeis =
--      1 : 1 : (map (+ 1) $ zipWith (+) (oeis @33538)
--                                       $ map (3 *) $ tail (oeis @33538))

-- instance OEIS 33539 where
--   oeis =
--      1 : 1 : 1 : (map (+ 1) $ zipWith (+) (tail (oeis @33539))
--                                           (map (2 *) $ drop 2 (oeis @33539)))

-- instance OEIS 33548 where
--   oeis = filter ((== 0) . (oeisIx @90431) . (oeisIx @49084)) (oeis @40)

-- instance OEIS 33549 where
--   oeis = filter ((== 0) . (oeisIx @90431)) [1..]

-- instance OEIS 33556 where
--   oeis = iterate (\x -> 2*x - (oeisIx x)) 3

-- instance OEIS 33569 where
--   oeisIx n = (2 * n - 1) * (3 * n + 1)
--   oeis = map (oeisIx @33569) [0..]

instance OEIS 33581 where
  oeisIx = (* 6) . (^ 2)

-- instance OEIS 33619 where
--   import Data.Set (fromList, deleteFindMin, insert)
--   oeisIx n = (oeis @33619) !! (n - 1)
--   oeis = [0..9] ++ (f $ fromList [10..99]) where
--      f s = m : f (insert (m * 10 + h) s') where
--        h = div (mod m 100) 10
--        (m,s') = deleteFindMin s

-- instance OEIS 33620 where
--   oeis = filter chi [1..] where
--      chi n = (oeisIx @136522) spf == 1 && (n' == 1 || chi n') where
--         n' = n `div` spf
--         spf = (oeisIx @20639) n

-- instance OEIS 33627 where
--   oeisIx n = (oeis @33627) !! (n - 1)
--   oeis = f [1..] [] where
--      f (x:xs) ys = x : f (xs \\ (map (+ x) ys)) (x:ys)

-- instance OEIS 33630 where
--   oeisIx 0 = 1
--   oeisIx n = p (oeisIx_row n) n where
--      p _  0 = 1
--      p [] _ = 0
--      p (d:ds) m = if d > m then 0 else p ds (m - d) + p ds m

-- instance OEIS 33632 where
--   oeis = filter (\x -> (oeisIx @62401) x == (oeisIx @62402) x) [1..]

instance OEIS 33638 where
  oeisIx = (+ 1) . (`div` 4) . (^ 2)

-- instance OEIS 33648 where
--   oeis = iterate (oeisIx @56964) 3

-- instance OEIS 33649 where
--   oeis = iterate (oeisIx @56964) 5

-- instance OEIS 33650 where
--   oeis = iterate (oeisIx @56964) 7

-- instance OEIS 33651 where
--   oeisIx n = (oeis @63051) !! n
--   oeis = iterate (oeisIx @56964) 879

-- instance OEIS 33664 where
--   oeis = filter (all ((== 1) . (oeisIx @10051). read) .
--                              init . tail . tails . show) (oeis @40)

-- instance OEIS 33676 where
--   oeisIx n = last $ takeWhile (<= (oeisIx @196) n) $ (rowT @27750) n

-- instance OEIS 33677 where
--   oeisIx n = head $
--      dropWhile ((< n) . (^ 2)) [d | d <- [1..n], mod n d == 0]

-- instance OEIS 33683 where
--   oeisIx n = fromEnum $ odd n && mod n 3 > 0 && (oeisIx @10052) n == 1

-- instance OEIS 33815 where
--   oeisIx n = (oeisIx @116854) (2 * n + 1) (n + 1)

-- instance OEIS 33845 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @33845) !! (n - 1)
--   oeis = f (singleton (2*3)) where
--      f s = m : f (insert (2*m) $ insert (3*m) s') where
--        (m,s') = deleteFindMin s

-- instance OEIS 33846 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @33846) !! (n - 1)
--   oeis = f (singleton (2*5)) where
--      f s = m : f (insert (2*m) $ insert (5*m) s') where
--        (m,s') = deleteFindMin s

-- instance OEIS 33847 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @33847) !! (n - 1)
--   oeis = f (singleton (2*7)) where
--      f s = m : f (insert (2*m) $ insert (7*m) s') where
--        (m,s') = deleteFindMin s

-- instance OEIS 33848 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @33848) !! (n - 1)
--   oeis = f (singleton (2*11)) where
--      f s = m : f (insert (2*m) $ insert (11*m) s') where
--        (m,s') = deleteFindMin s

-- instance OEIS 33849 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @33849) !! (n - 1)
--   oeis = f (singleton (3*5)) where
--      f s = m : f (insert (3*m) $ insert (5*m) s') where
--        (m,s') = deleteFindMin s

-- instance OEIS 33850 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @33850) !! (n - 1)
--   oeis = f (singleton (3*7)) where
--      f s = m : f (insert (3*m) $ insert (7*m) s') where
--        (m,s') = deleteFindMin s

-- instance OEIS 33851 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @33851) !! (n - 1)
--   oeis = f (singleton (5*7)) where
--      f s = m : f (insert (5*m) $ insert (7*m) s') where
--        (m,s') = deleteFindMin s

instance OEIS 33860 where
  oeis = iterate (oeisIx @70196) 1

-- instance OEIS 33876 where
--   oeisIx n = sum $ zipWith (!!) zss [0..n] where
--      zss = take (n+1) $ g (take (n+1) (1 : [0,0..])) where
--          g us = (take (n+1) $ g' us) : g (0 : init us)
--          g' vs = last $ take (2 * n + 3) $
--                         map snd $ iterate h (0, vs ++ reverse vs)
--      h (p,ws) = (1 - p, drop p $ zipWith (+) ([0] ++ ws) (ws ++ [0]))

-- instance OEIS 33877 where
--   oeis = tablList @33877
-- instance Table 33877 where
--   rowT n = (tabl @33877) !! n
--   tabl = iterate
--      (\row -> scanl1 (+) $ zipWith (+) ([0] ++ row) (row ++ [0])) [1]

instance OEIS 33931 where
  oeisIx (succ->n) = lcm n (lcm (n + 1) (n + 2))

instance OEIS 33942 where
  oeis = map (+1) $ filter ((> 2) . (oeisIx @1222)) [1..]

instance OEIS 33949 where
  oeis = filter (\x -> any ((== 1) . (`mod` x) . (^ 2)) [2 .. x - 2]) [1..]

-- instance OEIS 33950 where
--   oeis = [x | x <- [1..], x `mod` (oeisIx @5) x == 0]

-- instance OEIS 33958 where

-- instance OEIS 33959 where
--   (oeis, (oeis @33958)) = unzip $ (0, 1) : f 1 1 where
--      f i x | y > x     = (y, 2 * i - 1) : f (i + 1) y
--            | otherwise = f (i + 1) x
--            where y = (oeisIx @75680) i

-- instance OEIS 33989 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @33307) $ (oeisIx @185950) n

instance OEIS 33992 where
  oeis = map (+1) $ filter ((== 3) . (oeisIx @1221)) [1..]

instance OEIS 33999 where
  oeisIx = (1 -) . (* 2) . (`mod` 2)
  oeis = cycle [1,-1]

-- instance OEIS 34017 where
--   oeis = 0 : filter ((> 0) . (oeisIx @86)) [1..]

-- instance OEIS 34020 where
--   oeis = f [0..] (oeis @3136) where
--      f (x:xs) ys'@ (y:ys) | x < y = x : f xs ys'
--                          | otherwise = f xs ys

-- instance OEIS 34182 where
--   oeis = 1 : 5 : (map (+ 4) $
--      zipWith (+) (oeis @34182) (map (* 2) $ tail (oeis @34182)))

-- instance OEIS 34262 where
--   oeisIx n = (oeisIx @578) n + n

-- instance OEIS 34302 where
--   oeisIx n = (oeis @34302) !! (n - 1)
--   oeis = filter f $ drop 4 (oeis @38618) where
--      f x = all (== 1) $ map (oeisIx . read) $
--                zipWith (++) (inits $ show x) (tail $ tails $ show x)

-- instance OEIS 34303 where
--   oeisIx n = (oeis @34303) !! (n - 1)
--   oeis = filter f $ drop 4 (oeis @38618) where
--      f x = all (== 0) $ map (oeisIx . read) $
--                zipWith (++) (inits $ show x) (tail $ tails $ show x)

-- instance OEIS 34304 where
--   oeis = map read $ filter (f "") $
--                  map show $ dropWhile (< 10) (oeis @259315) :: [Integer] where
--      f _ "" = True
--      f us (v:vs) = (oeisIx @10051)' (read (us ++ vs)) == 1 && f (us ++ [v]) vs

-- instance OEIS 34305 where
--   oeis = filter f $ drop 9 (oeis @52382) where
--     f x = (oeisIx @10051)' x == 0 &&
--           (all (== 0) $ map (oeisIx' . read) $
--            zipWith (++) (inits $ show x) (tail $ tails $ show x))

-- instance OEIS 34380 where
--   oeisIx n = (oeisIx @10) n `div` (oeisIx @2322) n

-- instance OEIS 34387 where
--   oeis = scanl1 (+) (oeis @61397)

-- instance OEIS 34404 where
--   oeisIx = (oeisIx @292) . (oeisIx @2311)

-- instance OEIS 34444 where
--   oeisIx = genericLength . (rowT @77610)

-- instance OEIS 34460 where
--   oeisIx = sum . init . (rowT @77610)

-- instance OEIS 34676 where
--   oeisIx = sum . map (^ 2) . (rowT @77610)

-- instance OEIS 34684 where
--   oeisIx = minimum . (rowT @141809)

instance OEIS 34690 where
  oeisIx = sum . map (oeisIx @7953) . (rowT @27750) . succ

-- instance OEIS 34693 where
--   oeisIx n = head [k | k <- [1..], (oeisIx @10051) (k * n + 1) == 1]

-- instance OEIS 34694 where
--   oeisIx n = until ((== 1) . (oeisIx @10051)) (+ n) (n + 1)

-- instance OEIS 34698 where
--   oeis = f [2..] [1] where
--      f (x:xs) ys | (oeisIx @10051)' x == 1 &&
--                    (and $ map (isSquMod x) ys) = x : f xs (x:ys)
--                  | otherwise                   = f xs ys
--      isSquMod u v = v `mod` u `elem` (map ((`mod` u) . (^ 2)) [0..u-1])

-- instance OEIS 34699 where
--   oeisIx = last . (rowT @210208)

-- instance OEIS 34700 where
--   oeis = f [1,5..] [1] where
--      f (x:xs) ys | (oeisIx @10051)' x == 1 &&
--                    (and $ map (isSquMod x) ys) = x : f xs (x:ys)
--                  | otherwise                   = f xs ys
--      isSquMod u v = v `mod` u `elem` (map ((`mod` u) . (^ 2)) [0..u-1])

-- instance OEIS 34705 where
--   import Data.Set (deleteFindMin, union, fromList); import Data.List (inits)
--   oeisIx n = (oeis @34705) !! (n - 1)
--   oeis = f 0 (tail $ inits $ (oeis @290)) (fromList [0]) where
--      f x vss'@ (vs:vss) s
--        | y < x = y : f x vss' s'
--        | otherwise = f w vss (union s $ fromList $ scanl1 (+) ws)
--        where ws@ (w:_) = reverse vs
--              (y, s') = deleteFindMin s

-- instance OEIS 34706 where
--   -- import Data.Set (deleteFindMin, union, fromList); import Data.List (inits)
--   oeisIx n = (oeis @34706) !! (n - 1)
--   oeis = f 0 (tail $ inits $ (oeis @217)) (fromList [0]) where
--      f x vss'@ (vs:vss) s
--        | y < x = y : f x vss' s'
--        | otherwise = f w vss (union s $ fromList $ scanl1 (+) ws)
--        where ws@ (w:_) = reverse vs
--              (y, s') = deleteFindMin s

-- instance OEIS 34708 where
--   oeis = filter ((== 1) . (oeisIx @168046)) (oeis @214957)

-- instance OEIS 34709 where
--   oeisIx n = (oeis @34709) !! (n - 1)
--   oeis =
--      filter (\i -> i `mod` 10 > 0 && i `mod` (i `mod` 10) == 0) [1..]

-- instance OEIS 34710 where
--   oeis = map fi $ elemIndices 0 $ map (\x -> (oeisIx @7953) x - (oeisIx @7954) x) [1..]

-- instance OEIS 34757 where
--   oeisIx = (subtract 1) . (* 2) . (oeisIx @5282)

-- instance OEIS 34785 where
--   oeisIx = (2 ^) . (oeisIx @40)

-- instance OEIS 34791 where
--   oeis = 1 : f [2..] [1] where
--      f (x:xs) ys | and $ map (flip isSquMod x) ys = x : f xs (x:ys)
--                  | otherwise                      = f xs ys
--      isSquMod u v = u `mod` v `elem` (map ((`mod` v) . (^ 2)) [0..v-1])

-- instance OEIS 34793 where
--   oeis = 1 : f [2..] [1] where
--      f (x:xs) ys | and $ map (isSquMod x) ys = x : f xs (x:ys)
--                  | otherwise                 = f xs ys
--      isSquMod u v = u `mod` v `elem` (map ((`mod` v) . (^ 2)) [0..v-1])

-- instance OEIS 34794 where
--   oeis = 2 : f 2 (tail  (oeis @40)) where
--      f x (p:ps) = if elem x $ (rowT @46071) p then p : f p ps else f x ps

-- instance OEIS 34837 where
--   oeisIx n = (oeis @34837) !! (n - 1)
--   oeis = filter (\i -> i `mod` (oeisIx i) == 0) [1..]

-- instance OEIS 34838 where
--   oeis = filter f (oeis @52382) where
--      f u = g u where
--        g v = v == 0 || mod u d == 0 && g v' where (v',d) = divMod v 10

-- instance OEIS 34844 where
--   oeis = filter (not . any  (`elem` "2357") . show ) (oeis @40)

-- instance OEIS 34851 where
--   oeis = tablList @34851
-- instance Table 34851 where
--   rowCol n k = (rowT @34851) n !! k
--   rowT 0 = [1]
--   rowT 1 = [1,1]
--   oeisIx_row n = zipWith (-) (zipWith (+) ([0] ++ losa) (losa ++ [0]))
--                               ([0] ++ (rowT @204293) (n - 2) ++ [0])
--      where losa = (rowT @34851) (n - 1)
--   tabl = map (rowT @34851) [0..]

-- instance OEIS 34852 where
--   oeis = tablList @34852
-- instance Table 34852 where
--   rowT n = (tabl @34852) !! n
--   tabl = zipWith (zipWith (-)) (tabl @7318) (tabl @34851)

-- instance OEIS 34856 where
--   oeisIx = subtract 1 . (oeisIx @96)

-- instance OEIS 34868 where
--   oeis = tablList @34868
-- instance Table 34868 where
--   rowCol n k = (tabf @34868) !! n !! k
--   rowT n = (tabf @34868) !! n
--   tabf = map reverse (tabf @34869)

-- instance OEIS 34869 where
--   oeis = tablList @34869
-- instance Table 34869 where
--   rowCol n k = (tabf @34869) !! n !! k
--   rowT n = (tabf @34869) !! n
--   tabf = [1] : f 0 [1] where
--      f 0 us'@ (_:us) = ys : f 1 ys where
--                       ys = zipWith (+) us' (us ++ [0])
--      f 1 vs@ (v:_) = ys : f 0 ys where
--                     ys = zipWith (+) (vs ++ [0]) ([v] ++ vs)

-- instance OEIS 34870 where
--   oeis = tablList @34870
-- instance Table 34870 where
--   rowCol n k = (tabf @34870) !! n !! k
--   rowT n = (tabf @34870) !! n
--   tabf = map (rowT @7318) [0, 2 ..]

-- instance OEIS 34871 where
--   oeis = concat $ map ([1,1] ^) [1,3..]
--   instance Num a => Num [a] where
--      fromInteger k = [fromInteger k]
--      (p:ps) + (q:qs) = p + q : ps + qs
--      ps + qs         = ps ++ qs
--      (p:ps) * qs'@ (q:qs) = p * q : ps * qs' + [p] * qs
--      _ * _               = []

-- instance OEIS 34874 where
--   oeis = 1 : f 2 1 where
--      f x y = z : f (x + 1) z where z = (x * (oeisIx @4086) y)

-- instance OEIS 34877 where
--   oeis = tablList @34877
-- instance Table 34877 where
--   rowT n = (tabl @34877) !! n
--   tabl = map (init . tail) $ drop 2 (tabl @34852)

-- instance OEIS 34879 where
--   oeis = iterate (oeisIx @66459) 3

-- instance OEIS 34883 where
--   oeisIx = maximum . (rowT @51010)

-- instance OEIS 34886 where
--   oeisIx = (oeisIx @55642) . (oeisIx @142)

-- instance OEIS 34891 where
--   oeisIx = genericLength . (rowT @212721)

-- instance OEIS 34928 where
--   oeis = tablList @34928
-- instance Table 34928 where
--   rowCol n k = (tabf @34928) !! n !! k
--   rowT n = (tabf @34928) !! n
--   tabf = iterate f [1,1] where
--      f us = vs ++ [last vs] where
--             vs = zipWith (+) us (0 : scanl (+) 0 us)

-- instance OEIS 34930 where
--   oeis = tablList @34930
-- instance Table 34930 where
--   rowT n = (tabl @34930) !! n
--   tabl = iterate
--      (\ws -> zipWith (\u v -> mod (u + v) 8) ([0] ++ ws) (ws ++ [0])) [1]

-- instance OEIS 34931 where
--   oeis = tablList @34931
-- instance Table 34931 where
--   rowT n = (tabl @34931) !! n
--   tabl = iterate
--      (\ws -> zipWith ((flip mod 4 .) . (+)) ([0] ++ ws) (ws ++ [0])) [1]

-- instance OEIS 34932 where
--   oeis = tablList @34932
-- instance Table 34932 where
--   rowT n = (tabl @34932) !! n
--   tabl = iterate
--      (\ws -> zipWith ((flip mod 16 .) . (+)) ([0] ++ ws) (ws ++ [0])) [1]

instance OEIS 34953 where
  oeis = map (oeisIx @217) (oeis @40)

-- instance OEIS 34970 where
--   oeis = 2 : 3 : (map (oeisIx . (subtract 1)) $
--                           zipWith (*) (oeis @34970) $ tail (oeis @34970))

-- instance OEIS 35026 where
--   oeisIx n = sum $ map (oeisIx @10051 . (2 * n -)) $
--      takeWhile (< 2 * n) (oeis @40)

instance OEIS 35038 where
  oeis = map (sum . drop 6)  (tabl @7318)

instance OEIS 35039 where
  oeis = map (sum . drop 7)  (tabl @7318)

instance OEIS 35040 where
  oeis = map (sum . drop 8)  (tabl @7318)

instance OEIS 35041 where
  oeis = map (sum . drop 9)  (tabl @7318)

instance OEIS 35042 where
  oeis = map (sum . drop 10) (tabl @7318)

-- instance OEIS 35103 where
--   oeisIx = (oeisIx @23416) . (oeisIx @40)

-- instance OEIS 35106 where
--   import Data.List.Ordered (union)
--   oeisIx n = (oeis @35106) !! (n - 1)
--   oeis = 1 : tail (union (oeis @2378) (oeis @5563))

-- instance OEIS 35116 where
--   oeisIx = (^ 2) . (oeisIx @5)'

-- instance OEIS 35137 where
--   oeis = filter ((== 0) . (oeisIx @260254)) [0..]

-- instance OEIS 35166 where
--   oeisIx n = (oeis @35166) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (/= 0) $ zipWith (-) (tail gs) gs
--      where gs = 0 : map (oeisIx @7913) (oeis @7407)

-- instance OEIS 35191 where
--   oeisIx n = (oeisIx @1817) n + (oeisIx @1822) n

-- instance OEIS 35250 where
--   oeisIx n = sum $ map (oeisIx @10051) [n..2*n]

-- instance OEIS 35263 where
--   oeisIx n = (oeis @35263) !! (n - 1)
--   oeis = zipWith xor (oeis @10060) $ tail (oeis @10060)

-- instance OEIS 35294 where
--   import Data.MemoCombinators (memo2, integral)
--   oeisIx n = (oeis @35294) !! n
--   oeis = f 1 where
--      f x = (p' 1 (x - 1)) : f (x + 2)
--      p' = memo2 integral integral p
--      p _ 0 = 1
--      p k m = if m < k then 0 else p' k (m - k) + p' (k + 2) m

-- instance OEIS 35302 where
--   oeis = 0 : 1 : (-2) :
--      zipWith (+) (drop 2 $ map (* 2) (oeis @35302))
--                  (map (* 4) $ zipWith (-) (oeis @35302) $ tail (oeis @35302))

-- instance OEIS 35306 where
--   oeis = tablList @35306
-- instance Table 35306 where
--   rowCol n k = (rowT @35306) n !! (k-1)
--   rowT 1 = [1,1]
--   rowT n = concat $ transpose [oeisIx_row n, (rowT @124010) n]
--   tabf = map (rowT @35306) [1..]

-- instance OEIS 35316 where
--   oeisIx n = product $
--      zipWith (\p e -> (p ^ (e + 2 - mod e 2) - 1) `div` (p ^ 2 - 1))
--              (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 35317 where
--   oeis = tablList @35317
-- instance Table 35317 where
--   rowT n = (tabl @35317) !! n
--   tabl = map snd $ iterate f (0, [1]) where
--      f (i, row) = (1 - i, zipWith (+) ([0] ++ row) (row ++ [i]))

-- instance OEIS 35324 where
--   oeis = tablList @35324
-- instance Table 35324 where
--   rowCol = rowCol_off @35324 @1 @1
--   rowT   = rowT_off   @35324 @1
--   tabl = map snd $ iterate f (1, [1]) where
--      f (i, xs)  = (i + 1, map (`div` (i + 1)) $
--         zipWith (+) ((map (* 2) $ zipWith (*) [2 * i + 1 ..] xs) ++ [0])
--                     ([0] ++ zipWith (*) [2 ..] xs))

-- instance OEIS 35327 where
--   oeisIx n = if n <= 1 then 1 - n else 2 * (oeisIx @35327) n' + 1 - b
--               where (n',b) = divMod n 2

-- instance OEIS 35336 where
--   oeisIx n = (oeis @35336) !! (n - 1)
--   oeis = elemIndices 0 (oeis @5713)

-- instance OEIS 35342 where
--   oeis = tablList @35342
-- instance Table 35342 where
--   rowCol = rowCol_off @35342 @1 @1
--   rowT   = rowT_off   @35342 @1
--   tabl = map fst $ iterate (\ (xs, i) -> (zipWith (+)
--      ([0] ++ xs) $ zipWith (*) [i..] (xs ++ [0]), i + 2)) ([1], 3)

-- instance OEIS 35514 where
--   oeis = map (read . concatMap show) (tabf @35516) :: [Integer]

-- instance OEIS 35515 where
--   oeis = map (read . concatMap show) (tabf @35517) :: [Integer]

instance OEIS 35516 where
  oeis = tablList @35516
instance Table 35516 where
  tabf = map (rowT @35516) [0..]
  rowT 0 = [0]
  rowT n = z n $ reverse $ takeWhile (<= n) (oeis @45) where
     z 0 _              = []
     z x (f:fs'@ (_:fs)) = if f <= x then f : z (x - f) fs else z x fs'

-- instance OEIS 35517 where
--   oeis = tablList @35517
-- instance Table 35517 where
--   rowCol n k = (tabf @35517) !! n !! k
--   rowT n = (tabf @35517) !! n
--   tabf = map reverse (tabf @35516)

-- instance OEIS 35522 where
--   oeis = iterate (oeisIx @55944) 1

-- instance OEIS 35524 where
--   oeis = iterate (oeisIx @55948) 1

-- instance OEIS 35526 where
--   oeisIx = (oeisIx @7088) . (oeisIx @35522)

-- instance OEIS 35532 where
--   oeisIx 1 = 1
--   oeisIx n = if (oeisIx @10051)' n == 0 then phi2 else phi2 - (oeisIx @120) n + 1
--               where phi2 = 2 * (oeisIx @10) n

-- instance OEIS 35607 where
--   oeis = tablList @35607
-- instance Table 35607 where
--   rowT n = (tabl @35607) !! n
--   tabl = map fst $ iterate
--      (\ (us, vs) -> (vs, zipWith (+) ([0] ++ us ++ [0]) $
--                         zipWith (+) ([0] ++ vs) (vs ++ [0]))) ([1], [1, 2])

-- instance OEIS 35612 where
--   oeisIx = (oeisIx @7814) . (oeisIx @22340)

-- instance OEIS 35614 where
--   oeisIx = (oeisIx @122840) . (oeisIx @14417) . (+ 1)

-- instance OEIS 35928 where
--   oeis = filter (\x -> (oeisIx @36044) x == x) [0,2..]

-- instance OEIS 35930 where
--   oeisIx n | n < 10    = 0
--            | otherwise = maximum $ zipWith (*)
--               (map read $ init $ tail $ inits $ show $ fi n)
--               (map read $ tail $ init $ tails $ show $ fi n)

-- instance OEIS 35959 where
--   oeisIx = p (oeis @47201) where
--      p _      0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 36044 where
--   oeisIx 0 = 1
--   oeisIx n = foldl (\v d -> 2 * v + d) 0 (unfoldr bc n) where
--      bc 0 = Nothing
--      bc x = Just (1 - m, x') where (x',m) = divMod x 2

-- instance OEIS 36059 where
--   oeisIx n = (oeis @36059) !! n
--   oeis = map (read . concatMap show) fss :: [Integer] where
--      fss = [1] : [1] : zipWith h (tail fss) fss where
--            h vs ws = concatMap (\us -> [length us, head us]) $
--                      group $ reverse $ sort $ vs ++ ws

-- instance OEIS 36103 where
--   oeisIx n = (oeis @36103) !! n
--   oeis = 0 : 1 : map (read . concatMap say . group . reverse . sort)
--                  (zipWith ((++) `on` show) (oeis @36103) $ tail (oeis @36103))
--                  where say w = (show $ length w) ++ [head w]

-- instance OEIS 36106 where
--   oeisIx n = (oeis @36106) !! n
--   oeis = 1 : 2 : map (read . concatMap say . reverse . group . sort)
--                  (zipWith ((++) `on` show) (oeis @36106) $ tail (oeis @36106))
--                  where say ws = (show $ length ws) ++ [head ws]

-- instance OEIS 36234 where
--   oeisIx = (+ 1) . (oeisIx @720)

-- instance OEIS 36241 where
--   import qualified Data.Set as Set (null, map)
--   import Data.Set (empty, fromList, toList, intersect, union)
--   oeisIx n = (oeis @36241) !! (n - 1)
--   oeis = f [1..] [] empty empty where
--      f (x:xs) ys s2 s3
--       | null (s2' `intersect` y2s) && null (s3' `intersect` y3s)
--         = x : f xs (x:ys) (fromList s2' `union` s2) (fromList s3' `union` s3)
--       | otherwise = f xs ys s2 s3
--       where s2' = sort $ map (x +) ys
--             s3' = sort $ map (x +) y2s
--             y2s = toList s2
--             y3s = toList s3

-- instance OEIS 36262 where
--   oeis = tablList @36262
-- instance Table 36262 where
--   rowCol n k = delta !! (n - k) !! (k - 1) where delta = iterate
--      (\pds -> zipWith (\x y -> abs (x - y)) (tail pds) pds) (oeis @40)

instance OEIS 36263 where
  oeis = zipWith (-) (tail (oeis @1223)) (oeis @1223)

-- instance OEIS 36288 where
--   oeisIx n = 1 + sum (zipWith (*)
--               (oeisIx_row n) (map fi $ (rowT @124010) n))

instance OEIS 36289 where
  oeisIx n = n * 2 ^ n
  oeis = zipWith (*) [0..] (oeis @79)

-- instance OEIS 36299 where
--   oeis = map read rabbits :: [Integer] where
--      rabbits = "1" : "10" : zipWith (++) (tail rabbits) rabbits

-- instance OEIS 36355 where
--   oeis = tablList @36355
-- instance Table 36355 where
--   rowT n = (tabl @36355) !! n
--   tabl = [1] : f [1] [1,1] where
--      f us vs = vs : f vs (zipWith (+)
--                          (zipWith (+) ([0,0] ++ us) (us ++ [0,0]))
--                          (zipWith (+) ([0] ++ vs) (vs ++ [0])))

-- instance OEIS 36391 where
--   oeisIx = sum . (rowT @139366)

-- instance OEIS 36433 where
--   oeis = filter f [1..] where
--      f x = d < 10 && ("0123456789" !! d) `elem` show x where d = (oeisIx @5) x

-- instance OEIS 36441 where
--   oeis = tail (oeis @76271)

-- instance OEIS 36447 where
--   oeis = iterate (oeisIx @4093) 1

-- instance OEIS 36449 where
--   oeis = map fst listsOfValsAndDiffs
--   oeisIx n = (oeis @189475) !! (n - 1)
--   oeis = tail $ map snd listsOfValsAndDiffs
--   listsOfValsAndDiffs = (0,1) : f (0,1) where
--      f (x,y) = (u,v) : f (u,v) where
--        u = x + v
--        v = head $ dropWhile ((== 0) . (oeisIx @10052) . (+ x)) $ tail (oeis @217)

-- instance OEIS 36454 where
--   oeisIx n = (oeis @9087) !! (n - 1)
--   oeis = filter ((== 1) . (oeisIx @10051) . (+ 1) . (oeisIx @100995)) (oeis @961)

-- instance OEIS 36467 where
--   oeis = 1 : zipWith (-) (oeis @40) (oeis @36467)

-- instance OEIS 36490 where
--   import Data.Set (Set, fromList, insert, deleteFindMin)
--   oeisIx n = (oeis @36490) !! (n - 1)
--   oeis = f $ fromList [5,7,11] where
--      f s = m : (f $ insert (5 * m) $ insert (7 * m) $ insert (11 * m) s')
--            where (m, s') = deleteFindMin s

-- instance OEIS 36491 where
--   oeisIx n = f z z where
--      f x y | x `mod` 2401 == 0 = f (x `div` 49) (y `div` 7)
--            | x `mod` 343 == 0  = y `div` 7
--            | otherwise         = y
--      z = (oeisIx @36490) n

-- instance OEIS 36537 where
--   oeis = filter ((== 1) . (oeisIx @209229) . (oeisIx @5)) [1..]

-- instance OEIS 36552 where
--   oeisIx n = (oeis @36552) !! (n - 1)
--   oeis = g [1..] where
--      g (x:xs) = x : (2*x) : (g $ delete (2*x) xs)

-- instance OEIS 36554 where
--   oeisIx = (+ 1) . (oeisIx @79523)

instance OEIS 36555 where
  oeisIx = (oeisIx @120) . (* 3)

-- instance OEIS 36561 where
--   oeis = tablList @36561
-- instance Table 36561 where
--   rowCol n k = (tabf @36561) !! n !! k
--   rowT n = (tabf @36561) !! n
--   tabf = iterate (\xs@ (x:_) -> x * 2 : map (* 3) xs) [1]

-- instance OEIS 36581 where
--   oeis = zipWith (\u v -> if u /= v then 2 * u + v - 1 else 2)
--                          (oeis @10060) $ tail (oeis @10060)

-- instance OEIS 36585 where
--   oeis = 3 : concat (map f (oeis @36585))
--   where f 1 = [1,2,3]; f 2 = [1,3]; f 3 = [2]

-- instance OEIS 36667 where
--   oeis = filter (even . flip mod 2 . (oeisIx @1222)) (oeis @3586)

-- instance OEIS 36689 where
--   oeis = zipWith (*) (oeis @40) $ map pred (oeis @40)

-- instance OEIS 36691 where
--   oeis = scanl1 (*) (oeis @2808)

-- instance OEIS 36692 where
--   oeisIx n = (oeisIx @36355) (2 * n) n

instance OEIS 36695 where
  oeisIx n = genericLength [ (x,y) | x <- [-n..n], y <- [0..n], x^2 + y^2 <= n^2]

-- instance OEIS 36746 where
--   oeisIx n = (oeis @36746) !! (n - 1)
--   oeis = map (+ 1) $ mapMaybe (`elemIndex` (oeis @61493))
--      (map (read . reverse) $ tail $ inits $ reverse $ show $ (oeisIx @61493) 3888)

-- instance OEIS 36763 where
--   oeis = filter ((== 0) . (oeisIx @51521)) [1..]

-- instance OEIS 36786 where
--   oeis = [x | x <- [1..], (oeisIx @6968) x < (oeisIx @55642) x]

-- instance OEIS 36787 where
--   oeis = [x | x <- [1..], (oeisIx @6968) x == (oeisIx @55642) x]

-- instance OEIS 36788 where
--   oeis = [x | x <- [1..], (oeisIx @6968) x <= (oeisIx @55642) x]

instance OEIS 36799 where
  oeisIx n = (n - 1) * 2 ^ (n + 1) + 2

instance OEIS 36827 where
  oeisIx n = 2^ (n+1) * (n^3 - 3*n^2 + 9*n - 13) + 26

-- instance OEIS 36829 where
--   oeisIx n = sum $ map
--      (\k -> (oeisIx (3*k) k) * (oeisIx (3*n - 3*k-2) (n-k-1))) [0..n-1]

-- instance OEIS 36839 where
--   oeisIx = (oeisIx @4185) . (oeisIx @56964)

-- instance OEIS 36844 where
--   oeis = filter ((== 0). (oeisIx @238525)) [2..]

-- instance OEIS 36916 where
--   oeisIx n = sum $ map
--      (\k -> (oeisIx (2*n - 2*k) (n - k))^2 * (oeisIx @7318 n k)^2) [0..n]

-- instance OEIS 36917 where
--   oeisIx n = sum $ map
--      (\k -> (oeisIx (2*n - 2*k) (n - k))^2 * (oeisIx @7318 (2*k) k)^2) [0..n]

-- instance OEIS 36966 where
--   import Data.Set (singleton, deleteFindMin, fromList, union)
--   oeisIx n = (oeis @36966) !! (n - 1)
--   oeis = 1 : f (singleton z) [1, z] zs where
--      f s q3s p3s'@ (p3:p3s)
--        | m < p3 = m : f (union (fromList $ map (* m) ps) s') q3s p3s'
--        | otherwise = f (union (fromList $ map (* p3) q3s) s) (p3:q3s) p3s
--        where ps = (rowT @27748) m
--              (m, s') = deleteFindMin s
--      (z:zs) = (oeis @30078)

-- instance OEIS 36967 where
--   import Data.Set (singleton, deleteFindMin, fromList, union)
--   oeisIx n = (oeis @36967) !! (n - 1)
--   oeis = 1 : f (singleton z) [1, z] zs where
--      f s q4s p4s'@ (p4:p4s)
--        | m < p4 = m : f (union (fromList $ map (* m) ps) s') q4s p4s'
--        | otherwise = f (union (fromList $ map (* p4) q4s) s) (p4:q4s) p4s
--        where ps = (rowT @27748) m
--              (m, s') = deleteFindMin s
--      (z:zs) = (oeis @30514)

-- instance OEIS 36969 where
--   oeis = tablList @36969
-- instance Table 36969 where
--   rowCol = rowCol_off @36969 @1 @1
--   rowT   = rowT_off   @36969 @1
--   tabl = iterate f [1] where
--      f row = zipWith (+)
--        ([0] ++ row) (zipWith (*) (tail (oeis @290)) (row ++ [0]))

instance OEIS 36987 where
  oeisIx n = ibp (n+1) where
     ibp 1 = 1
     ibp n = if r > 0 then 0 else ibp n' where (n',r) = divMod n 2
  oeis = 1 : f [0,1] where f (x:y:xs) = y : f (x:xs ++ [x,x+y])

instance OEIS 36988 where
  oeisIx = (oeisIx @63524) . (oeisIx @36989)

instance OEIS 36989 where
  oeis = 1 : concat (transpose
     [map (+ 1) (oeis @36989), map ((max 1) . pred) $ tail (oeis @36989)])

instance OEIS 36990 where
  oeis = filter ((== 1) . (oeisIx @36989)) [0..]

instance OEIS 36991 where
  oeis = filter ((p 1) . (rowT @30308)) [0..] where
     p _    [_]    = True
     p ones (0:bs) = ones > 1 && p (ones - 1) bs
     p ones (1:bs) = p (ones + 1) bs

instance OEIS 36992 where
  oeis = c (oeis @36990) (tail (oeis @36991)) [0..] where
     c us'@ (u:us) vs'@ (v:vs) (w:ws)
       | w == u    = c us vs' ws
       | w == v    = c us' vs ws
       | otherwise = w : c us' vs' ws

instance OEIS 36993 where
  oeis = filter ((p 0) . (rowT @30308)) [0..] where
     p _     []     = True
     p zeros (0:bs) = p (zeros + 1) bs
     p zeros (1:bs) = zeros > 1 && p (zeros - 1) bs

instance OEIS 36994 where
  oeis = filter ((p 0) . (rowT @30308)) [1, 3 ..] where
     p ones []    = ones > 0
     p ones (0:bs) = ones > 1 && p (ones - 1) bs
     p ones (1:bs) = p (ones + 1) bs

-- instance OEIS 36998 where
--   oeisIx n = p (rowT @38566 n) n where
--      p _      0 = 1
--      p []     _ = 0
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

instance OEIS 37013 where
  oeis = 0 : filter
     (all (< 0) . (\x -> zipWith (-) (tail $ rls x) $ rls x)) [1..] where
         rls = map length . group . unfoldr
               (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2)

instance OEIS 37014 where
  oeis = 0 : filter
     (all (<= 0) . (\x -> zipWith (-) (tail $ rls x) $ rls x)) [1..] where
         rls = map length . group . unfoldr
               (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2)

instance OEIS 37015 where
  oeis = filter (all (> 0) . ds) [0..] where
     ds x = zipWith (-) (tail gs) gs where
        gs = map length $ group $ (rowT @30308) x

instance OEIS 37016 where
  oeis = 0 : filter
     (all (>= 0) . (\x -> zipWith (-) (tail $ rls x) $ rls x)) [1..] where
         rls = map length . group . unfoldr
               (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2)

-- instance OEIS 37019 where
--   oeisIx = product .
--      zipWith (^) (oeis @40) . reverse . map (subtract 1) . (rowT @27746)

-- instance OEIS 37020 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @1065)) [1..]

-- instance OEIS 37027 where
--   oeis = tablList @37027
-- instance Table 37027 where
--   rowT n = (tabl @37027) !! n
--   tabl = [1] : [1,1] : f [1] [1,1] where
--      f xs ys = ys' : f ys ys' where
--        ys' = zipWith3 (\u v w -> u + v + w) (ys ++ [0]) (xs ++ [0,0]) ([0] ++ ys)

-- instance OEIS 37074 where
--   oeisIx = subtract 1 . (oeisIx @75369)

instance OEIS 37124 where
  oeis = f [1..9] where f (x:xs) = x : f (xs ++ [10*x])

-- instance OEIS 37126 where
--   oeis = tablList @37126
-- instance Table 37126 where
--   rowCol = rowCol_off @37126 @1 @1
--   rowT   = rowT_off   @37126 @1
--   tabl = map (`take` (oeis @40)) [1..]

-- instance OEIS 37143 where
--   oeis = 1 : merge (oeis @40) (oeis @1358) where
--      merge xs'@ (x:xs) ys'@ (y:ys) =
--            if x < y then x : merge xs ys' else y : merge xs' ys

-- instance OEIS 37161 where
--   oeisIx n = (oeis @37161) !! n
--   oeis = 0 : map numerator
--     (concat $ concat $ transpose [map (map negate) qss, map reverse qss])
--     where qss = map q [1..]
--           q x = map (uncurry (%)) $ filter ((== 1) . uncurry gcd) $
--                     zip (reverse zs) zs where zs = [1..x]

-- instance OEIS 37162 where
--   oeisIx n = (oeis @37162) !! n
--   oeis = 1 : map denominator
--     (concat $ concat $ transpose [map (map negate) qss, map reverse qss])
--     where qss = map q [1..]
--           q x = map (uncurry (%)) $ filter ((== 1) . uncurry gcd) $
--                     zip (reverse zs) zs where zs = [1..x]

-- instance OEIS 37166 where
--   oeis = zipWith (*) (oeis @40) $
--                              map (subtract 1) $ tail (oeis @40)

instance OEIS 37201 where
  oeis = f (oeis @1223) where
     f (x:xs@ (x':_)) | x == x'   = f xs
                     | otherwise = x : f xs

-- instance OEIS 37213 where
--   oeisIx n = if n == r ^ 2 then r else 0  where r = (oeisIx @196) n
--   oeis = zipWith (*) (oeis @10052) (oeis @196)

-- instance OEIS 37227 where
--   oeisIx = (+ 1) . (* 2) . (oeisIx @7814)

-- instance OEIS 37254 where
--   oeis = tablList @37254
-- instance Table 37254 where
--   rowCol = rowCol_off @37254 @1 @1
--   rowT   = rowT_off   @37254 @1
--   tabl = map fst $ iterate f ([1], drop 2 (oeis @2083)) where
--      f (row, (x:xs)) = (map (+ x) (0 : row), xs)

-- instance OEIS 37264 where
--   oeis = filter ((== 1) . (oeisIx @168046)) $
--                         takeWhile (<= 999999999) (oeis @214958)

-- instance OEIS 37268 where
--   oeis = filter ((== 1) . (oeisIx @168046)) $
--                         takeWhile (<= 999999999) (oeis @214959)

-- instance OEIS 37271 where
--   oeisIx = genericLength . takeWhile ((== 0) . (oeisIx @10051)'') .
--                                iterate (oeisIx @37276) . (oeisIx @2808)

-- instance OEIS 37273 where
--   oeisIx 1 = -1
--   oeisIx n = genericLength $ takeWhile ((== 0) . (oeisIx @10051)) $
--      iterate (\x -> read $ concatMap show $ (rowT @27746) x :: Integer) n

-- instance OEIS 37276 where
--   oeisIx = read . concatMap show . (rowT @27746)

-- instance OEIS 37277 where
--   oeisIx 1 = 0
--   oeisIx n = read $ concat $ map show $ tail $ (rowT @27750) n

-- instance OEIS 37278 where
--   oeisIx = read . concatMap show . (rowT @27750) :: Integer -> Integer

-- instance OEIS 37283 where
--   oeisIx = read . concat . (map show) . (rowT @182469) :: Integer -> Integer

-- instance OEIS 37284 where
--   oeisIx n
--      | (oeisIx @209229) n == 1 = 0
--      | otherwise      = read $ concat $ (map show) $ tail $ (rowT @182469) n

-- instance OEIS 37285 where
--   oeisIx n
--   | (oeisIx @209229) n == 1 = 0
--   | (oeisIx @10051) n == 1 = 0
--   | otherwise = read $ concat $ (map show) $ delete n $ tail $ (rowT @182469) n

-- instance OEIS 37306 where
--   oeis = tablList @37306
-- instance Table 37306 where
--   rowCol n k = div (sum $ map f $ (rowT @27750) $ gcd n k) n where
--      f d = (oeisIx @10) d * (oeisIx @7318)' (div n d) (div k d)
--   rowT n = map (oeisIx n) [1..n]
--   tabl = map (rowT @37306) [1..]

oeis37372_37407 a b
  = filter f [1..] where
      f x = null $ nub (ds a x) \\ nub (ds b x)
      ds b x = if x > 0 then d : ds b x' else []  where (x', d) = divMod x b

instance OEIS 37372 where
  oeis = oeis37372_37407 2 3

instance OEIS 37373 where
  oeis = oeis37372_37407 2 4

instance OEIS 37374 where
  oeis = oeis37372_37407 2 5

instance OEIS 37375 where
  oeis = oeis37372_37407 2 6

instance OEIS 37376 where
  oeis = oeis37372_37407 2 7

instance OEIS 37377 where
  oeis = oeis37372_37407 2 8

instance OEIS 37378 where
  oeis = oeis37372_37407 2 9

instance OEIS 37379 where
  oeis = oeis37372_37407 2 10

instance OEIS 37380 where
  oeis = oeis37372_37407 3 4

instance OEIS 37381 where
  oeis = oeis37372_37407 3 5

instance OEIS 37382 where
  oeis = oeis37372_37407 3 6

instance OEIS 37383 where
  oeis = oeis37372_37407 3 7

instance OEIS 37384 where
  oeis = oeis37372_37407 3 8

instance OEIS 37385 where
  oeis = oeis37372_37407 3 9

instance OEIS 37386 where
  oeis = oeis37372_37407 3 10

instance OEIS 37387 where
  oeis = oeis37372_37407 4 5

instance OEIS 37388 where
  oeis = oeis37372_37407 4 6

instance OEIS 37389 where
  oeis = oeis37372_37407 4 7

instance OEIS 37390 where
  oeis = oeis37372_37407 4 8

instance OEIS 37391 where
  oeis = oeis37372_37407 4 9

instance OEIS 37392 where
  oeis = oeis37372_37407 4 10

instance OEIS 37393 where
  oeis = oeis37372_37407 5 6

instance OEIS 37394 where
  oeis = oeis37372_37407 5 7

instance OEIS 37395 where
  oeis = oeis37372_37407 5 8

instance OEIS 37396 where
  oeis = oeis37372_37407 5 9

instance OEIS 37397 where
  oeis = oeis37372_37407 5 10

instance OEIS 37398 where
  oeis = oeis37372_37407 6 7

instance OEIS 37399 where
  oeis = oeis37372_37407 6 8

instance OEIS 37400 where
  oeis = oeis37372_37407 6 9

instance OEIS 37401 where
  oeis = oeis37372_37407 6 10

instance OEIS 37402 where
  oeis = oeis37372_37407 7 8

instance OEIS 37403 where
  oeis = oeis37372_37407 7 9

instance OEIS 37404 where
  oeis = oeis37372_37407 7 10

instance OEIS 37405 where
  oeis = oeis37372_37407 8 9

instance OEIS 37406 where
  oeis = oeis37372_37407 8 10

instance OEIS 37407 where
  oeis = oeis37372_37407 9 10

-- instance OEIS 37444 where
--   oeisIx n = p (map (^ 2) [1..]) (n^2) where
--      p _      0 = 1
--      p ks'@ (k:ks) m | m < k     = 0
--                     | otherwise = p ks' (m - k) + p ks m

-- instance OEIS 37445 where
--   oeisIx = product . map (oeisIx . (oeisIx @120)) . (rowT @124010)

-- instance OEIS 37800 where
--   oeisIx = f 0 . (rowT @30308) where
--      f c [_]          = c
--      f c (1 : 0 : bs) = f (c + 1) bs
--      f c (_ : bs)     = f c bs

-- instance OEIS 37834 where
--   oeisIx n = sum $ map fromEnum $ zipWith (/=) (tail bs) bs
--               where bs = (rowT @30308) n

-- instance OEIS 37861 where
--   oeisIx n = (oeisIx @23416) n - (oeisIx @120) n

-- instance OEIS 37888 where
--   oeisIx n = div (sum $ map abs $ zipWith (-) bs $ reverse bs) 2
--      where bs = (rowT @30308) n

-- instance OEIS 37904 where
--   oeisIx = f 9 0 where
--      f u v 0 = v - u
--      f u v z = f (min u d) (max v d) z' where (z', d) = divMod z 10

-- instance OEIS 37952 where
--   oeis = zipWith (-) (tail (oeis @1405)) (oeis @1405)

-- instance OEIS 37992 where
--   oeisIx n = head [x | x <- [1..], (oeisIx @5) x == 2 ^ n]

-- instance OEIS 38040 where
--   oeisIx n = (oeisIx @5) n * n

-- instance OEIS 38044 where
--   oeisIx n = (oeis @38044) !! (n - 1)
--   oeis = 1 : f 1 [1] where
--      f x ys = y : f (x + 1) (y:ys) where
--        y = sum $ zipWith ((*) `on` (oeisIx @38044)) divs $ reverse divs
--            where divs = (rowT @27750) x

-- instance OEIS 38107 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @720) $ (oeisIx @290) n

-- instance OEIS 38135 where
--   oeisIx n = genericIndex (oeis @38135) n
--   oeis = 0 : 1 : 1 : 1 : f 1 1 1 4 where
--      f u v w x = y : f v w y (x + 1) where
--        y = q (x - u) + q (x - v) + q (x - w)
--        q z = if abs z >= x then 0 else (oeisIx @38135) $ abs z

-- instance OEIS 38137 where
--   oeis = tablList @38137
-- instance Table 38137 where
--   rowT n = (tabl @38137) !! n
--   tabl = map reverse (tabl @37027)

-- instance OEIS 38163 where
--   oeisIx n = (oeis @38163) !! n
--   oeis = map
--       (sum . zipWith (*) (intersperse 0 $ tail (oeis @217)) . reverse) $
--       tail $ inits $ tail (oeis @217) where

-- instance OEIS 38186 where
--   oeisIx n = (oeis @38186) !! (n - 1)
--   oeis = map succ $ elemIndices 1
--                  $ zipWith (*) (map (oeisIx @188641) [1..]) (map (oeisIx @188642) [1..])

-- instance OEIS 38194 where
--   oeisIx = flip mod 9 . (oeisIx @40)

-- instance OEIS 38199 where
--   oeisIx n = sum [oeisIx (n `div` d) * (oeisIx d)| d <- (rowT @27750) n]

-- instance OEIS 38207 where
--   oeis = concat $ iterate ([2,1] *) [1]
--   instance Num a => Num [a] where
--      fromInteger k = [fromInteger k]
--      (p:ps) + (q:qs) = p + q : ps + qs
--      ps + qs         = ps ++ qs
--      (p:ps) * qs'@ (q:qs) = p * q : ps * qs' + [p] * qs
--      _ * _               = []

-- instance OEIS 38219 where
--   oeis = 0 : f [0] where
--      f us = a' : f (us ++ [a']) where
--           a' = b $ reverse $ map (`splitAt` us) [0..length us - 1] where
--              b ((xs,ys):xyss) | vs `isSuffixOf` xs = 1 - head ys
--                               | otherwise          = b xyss
--           vs = fromJust $ find (`isInfixOf` init us) $ tails us

-- instance OEIS 38220 where
--   oeis = tablList @38220
-- instance Table 38220 where
--   rowT n = (tabl @38220) !! n
--   tabl = iterate (\row ->
--      zipWith (+) (map (* 3) (row ++ [0])) (map (* 2) ([0] ++ row))) [1]

-- instance OEIS 38221 where
--   oeis = concat $ iterate ([3,3] *) [1]
--   instance Num a => Num [a] where
--      fromInteger k = [fromInteger k]
--      (p:ps) + (q:qs) = p + q : ps + qs
--      ps + qs         = ps ++ qs
--      (p:ps) * qs'@ (q:qs) = p * q : ps * qs' + [p] * qs
--      _ * _               = []

-- instance OEIS 38255 where
--   oeis = tablList @38255
-- instance Table 38255 where
--   rowT n = (tabl @38255) !! n
--   tabl = map reverse (tabl @13613)

-- instance OEIS 38365 where
--   oeisIx n = (oeis @38365) !! (n - 1)
--   oeis = filter (\x -> null (show (2*x) `intersect` show x)) [1..]

-- instance OEIS 38374 where
--   oeisIx = maximum . map length . filter ((== 1) . head) . group .
--      unfoldr (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2)

-- instance OEIS 38394 where
--   oeis = f "" (oeis @40) where
--      f xs (q:qs) = (read ys :: Integer) : f ys qs
--        where ys = show q ++ xs

-- instance OEIS 38397 where
--   oeis = f "" $ tail (oeis @290) where
--      f xs (q:qs) = (read ys :: Integer) : f ys qs
--        where ys = show q ++ xs

-- instance OEIS 38399 where
--   oeis = h "" $ tail (oeis @45) where
--      h xs (f:fs) = (read ys :: Integer) : h ys fs
--        where ys = show f ++ xs

-- instance OEIS 38444 where
--   oeis = 11 : f [11] 90 where
--      f xs@ (x:_) z = ys ++ f ys (10 * z) where
--                     ys = (x + z) : map (* 10) xs

-- instance OEIS 38447 where
--   import Data.Set (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @38447) !! (n - 1)
--   oeis = f $ fromList [11111] where
--      f s = m : f (union s' $ fromList $ g [] $ show m) where
--           (m, s') = deleteFindMin s
--      g _  []       = []
--      g us ('0':vs) = g (us ++ ['0']) vs
--      g us ('1':vs) = (read (us ++ "10" ++ vs)) : g (us ++ ['1']) vs

-- instance OEIS 38500 where
--   oeisIx = f 1 where
--      f y x = if m == 0 then f (y * 3) x' else y  where (x', m) = divMod x 3

-- instance OEIS 38502 where
--   oeisIx (succ->n) = if m > 0 then n else (oeisIx @38502) n'  where (n', m) = divMod n 3

-- instance OEIS 38505 where
--   oeis = tail $ zipWith (-) (tail (oeis @749)) (oeis @749)

-- instance OEIS 38507 where
--   oeisIx = (+ 1) . (oeisIx @142)
--   oeis = 2 : f 1 2 where
--      f x y = z : f (x + 1) z where z = x * (y - 1) + 1

-- instance OEIS 38509 where
--   oeis = [x | x <- (oeis @2808), gcd x 6 == 1]

-- instance OEIS 38528 where
--   oeisIx n = (oeis @38528) !! (n - 1)
--   oeis = gen ([1], 1) where
--      gen (_, 10) = []
--      gen (ds, len)
--         | len `elem` ds && chi ds
--           = foldr (\u v -> u + 10*v) 0 ds : gen (succ (ds, len))
--         | otherwise = gen (succ (ds, len))
--      chi xs = null ys || ys /= xs && chi ys where
--               ys = tr $ filter (/= length xs) xs
--               tr zs = if null zs || last zs > 0 then zs else tr $ init zs
--      succ ([], len)   = ([1], len + 1)
--      succ (d : ds, len)
--          | d < len = (head (dropWhile (<= d) (oeis @2024) \\ ds) : ds, len)
--          | otherwise = (0 : ds', len') where (ds', len') = succ (ds, len)

-- instance OEIS 38529 where
--   oeisIx n = (oeisIx @40) n - (oeisIx @2808) n

-- instance OEIS 38547 where
--   oeisIx n = fromJust $ find ((== n) . length . divisors) [1,3..]
--      where divisors m = filter ((== 0) . mod m) [1..m]

-- instance OEIS 38548 where
--   oeisIx n = genericLength $ takeWhile (<= (oeisIx @196) n) $ (rowT @27750) n

-- instance OEIS 38549 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @38548))

-- instance OEIS 38550 where
--   oeis = filter ((== 2) . (oeisIx @1227)) [1..]

-- instance OEIS 38554 where
--   oeisIx n = foldr (\d v -> v * 2 + d) 0 $ zipWith xor bs $ tail bs
--      where bs = (rowT @30308) n

-- instance OEIS 38555 where
--   oeisIx n = foldr (\d v -> v * 3 + d) 0 $
--      zipWith (\x y -> (x + y) `mod` 3) ts $ tail ts
--      where ts = (rowT @30341) n

-- instance OEIS 38556 where
--   oeisIx (fi->n) = fi do n `xor` (oeisIx $ 2 * n + 1) :: Integer

-- instance OEIS 38558 where
--   oeisIx = fromJust . (`elemIndex` (oeis @38554))

-- instance OEIS 38561 where
--   oeisIx = head . (rowT @46937)

-- instance OEIS 38566 where
--   oeis = tablList @38566
-- instance Table 38566 where
--   rowCol n k = (tabf @38566) !! (n - 1) !! (k-1)
--   rowT n = (tabf @38566) !! (n - 1)
--   oeisIx_tabf=
--      zipWith (\v ws -> filter ((== 1) . (gcd v)) ws) [1..] (tabl @2260)
--   oeis = concat (tabf @38566)

-- instance OEIS 38567 where
--   oeisIx n = (oeis @38567) !! n
--   oeis = concatMap (\x -> genericTake (oeisIx x) $ repeat x) [1..]

-- instance OEIS 38570 where
--   oeisIx = (oeisIx @38554) . fi . (oeisIx @38554)

-- instance OEIS 38571 where
--   oeisIx n = snd $ until
--      ((== 0) . fst) (\ (x, i) -> (fi $ (oeisIx @38554) x, i + 1)) (n, 0)

-- instance OEIS 38572 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @53645) n * m + n' where (n', m) = divMod n 2

-- instance OEIS 38573 where
--   oeisIx 0 = 0
--   oeisIx n = (m + 1) * (oeisIx n') + m where (n', m) = divMod n 2

-- instance OEIS 38575 where
--   oeisIx n = if n == 0 then 0 else (oeisIx @1222) $ (oeisIx @45) n

-- instance OEIS 38585 where
--   oeisIx 0 = 0
--   oeisIx n = (9 * m + 1) * (oeisIx n') + m where (n', m) = divMod n 2

-- instance OEIS 38608 where
--   oeisIx n = n * (-1) ^ n
--   oeis = [0, -1] ++ map negate
--      (zipWith (+) (oeis @38608) (map (* 2) $ tail (oeis @38608)))

-- instance OEIS 38610 where
--   oeisIx = foldl lcm 1 . (rowT @38566)

-- instance OEIS 38618 where
--   oeis = filter ((== 1) . (oeisIx @168046)) (oeis @40)

-- instance OEIS 38622 where
--   oeis = tablList @38622
-- instance Table 38622 where
--   rowT n = (tabl @38622) !! n
--   tabl = iterate (\row -> map sum $
--      transpose [tail row ++ [0,0], row ++ [0], [head row] ++ row]) [1]

instance OEIS 38664 where
  oeisIx = fi . (+ 1) . fromJust . (`elemIndex` (oeis @1223)) . (* 2) . succ

-- instance OEIS 38670 where
--   oeisIx n = (oeis @38670) !! (n - 1)
--   oeis = elemIndices 2 $ map (oeisIx @193095) [0..]

-- instance OEIS 38680 where
--   oeisIx n = (oeis @38680) !! (n - 1)
--   oeis = filter (any ((== 1) . (oeisIx @10051). read) .
--                              init . tail . tails . show) (oeis @40)

-- instance OEIS 38699 where
--   oeisIx = until ((== 1) . (oeisIx @10051)) ((+ 1) . (* 2)) . (subtract 1)

instance OEIS 38712 where
  oeisIx (succ-> (fi->n)) = fi (n `xor` (n - 1) :: Integer)

-- instance OEIS 38719 where
--   oeis = tablList @38719
-- instance Table 38719 where
--   rowT n = (tabl @38719) !! n
--   tabl = iterate f [1] where
--      f row = zipWith (+) (zipWith (*) [0..] $ [0] ++ row)
--                          (zipWith (*) [2..] $ row ++ [0])

-- instance OEIS 38720 where
--   oeisIx n = (oeis @38720) !! (n - 1)
--   oeis = (transpose $ map reverse (tabl @38719)) !! 1

-- instance OEIS 38721 where
--   oeisIx n = (oeis @38721) !! (n - 1)
--   oeis = (transpose (tabl @38719)) !! 2

-- instance OEIS 38722 where
--   oeis = concat (tabl @38722)
--   oeisIx_tabl = map reverse (tabl @27)
--   oeisIx_row n = (tabl @38722) !! (n - 1)

-- instance OEIS 38731 where
--   oeis = c [1] $ tail (oeis @45) where
--      c us vs'@ (v:vs) = (sum $ zipWith (*) us vs') : c (v:us) vs

-- instance OEIS 38754 where
--   oeisIx n = (oeis @38754) !! n
--   oeis = concat $ transpose [oeis, (oeis @8776)]

-- instance OEIS 38769 where
--   oeisIx n = genericLength $ filter (== 0)
--               $ map ((mod n) . digitToInt) $ filter (> '0') $ show n

-- instance OEIS 38770 where
--   oeis = filter f [1..] where
--      f u = g u where
--        g v = v > 0 && (((d == 0 || r > 0) && g v') || r == 0)
--              where (v',d) = divMod v 10; r = mod u d

-- instance OEIS 38772 where
--   oeisIx n = (oeis @38772) !! (n - 1)
--   oeis = filter p [1..] where
--      p n = all (> 0) $ map ((mod n) . digitToInt) $ filter (> '0') $ show n

-- instance OEIS 39634 where
--   oeisIx 1 = 1
--   oeisIx n = until ((== 1) . (oeisIx @10051)) (flip div 2) n

-- instance OEIS 39635 where
--   oeisIx 1 = 1
--   oeisIx n = until ((== 1) . (oeisIx @10051)) ((flip div 2) . (+ 1)) n

-- instance OEIS 39636 where
--   oeisIx 1 = 1
--   oeisIx n = snd $ until ((== 1) . (oeisIx @10051) . fst)
--                           (\ (x, i) -> (x `div` 2 , i + 1)) (n, 1)

-- instance OEIS 39637 where
--   oeisIx 1 = 1
--   oeisIx n = snd $ until ((== 1) . (oeisIx @10051) . fst)
--                           (\ (x, i) -> ((x + 1) `div` 2 , i + 1)) (n, 1)

-- instance OEIS 39638 where
--   oeisIx 1 = 1
--   oeisIx n = until ((== 1) . (oeisIx @10051)) (flip div 2) (oeisIx n - 1)

-- instance OEIS 39639 where
--   oeisIx = until ((== 1) . (oeisIx @10051)) (flip div 2) . (+ 1) . (oeisIx @40)

-- instance OEIS 39640 where
--   oeisIx 1 = 1
--   oeisIx n = until ((== 1) . (oeisIx @10051)) (flip div 2 . (+ 1)) (oeisIx n - 1)

-- instance OEIS 39641 where
--   oeisIx = until ((== 1) . (oeisIx @10051)) (flip div 2 . (+ 1)) . (+ 1) . (oeisIx @40)

-- instance OEIS 39642 where
--   oeisIx 1 = 1
--   oeisIx n = snd $ until ((== 1) . (oeisIx @10051) . fst)
--                     (\ (x, i) -> (x `div` 2 , i + 1)) (oeisIx n - 1, 1)

-- instance OEIS 39643 where
--   oeisIx n = snd $ until ((== 1) . (oeisIx @10051) . fst)
--                     (\ (x, i) -> (x `div` 2 , i + 1)) (oeisIx n + 1, 1)

-- instance OEIS 39644 where
--   oeisIx 1 = 1
--   oeisIx n = snd $ until ((== 1) . (oeisIx @10051) . fst)
--               (\ (x, i) -> ((x + 1) `div` 2 , i + 1)) (oeisIx n - 1, 1)

-- instance OEIS 39645 where
--   oeisIx n = snd $ until ((== 1) . (oeisIx @10051) . fst)
--               (\ (x, i) -> ((x + 1) `div` 2 , i + 1)) (oeisIx n + 1, 1)

-- instance OEIS 39649 where
--   oeisIx = (+ 1) . (oeisIx @10)

-- instance OEIS 39672 where
--   oeis = sieve 1 [1..] where
--      sieve k xs = z : sieve (k + 1) (fLucky xs) where
--         z = xs !! (k - 1 )
--         fLucky ws = us ++ fLucky vs where
--                (us, _:vs) = splitAt (z + xs !! k - 1) ws

-- instance OEIS 39686 where
--   oeis = filter ((== 1) . (oeisIx @10052)) (oeis @191933)

-- instance OEIS 39691 where
--   oeis = filter (f 0) [0..] where
--      f d x = d' + d < 10 && (x < 10 || f d' x') where (x', d') = divMod x 10

-- instance OEIS 39701 where
--   oeisIx = (`mod` 3) . (oeisIx @40)
--   oeis = map (`mod` 3) (oeis @40)

-- instance OEIS 39702 where
--   oeisIx = (`mod` 4) . (oeisIx @40)

-- instance OEIS 39723 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @39723) n' * 10 + m where
--      (n',m) = if r < 0 then (q + 1, r + 10) else qr where
--               qr@ (q, r) = quotRem n (negate 10)

-- instance OEIS 39724 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @39724) n' * 10 + m where
--      (n', m) = if r < 0 then (q + 1, r + 2) else (q, r)
--                where (q, r) = quotRem n (negate 2)

-- instance OEIS 39833 where
--   oeis = f (oeis @6881) where
--      f (u : vs@ (v : w : xs))
--        | v == u+1 && w == v+1 = u : f vs
--        | otherwise            = f vs

-- instance OEIS 39834 where
--   oeis = 1 : 1 : zipWith (-) (oeis @39834) (tail (oeis @39834))

-- instance OEIS 39913 where
--   oeis = tablList @39913
-- instance Table 39913 where
--   rowT n = (tabl @39913) !! n
--   tabl = [[0], [1, 1]] ++ f [0] [1, 1] where
--      f us@ (u:us') vs@ (v:vs') = ws : f vs ws where
--        ws = [u + v, u + v + v] ++ zipWith (+) us vs'

-- instance OEIS 39941 where
--   oeis = 0 : 1 : zipWith3 ($)
--      (cycle [ (+), (*)]) (oeis @39941) (tail (oeis @39941))

instance OEIS 39943 where
  oeis = [0,1,4,16,20,37,42,58,89,145]

-- instance OEIS 39955 where
--   oeis = filter ((== 1) . (`mod` 4)) (oeis @5117)

-- instance OEIS 39956 where
--   oeis = filter even (oeis @5117)

-- instance OEIS 39957 where
--   oeis = filter ((== 3) . (`mod` 4)) (oeis @5117)

-- instance OEIS 39966 where
--   oeisIx n = fromEnum (n < 2 || m < 2 && (oeisIx @39966) n' == 1)
--      where (n',m) = divMod n 3

instance OEIS 39995 where
  oeisIx n = fi . sum $
     map (oeisIx @10051) $ nub $ map (read :: String -> Integer) (tail $ subsequences $ show $ fi n)

-- instance OEIS 39997 where
--   oeisIx n = genericLength [p | p <- takeWhile (<= n) (oeis @40),
--                           show p `isInfixOf` show n]
--   oeis = map (oeisIx @39997) [1..]

-- instance OEIS 39999 where
--   oeisIx n = genericLength $ filter ((== 1) . (oeisIx @10051))
--                      (map read (nub $ permutations $ show n) :: [Integer])

instance OEIS 40000 where
  oeisIx 0 = 1
  oeisIx n = 2
  oeis = 1 : repeat 2

instance OEIS 40001 where
  oeisIx 0 = 1
  oeisIx n = 2 - mod n 2
  oeis = 1 : cycle [1, 2]

-- instance OEIS 40014 where
--   oeisIx = (oeisIx @720) . (oeisIx @149)

-- instance OEIS 40026 where
--   oeisIx n = f 1 where
--      f t | (1 - t*r) `mod` s == 0 = t*r
--          | (1 + t*r) `mod` s == 0 = - t*r
--          | otherwise              = f (t + 1)
--      (r,s) = split n 1
--      split x y | m == 0 = split x' (2 * y)
--                | m == 1 = (x,y) where (x',m) = divMod x 2

-- instance OEIS 40027 where
--   oeisIx n = head $ (rowT @46936) (n + 1)

-- instance OEIS 40040 where
--   oeisIx = flip div 2 . (oeisIx @14574)

-- instance OEIS 40051 where
--   oeisIx n = p 1 n :: Int where
--      p _ 0 = 1
--      p k m | k <= m = p k (m - k) `xor` p (k+1) m | k > m  = 0

-- instance OEIS 40081 where
--   oeisIx = genericLength . takeWhile ((== 0) . (oeisIx @10051)) .
--                          iterate  ((+ 1) . (* 2)) . (subtract 1)

-- instance OEIS 40976 where
--   oeisIx n = (oeisIx @40) n - 2
--   oeis = map (subtract 2) (oeis @40)

-- instance OEIS 41013 where
--   oeis = 1 : f 1 where
--      f x | rev <= x  = (2*x) : f (2*x)
--          | otherwise = rev : f rev where rev = (oeisIx @4086) x

-- instance OEIS 42939 where
--   oeisIx = (oeisIx @40997) . (oeisIx @40)

instance OEIS 42963 where
  oeis = [x | x <- [0..], mod x 4 `elem` [1,2]]

-- instance OEIS 42965 where
--   oeisIx =  (`div` 3) . (subtract 3) . (* 4)
--   oeis = 0 : 1 : 3 : map (+ 4) (oeis @42965)

-- instance OEIS 42968 where
--   oeisIx = (`div` 3) . (subtract 1) . (* 4)
--   oeis = filter ((/= 0) . (`mod` 4)) [1..]

-- instance OEIS 42974 where
--   oeis =  1 : 2 :
--      concat (zipWith replicate (tail (oeis @42974)) (oeis @42974))

-- instance OEIS 43096 where
--   oeisIx n = (oeis @43096) !! n
--   oeis = elemIndices 1 (oeis @196368)

-- instance OEIS 43276 where
--   oeisIx = maximum . (rowT @101211)

instance OEIS 43537 where
  oeisIx = genericLength . nub . show . fi . succ

-- instance OEIS 43545 where
--   oeisIx = (1 -) . (oeisIx @36987)

-- instance OEIS 43548 where
--   oeisIx n = f 1 where
--      f k = if distinct $ (map (div k)) [n, n - 1 .. 1] then k else f (k + 1)
--      distinct [_] = True; distinct (u:vs@ (v:_)) = u /= v && distinct vs

-- instance OEIS 44051 where
--   oeisIx = (`div` 2) . (+ 1) . (oeisIx @6995) . (+ 1)

-- instance OEIS 44102 where
--   oeisIx = (* 36)
--   oeis = [0, 36 ..]

-- instance OEIS 44432 where
--   oeis = scanl1 (\v b -> 2 * v + b) (oeis @5614)

-- instance OEIS 44813 where
--   oeisIx n = (oeis @44813) !! (n - 1)
--   oeis = filter p [1..] where
--      p x = nub xs == xs where
--            xs = map length $ group $ (rowT @30308) x

-- instance OEIS 45323 where
--   oeis = filter ((== 1). (oeisIx @10051)) (oeis @4776)

-- instance OEIS 45331 where
--   oeis = filter ((< 4) . (`mod` 6)) (oeis @40)

-- instance OEIS 45468 where
--   oeis = [x | x <- (oeis @47209), (oeisIx @10051) x == 1]

-- instance OEIS 45472 where
--   oeis = [x | x <- (oeis @47336), (oeisIx @10051) x == 1]

-- instance OEIS 45532 where
--   oeisIx n = read $ show n ++ show (oeisIx n) :: Integer

-- instance OEIS 45533 where
--   oeis = f $ map show (oeis @40) :: [Integer] where
--      f (t:ts@ (t':_)) = read (t ++ t') : f ts

-- instance OEIS 45537 where
--   oeisIx n = 2 + length
--      (takeWhile (not . ((show n) `isInfixOf`) . show) $ iterate (* n) (n^2))

-- instance OEIS 45541 where
--   oeis = 2 : f 2 where
--      f x = x' : f x'
--          where x' = read $ filter (`notElem` show x) $ show (x^2)

-- instance OEIS 45542 where
--   oeis = map (subtract 1) $ tail (oeis @1597)

-- instance OEIS 45572 where
--   oeis = filter ((/= 0) . (`mod` 5)) (oeis @5408)

-- instance OEIS 45616 where
--   import Math.NumberTheory.Moduli (powerMod)
--   oeisIx n = (oeis @45616) !! (n - 1)
--   oeis = filter
--                  (\p -> powerMod 10 (p - 1) (p ^ 2) == 1) (oeis @40)'

-- instance OEIS 45623 where
--   oeis = tail $ f (oeis @11782) [] where
--      f (u:us) vs = sum (zipWith (*) vs $ reverse ws) : f us ws
--        where ws = u : vs

-- instance OEIS 45636 where
--   oeisIx n = (oeis @45636) !! (n - 1)
--   oeis = findIndices (> 0) (oeis @45698)

instance OEIS 45661 where
  oeisIx (succ->n) = product [n'+d | d <- [1..n], let (n',m) = divMod n d, m == 0]

-- instance OEIS 45698 where
--   oeisIx n = genericLength $ filter (\x -> x > 0 && (oeisIx @10051)' x == 1) $
--   map (oeisIx . (n -)) $
--   takeWhile (<= div n 2) (oeis @1248)

-- instance OEIS 45708 where
--   oeis = filter ((== 2) . (oeisIx @30)) (oeis @40)

instance OEIS 45776 where
  oeis = iterate f 1 where
     f x = head $ dropWhile (<= x) [q,2*q..] where q = (oeisIx @7953) x

-- instance OEIS 45797 where
--   oeis = filter (even . (`mod` 10) . (`div` 10)) (oeis @45572)

-- instance OEIS 45798 where
--   oeis = filter (odd . (`mod` 10) . (`div` 10)) (oeis @45572)

-- instance OEIS 45800 where
--   oeisIx n = (oeis @45800) !! (n - 1)
--   oeis = findIndices (`elem` [1,7,43,49]) $ cycle [0..99]

-- instance OEIS 45801 where
--   oeisIx n = (oeis @45801) !! (n - 1)
--   oeis = findIndices (`elem` [11,39,73,77]) $ cycle [0..99]

-- instance OEIS 45802 where
--   oeisIx n = (oeis @45802) !! (n - 1)
--   oeis = findIndices (`elem` [3,21,29,47]) $ cycle [0..99]

-- instance OEIS 45803 where
--   oeisIx n = (oeis @45803) !! (n - 1)
--   oeis = findIndices (`elem` [17,19,31,33]) $ cycle [0..99]

-- instance OEIS 45804 where
--   oeisIx n = (oeis @45804) !! (n - 1)
--   oeis = findIndices (`elem` [9,41,63,87]) $ cycle [0..99]

-- instance OEIS 45805 where
--   oeisIx n = (oeis @45805) !! (n - 1)
--   oeis = findIndices (`elem` [51,57,93,99]) $ cycle [0..99]

-- instance OEIS 45806 where
--   oeisIx n = (oeis @45806) !! (n - 1)
--   oeis = findIndices (`elem` [23,27,61,89]) $ cycle [0..99]

-- instance OEIS 45807 where
--   oeisIx n = (oeis @45807) !! (n - 1)
--   oeis = findIndices (`elem` [53,71,79,97]) $ cycle [0..99]

-- instance OEIS 45808 where
--   oeisIx n = (oeis @45808) !! (n - 1)
--   oeis = findIndices (`elem` [67,69,81,83]) $ cycle [0..99]

-- instance OEIS 45809 where
--   oeisIx n = (oeis @45809) !! (n - 1)
--   oeis = findIndices (`elem` [13,37,59,91]) $ cycle [0..99]

-- instance OEIS 45844 where
--   oeis = iterate (oeisIx @95815) 1

instance OEIS 45887 where
  oeisIx n = genericLength $ filter (`isInfixOf` (show $ fi n)) $ map (show . fi) [0,2..n - 1]

instance OEIS 45888 where
  oeisIx (succ->n) = genericLength $ filter (`isInfixOf` (show $ fi n)) $ map (show . fi) [1,3..n - 1]

instance OEIS 45896 where
  oeisIx n = denominator $ n % ((n + 1) * (n + 2))

-- instance OEIS 45910 where
--   oeis =  [x | x <- takeWhile (<= 999999999) $ (oeis @9994),
--                        oeisIx x == 1]

-- instance OEIS 45917 where
--   oeisIx n = sum $ map (oeisIx . (2 * n -)) $ takeWhile (<= n) (oeis @40)

-- instance OEIS 45920 where
--   oeisIx n = (oeis @45920) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @76191)

instance OEIS 45925 where
  oeis = zipWith (*) [0..] (oeis @45)

instance OEIS 45926 where
  oeis = filter (all (`elem` "2468") . show . fi) [2, 4..]

instance OEIS 45928 where
  oeisIx (succ->n) = 3 * n - 2 * floor (1 + sqrt (fi n - 1))

-- instance OEIS 45953 where
--   oeisIx n = (oeis @45953) !! (n - 1)
--   oeis = filter chi (oeis @8851) where
--      chi n = (x == y && xs `isSub'` ys) where
--         x:xs = show $ div n 10
--         y:ys = show $ div (n^2) 10
--         isSub' us vs = any id $ zipWith (&&)
--                                 (map (`isPrefixOf` vs) $ inits us)
--                                 (map (`isSuffixOf` vs) $ tails us)

-- instance OEIS 45954 where
--   oeis =  2 : sieve 2 [2,4..] where
--      sieve k xs = z : sieve (k + 1) (lucky xs) where
--         z = xs !! (k - 1 )
--         lucky ws = us ++ lucky vs where
--               (us, _:vs) = splitAt (z - 1) ws

-- instance OEIS 45965 where
--   oeisIx n = if n == 1 then 2 else (oeisIx @3961) n

-- instance OEIS 45966 where
--   oeisIx 1 = 3
--   oeisIx n = product $ zipWith (^)
--               (map (oeisIx @101300) $ (rowT @27748) n) (oeisIx_row n)

-- instance OEIS 45967 where
--   oeisIx 1 = 4
--   oeisIx n = product $ zipWith (^)
--               (map (oeisIx @151800) $ (rowT @27748) n) (map (+ 1) $ (rowT @124010) n)

-- instance OEIS 45974 where
--   oeisIx n = g n n where
--      g x y = product [oeisIx (oeisIx pi + (oeisIx @49084) pj) ^ (ei * ej) |
--                       (pi,ei) <- zip (oeisIx_row x) (oeisIx_row x),
--                       (pj,ej) <- zip (oeisIx_row y) (oeisIx_row y)]

-- instance OEIS 45975 where
--   oeis = tablList @45975
-- instance Table 45975 where
--   rowCol = rowCol_off @45975 @1 @1
--   rowT   = rowT_off   @45975 @1
--   tabl = f 1 [1..] where
--      f k xs = ys : f (k+1) (dropWhile (<= last ys) xs) where
--        ys | even k    = take k ms
--           | otherwise = take k $ filter odd ms
--        ms = filter ((== 0) . (`mod` k)) xs

-- instance OEIS 45980 where
--   oeis = 0 : filter f [1..] where
--      f x = g $ takeWhile ((<= 4 * x) . (^ 3)) $ (rowT @27750) x where
--        g [] = False
--        g (d:ds) = r == 0 && (oeisIx @10052) (d ^ 2 - 4 * y) == 1 || g ds
--          where (y, r) = divMod (d ^ 2 - div x d) 3

-- instance OEIS 45981 where
--   oeis = 1 : f 1 [] where
--      f x zs = y : f y zs' where
--        y = read (concatMap show zs')
--        zs' = zs ++ [oeisIx x]

-- instance OEIS 45982 where
--   oeis = 1 : f [1] where
--      f xs = y : f (xs ++ [y]) where
--        y = (oeisIx @45918) $ read (concatMap show xs)

-- instance OEIS 45985 where
--   oeisIx n = head [k | (k, x) <- zip [1..] (oeis @7504),
--                         let (y, r) = divMod x n, r == 0, (oeisIx @10051)' y == 1]

-- instance OEIS 45995 where
--   oeis = tablList @45995
-- instance Table 45995 where
--   rowT n = (tabl @45995) !! n
--   tabl = map (map (oeisIx . fromInteger)) (tabl @7318)

-- instance OEIS 46022 where
--   oeis = [1..4] ++ drop 2 (oeis @40)

-- instance OEIS 46028 where
--   oeis = f 1 where
--      f x | null zs   = f (x + 1)
--          | otherwise = (fst $ head zs) : f (x + 1)
--          where zs = reverse $ filter ((> 1) . snd) $
--                     zip (oeisIx_row x) (oeisIx_row x)

instance OEIS 46034 where
  oeis = filter (all (`elem` "2357") . show . fi ) [0..]

-- instance OEIS 46042 where
--   oeisIx = p $ tail (oeis @583) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 46071 where
--   oeis = tablList @46071
-- instance Table 46071 where
--   rowCol n k = genericIndex (tabf @46071) (n - 2) !! (k-1)
--   rowT n = genericIndex (tabf @46071) (n - 2)
--   tabf = f [1] 2 3 where
--      f qs@ (q:_) i j = ys : f ((q + j) : qs) (i + 1) (j + 2) where
--                       ys = nub $ sort $ filter (> 0) $ map (flip mod i) qs

-- instance OEIS 46075 where
--   import Data.Set (fromList, deleteFindMin, insert)
--   oeisIx n = (oeis @46075) !! (n - 1)
--   oeis = f $ fromList
--                  [100 * a + 10 * b + a | a <- [1..9], b <- [0..9], b /= a]
--      where f s = m : f (insert (10 * m + div (mod m 100) 10) s')
--                  where (m, s') = deleteFindMin s

-- instance OEIS 46090 where
--   oeis = 1 : 4 : map (subtract 2)
--      (zipWith (-) (map (* 6) (tail (oeis @46090))) (oeis @46090))

-- instance OEIS 46092 where
--   oeisIx = (* 2) . (oeisIx @2378)

-- instance OEIS 46099 where
--   oeis = filter ((== 1) . (oeisIx @212793)) [1..]

-- instance OEIS 46100 where
--   oeis = filter ((< 4) . (oeisIx @51903)) [1..]

-- instance OEIS 46101 where
--   oeis = filter ((> 3) . (oeisIx @51903)) [1..]

instance OEIS 46109 where
  oeisIx n = genericLength [ (x,y) | x <- [-n..n], y <- [-n..n], x^2 + y^2 == n^2]

-- instance OEIS 46132 where
--   oeis = filter ((== 1) . (oeisIx @10051)') $ map (+ 4) (oeis @40)

-- instance OEIS 46301 where
--   oeis = zipWith3 (((*) .) . (*))
--                  (oeis @40) (tail (oeis @40)) (drop 2 (oeis @40))

-- instance OEIS 46315 where
--   oeis = filter odd (oeis @1358)

-- instance OEIS 46316 where
--   oeis = filter ((== 3) . (oeisIx @1222)) [1, 3 ..]

-- instance OEIS 46388 where
--   oeis = filter ((== 2) . (oeisIx @1221)) (oeis @56911)

-- instance OEIS 46447 where
--   oeis = 1 : filter f [1..] where
--      f x = length ps > 1 && ps' == reverse ps'
--            where ps' = concatMap show ps; ps = (rowT @27746) x

instance OEIS 46523 where
  oeisIx = product . zipWith (^) (oeis @40) . reverse . sort . (rowT @124010) . succ

-- instance OEIS 46530 where
--   oeisIx n = genericLength $ nub $ map (`mod` n) $
--                              take (fromInteger n) $ tail (oeis @578)

-- instance OEIS 46642 where
--   oeis = map (+ 1) $ elemIndices 1 (oeis @9191)

-- instance OEIS 46660 where
--   import Math.NumberTheory.Primes.Factorisation (factorise)
--   oeisIx n = sum es - length es where es = snd $ unzip $ factorise n

-- instance OEIS 46665 where
--   oeisIx n = (oeisIx @6530) n - (oeisIx @20639) n

-- instance OEIS 46669 where
--  oeis = scanl1 (+) (oeis @20639)

-- instance OEIS 46670 where
--   oeis = scanl1 (+) (oeis @6530)

-- instance OEIS 46695 where
--   nimSum 0 0 = 0
--   nimSum a 0 = a
--   nimSum 0 b = b
--   nimSum a b = 2* (nimSum (div a 2) (div b 2)) + (rem ((rem a 2) + (rem b 2)) 2)
--   mexp l = head (filter (\x -> (not (elem x l))) [0..])
--   oeis = map (oeisIx @46695) [0..]
--   oeisIx 0 = 0
--   oeisIx 1 = 0
--   oeisIx n = mexp (oeisIx' n)
--   oeisIx' n = (map trymove [0.. (div (n - 1) 2)])
--     where trymove k = nimSum (oeis !! k) (oeis !! (n-k-1))

-- instance OEIS 46699 where
--   oeis = 1 : 1 : zipWith (+) zs (tail zs) where
--      zs = map (oeisIx @46699) $ zipWith (-) [2..] (oeis @46699)

-- instance OEIS 46704 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (oeisIx @7953)) (oeis @40)

-- instance OEIS 46711 where
--   oeis = [x | x <- (oeis @42963), (oeisIx @161) x > 0]

-- instance OEIS 46712 where
--   oeis = filter ((`elem` [1,2]) . (`mod` 4)) (oeis @22544)

-- instance OEIS 46727 where
--   oeis = 0 : f (tail (oeis @1652)) (tail (oeis @46090)) where
--      f (x:_:xs) (_:y:ys) = x : y : f xs ys

-- instance OEIS 46741 where
--   oeis = tablList @46741
-- instance Table 46741 where
--   rowT n = (tabl @46741) !! n
--   tabl = [[1], [1, 1], [1, 4, 2]] ++ f [1] [1, 1] [1, 4, 2] where
--      f us vs ws = ys : f vs ws ys where
--        ys = zipWith (+) (zipWith (+) (ws ++ [0]) ([0] ++ map (* 2) ws))
--                         (zipWith (-) ([0] ++ vs ++ [0]) ([0, 0, 0] ++ us))

-- instance OEIS 46758 where
--   oeis = filter (\n -> (oeisIx @50252) n == (oeisIx @55642) n) [1..]

-- instance OEIS 46759 where
--   oeis = filter (\n -> (oeisIx @50252) n < (oeisIx @55642) n) [1..]

-- instance OEIS 46760 where
--   oeis = filter (\n -> (oeisIx @50252) n > (oeisIx @55642) n) [1..]

-- instance OEIS 46810 where
--   oeisIx n = genericLength $ filter ((== 1) . (oeisIx @10051))
--                      $ map read (nub $ filter ((> '0') . head)
--                                               $ permutations $ show n)

-- instance OEIS 46816 where
--   oeis = concat $ concat $ iterate ([[1],[1,1]] *) [1]
--   instance Num a => Num [a] where
--      fromInteger k = [fromInteger k]
--      (p:ps) + (q:qs) = p + q : ps + qs
--      ps + qs         = ps ++ qs
--      (p:ps) * qs'@ (q:qs) = p * q : ps * qs' + [p] * qs
--      _ * _               = []

-- instance OEIS 46818 where
--   oeisIx = (oeisIx @120) . (oeisIx @16777)

-- instance OEIS 46831 where
--   oeis = filter ((> 0) . (`mod` 10)) (oeis @18834)

-- instance OEIS 46851 where
--   oeisIx n = (oeis @46851) !! (n - 1)
--   oeis = filter chi (oeis @8851) where
--      chi n = (x == y && xs `isSub` ys) where
--         x:xs = show $ div n 10
--         y:ys = show $ div (n^2) 10
--      isSub [] ys       = True
--      isSub _  []       = False
--      isSub us'@ (u:us) (v:vs)
--            | u == v    = isSub us vs
--            | otherwise = isSub us' vs

-- instance OEIS 46854 where
--   oeis = tablList @46854
-- instance Table 46854 where
--   rowT n = (tabl @46854) !! n
--   tabl = [1] : f [1] [1,1] where
--      f us vs = vs : f vs  (zipWith (+) (us ++ [0,0]) ([0] ++ vs))

-- instance OEIS 46897 where
--   oeisIx 1 = 1
--   oeisIx n = product $ zipWith
--               (\p e -> if p == 2 then 3 else div (p ^ (e + 1) - 1) (p - 1))
--               (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 46899 where
--   oeis = tablList @46899
-- instance Table 46899 where
--   rowT n = (tabl @46899) !! n
--   tabl = zipWith take [1..] $ transpose (tabl @7318)

instance OEIS 46901 where
  oeis = scanl1 (\u v -> if u > v then u - v else u + v) [1..]

-- instance OEIS 46902 where
--   oeis = tablList @46902
-- instance Table 46902 where
--   rowT n = (tabl @46902) !! n
--   tabl = [0] : iterate
--                  (\row -> zipWith (+) ([0] ++ row) (row ++ [6])) [1,6]

-- instance OEIS 46920 where
--   oeisIx n = genericLength $ filter ((\x -> x == 1 || (oeisIx @10051) x == 1) . (n -)) $
--                               takeWhile (< n) (oeis @1105)

-- instance OEIS 46921 where
--   oeisIx = (oeisIx @46920) . (oeisIx @5408)

-- instance OEIS 46922 where
--   oeisIx n = sum $ map (oeisIx . (n -)) $ takeWhile (< n) (oeis @1105)

-- instance OEIS 46923 where
--   oeisIx = (oeisIx @46922) . (oeisIx @5408)

-- instance OEIS 46930 where
--   oeisIx 1 = 1
--   oeisIx n = subtract 2 $ (oeisIx @31131) n

instance OEIS 46933 where
  oeis = map (subtract 1) (oeis @1223)

instance OEIS 46934 where
  oeis = tablList @46934
instance Table 46934 where
  tabl = [1] : iterate (\row -> scanl (+) (last row) row) [0,1]

instance OEIS 46935 where
  oeis = concatMap tail $ tail (tabl @46934)

instance OEIS 46936 where
  oeis = tablList @46936
instance Table 46936 where
  tabl = [0] : iterate (\row -> scanl (+) (last row) row) [1,1]

instance OEIS 46937 where
  oeis = tablList @46937
instance Table 46937 where
  tabl = [1] : iterate (\row -> scanl (+) (last row) row) [2,3]

-- instance OEIS 46951 where
--   oeisIx = sum . map (oeisIx @10052) . (rowT @27750)

-- instance OEIS 46953 where
--   oeis = map (`div` 6) $
--      filter ((== 0) . (oeisIx @10051)' . subtract 1) [6,12..]

-- instance OEIS 46954 where
--   oeis = map (`div` 6) $ filter ((== 0) . (oeisIx @10051)' . (+ 1)) [0,6..]

-- instance OEIS 46970 where
--   oeisIx = product . map ((1 -) . (^ 2)) . (rowT @27748)

-- instance OEIS 46992 where
--   oeis = scanl1 (+) (oeis @720)

-- instance OEIS 47160 where
--   oeisIx n = if null ms then -1 else head ms
--               where ms = [m | m <- [0 .. n - 1],
--                               (oeisIx @10051)' (n - m) == 1, (oeisIx @10051)' (n + m) == 1]

instance OEIS 47201 where
  oeis = [x | x <- [1..], mod x 5 > 0]

-- instance OEIS 47209 where
--   oeisIx = (flip div 2) . (subtract 2) . (* 5)
--   oeis = 1 : 4 : (map (+ 5) (oeis @47209))

instance OEIS 47211 where
  oeis = filter ((`elem` [2,4]) . (`mod` 5)) [1..]

-- instance OEIS 47221 where
--   oeisIx n = 5 * ((n - 1) `div` 2) + 3 - n `mod` 2
--   oeis = 2 : 3 : map (+ 5) (oeis @47221)

-- instance OEIS 47228 where
--   oeis = 2 : 3 : 4 : map (+ 6) (oeis @47228)

instance OEIS 47229 where
  oeis = filter ((`notElem` [1,5]) . (`mod` 6)) [0..]

-- instance OEIS 47241 where
--   oeis = 1 : 3 : map (+ 6) (oeis @47241)

-- instance OEIS 47242 where
--   oeis = elemIndices 0 (oeis @214090)

-- instance OEIS 47246 where
--   oeis = [0..3] ++ map (+ 6) (oeis @47246)

-- instance OEIS 47253 where
--   oeisIx n = n + n `div` 5
--   oeis = [1..5] ++ map (+ 6) (oeis @47253)

-- instance OEIS 47255 where
--   oeis = 1 : 2 : 3 : 5 : map (+ 6) (oeis @47255)

-- instance OEIS 47261 where
--   oeis = 2 : 4 : 5 : map (+ 6) (oeis @47261)

-- instance OEIS 47273 where
--   oeis = 0 : 1 : 3 : 5 : map (+ 6) (oeis @47273)

-- instance OEIS 47329 where
--   oeis = [1, 3, 5, 6] ++ map (+ 7) (oeis @47329)

-- instance OEIS 47336 where
--   oeis = 1 : 6 : map (+ 7) (oeis @47336)

-- instance OEIS 47355 where
--   oeis = scanl (+) 0 (oeis @10702)

instance OEIS 47471 where
  oeis = [n | n <- [1..], mod n 8 `elem` [1,3]]

instance OEIS 47476 where
  oeis = [n | n <- [0..], mod n 8 <= 3]

-- instance OEIS 47520 where
--   oeisIx n = sum $ zipWith (*)
--                     (reverse $ take n $ tail (oeis @290)) (oeis @79)

-- instance OEIS 47522 where
--   oeis = 1 : 7 : map (+ 8) (oeis @47522)

instance OEIS 47566 where
  oeis = [n | n <- [1..], mod n 8 > 3]

-- instance OEIS 47621 where
--   oeis = 3 : 5 : map (+ 8) (oeis @47621)

instance OEIS 47726 where
  oeisIx n = genericLength $ nub $ permutations $ show $ fi $ succ n

-- instance OEIS 47778 where
--   oeisIx = (foldl (\v d -> 2*v + d) 0) . concatMap (reverse . unfoldr
--      (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2)) .
--      enumFromTo 1

-- instance OEIS 47781 where
--   oeisIx n = (oeisIx @49600) (2 * n) n

-- instance OEIS 47791 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @62028)) [1..]

instance OEIS 47800 where
  oeisIx n = genericLength $ nub [i^2 + j^2 | i <- [0..n], j <- [i..n]]

-- instance OEIS 47813 where
--   oeisIx = last . (rowT @262188)

-- instance OEIS 47814 where
--   oeisIx n = if null ips then 0 else head ips
--      where ips = [p | p <- reverse $ takeWhile (<= n) (oeis @40),
--                       show p `isInfixOf` show n]

-- instance OEIS 47836 where
--   import Data.List.Ordered (union)
--   oeisIx n = (oeis @47836) !! (n - 1)
--   oeis = f [2] where
--      f (x:xs) = x : f (xs `union` map (x *) [2..x])

-- instance OEIS 47842 where
--   oeisIx :: Integer -> Integer
--   oeisIx n = read $ concat $
--      zipWith ((++) `on` show) (map length xs) (map head xs)
--      where xs = group $ sort $ map (read . return) $ show n

-- instance OEIS 47845 where
--   oeisIx = (`div` 2) . (oeisIx @14076)

-- instance OEIS 47846 where
--   oeis = 1 : zipWith (-) (tail (oeis @196277)) (oeis @196277)

-- instance OEIS 47892 where
--   oeis = iterate (oeisIx @57147) 2

-- instance OEIS 47897 where
--   oeis = iterate (oeisIx @57147) 5

-- instance OEIS 47898 where
--   oeis = iterate (oeisIx @57147) 6

-- instance OEIS 47899 where
--   oeis = iterate (oeisIx @57147) 7

-- instance OEIS 47900 where
--   oeis = iterate (oeisIx @57147) 8

-- instance OEIS 47901 where
--   oeis = iterate (oeisIx @57147) 9

-- instance OEIS 47902 where
--   oeis = iterate (oeisIx @57147) 11

-- instance OEIS 47904 where
--   oeis = 1 : zipWith uncurry
--                              (cycle [ (+), (*)]) (zip (oeis @47904) [1..])

-- instance OEIS 47905 where
--   oeis = 1 : zipWith uncurry
--                              (cycle [ (*), (+)]) (zip (oeis @47905) [1..])

-- instance OEIS 47906 where
--   oeis = 1 : zipWith uncurry
--                              (cycle [ (-), (*)]) (zip (oeis @47906) [1..])

-- instance OEIS 47907 where
--   oeis = 1 : zipWith uncurry
--                              (cycle [ (*), (-)]) (zip (oeis @47907) [1..])

-- instance OEIS 47908 where
--   oeis =
--      1 : zipWith ($) (zipWith ($) (cycle [ (+), (*), (-)]) (oeis @47908)) [1..]

-- instance OEIS 47912 where
--   oeis = iterate (oeisIx @57147) 3

-- instance OEIS 47916 where
--   oeis = tablList @47916
-- instance Table 47916 where
--   rowCol = rowCol_off @47916 @1 @1
--   rowT   = rowT_off   @47916 @1
--   tabl = zipWith4 (zipWith4 (\x u v w -> x * v ^ u * w))
--                  (tabl @54523) (tabl @2260) (tabl @10766) (tabl @166350)

-- instance OEIS 47917 where
--   oeis = tablList @47917
-- instance Table 47917 where
--   rowCol = rowCol_off @47917 @1 @1
--   rowT   = rowT_off   @47917 @1
--   tabl = zipWith (zipWith div) (tabl @47916) (tabl @2024)

-- instance OEIS 47918 where
--   oeis = tablList @47918
-- instance Table 47918 where
--   rowCol n k = sum [oeisIx (fi d) * (oeisIx @47916) n (k `div` d) |
--                      mod n k == 0, d <- [1..k], mod k d == 0]
--   rowT n = map (oeisIx n) [1..n]
--   tabl = map (rowT @47918) [1..]

-- instance OEIS 47919 where
--   oeis = tablList @47919
-- instance Table 47919 where
--   rowCol = rowCol_off @47919 @1 @1
--   rowT   = rowT_off   @47919 @1
--   tabl = zipWith (zipWith div) (tabl @47918) (tabl @2024)

-- instance OEIS 47920 where
--   oeis = tablList @47920
-- instance Table 47920 where
--   rowT n = (tabl @47920) !! n
--   tabl = map fst $ iterate e ([1], 1) where
--      e (row, n) = (scanl (-) (n * head row) row, n + 1)

-- instance OEIS 47927 where
--   oeisIx n = if n == 2 then 0 else (oeisIx @245334) n 3

-- instance OEIS 47949 where
--   oeisIx n = if null qs then -1 else head qs  where
--      qs = [m | m <- [n, n - 1 .. 0], (oeisIx @10051)' (n+m) == 1, (oeisIx @10051)' (n-m) == 1]

-- instance OEIS 47983 where
--   oeisIx n = genericLength [x | x <- [1..n - 1], (oeisIx @5) x == (oeisIx @5) n]

-- instance OEIS 47993 where
--   oeisIx = flip (oeisIx @63995) 0

-- instance OEIS 47994 where
--   oeisIx n = f n 1 where
--      f 1 uph = uph
--      f x uph = f (x `div` sppf) (uph * (sppf - 1)) where sppf = (oeisIx @28233) x

-- instance OEIS 47999 where
--   oeisIx :: Int -> Int -> Int
--   oeisIx n k = (tabl @47999) !! n !! k
--   oeisIx_row n = (tabl @47999) !! n
--   oeisIx_tabl = iterate (\row -> zipWith xor ([0] ++ row) (row ++ [0])) [1]

-- instance OEIS 48004 where
--   tri n k | (k < 0) || (k > n) = 0
--           | (k == 0) || (k == n) = 1
--           | otherwise = 2*tri (n - 1) k + tri (n-1) (k-1) - 2*tri (n-2) (k-1)
--                               + tri (n-k-1) (k-1) - tri (n-k-2) k

-- instance OEIS 48050 where
--   oeisIx 1 = 0
--   oeisIx n = (subtract 1) $ sum $ (rowT @27751) n

-- instance OEIS 48055 where
--   oeisIx n = (oeis @48055) !! (n - 1)
--   oeis = [x | x <- (oeis @2808),
--                  let (us,vs) = partition ((== 1) . (oeisIx @10051)) $ (rowT @27751) x,
--                  sum us + x == sum vs]

-- instance OEIS 48098 where
--   oeis = [x | x <- [1..], (oeisIx @6530) x ^ 2 <= x]

-- instance OEIS 48102 where
--   import Data.Set (empty, fromList, deleteFindMin, union)
--   import qualified Data.Set as Set (null, map)
--   oeisIx n = (oeis @48102) !! (n - 1)
--   oeis = 1 : f empty [1] (oeis @51674) where
--     f s ys pps'@ (pp:pps)
--       | Set.null s = f (fromList (map (* pp) ys)) (pp:ys) pps
--       | pp < m     = f (s `union` Set.map (* pp) s `union`
--                         fromList (map (* pp) ys)) ys pps
--       | otherwise  = m : f s' (m:ys) pps'
--       where (m,s') = deleteFindMin s

-- instance OEIS 48103 where
--   oeis = filter (\x -> and $
--      zipWith (>) (oeisIx_row x) (map toInteger $ (rowT @124010) x)) [1..]

instance OEIS 48105 where
  oeisIx (succ->n) = genericLength [d | d <- [1..n], mod n d == 0, gcd d (n `div` d) > 1]

-- instance OEIS 48152 where
--   oeis = tablList @48152
-- instance Table 48152 where
--   rowCol = rowCol_off @48152 @1 @1
--   rowT   = rowT_off   @48152 @1
--   tabl = zipWith (map . flip mod) [1..] (tabl @133819)

-- instance OEIS 48153 where
--   oeisIx = sum . (rowT @48152)

-- instance OEIS 48158 where
--   oeisIx = mod
--   oeisIx_row n = (tabl @48158) !! (n - 1)
--   oeisIx_tabl = zipWith (map . mod) [1..] (tabl @2260)

-- instance OEIS 48161 where
--   oeis = [p | p <- (oeis @65091), (oeisIx @10051) ((p^2 + 1) `div` 2) == 1]

-- instance OEIS 48250 where
--   oeisIx = sum . (rowT @206778)

-- instance OEIS 48272 where
--   oeisIx n = (oeisIx @1227) n - (oeisIx @183063) n

-- instance OEIS 48298 where
--   oeisIx n = (oeisIx @209229) n * n

-- instance OEIS 48321 where
--   oeisIx n = (oeis @48321) !! (n - 1)
--   oeis = filter f [0..] where
--      f x = all (< 0) $ zipWith (-) (tail zs) zs
--            where zs =  map length $ group $ show x

-- instance OEIS 48344 where
--   oeis = filter f (oeis @29742) where
--      f x = (oeisIx @136522) (x * (oeisIx @4086) x) == 1

-- instance OEIS 48377 where
--   oeisIx :: Integer -> Integer
--   oeisIx n =
--      read $ concat $ zipWith replicate (map ((+ 1) . digitToInt) ns) ns
--         where ns = show n

-- instance OEIS 48379 where
--   oeisIx n = if n == 0 then 1 else x n where
--      x m = if m == 0 then 0 else 10 * x m' + (d + 1) `mod` 10
--            where (m',d) = divMod m 10

-- instance OEIS 48385 where
--   oeisIx 0 = 0
--   oeisIx n = read (show (oeisIx n') ++ show (m ^ 2)) :: Integer
--               where (n', m) = divMod n 10

-- instance OEIS 48395 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @199771) (2 * n)

-- instance OEIS 48398 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @33075)

-- instance OEIS 48411 where
--   oeis = filter ((== 1) . (oeisIx @10052)) (oeis @33075)

-- instance OEIS 48519 where
--   oeis = map (oeisIx @40) $ filter ((== 1) . (oeisIx @10051)' . (oeisIx @65073)) [1..]

-- instance OEIS 48521 where
--   oeis = map (oeisIx @40) $ filter ((> 0) . (oeisIx @107740)) [1..]

-- instance OEIS 48574 where
--   oeis = f (drop 2 (oeis @41)) [1] where
--   f (p:ps) rs = (sum $ zipWith (*) rs $ tail (oeis @41)) : f ps (p : rs)

-- instance OEIS 48594 where
--   oeis = tablList @48594
-- instance Table 48594 where
--   rowCol = rowCol_off @48594 @1 @1
--   rowT   = rowT_off   @48594 @1
--   tabl = map snd $ iterate f (1, [1]) where
--      f (i, xs) = (i + 1, zipWith (-) (zipWith (*) [1..] ([0] ++ xs))
--                                      (map (* i) (xs ++ [0])))

-- instance OEIS 48645 where
--   oeis = tablList @48645
--   rowCol = rowCol_off @48645 @1 @1
--   rowT   = rowT_off   @48645 @1
--   tabl = iterate (\xs -> insert (2 * head xs + 1) $ map ((* 2)) xs) [1]
--   oeis = concat (tabl @48645)

-- instance OEIS 48646 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @48653)

-- instance OEIS 48647 where
--   oeisIx 0 = 0
--   oeisIx n = 4 * (oeisIx @48647) n' + if m == 0 then 0 else 4 - m
--               where (n', m) = divMod n 4

-- instance OEIS 48653 where
--   oeis = filter (f . show . (^ 2)) [1..] where
--      f zs = g (init $ tail $ inits zs) (tail $ init $ tails zs)
--      g (xs:xss) (ys:yss)
--        | h xs      = h ys || f ys || g xss yss
--        | otherwise = g xss yss
--        where h ds = head ds /= '0' && (oeisIx @10052) (read ds) == 1
--      g _ _ = False

-- instance OEIS 48654 where
--   oeis =
--      1 : 4 : zipWith (+) (oeis @48654) (map (* 2) $ tail (oeis @48654))

-- instance OEIS 48669 where
--   oeisIx n = maximum $ zipWith (-) (tail ts) ts where
--      ts = (rowT @38566) n ++ [n + 1]

-- instance OEIS 48673 where
--   oeisIx = (`div` 2) . (+ 1) . (oeisIx @45965)

-- instance OEIS 48678 where
--   oeisIx 0 = 0
--   oeisIx x = 2 * (b + 1) * (oeisIx @48678) x' + b
--               where (x', b) = divMod x 2

-- instance OEIS 48691 where
--   oeisIx = product . map (oeisIx . fi) . (rowT @124010)

-- instance OEIS 48696 where
--   oeis = 1 : 9 : zipWith (+)
--                  (oeis @48696) (map (2 *) $ tail (oeis @48696))

-- instance OEIS 48697 where
--   oeis = 1 : 10 : zipWith (+)
--                           (oeis @48697) (map (* 2) $ tail (oeis @48697))

-- instance OEIS 48700 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @48700) !! (n - 1)
--   oeis = f 1 $ singleton 1 where
--      f z s = m : f (z+1) (insert (c 0) (insert (c 1) s')) where
--        c d = foldl (\v d -> 2 * v + d) 0 $ (reverse b) ++ [d] ++ b
--        b = unfoldr
--            (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2) z
--        (m,s') = deleteFindMin s

-- instance OEIS 48701 where
--   oeisIx n = foldr (\d v -> 2 * v + d) 0 (reverse bs ++ bs) where
--      bs = (rowT @30308) (n - 1)

instance OEIS 48724 where
  oeisIx (fi->n) = fi do n `xor` shiftL n 1 :: Integer

-- instance OEIS 48728 where
--   oeisIx n = (oeisIx @8585) n - (oeisIx @48724) n

-- instance OEIS 48736 where
--   oeis = 1 : 1 : 1 : 1 :
--      zipWith div
--        (zipWith (+)
--          (zipWith (*) (drop 3 (oeis @48736))
--                       (drop 1 (oeis @48736)))
--          (drop 2 (oeis @48736)))
--        (oeis @48736)

-- instance OEIS 48760 where
--   oeisIx = (^ 2) . (oeisIx @196)

-- instance OEIS 48761 where
--   oeisIx n = (oeisIx n + 1 - (oeisIx @10052) n) ^ 2
--   oeis = 0 : concat (f 1 1) where
--      f u v = (take v $ repeat u) : f (u + v + 2) (v + 2)

-- instance OEIS 48762 where
--   oeisIx n = last $ takeWhile (<= n) (oeis @578)

-- instance OEIS 48763 where
--   oeisIx 0 = 0
--   oeisIx n = head $ dropWhile (< n) (oeis @578)

-- instance OEIS 48765 where
--   oeisIx n = (oeis @48764) !! (n - 1)
--   oeis = f [1..] $ tail (oeis @142) where
--      f (u:us) vs'@ (v:vs) | u == v    = v : f us vs
--                          | otherwise = v : f us vs'

-- instance OEIS 48766 where
--   oeisIx = round . (** (1/3)) . fi
--   oeis = concatMap (\x -> take (oeisIx x) $ repeat x) [0..]

-- instance OEIS 48772 where
--   oeis = scanl1 (+) (oeis @48696)

-- instance OEIS 48793 where
--   oeis = tablList @48793
-- instance Table 48793 where
--   rowCol n k = (tabf @48793) !! n !! k
--   rowT n = (tabf @48793) !! n
--   tabf = [0] : [1] : f [[1]] where
--      f xss = yss ++ f (xss ++ yss) where
--        yss = [y] : map (++ [y]) xss
--        y = last (last xss) + 1

-- instance OEIS 48794 where
--   oeis = map (read . concatMap show) (tabf @48793) :: [Integer]

-- instance OEIS 48803 where
--   oeis = scanl (*) 1 (oeis @7947)

-- instance OEIS 48853 where
--   oeisIx n = (sum $ map (oeisIx . read) $ tail $ nub $ concat $ zipWith
--     (\its tls -> map ((\xs ys d -> xs ++ (d:ys)) its tls) "0123456789")
--       (map init $ tail $ inits $ show n) (tail $ tails $ show n)) - (oeisIx @10051) n

-- instance OEIS 48859 where
--   oeis = f 2 [1..] where
--      f k xs = us ++ f (k + 1) (drop (k + 1) vs)
--               where (us, vs) = splitAt k xs

-- instance OEIS 48865 where
--   oeisIx n = sum $ map (oeisIx @10051) [t | t <- [1..n], gcd n t == 1]

-- instance OEIS 48877 where
--   oeis = 1 : 8 : zipWith (+) (oeis @48877) (map (* 4) $ tail (oeis @48877))

-- instance OEIS 48879 where
--   oeis = 1 : 10 : zipWith (+)
--                           (oeis @48879) (map (* 4) $ tail (oeis @48879))

instance OEIS 48881 where
  oeis = c [0] where c (x:xs) = x : c (xs ++ [x,x+1])

-- instance OEIS 48883 where
--   oeisIx = (oeisIx @244) . (oeisIx @120)

-- instance OEIS 48889 where
--   import Numeric (readInt)
--   oeisIx n = (oeis @48889) !! (n - 1)
--   oeis = filter f (oeis @2808) where
--      f n = n `mod` 10 > 0 &&
--            null ("23547" `intersect` show n)  &&
--            (oeisIx (fst $ head $ readInt 10 (const True) ud $ ns) == 1)
--          where ns = reverse $ show n
--                ud '6' = 9
--                ud '9' = 6
--                ud z = digitToInt z

-- instance OEIS 48890 where
--   oeisIx n = (oeis @48890) !! (n - 1)
--   oeis = filter f (oeis @40) where
--      f x = all (`elem` [0,1,6,8,9]) ds && x' /= x && (oeisIx @10051) x' == 1
--        where x' = foldl c 0 ds
--              c v 6 = 10*v + 9; c v 9 = 10*v + 6; c v d = 10*v + d
--              ds = unfoldr d x
--              d z = if z == 0 then Nothing else Just $ swap $ divMod z 10

instance OEIS 48896 where
  oeis = f [1] where f (x:xs) = x : f (xs ++ [x,2*x])

-- instance OEIS 48951 where
--   oeis = 2 : 4 : ulam 2 4 (oeis @48951)

-- instance OEIS 48966 where
--   oeis = tablList @48966
-- instance Table 48966 where
--   rowCol = rowCol_off @48966 @1 @1
--   rowT   = rowT_off   @48966 @1
--   tabl = [1] : f 2 [1] where
--      f x xs = ys : f (x + 1) ys where
--        ys = map (flip div x) $ zipWith (+)
--             (map (* 3) $ zipWith (*) (map (3 * (x - 1) -) [1..]) (xs ++ [0]))
--             (zipWith (*) [1..] ([0] ++ xs))

-- instance OEIS 48967 where
--   oeisIx n = (oeis @48967) !! n
--   oeis = 0 : xs where
--      xs = 0 : concat (transpose [zipWith (+) [1..] xs, map (* 2) xs])

-- instance OEIS 48973 where
--   import Data.List.Ordered (minus)
--   oeisIx n = (oeis @48973) !! (n - 1)
--   oeis = [1..] `minus` (oeis @5243)

-- instance OEIS 48985 where
--   oeisIx = foldr (\d v -> 2 * v + d) 0 . concatMap
--      (unfoldr (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2))
--      . reverse . (rowT @27746)

-- instance OEIS 48991 where
--   oeisIx n = (oeis @48991) !! (n - 1)
--   oeis = f [1..] [] where
--      f (x:xs) ys | xs' `isInfixOf` ys = f xs ys
--                  | otherwise          = x : f xs (xs' ++ ys)
--                  where xs' = reverse $ show x

-- instance OEIS 48992 where
--   oeisIx n = (oeis @48992) !! (n - 1)
--   oeis = g [1..] [] where
--      g (x:xs) ys | xs' `isInfixOf` ys = x : g xs ys
--                  | otherwise          = g xs (xs' ++ ys)
--                  where xs' = reverse $ show x

instance OEIS 48993 where
  oeis = tablList @48993
instance Table 48993 where
  tabl = iterate (\row ->
     [0] ++ (zipWith (+) row $ zipWith (*) [1..] $ tail row) ++ [1]) [1]

-- instance OEIS 48994 where
--   oeis = tablList @48994
-- instance Table 48994 where
--   rowT n = (tabl @48994) !! n
--   tabl = map fst $ iterate (\ (row, i) ->
--   (zipWith (-) ([0] ++ row) $ map (* i) (row ++ [0]), i + 1)) ([1], 0)

instance OEIS 49001 where
  oeisIx = subtract 2 . (oeisIx @1248)

-- instance OEIS 49002 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @49001)

-- instance OEIS 49039 where
--   oeis = tablList @49039
-- instance Table 49039 where
--   rowCol = rowCol_off @49039 @1 @1
--   rowT   = rowT_off   @49039 @1
--   tabl = f 1 1 [1..] where
--      f k p xs = ys : f (2 * k) (1 - p) (dropWhile (<= last ys) xs) where
--        ys  = take k $ filter ((== p) . (`mod` 2)) xs

-- instance OEIS 49061 where
--   oeis = tablList @49061
-- instance Table 49061 where
--   rowCol = rowCol_off @49061 @1 @1
--   rowT   = rowT_off   @49061 @1
--   tabl = map fst $ iterate t ([1], 1) where
--      t (row, k) = (if odd k then us else vs, k + 1) where
--        us = zipWith (-) (row ++ [0]) ([0] ++ row)
--        vs = zipWith (+) ((zipWith (*) ks row) ++ [0])
--                         ([0] ++ (zipWith (*) (reverse ks) row))
--             where ks = [1..k]

-- instance OEIS 49063 where
--   oeis = tablList @49063
-- instance Table 49063 where
--   rowCol n k = (tabf @49063) !! n !! k
--   rowT n = (tabf @49063) !! n
--   tabf = [1] : iterate f [1, 1] where
--      f row = 1 : 2 : zipWith (+) ( map (* 2) row) ((tail row) ++ [0])

-- instance OEIS 49068 where
--   oeisIx = filter ((== 0) . (oeisIx @240025)) [0..]

-- instance OEIS 49072 where
--   oeis = 1 : 3 :
--       zipWith (-) (map (* 3) $ tail (oeis @49072)) (map (* 4) (oeis @49072))

-- instance OEIS 49073 where
--   oeisIx = foldl lcm 1 . filter ((== 1) . (oeisIx @10055) . (+ 1)) . (rowT @27750)

-- instance OEIS 49076 where
--   oeisIx = (+ 1) . (oeisIx @78442)

-- instance OEIS 49084 where
--   oeisIx n = (oeis @49084) !! (fromInteger n - 1)
--   oeis = unfoldr x (1, 1, (oeis @40)) where
--      x (i, z, ps'@ (p:ps)) | i == p = Just (z, (i + 1, z + 1, ps))
--                           | i /= p = Just (0, (i + 1, z, ps'))

-- instance OEIS 49098 where
--   oeis = filter ((== 0) . (oeisIx @8966) . (+ 1)) (oeis @40)

-- instance OEIS 49200 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map (subtract 1) $ (rowT @265668) n

-- instance OEIS 49296 where
--   oeis = zipWith (-) (tail (oeis @8364)) (oeis @8364)

-- instance OEIS 49320 where
--   oeis = 0 : 0 : 1 : 0 : f [0,0,1,0] where
--      f xs = drop (length xs) ys ++ f ys where
--        ys = concatMap ch xs
--        ch 0 = [0,0,1,0]; ch 1 = [1]

-- instance OEIS 49321 where
--   oeis = 0 : 0 : 1 : 2 : f [0,0,1,2] where
--      f xs = drop (length xs) ys ++ f ys where
--        ys = concatMap ch xs
--        ch 0 = [0,0,1,2]; ch 1 = [1,2]; ch 2 = [0,1,2]

instance OEIS 49341 where
  oeis = 3 : 6 : map (oeisIx @7953) (zipWith (+) (oeis @49341) $ tail (oeis @49341))

-- instance OEIS 49343 where
--   oeis = map fi $ elemIndices 0
--      $ zipWith ((-) `on` (oeisIx @7953)) (oeis @5843) (oeis @290)

-- instance OEIS 49345 where
--   oeisIx n | n < 2100  = read $ concatMap show (oeisIx_row n) :: Int
--             | otherwise = error "ambiguous primorial representation"

-- instance OEIS 49354 where
--   oeis = filter f [1..] where
--      f n = t0 == (oeisIx @62756) n && t0 == (oeisIx @81603) n where t0 = (oeisIx @77267) n

instance OEIS 49363 where
  oeisIx (succ->n) = foldl (\v d -> n * v + d) 0 (1 : 0 : [2..n - 1])

-- instance OEIS 49388 where
--   oeisIx = (flip div 5040) . (oeisIx @142) . (+ 7)

-- instance OEIS 49389 where
--   oeisIx = (flip div 40320) . (oeisIx @142) . (+ 8)

-- instance OEIS 49398 where
--   oeisIx = (flip div 362880) . (oeisIx @142) . (+ 9)

-- instance OEIS 49417 where
--   oeisIx 1 = 1
--   oeisIx n = product $ zipWith f (oeisIx_row n) (oeisIx_row n) where
--      f p e = product $ zipWith div
--              (map (subtract 1 . (p ^)) $
--                   zipWith (*) (oeis @79) $ map (+ 1) $ (rowT @30308) e)
--              (map (subtract 1 . (p ^)) (oeis @79))

-- instance OEIS 49419 where
--   oeisIx = product . map (oeisIx . fi) . (rowT @124010)

-- instance OEIS 49439 where
--   oeis = filter (\x -> ((length $ oddDivs x) `elem` oddDivs x)) [1..]
--      where oddDivs n = [d | d <- [1,3..n], mod n d == 0]

-- instance OEIS 49444 where
--   oeis = tablList @49444
-- instance Table 49444 where
--   rowT n = (tabl @49444) !! n
--   tabl = map fst $ iterate (\ (row, i) ->
--      (zipWith (-) ([0] ++ row) $ map (* i) (row ++ [0]), i + 1)) ([1], 2)

-- instance OEIS 49445 where
--   oeis = map (+ 1) $ elemIndices 0 (oeis @199238)

instance OEIS 49451 where
  oeisIx n = n * (3 * n + 1)

-- instance OEIS 49455 where
--   oeis = tablList @49455
-- instance Table 49455 where
--   rowCol n k = (tabf @49455) !! (n - 1) !! (k-1)
--   rowT n = (tabf @49455) !! (n - 1)
--   tabf = map (map numerator) $ iterate
--      (\row -> concat $ transpose [row, zipWith (+/+) row $ tail row]) [0, 1]
--      where u +/+ v = (numerator u + numerator v) %
--                      (denominator u + denominator v)

-- instance OEIS 49456 where
--   oeis = tablList @49456
-- instance Table 49456 where
--   rowCol n k = (tabf @49456) !! (n - 1) !! (k-1)
--   rowT n = (tabf @49456) !! (n - 1)
--   tabf = iterate
--      (\row -> concat $ transpose [row, zipWith (+) row $ tail row]) [1, 1]

-- instance OEIS 49458 where
--   oeis = tablList @49458
-- instance Table 49458 where
--   rowT n = (tabl @49458) !! n
--   tabl = map fst $ iterate (\ (row, i) ->
--      (zipWith (-) ([0] ++ row) $ map (* i) (row ++ [0]), i + 1)) ([1], 3)

-- instance OEIS 49459 where
--   oeis = tablList @49459
-- instance Table 49459 where
--   rowT n = (tabl @49459) !! n
--   tabl = map fst $ iterate (\ (row, i) ->
--      (zipWith (-) ([0] ++ row) $ map (* i) (row ++ [0]), i + 1)) ([1], 4)

-- instance OEIS 49460 where
--   oeis = tablList @49460
-- instance Table 49460 where
--   rowT n = (tabl @49460) !! n
--   tabl = map fst $ iterate (\ (row, i) ->
--      (zipWith (-) ([0] ++ row) $ map (* i) (row ++ [0]), i + 1)) ([1], 5)

instance OEIS 49472 where
  oeisIx = floor . (/ sqrt 2) . fi

instance OEIS 49474 where
  oeisIx = ceiling . (/ sqrt 2) . fi

-- instance OEIS 49502 where
--   oeisIx = f 0 1 where
--      f m i x = if x <= 4
--                   then m else f (if mod x 4 == 1
--                                     then m + i else m) (i + 1) $ div x 2

-- instance OEIS 49514 where
--   oeis = filter ((== 0) . (oeisIx @95916)) [1..]

-- instance OEIS 49599 where
--   oeisIx = product . map ((+ 1) . (oeisIx @5) . fi) . (rowT @124010) . succ

-- instance OEIS 49600 where
--   oeis = tablList @49600
-- instance Table 49600 where
--   rowT n = (tabl @49600) !! n
--   tabl = [0] : map (0 :) (tabl @208341)

-- instance OEIS 49613 where
--   oeisIx n = 2 * n - (oeisIx @7917) (2 * n - 2)

-- instance OEIS 49642 where
--   oeis = filter ((== 0) . (oeisIx @245656)) [1..]

-- instance OEIS 49773 where
--   oeis = tablList @49773
-- instance Table 49773 where
--   rowCol n k = (tabf @49773) !! (n - 1) !! (k-1)
--   rowT n = (tabf @49773) !! (n - 1)
--   tabf = iterate f [1] where
--      f vs = (map (subtract 1) ws) ++ ws where ws = map (* 2) vs

-- instance OEIS 49782 where
--   oeisIx :: Int -> Integer
--   oeisIx n = (sum $ take n (oeis @142)) `mod` (fi n)

-- instance OEIS 49820 where
--   oeisIx n = n - (oeisIx @5) n

-- instance OEIS 49853 where
--   oeis = 1 : 2 : 2 : 3 :
--      zipWith (+) (oeis @49853)
--                  (zipWith (+) (drop 2 (oeis @49853)) (drop 3 (oeis @49853)))

-- instance OEIS 49865 where
--   oeisIx n = genericLength $ takeWhile (> 1) $ iterate (oeisIx @47994) n
--   oeis = map (oeisIx @49865) [1..]

-- instance OEIS 50000 where
--   oeis = 1 : f [1,0] where
--      f xs'@ (x:xs) | x `div` 2 `elem` xs = 3 * x : f (3 * x : xs')
--                   | otherwise = x `div` 2 : f (x `div` 2 : xs')

-- instance OEIS 50001 where
--   oeisIx n = (fromJust $ elemIndex n (oeis @50000)) + 1

-- instance OEIS 50146 where
--   oeisIx n = if n == 0 then 1 else (oeisIx @35607) (2 * n - 2) (n - 1)
--   (oeisIx @50146) = lambda n : n*hypergeometric ([1-n, n], [2], -1) if n>0 else 1

-- instance OEIS 50150 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (+ 1) . (oeisIx @100995)) [1, 3 ..]

-- instance OEIS 50168 where
--   oeis = 1 : zipWith (+) (oeis @1405) (tail (oeis @1405))

-- instance OEIS 50216 where
--   oeisIx n = (oeis @50216) !! (n - 1)
--   oeis =
--      map length $ filter (/= [0]) $ group $ map (oeisIx @10051) (oeis @430)

-- instance OEIS 50252 where
--   oeisIx 1 = 1
--   oeisIx n = sum $ map (oeisIx @55642) $
--               (oeisIx_row n) ++ (filter (> 1) $ (rowT @124010) n)

-- instance OEIS 50264 where
--   oeis = filter chi [2..] where
--      chi n = f (oeis @40) where
--         f (p:ps) | p*p > n   = True
--                  | otherwise = 2 * abs (2 * (n `mod` p) - p) <= p && f ps

-- instance OEIS 50292 where
--   oeis = scanl (+) 0 (oeis @35263)

-- instance OEIS 50320 where
--   oeisIx n = h n $ tail $ (rowT @206778) n where
--      h 1 _          = 1
--      h _ []         = 0
--      h m fs'@ (f:fs) =
--        if f > m then 0 else if r > 0 then h m fs else h m' fs' + h m fs
--        where (m', r) = divMod m f

-- instance OEIS 50326 where
--   oeisIx n = genericIndex (oeis @50326) (n - 1)
--   oeis = 1 : f 2 where
--      f x = (if x /= s then (oeisIx @50326) s
--                       else length $ filter (== x) $ map product $
--                            subsequences $ tail $ (rowT @206778) x) : f (x + 1)
--            where s = (oeisIx @46523) x

-- instance OEIS 50328 where
--   oeisIx n = genericIndex (oeis @50328) (n - 1)
--   oeis = f 1 where
--      f x = (if x == 1 then 1 else
--            sum $ map (oeisIx . (div x)) $ tail $ (rowT @206778) x) : f (x + 1)

-- instance OEIS 50360 where
--   oeisIx = (oeisIx @688) . (oeisIx @25487)

-- instance OEIS 50361 where
--   oeisIx = product . map (oeisIx @9) . (rowT @124010)

-- instance OEIS 50376 where
--   oeis = filter ((== 1) . (oeisIx @209229) . (oeisIx @100995)) [1..]

-- instance OEIS 50382 where
--   oeisIx = (oeisIx @8480) . (oeisIx @25487)

instance OEIS 50407 where
  oeisIx n = n * (n ^ 2 - 6 * n + 11) `div` 6

-- instance OEIS 50430 where
--   import Numeric (showIntAtBase)
--   oeisIx n = (oeis @50430) !! (n - 1)
--   oeis = f 1 where
--      f n = g (showIntAtBase 2 intToDigit n "") : f (n+1)
--      g zs | zs == reverse zs = length zs
--           | otherwise        = max (h $ init zs) (h $ tail zs)
--      h zs@ ('0':_) = g zs
--      h zs@ ('1':_) = (oeisIx @50430) $ foldl (\v d -> digitToInt d + 2*v) 0 zs

-- instance OEIS 50435 where
--   oeisIx = (oeisIx @2808) . (oeisIx @2808)
--   oeis = map (oeisIx @2808) (oeis @2808)

instance OEIS 50450 where
  oeisIx = sum . map (^ 2) . filter ((== 1) . (`mod` 4)) . (rowT @27750) . succ

instance OEIS 50453 where
  oeisIx = sum . map (^ 2) . filter ((== 3) . (`mod` 4)) . (rowT @27750) . succ

instance OEIS 50461 where
  oeisIx (succ->n) = sum [d ^ 2 | d <- (rowT @27750) n, mod (div n d) 4 == 1]

instance OEIS 50465 where
  oeisIx (succ->n) = sum [d ^ 2 | d <- (rowT @27750) n, mod (div n d) 4 == 3]

instance OEIS 50470 where
  oeisIx n = (oeisIx @50461) n - (oeisIx @50465) n

-- instance OEIS 50480 where
--   oeisIx n = (oeis @50480) !! (n - 1)
--   oeis = filter chi [2..] where
--      chi x = xs `elem` (map concat $ choices divs) where
--         choices = concat . (map permutations) . subsequences
--         divs = filter (`isInfixOf` xs)
--                       $ map show $ filter ((== 0) . mod x) [1..oeisIx x]
--         xs = show x

-- instance OEIS 50488 where
--   oeisIx n = sum $ zipWith (*) (oeis @79) (reverse $ take n (oeis @5408))

instance OEIS 50493 where
  oeisIx = (oeisIx @120) . (oeisIx @217)

-- instance OEIS 50512 where
--   oeis = 0 : 1 : 1 : 1 : (-1) : zipWith div (zipWith (-) (zipWith (*)
--      (drop 4 (oeis @50512)) (drop 2 (oeis @50512)))
--        (map (^ 2) (drop 3 (oeis @50512)))) (tail (oeis @50512))

-- instance OEIS 50536 where
--   oeis = iterate (oeisIx @217) 8

-- instance OEIS 50542 where
--   oeis = iterate (oeisIx @217) 5

-- instance OEIS 50548 where
--   oeis = iterate (oeisIx @217) 7

-- instance OEIS 50600 where
--   oeis = tablList @50600
-- instance Table 50600 where
--   rowCol n k = adder 0 (n - k) k where
--      adder :: Int -> Int -> Int -> Int
--      adder c u 0 = c
--      adder c u v = adder (c + 1) (u `xor` v) (shiftL (u .&. v) 1)
--   rowT n = map (oeisIx n) $ reverse [0..n]
--   tabl = map (rowT @50600) [0..]

-- instance OEIS 50804 where
--   oeis = filter ((== 1) . (oeisIx @84888)) [0..]

-- instance OEIS 50805 where
--   oeisIx n = (oeis @50805) !! (n - 1)
--   oeis = filter ((all (== 0)) . f) (oeis @40) where
--      f p = map (i $ show p) "0123456789"
--      i ps d = (oeisIx @10051)' (read $ intersperse d ps :: Integer)

-- instance OEIS 50806 where
--   oeisIx n = (oeis @50806) !! (n - 1)
--   oeis = filter ((== 1) . sum . f) (oeis @40) where
--      f p = map (i $ show p) "0123456789"
--      i ps d = (oeisIx @10051)' (read $ intersperse d ps :: Integer)

-- instance OEIS 50873 where
--   oeisIx = gcd
--   oeisIx_row n = (tabl @50873) !! (n - 1)
--   oeisIx_tabl = zipWith (map . gcd ) [1..] (tabl @2260)

-- instance OEIS 50909 where
--   oeis = iterate (oeisIx @217) 9

-- instance OEIS 50925 where
--   oeis = 1 : -1 : (tail $ map (numerator . sum) $
--      zipWith (zipWith (%))
--      (zipWith (map . (*)) (drop 2 (oeis @142)) (tabf @242179)) (oeisIx @106831)_tabf)

-- instance OEIS 50931 where
--   oeis = filter (any (== 1) . map (flip mod 6) . (rowT @27748)) [1..]

-- instance OEIS 50932 where
--   oeis = 1 : map (denominator . sum) (zipWith (zipWith (%))
--      (zipWith (map . (*)) (drop 2 (oeis @142)) (tabf @242179)) (oeisIx @106831)_tabf)

-- instance OEIS 50935 where
--   oeis = 0 : 0 : 1 : zipWith (-) (drop 2 (oeis @50935)) (oeis @50935)

-- instance OEIS 50936 where
--   import Data.Set (empty, findMin, deleteMin, insert)
--   import qualified Data.Set as Set (null)
--   oeisIx n = (oeis @50936) !! (n - 1)
--   oeis = f empty [2] 2 $ tail (oeis @40) where
--      f s bs c (p:ps)
--        | Set.null s || head bs <= m = f (foldl (flip insert) s bs') bs' p ps
--        | otherwise                  = m : f (deleteMin s) bs c (p:ps)
--        where m = findMin s
--              bs' = map (+ p) (c : bs)

-- instance OEIS 50941 where
--   import Data.List.Ordered (minus)
--   oeisIx n = (oeis @50941) !! (n - 1)
--   oeis = minus [0..] (oeis @34706)

-- instance OEIS 50997 where
--   oeisIx = (^ 5) . (oeisIx @40)
--   oeis = map (^ 5) (oeis @40)

-- instance OEIS 50999 where
--   oeisIx = sum . map (^ 2) . (rowT @182469)

-- instance OEIS 51000 where
--   oeisIx = sum . map (^ 3) . (rowT @182469)

-- instance OEIS 51004 where
--   oeis =  [x | x <- (oeis @5349),
--                        x == head (dropWhile (< x) (oeis @34838))]

-- instance OEIS 51010 where
--   oeis = tablList @51010
-- instance Table 51010 where
--   rowCol n k = snd $ until ((== 0) . snd . fst)
--                       (\ ((x, y), i) -> ((y, mod x y), i + 1)) ((n, k), 0)
--   rowT n = map (oeisIx n) [0..n - 1]
--   tabl = map (rowT @51010) [1..]

-- instance OEIS 51011 where
--   oeisIx n = numerator $ (sum $ (rowT @51010) n) % n

-- instance OEIS 51012 where
--   oeisIx n = denominator $ (sum $ (rowT @51010) n) % n

-- instance OEIS 51015 where
--   oeis = filter zeisel [3, 5 ..] where
--      zeisel x = 0 `notElem` ds && length ds > 2 &&
--            all (== 0) (zipWith mod (tail ds) ds) && all (== q) qs
--            where q:qs = (zipWith div (tail ds) ds)
--                  ds = zipWith (-) (tail ps) ps
--                  ps = 1 : (rowT @27746) x

-- instance OEIS 51022 where
--   oeisIx n = if n < 10 then n else (oeisIx @51022) n' * 100 + r
--               where (n', r) = divMod n 10

-- instance OEIS 51023 where
--   oeisIx n = (oeisIx @70950) n n

-- instance OEIS 51035 where
--   oeis = filter ((== 0) . (oeisIx @10051)) (oeis @14091)

-- instance OEIS 51037 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @51037) !! (n - 1)
--   oeis = f $ singleton 1 where
--      f s = y : f (insert (5 * y) $ insert (3 * y) $ insert (2 * y) s')
--                  where (y, s') = deleteFindMin s

-- instance OEIS 51046 where
--   oeis = filter
--      (\x -> fi (oeisIx x) > hs !! (x - 1)) [1..]
--      where hs = zipWith (/)
--                 [1..] $ map (subtract 1.5) $ scanl1 (+) $ map (1 /) [1..]

-- instance OEIS 51064 where
--   oeisIx = (+ 1) . length .
--                     takeWhile (== 3) . dropWhile (== 2) . (rowT @27746)

-- instance OEIS 51120 where
--   oeisIx n = (oeis @51120) !! n
--   oeis = 1 : f [1] where
--     f xs = seen ++ (f $ xs ++ seen) where
--       seen = look (reverse $ map length $ group xs') (reverse $ nub xs')
--       xs' = sort xs
--       look [] []               = []
--       look (cnt:cnts) (nr:nrs) = cnt : nr : look cnts nrs

-- instance OEIS 51129 where
--   oeis = tablList @51129
-- instance Table 51129 where
--   rowCol n k = k ^ (n - k)
--   rowT   = rowT_off   @51129 @1
--   tabl = zipWith (zipWith (^)) (tabl @2260) $ map reverse (tabl @2260)

instance OEIS 51132 where
  oeisIx n = genericLength [ (x,y) | x <- [-n..n], y <- [-n..n], x^2 + y^2 < n^2]

-- instance OEIS 51135 where
--   oeisIx n = (oeis @51135) !! (n - 1)
--   oeis = map length $ group (oeis @4001)

-- instance OEIS 51139 where
--   oeisIx n = (oeisIx @994) (n + 2) - (oeisIx @995) (n + 2)

-- instance OEIS 51144 where
--   oeis = filter ((== 0) . (oeisIx @8966)) (oeis @37)

-- instance OEIS 51145 where
--   oeisIx n = (oeis @51145) !! n
--   oeis = 0 : 1 : f 1 1 where
--      f x b = y : f y z where
--        (y, z) = head [ (y, z) | y <- [1..],
--                                let z = x .|. y :: Integer, z > b]

-- instance OEIS 51146 where
--   oeisIx n = (oeis @51146) !! (n - 1)
--   oeis = zipWith (.|.) (oeis @51145) $ tail (oeis @51145)

-- instance OEIS 51147 where
--   oeisIx = fromJust . (`elemIndex` (oeis @51145)) . (2 ^)

-- instance OEIS 51159 where
--   oeis = tablList @51159
-- instance Table 51159 where
--   rowT n = (tabl @51159) !! n
--   tabl = [1] : f [1] [1,1] where
--      f us vs = vs : f vs (zipWith (+) ([0,0] ++ us) (us ++ [0,0]))

-- instance OEIS 51162 where
--   oeis = tablList @51162
-- instance Table 51162 where
--   rowT n = (tabl @51162) !! n
--   tabl = iterate (\xs@ (x:_) -> (x + 1) : map (+ 2) xs) [0]

-- instance OEIS 51169 where
--   oeisIx n = head [m | m <- [2..],
--               all (== 0) $ map (oeisIx' . (2*m -)) $ take n (oeis @40)]

-- instance OEIS 51173 where
--   oeisIx = lcm
--   oeisIx_row n = (tabl @51173) !! (n - 1)
--   oeisIx_tabl = map (\x -> map (lcm x) [1..x]) [1..]

instance OEIS 51176 where
  oeisIx n = if m == 0 then n' else n  where (n',m) = divMod n 3

-- instance OEIS 51178 where
--   oeis = filter (\x -> (oeisIx @27423) x `mod` x == 0) [1..]

instance OEIS 51190 where
  oeisIx (succ->n) = product $ map (gcd n) [1..n - 1]

-- instance OEIS 51193 where
--   oeisIx = sum . (rowT @51173)

-- instance OEIS 51248 where
--   oeisIx n = 2 + length
--      (takeWhile (not . (show n `isPrefixOf`) . show) $ iterate (* n) (n^2))

-- instance OEIS 51250 where
--   oeis = filter (all ((== 1) . (oeisIx @10055)) . (rowT @38566)) [1..]

-- instance OEIS 51278 where
--   oeis = filter ((== 1) . (oeisIx @51521)) [1..]

-- instance OEIS 51279 where
--   oeis = filter ((== 2) . (oeisIx @51521)) [1..]

-- instance OEIS 51282 where
--   oeisIx = (oeisIx @7814) . (oeisIx @25487)

-- instance OEIS 51283 where
--   oeis = filter (\x -> (oeisIx x) ^ 2 < x) [1..]

-- instance OEIS 51338 where
--   oeis = tablList @51338
-- instance Table 51338 where
--   rowT n = (tabl @51338) !! n
--   tabl = map fst $ iterate (\ (row, i) ->
--      (zipWith (-) ([0] ++ row) $ map (* i) (row ++ [0]), i + 1)) ([1], 6)

-- instance OEIS 51339 where
--   oeis = tablList @51339
-- instance Table 51339 where
--   rowT n = (tabl @51339) !! n
--   tabl = map fst $ iterate (\ (row, i) ->
--      (zipWith (-) ([0] ++ row) $ map (* i) (row ++ [0]), i + 1)) ([1], 7)

-- instance OEIS 51352 where
--   oeis = 0 : zipWith (+)
--      (oeis) (zipWith (*) [1..] $ map ((1 -) . (* 2)) (oeis @10051))

-- instance OEIS 51353 where
--   oeis = 0 : zipWith (+) (oeis @51353)
--      (zipWith (\chi x -> x * (chi * (x + 1) - 1)) (oeis @10051) [1..])

-- instance OEIS 51362 where
--   oeisIx n = (oeis @51362) !! (n - 1)
--   oeis = filter p $ drop 4 (oeis @40) where
--      p x = all (== 1) $ map (oeisIx . read) $
--                zipWith (++) (inits $ show x) (tail $ tails $ show x)

-- instance OEIS 51377 where
--   oeisIx n = product $ zipWith sum_e (oeisIx_row n) (oeisIx_row n) where
--      sum_e p e = sum [p ^ d | d <- (rowT @27750) e]

-- instance OEIS 51378 where
--   oeisIx n = product $ zipWith sum_1e (oeisIx_row n) (oeisIx_row n)
--      where sum_1e p e = 1 + sum [p ^ d | d <- (rowT @27750) e]

-- instance OEIS 51379 where
--   oeis = tablList @51379
-- instance Table 51379 where
--   rowT n = (tabl @51379) !! n
--   tabl = map fst $ iterate (\ (row, i) ->
--      (zipWith (-) ([0] ++ row) $ map (* i) (row ++ [0]), i + 1)) ([1], 8)

-- instance OEIS 51380 where
--   oeis = tablList @51380
-- instance Table 51380 where
--   rowT n = (tabl @51380) !! n
--   tabl = map fst $ iterate (\ (row, i) ->
--      (zipWith (-) ([0] ++ row) $ map (* i) (row ++ [0]), i + 1)) ([1], 9)

-- instance OEIS 51402 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` ms) where
--      ms = map (abs . (oeisIx @2321)) [1..]

-- instance OEIS 51417 where
--   oeis = zipWith div (tail (oeis @25547)) (oeis @25547)

-- instance OEIS 51424 where
--   oeisIx = genericLength . filter f . partitions where
--      f [] = True
--      f (p:ps) = (all (== 1) $ map (gcd p) ps) && f ps
--      partitions n = ps 1 n where
--        ps x 0 = [[]]
--        ps x y = [t:ts | t <- [x..y], ts <- ps t (y - t)]

instance OEIS 51426 where
  oeisIx (succ->n) = foldl lcm 1 [2,4..2*n]

-- instance OEIS 51431 where
--   oeisIx = (flip div 3628800) . (oeisIx @142) . (+ 10)

-- instance OEIS 51436 where
--   oeisIx n = (3 ^ n + 3 ^ m - 2 ^ n + (1 - r) * 2 ^ m) `div` 2 + r
--               where (m,r) = divMod n 2

-- instance OEIS 51451 where
--   oeis = scanl1 lcm (oeis @961)

-- instance OEIS 51466 where
--   oeis = f [head (oeis @25487)] $ tail (oeis @25487) where
--      f us (v:vs) = fromJust (find (\x -> mod v x == 0) us) : f (v : us) vs

-- instance OEIS 51487 where
--   oeis = [x | x <- [2..], let t = (oeisIx @10) x, t == (oeisIx @10) (x - t)]

-- instance OEIS 51488 where
--   oeis = [x | x <- [2..], let t = (oeisIx @10) x, t < (oeisIx @10) (x - t)]

-- instance OEIS 51521 where
--   oeisIx n = genericLength [k | k <- [1..4*n^2],
--                           let d = (oeisIx @5) k, divMod k d == (n,0)]

-- instance OEIS 51523 where
--   oeis = tablList @51523
-- instance Table 51523 where
--   rowT n = (tabl @51523) !! n
--   tabl = map fst $ iterate (\ (row, i) ->
--      (zipWith (-) ([0] ++ row) $ map (* i) (row ++ [0]), i + 1)) ([1], 10)

-- instance OEIS 51532 where
--   oeis = filter ((== 1) . (oeisIx @212793)) (oeis @56867)

-- instance OEIS 51533 where
--   oeis = filter ((> 0) . (oeisIx @53603)) [1..]

-- instance OEIS 51536 where
--   oeis = scanl1 lcm (oeis @16777)

-- instance OEIS 51537 where
--   oeis = tablList @51537
-- instance Table 51537 where
--   rowCol = rowCol_off @51537 @1 @1
--   rowT   = rowT_off   @51537 @1
--   tabl = zipWith (zipWith div) (tabl @51173) (tabl @50873)

-- instance OEIS 51538 where
--   oeis = scanl1 lcm $ tail (oeis @330)

-- instance OEIS 51542 where
--   oeis = zipWith div (tail (oeis @51538)) (oeis @51538)

-- instance OEIS 51543 where
--   oeisIx n = (oeis @51542) !! (n - 1)
--   oeis = zipWith div (tail (oeis @25555)) (oeis @25555)

-- instance OEIS 51597 where
--   oeis = tablList @51597
-- instance Table 51597 where
--   rowT n = (tabl @51597) !! n
--   tabl = iterate (\row -> zipWith (+) ([1] ++ row) (row ++ [1])) [1]

-- instance OEIS 51599 where
--   oeis = tablList @51599
-- instance Table 51599 where
--   rowT n = (tabl @51599) !! n
--   tabl = map fst $ iterate f ([2], (oeis @1223)) where
--      f (row, (d:ds)) =  (zipWith (+) ([d] ++ row) (row ++ [d]), ds)

-- instance OEIS 51601 where
--   oeis = tablList @51601
-- instance Table 51601 where
--   rowT n = (tabl @51601) !! n
--   tabl = iterate
--                  (\row -> zipWith (+) ([1] ++ row) (row ++ [1])) [0]

-- instance OEIS 51611 where
--   oeis = filter ((== 0) . (oeisIx @53603)) [1..]

-- instance OEIS 51612 where
--   oeisIx n = (oeisIx @203) n - (oeisIx @10) n

-- instance OEIS 51613 where
--   import Data.MemoCombinators (memo3, integral)
--   oeisIx' = p 1 2 where
--      p x _ 0 = 1
--      p x k m | m < qq       = 0
--              | mod x q == 0 = p x (k + 1) m
--              | otherwise    = p (q * x) (k + 1) (m - qq) + p x (k + 1) m
--              where q = (oeisIx @25473) k; qq = (oeisIx @961) k

instance OEIS 51631 where
  oeis = tablList @51631
instance Table 51631 where
  tabl = iterate (\row -> zipWith (+) ([1] ++ row) (row ++[1])) [-1]

-- instance OEIS 51632 where
--   oeis = tablList @51632
--   oeis = concat (tabl @51632)
--   tabl = iterate (\rs -> zipWith (+) ([1] ++ rs) (rs ++ [1])) [-2]

-- instance OEIS 51634 where
--   oeis = f (oeis @40) where
--      f (p:qs@ (q:r:ps)) = if 2 * q > (p + r) then q : f qs else f qs

-- instance OEIS 51635 where
--   oeis = g (oeis @40) where
--      g (p:qs@ (q:r:ps)) = if 2 * q < (p + r) then q : g qs else g qs

-- instance OEIS 51638 where
--   oeisIx = sum . (rowT @83093)

-- instance OEIS 51656 where
--   oeisIx = sum . zipWith (*) (oeis @1906) . (rowT @47999)

-- instance OEIS 51666 where
--   oeis = tablList @51666
-- instance Table 51666 where
--   rowT n = (tabl @51666) !! n
--   tabl = map fst $ iterate
--      (\ (vs, w:ws) -> (zipWith (+) ([w] ++ vs) (vs ++ [w]), ws))
--      ([0], [1, 3 ..])

instance OEIS 51674 where
  oeis = map (\p -> p ^ p) (oeis @40)

-- instance OEIS 51683 where
--   oeis = tablList @51683
-- instance Table 51683 where
--   rowCol = rowCol_off @51683 @1 @1
--   rowT   = rowT_off   @51683 @1
--   tabl = map fst $ iterate f ([1], 2) where
--      f (row, n) = (row' ++ [head row' + last row'], n + 1) where
--        row' = map (* n) row

-- instance OEIS 51701 where
--   oeis = f 2 $ 1 : (oeis @40) where
--      f d (q:ps@ (p:p':_)) = (if d <= d' then q else p') : f d' ps
--        where d' = p' - p

-- instance OEIS 51731 where
--   oeis = tablList @51731
-- instance Table 51731 where
--   rowCol n k = 0 ^ mod n k
--   rowT   = rowT_off   @51731 @1
--   tabl = map (map (oeisIx @7)) (tabl @48158)

-- instance OEIS 51736 where
--   oeis = 1 : 5 : 17 : 63 : zipWith (-) (map (* 2) $ drop 2 $
--      zipWith (+) (map (* 3) (oeis @51736)) (tail (oeis @51736))) (oeis @51736)

-- instance OEIS 51777 where
--   oeis = tablList @51777
-- instance Table 51777 where
--   rowCol n k = (rowT @51777) n !! (k-1)
--   rowT n = map (mod n) [n, n - 1 .. 1]
--   tabl = map (rowT @51777) [1..]

-- instance OEIS 51778 where
--   oeis = tablList @51778
-- instance Table 51778 where
--   rowCol = rowCol_off @51778 @3 @1
--   rowT = rowT_off @51778 @3
--   tabl = map (\xs -> map (mod (head xs + 1)) xs) $
--                      iterate (\xs -> (head xs + 1) : xs) [2]

-- instance OEIS 51786 where
--   oeis = 1 : 1 : 1 : 1 :
--      zipWith div (tail $ zipWith3 (\u v w -> 1 + u * v * w)
--                  (drop 2 (oeis @51786)) (tail (oeis @51786)) (oeis @51786))
--                  (oeis @51786)

-- instance OEIS 51793 where
--   oeis = 1 : 1 : 1 : 1 : f [1, 1, 1, 1] [-1, 1, -1, 1] where
--      f xs'@ (x:xs) as'@ (a:as) = y : f (xs ++ [y]) (as ++ [a]) where
--        y = sum $ zipWith (*) xs' as'

-- instance OEIS 51801 where
--   oeisIx 0 = 1
--   oeisIx n = (oeisIx n') * (m + 0 ^ m) where (n',m) = divMod n 10

-- instance OEIS 51802 where
--   oeisIx = until (< 10) (oeisIx @51801)

-- instance OEIS 51838 where
--   oeisIx n = (oeis @51838) !! (n - 1)
--   oeis =
--      map (+ 1) $ elemIndices 0 $ zipWith mod (oeis @2110) (oeis @7504)

-- instance OEIS 51840 where
--   oeis = map floor vs where
--      vs = iterate (\x -> x * (4 - 3 * x)) 0.1

-- instance OEIS 51841 where
--   oeisIx n = (sum $ zipWith (\u v -> gcd 2 u * (oeisIx @8683) u * 2 ^ v)
--                ds $ reverse ds) `div` (2 * n) where ds = (rowT @27750) n

-- instance OEIS 51883 where
--   oeisIx n = (oeis @51883) !! (n - 1)
--   oeis = 1 : f 2 "1" where
--      f :: Integer -> String -> [Int]
--      f x zs = y : f (x + 1) (zs ++ show y) where
--        y = fromJust $ findIndex
--            ((== 0) . (`mod` x) . read . (zs ++)) $ map show [0..]

-- instance OEIS 51884 where
--   oeis =  1 : f 1 (oeis @2808) where
--      f x cs = y : f y (dropWhile (<= y) cs) where
--        y = head [z | z <- cs, x `gcd` z == 1]

instance OEIS 51885 where
  oeisIx n = (m + 1) * 10^n' - 1 where (n',m) = divMod n 9

instance OEIS 51903 where
  oeisIx 0 = 0
  oeisIx n = maximum $ (rowT @124010 . succ) n

instance OEIS 51904 where
  oeisIx 0 = 0
  oeisIx n = minimum $ (rowT @124010 . succ) n

-- instance OEIS 51924 where
--   oeis = zipWith (-) (tail (oeis @984)) (oeis @984)

-- instance OEIS 51933 where
--   oeis = tablList @51933
-- instance Table 51933 where
--   rowCol n k = n `xor` k :: Int
--   rowT n = map (oeisIx n) [0..n]
--   tabl = map (rowT @51933) [0..]

-- instance OEIS 51934 where
--   oeis = f 0 (oeis @2113) where
--      f x (m:ms) | (oeisIx @10051) (x + m) == 1 = m : f (x + m) ms
--                 | otherwise            = f x ms

-- instance OEIS 51936 where
--   oeisIx = (subtract 9) . (oeisIx @217)
--   oeis = scanl (+) 1 [5..]

-- instance OEIS 51950 where
--   oeis = 1 : zipWith (-) (tail (oeis @5)) (oeis @5)

-- instance OEIS 51953 where
--   oeisIx n = n - (oeisIx @10) n

-- instance OEIS 52001 where
--   oeis = filter even (oeis @41)

-- instance OEIS 52002 where
--   oeisIx n = (oeis @52002) !! (n - 1)
--   oeis = findIndices odd (oeis @41)

-- instance OEIS 52003 where
--   oeis = filter odd (oeis @41)

-- instance OEIS 52008 where
--   oeisIx n = (oeisIx @4185) n + (oeisIx @4186) n

-- instance OEIS 52011 where
--   oeis = c 0 0 $ drop 2 (oeis @45) where
--     c x y fs'@ (f:fs) | x < f     = c (x+1) (y + (oeisIx @10051) x) fs'
--                      | otherwise = y : c (x+1) 0 fs

-- instance OEIS 52012 where
--   oeis = c 1 0 $ tail (oeis @204) where
--     c x y ls'@ (l:ls) | x < l     = c (x+1) (y + (oeisIx @10051) x) ls'
--                      | otherwise = y : c (x+1) 0 ls

-- instance OEIS 52018 where
--   oeisIx n = (oeis @52018) !! (n - 1)
--   oeis = filter f [0..] where
--      f x = show (oeisIx x) `isInfixOf` show x

-- instance OEIS 52021 where
--   oeis = tail $ filter (\x -> (oeisIx @7953) x == (oeisIx @6530) x) [1..]

-- instance OEIS 52109 where
--   oeis = 1 : f 2 [1] where
--      f n xs = z : f (n+1) (z:xs) where
--        z = sum $ map (oeisIx . fromInteger) $
--                      dropWhile (<= 0) $ map (n -) xs

-- instance OEIS 52147 where
--   oeisIx = (+ 2) . (oeisIx @40)

-- instance OEIS 52180 where
--   oeis = f [4..] where
--      f ws = (maximum $ map (oeisIx @20639) us) : f vs where
--        (us, _:vs) = span  ((== 0) . (oeisIx @10051)) ws

-- instance OEIS 52191 where
--   oeisIx n = head $
--      filter ((> 1) . minimum . map length . group . show) $ [0,n..]

-- instance OEIS 52192 where
--   oeisIx n = fromJust $
--      findIndex ((> 1) . minimum . map length . group . show) $ [0,n..]

-- instance OEIS 52203 where
--   oeisIx n = (oeisIx @122366) (2 * n) n

-- instance OEIS 52216 where
--   oeis = 2 : f [2] 9 where
--      f xs@ (x:_) z = ys ++ f ys (10 * z) where
--                     ys = (x + z) : map (* 10) xs

instance OEIS 52217 where
  oeis = filter ((== 3) . (oeisIx @7953)) [0..]

instance OEIS 52218 where
  oeis = filter ((== 4) . (oeisIx @7953)) [0..]

instance OEIS 52219 where
  oeis = filter ((== 5) . (oeisIx @7953)) [0..]

instance OEIS 52220 where
  oeis = filter ((== 6) . (oeisIx @7953)) [0..]

instance OEIS 52221 where
  oeis = filter ((== 7) . (oeisIx @7953)) [0..]

instance OEIS 52222 where
  oeis = filter ((== 8) . (oeisIx @7953)) [0..]

instance OEIS 52223 where
  oeis = filter ((== 9) . (oeisIx @7953)) [0..]

instance OEIS 52224 where
  oeis = filter ((== 10) . (oeisIx @7953)) [0..]

-- instance OEIS 52227 where
--   oeisIx n = (oeisIx n) * (oeisIx n) `div` (oeisIx n)

-- instance OEIS 52248 where
--   oeis = f (oeis @65091) where
--      f (p:ps'@ (p':ps)) = (maximum $ map (oeisIx @6530) [p+1..p'-1]) : f ps'

-- instance OEIS 52287 where
--   import Data.List.Ordered (union)
--   oeisIx n = (oeis @52287) !! (n - 1)
--   oeis = f [3] where
--      f (x:xs) = x : f (xs `union` map (x *) [2..x])

-- instance OEIS 52294 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (oeisIx @120)) [1..]

-- instance OEIS 52343 where
--   oeisIx = (flip div 2) . (+ 1) . (oeisIx @8441)

-- instance OEIS 52382 where
--   oeis = iterate f 1 where
--   f x = 1 + if r < 9 then x else 10 * f x' where (x', r) = divMod x 10

-- instance OEIS 52383 where
--   oeisIx = f . subtract 1 where
--      f 0 = 0
--      f v = 10 * f w + if r > 0 then r + 1 else 0  where (w, r) = divMod v 9

-- instance OEIS 52404 where
--   oeisIx = f . subtract 1 where
--      f 0 = 0
--      f v = 10 * f w + if r > 1 then r + 1 else r  where (w, r) = divMod v 9

-- instance OEIS 52405 where
--   oeisIx = f . subtract 1 where
--      f 0 = 0
--      f v = 10 * f w + if r > 2 then r + 1 else r  where (w, r) = divMod v 9

-- instance OEIS 52406 where
--   oeisIx = f . subtract 1 where
--   f 0 = 0
--   f v = 10 * f w + if r > 3 then r + 1 else r where (w, r) = divMod v 9

instance OEIS 52409 where
  oeisIx 0 = 0
  oeisIx n = foldr1 gcd $ (rowT @124010 . succ) n

-- instance OEIS 52410 where
--   oeisIx n = product $ zipWith (^)
--                         (oeisIx_row n) (map (`div` (foldl1 gcd es)) es)
--               where es = (rowT @124010) n

-- instance OEIS 52413 where
--   oeisIx = f . subtract 1 where
--   f 0 = 0
--   f v = 10 * f w + if r > 4 then r + 1 else r where (w, r) = divMod v 9

-- instance OEIS 52414 where
--   oeisIx = f . subtract 1 where
--   f 0 = 0
--   f v = 10 * f w + if r > 5 then r + 1 else r where (w, r) = divMod v 9

-- instance OEIS 52419 where
--   oeisIx = f . subtract 1 where
--   f 0 = 0
--   f v = 10 * f w + if r > 6 then r + 1 else r where (w, r) = divMod v 9

-- instance OEIS 52421 where
--   oeisIx = f . subtract 1 where
--   f 0 = 0
--   f v = 10 * f w + if r > 7 then r + 1 else r where (w, r) = divMod v 9

-- instance OEIS 52423 where
--   oeisIx n = f n n where
--      f x 1 = 1
--      f x y | x < 10    = gcd x y
--            | otherwise = if d == 1 then 1 else f x' (gcd d y)
--            where (x', d) = divMod x 10

-- instance OEIS 52474 where
--   oeisIx n = (tabl @56230) !! (n - 1) !! 0

-- instance OEIS 52485 where
--   oeis = filter ((== 0) . (oeisIx @112526)) [1..]

-- instance OEIS 52499 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @52499) !! n
--   oeis = f $ singleton 1 where
--      f s = m : f (insert (2*m) $ insert (4*m-1) s') where
--         (m, s') = deleteFindMin s

-- instance OEIS 52509 where
--   oeis = tablList @52509
-- instance Table 52509 where
--   rowT n = (tabl @52509) !! n
--   tabl = [1] : [1,1] : f [1] [1,1] where
--      f row' row = rs : f row rs where
--        rs = zipWith (+) ([0] ++ row' ++ [1]) (row ++ [0])

-- instance OEIS 52530 where
--   oeis =
--      0 : 2 : zipWith (-) (map (* 4) $ tail (oeis @52530)) (oeis @52530)

-- instance OEIS 52542 where
--   oeis = 1 : 2 : 4 : tail (zipWith (+)
--                  (map (* 2) $ tail (oeis @52542)) (oeis @52542))

-- instance OEIS 52548 where
--   oeisIx = (+ 2) . (oeisIx @79)
--   oeis = iterate ((subtract 2) . (* 2)) 3

-- instance OEIS 52582 where
--   oeis =  0 : 2 : zipWith
--      div (zipWith (*) (tail (oeis @52582)) (drop 2 (oeis @290))) [1..]

-- instance OEIS 52849 where
--   oeisIx n = if n == 0 then 0 else 2 * (oeisIx @142) n
--   oeis = 0 : fs where fs = 2 : zipWith (*) [2..] fs

instance OEIS 52901 where
  oeis = cycle [3,2,2]

-- instance OEIS 52928 where
--   oeisIx = (* 2) . flip div 2
--   oeis = 0 : 0 : map (+ 2) (oeis @52928)

-- instance OEIS 52938 where
--   oeis = 1 : 3 : 2 : zipWith (-) [5..] (oeis @52938)

-- instance OEIS 52952 where
--   oeis = 1 : 1 : zipWith (+)
--      (oeis @59841) (zipWith (+) (oeis @52952) $ tail (oeis @52952))

-- instance OEIS 52955 where
--   oeis = 1 : 2 : map ((+ 1) . (* 2)) (oeis @52955)

-- instance OEIS 53001 where
--   oeisIx = (oeisIx @7917) . (oeisIx @290)

-- instance OEIS 53012 where
--   oeis = tail $ f
--      [oeis, (oeis @578), (oeis @5900), (oeis @6566), (oeis @6564)]
--      where f pss = m : f (map (dropWhile (<= m)) pss)
--                    where m = minimum (map head pss)

-- instance OEIS 53029 where
--   oeis = filter ((== 4) . (oeisIx @1176)) [1..]

-- instance OEIS 53030 where
--   oeis = filter ((== 2) . (oeisIx @1176)) [1..]

-- instance OEIS 53031 where
--   oeis = filter ((== 1) . (oeisIx @1176)) [1..]

-- instance OEIS 53050 where
--   oeisIx n = head [k | (k, x) <- zip [1..] (oeis @7504), mod x n == 0]

-- instance OEIS 53087 where
--   oeisIx n = head [j | j <- [0..], (2 ^ j) `kara` n /= Nothing] where
--      kara a b = if null ks then Nothing else Just $ head ks
--                 where ks = [c | c <- [1..a], a <= c * b, a > c * (b - 1)]

-- instance OEIS 53092 where
--   oeisIx n = f 1 where
--      f x = case x `kara` n of
--                 Nothing -> f $ 2 * x
--                 Just y  -> y
--      kara a b = if null ks then Nothing else Just $ head ks
--                 where ks = [c | c <- [1..a], a <= c * b, a > c * (b - 1)]

-- instance OEIS 53121 where
--   oeis = tablList @53121
-- instance Table 53121 where
--   rowT n = (tabl @53121) !! n
--   tabl = iterate
--      (\row -> zipWith (+) ([0] ++ row) (tail row ++ [0,0])) [1]

-- instance OEIS 53127 where
--   oeisIx = (* 2) . (oeisIx @53132)

-- instance OEIS 53132 where
--   oeis = f [1] $ drop 2 (oeis @217) where
--      f xs ts'@ (t:ts) = (sum $ zipWith (*) xs ts') : f (t:xs) ts

-- instance OEIS 53141 where
--   oeis = 0 : 2 : map (+ 2)
--      (zipWith (-) (map (* 6) (tail (oeis @53141))) (oeis @53141))

-- instance OEIS 53186 where
--   oeisIx n = n - (oeisIx @48760) n
--   oeis = f 0 0 (map fst $ iterate (\ (y,z) -> (y+z,z+2)) (0,1))
--      where f e x ys'@ (y:ys) | x < y  = e : f (e + 1) (x + 1) ys'
--                             | x == y = 0 : f 1 (x + 1) ys

instance OEIS 53187 where
  oeis = 0 : concatMap (\x -> genericReplicate (2*x) (x ^ 2)) [1..]

-- instance OEIS 53188 where
--   oeisIx 0 = 0
--   oeisIx n = min (n - last xs) (head ys - n) where
--      (xs,ys) = span (< n) (oeis @290)

-- instance OEIS 53200 where
--   oeis = tablList @53200
-- instance Table 53200 where
--   rowT n = (tabl @53200) !! n
--   tabl = [0] : zipWith (map . flip mod) [1..] (tail (tabl @7318))

-- instance OEIS 53201 where
--   oeis = tablList @53201
-- instance Table 53201 where
--   rowCol = rowCol_off @53201 @2 @1
--   rowT = rowT_off @53201 @2
--   tabl = zipWith (map . (flip mod)) [2..] (tabl @14410)

-- instance OEIS 53202 where
--   oeis = tablList @53202
-- instance Table 53202 where
--   rowCol = rowCol_off @53202 @4 @0
--   rowT = rowT_off @53202 @4
--   tabl = zipWith (\k row -> take (k - 3) $ drop 2 row)
--                          [4..] $ drop 4 (tabl @53200)

-- instance OEIS 53203 where
--   oeis = tablList @53203
-- instance Table 53203 where
--   rowCol = rowCol_off @53203 @6 @0
--   rowT = rowT_off @53203 @6
--   tabl = zipWith (\k row -> take (k - 5) $ drop 3 row)
--                          [6..] $ drop 6 (tabl @53200)

-- instance OEIS 53204 where
--   oeisIx = sum . (rowT @53200)

-- instance OEIS 53205 where
--   oeisIx = sum . (rowT @53201)

-- instance OEIS 53206 where
--   oeisIx = sum . (rowT @53203)

-- instance OEIS 53210 where
--   oeisIx = sum . (rowT @51599)

-- instance OEIS 53212 where
--   oeisIx = (oeisIx @5)' . (oeisIx @7416)

-- instance OEIS 53214 where
--   oeisIx 0 = 1
--   oeisIx n = (oeisIx @53200) (2 * n) n

-- instance OEIS 53220 where
--   oeisIx n = (oeisIx @56242) (n + 1) n

-- instance OEIS 53222 where
--   oeis = zipWith (-) (tail (oeis @203)) (oeis @203)

-- instance OEIS 53224 where
--   oeisIx n = (oeis @53224) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices True $
--      zipWith (<) (oeis @203) $ tail (oeis @203)

-- instance OEIS 53226 where
--   oeisIx n = (oeis @53226) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (< 0) (oeis @53222)

-- instance OEIS 53230 where
--   oeis = zipWith (-) (tail (oeis @53224)) (oeis @53224)

-- instance OEIS 53233 where
--   oeisIx n = (oeis @53233) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 2 (oeis @53230)

-- instance OEIS 53234 where
--   oeisIx n = (oeis @53234) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 1 (oeis @53230)

-- instance OEIS 53235 where
--   oeisIx n = (oeis @53235) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 3 (oeis @53230)

-- instance OEIS 53236 where
--   oeisIx n = (oeis @53236) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 4 (oeis @53230)

-- instance OEIS 53238 where
--   oeis = zipWith (-) (tail (oeis @53226)) (oeis @53226)

-- instance OEIS 53240 where
--   oeisIx n = (oeis @53240) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (/= 2) (oeis @53238)

-- instance OEIS 53241 where
--   oeisIx n = (oeis @53241) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 2 (oeis @53238)

-- instance OEIS 53242 where
--   oeisIx n = (oeis @53242) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 1 (oeis @53238)

-- instance OEIS 53245 where
--   oeis = f (oeis @53242) where
--      f (x:x':xs) | x' == x+1 = x : f xs
--                  | otherwise = f (x':xs)

-- instance OEIS 53384 where
--   oeisIx = flip (oeisIx @53398) 4 . (+ 3)

-- instance OEIS 53385 where
--   oeisIx = flip (oeisIx @53398) 5 . (+ 4)

-- instance OEIS 53386 where
--   oeisIx = flip (oeisIx @53398) 6 . (+ 5)

-- instance OEIS 53387 where
--   oeisIx = flip (oeisIx @53398) 7 . (+ 6)

-- instance OEIS 53388 where
--   oeisIx = flip (oeisIx @53398) 8 . (+ 7)

-- instance OEIS 53389 where
--   oeisIx = flip (oeisIx @53398) 9 . (+ 8)

-- instance OEIS 53390 where
--   oeisIx = flip (oeisIx @53398) 10 . (+ 9)

-- instance OEIS 53392 where
--   oeisIx :: Integer -> Integer
--   oeisIx n = if ys == "" then 0 else read ys where
--      ys = foldl (++) "" $ map show $ zipWith (+) (tail ds) ds
--      ds = (map (read . return) . show) n

-- instance OEIS 53398 where
--   oeisIx :: Int -> Int -> Int
--   oeisIx n k = (oeisIx @7814) $ (oeisIx @3986) (n - 1) (k - 1) + 1
--   oeisIx_row n = map (oeisIx n) [1..n]
--   oeisIx_tabl = map (rowT @53398) [1..]

-- instance OEIS 53399 where
--   oeisIx = flip (oeisIx @53398) 3 . (+ 2)

-- instance OEIS 53405 where
--   oeisIx n = head [a | a <- [1..], n `kara` a == Nothing] where
--      kara a b = if null ks then Nothing else Just $ head ks
--                 where ks = [c | c <- [1..a], a <= c * b, a > c * (b - 1)]

-- instance OEIS 53432 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @53432) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [8, 5, 4, 9, 1, 7, 6, 3, 2, 0]

-- instance OEIS 53433 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @53433) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [8, 5, 4, 9, 1, 7, 6, 3, 2, 0]

-- instance OEIS 53478 where
--   oeisIx = (+ 1) . sum . takeWhile (/= 1) . iterate (oeisIx @10)

-- instance OEIS 53575 where
--   oeisIx = (oeisIx @265) . (oeisIx @10)

-- instance OEIS 53585 where
--   oeisIx = last . (rowT @141809)

-- instance OEIS 53590 where
--   oeisIx 1 = 1
--   oeisIx n = last $ takeWhile ((== 0) . (mod n)) $
--                      scanl1 (*) $ dropWhile (< (oeisIx @20639) n) (oeis @40)

-- instance OEIS 53603 where
--   oeisIx n = sum $ map (oeisIx . (n -)) $
--                     takeWhile (< n) $ tail (oeis @217)

-- instance OEIS 53610 where
--   oeisIx n = s n $ reverse $ takeWhile (<= n) $ tail (oeis @290) where
--     s _ []                 = 0
--     s m (x:xs) | x > m     = s m xs
--                | otherwise = m' + s r xs where (m',r) = divMod m x

instance OEIS 53621 where
  oeisIx = round . (\x -> x / (log x - 1)) . fi . succ

-- instance OEIS 53636 where
--   oeisIx 0 = 0
--   oeisIx n = sum $ zipWith (*) (map (oeisIx @10) ods) (map ((2 ^) . (div n)) ods)
--               where ods = (rowT @182469) n

-- instance OEIS 53644 where
--   oeisIx n = if n <= 1 then n else 2 * (oeisIx @53644) (div n 2)
--   oeis = 0 : concat (iterate (\zs -> map (* 2) (zs ++ zs)) [1])

instance OEIS 53645 where
  -- oeisIx 0 = 0
  -- oeisIx n = 2 * (oeisIx @53645) n' + b  where (n', b) = divMod n 2
  oeis = concatMap (0 `enumFromTo`) (oeis @225)

-- instance OEIS 53650 where
--   oeisIx = (oeisIx @51953) . (oeisIx @290)

-- instance OEIS 53661 where
--   oeis = filter (> 0) (oeis @175880)

-- instance OEIS 53669 where
--   oeisIx n = head $ dropWhile ((== 0) . (mod n)) (oeis @40)

-- instance OEIS 53670 where
--   oeisIx n = head [x | x <- [3, 5 ..],
--                         n `gcd` x == 1, (n + 1) `gcd` x == 1]

-- instance OEIS 53671 where
--   oeisIx n = f $ drop 2 (oeis @40) where
--      f (p:ps) | (n `mod` p) * ((n+1) `mod` p) * ((n+2) `mod` p) > 0 = p
--               | otherwise = f ps

-- instance OEIS 53672 where
--   oeisIx n = 2 + fromJust
--      (elemIndex 1 $ map (gcd $ foldl1 lcm $ take 4 [n..]) [2..])

-- instance OEIS 53673 where
--   oeisIx n = 2 + fromJust
--      (elemIndex 1 $ map (gcd $ foldl1 lcm $ take 5 [n..]) [2..])

-- instance OEIS 53674 where
--   oeisIx n = 2 + fromJust
--      (elemIndex 1 $ map (gcd $ foldl1 lcm $ take 6 [n..]) [2..])

-- instance OEIS 53685 where
--   oeis = dropWhile (<= 7) $ i (oeis @47211) (oeis @5382) where
--      i xs'@ (x:xs) ys'@ (y:ys) | x < y     = i xs ys'
--                              | x > y     = i xs' ys
--                              | otherwise = x : i xs ys

instance OEIS 53696 where
  oeis = filter ((> 1) . (oeisIx @88323) . subtract 2) [2..]

-- instance OEIS 53735 where
--   oeisIx = sum . (rowT @30341)

-- instance OEIS 53737 where
--   oeisIx n = if n == 0 then 0 else (oeisIx @53737) m + r where (m, r) = divMod n 4

-- instance OEIS 53754 where
--   oeis = 0 : filter (even . (oeisIx @70939)) [1..]

instance OEIS 53755 where
  oeisIx = (+ 1) . (* 4) . (^ 2)

-- instance OEIS 53767 where
--   oeis = scanl1 (+) (oeis @2808)

-- instance OEIS 53810 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (oeisIx @100995)) $ tail (oeis @961)

-- instance OEIS 53816 where
--   oeis = 1 : filter f [4..] where
--      f x = length us - length vs <= 1 &&
--            read (reverse us) + read (reverse vs) == x
--            where (us, vs) = splitAt (length $ show x) (reverse $ show (x^2))

-- instance OEIS 53824 where
--   oeisIx 0 = 0
--   oeisIx x = (oeisIx @53824) x' + d  where (x', d) = divMod x 5

-- instance OEIS 53829 where
--   oeisIx n = q 0 $ divMod n 8 where
--      q r (0, d) = r + d
--      q r (m, d) = q (r + d) $ divMod m 8

-- instance OEIS 53832 where
--   oeisIx n = q 0 $ divMod n 12 where
--      q r (0, d) = r + d
--      q r (m, d) = q (r + d) $ divMod m 12

-- instance OEIS 53836 where
--   oeisIx n = q 0 $ divMod n 16 where
--      q r (0, d) = r + d
--      q r (m, d) = q (r + d) $ divMod m 16

-- instance OEIS 53868 where
--   oeis = filter (odd . (oeisIx @1065)) [1..]

-- instance OEIS 53869 where
--   oeis = filter (even . (oeisIx @1065)) [1..]
--   oeis = map (+ 1) $ findIndices even $ map (oeisIx @1065) [1..]

-- instance OEIS 53871 where
--   oeis = 1 : 0 : zipWith (*)
--      [2,4..] (zipWith (+) (oeis @53871) $ tail (oeis @53871))

-- instance OEIS 53989 where
--   oeisIx n = head [k | k <- [1..], (oeisIx @10051)' (k * n - 1) == 1]

-- instance OEIS 54008 where
--   oeisIx n = n `mod` (oeisIx @5) n

-- instance OEIS 54024 where
--   oeisIx n = mod (oeisIx n) n

-- instance OEIS 54025 where
--   oeisIx n = genericIndex (oeis @54025) (n - 1)
--   oeis = zipWith mod (oeis @203) (oeis @5)

instance OEIS 54028 where
  oeisIx (succ.succ->n) = head [k | k <- [2..], 2^k >= k^n]

-- instance OEIS 54054 where
--   oeisIx = f 9 where
--      f m x | x <= 9 = min m x
--            | otherwise = f (min m d) x' where (x',d) = divMod x 10

-- instance OEIS 54055 where
--   oeisIx = f 0 where
--      f m x | x <= 9 = max m x
--            | otherwise = f (max m d) x' where (x',d) = divMod x 10

-- instance OEIS 54123 where
--   oeis = tablList @54123
-- instance Table 54123 where
--   rowT n = (tabl @54123) !! n
--   tabl = [1] : [1, 1] : f [1] [1, 1] where
--      f us vs = ws : f vs ws where
--                ws = zipWith (+) (0 : init us ++ [0, 0]) (vs ++ [1])

-- instance OEIS 54124 where
--   oeis = tablList @54124
-- instance Table 54124 where
--   rowT n = (tabl @54124) !! n
--   tabl = map reverse (tabl @54123)

-- instance OEIS 54211 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @127423)) [1..]

-- instance OEIS 54240 where
--   oeisIx :: Integer -> Integer -> Integer
--   oeisIx x 0 = x
--   oeisIx x y = (oeisIx @54240) (x `xor` y) (shift (x .&. y) 2)
--   oeisIx_adiag n =  map (\k -> (oeisIx @54240) (n - k) k) [0..n]
--   oeisIx_square = map (oeisIx @54240)_adiag [0..]

-- instance OEIS 54353 where
--   oeis = scanl1 (+) (oeis @2)

-- instance OEIS 54354 where
--   oeis = zipWith (-) (tail (oeis @2)) (oeis @2)

-- instance OEIS 54385 where
--   oeis = map (floor . (* e') . fi) [1..]
--      where e' = e / (e - 1); e = exp 1

-- instance OEIS 54429 where
--   oeis = f [1..] where
--      f xs@ (x:_) = reverse us ++ f vs where (us, vs) = splitAt x xs

-- instance OEIS 54440 where
--   oeisIx = sum . zipWith (*) (oeis @87960) . map (oeisIx @1255) . (rowT @260672)

-- instance OEIS 54496 where
--   oeisIx n = product $
--               zipWith (^) (oeisIx_row n) (map (oeisIx @290) $ (rowT @124010) n)

-- instance OEIS 54521 where
--   oeis = tablList @54521
--   rowCol = rowCol_off @54521 @1 @1
--   rowT   = rowT_off   @54521 @1
--   tabl = map (map (oeisIx @63524)) (tabl @50873)
--   oeis = concat (tabl @54521)

-- instance OEIS 54522 where
--   oeis = tablList @54522
-- instance Table 54522 where
--   rowCol = rowCol_off @54522 @1 @1
--   tabl = map (rowT @54522) [1..]
--   rowT n = map (\k -> if n `mod` k == 0 then (oeisIx @10) k else 0) [1..n]

-- instance OEIS 54523 where
--   oeis = tablList @54523
-- instance Table 54523 where
--   rowCol = rowCol_off @54523 @1 @1
--   rowT   = rowT_off   @54523 @1
--   tabl = map (map (\x -> if x == 0 then 0 else (oeisIx @10) x)) (tabl @126988)

-- instance OEIS 54527 where
--   oeis = tablList @54527
-- instance Table 54527 where
--   rowCol = rowCol_off @54527 @1 @1
--   rowT   = rowT_off   @54527 @1
--   tabl = tail $ inits (oeis @8683)

-- instance OEIS 54531 where
--   oeis = tablList @54531
-- instance Table 54531 where
--   rowCol n k = div n $ gcd n k
--   rowT   = rowT_off   @54531 @1
--   tabl = zipWith (\u vs -> map (div u) vs) [1..] (tabl @50873)

-- instance OEIS 54582 where
--   oeis = tablList @54582
-- instance Table 54582 where
--   rowT n = (tabl @54582) !! n
--   tabl = iterate
--      (\xs@ (x:_) -> (2 * x) : zipWith (+) xs (iterate (`div` 2) (2 * x))) [1]
--   oeis = concat (tabl @54582)

-- instance OEIS 54584 where
--   oeisIx n = (oeisIx @5) n + 3 * (oeisIx @79978) n * (oeisIx @5) (oeisIx n) + (oeisIx @35191) n

-- instance OEIS 54632 where
--   oeis = scanl (+) 0 (oeis @7376)

-- instance OEIS 54635 where
--   oeis = tablList @54635
-- instance Table 54635 where
--   rowCol n k = (tabf @54635) !! n !! k
--   rowT n = (tabf @54635) !! n
--   tabf = map reverse (tabf @30341)
--   oeis = concat (tabf @54635)

-- instance OEIS 54646 where
--   oeisIx 1 = 1
--   oeisIx n = (oeisIx @70167) $ (oeisIx @302) n

-- instance OEIS 54654 where
--   oeis = tablList @54654
-- instance Table 54654 where
--   rowT n = (tabl @54654) !! n
--   tabl = map reverse (tabl @48994)

-- instance OEIS 54685 where
--   import Data.MemoCombinators (memo2, integral)
--   oeisIx n = (oeis @54685) !! n
--   oeis = map (p' 2) [0..] where
--      p' = memo2 integral integral p
--      p _ 0 = 1
--      p k m = if m < pp then 0 else p' (k + 1) (m - pp) + p' (k + 1) m
--              where pp = (oeisIx @961) k

-- instance OEIS 54686 where
--   oeis = merge (oeis @290) (oeis @217) where
--      merge xs'@ (x:xs) ys'@ (y:ys)
--        | x <= y    = x : merge xs ys'
--        | otherwise = y : merge xs' ys

-- instance OEIS 54735 where
--   oeisIx = (+ 2) . (* 2) . (oeisIx @1359)

-- instance OEIS 54744 where
--   oeis = filter (\x -> and $
--      zipWith (<=) (oeisIx_row x) (map fi $ (rowT @124010) x)) [1..]

-- instance OEIS 54791 where
--   oeis = 0 : 1 : f 2 where
--      f x | r ^ 2 == x  = (oeisIx @54791) r ^ 2 : f (x + 1)
--          | odd (x - r) = x + 1         : f (x + 1)
--          | otherwise   = (x - 1) ^ 2   : f (x + 1)
--          where r = (oeisIx @196) x

-- instance OEIS 54841 where
--   oeisIx 1 = 0
--   oeisIx n = sum $ zipWith (*)
--                     (map ((10 ^) . subtract 1 . (oeisIx @49084)) $ (rowT @27748) n)
--                     (map fi $ (rowT @124010) n)

-- instance OEIS 54842 where
--   oeisIx = f (oeis @40) 1 where
--      f _      y 0 = y
--      f (p:ps) y x = f ps (y * p ^ d) x'  where (x', d) = divMod x 10

instance OEIS 54868 where
  oeisIx = (oeisIx @120) . (oeisIx @120)

-- instance OEIS 54888 where
--   oeis = 1 : zipWith (+) (tail (oeis @2878)) (oeis @2878)

-- instance OEIS 54895 where
--   oeis = scanl (+) 0 (oeis @122841)

-- instance OEIS 54977 where
--   oeisIx 0 = 2; (oeisIx @54977) n = 1
--   oeis = 2 : repeat 1

-- instance OEIS 54978 where
--   oeis = map head $ iterate
--                  (\lds -> map abs $ zipWith (-) (tail lds) lds) (oeis @959)

-- instance OEIS 54986 where
--   oeisIx n = (oeis @54986) !! (n - 1)
--   oeis = filter modest [1..] where
--      modest x = or $ zipWith m
--                 (map read $ (init $ tail $ inits $ show x) :: [Integer])
--                 (map read $ (tail $ init $ tails $ show x) :: [Integer])
--         where m u v = u < v && (x - u) `mod` v == 0

-- instance OEIS 55011 where
--   oeis = iterate (oeisIx @208241) 2

-- instance OEIS 55018 where
--   oeisIx n = (oeis @55018) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 1 $
--                  zipWith (-) (tail (oeis @54986)) (oeis @54986)

-- instance OEIS 55029 where
--   oeisIx 2 = 1
--   oeisIx n = 2 * (oeisIx @79260) n + (oeisIx @79261) (oeisIx n)

-- instance OEIS 55038 where
--   oeis = scanl1 (+) (oeis @66829)

-- instance OEIS 55040 where
--   oeis = map (* 3) (oeis @55048)

-- instance OEIS 55045 where
--   oeis = filter ((== 5) . (flip mod 8) . f) [1..] where
--      f x = if r == 0 then f x' else x  where (x', r) = divMod x 4

-- instance OEIS 55048 where
--   oeis = filter (s 0) [1..] where
--      s t u | m > 0  = even t && m == 2
--            | m == 0 = s (t + 1) u' where (u',m) = divMod u 3

instance OEIS 55067 where
  oeisIx (succ->n) = product [k | k <- [1..n], mod n k /= 0]

-- instance OEIS 55079 where
--   oeisIx n = head [x | x <- [1..], (oeisIx @33273) x == n]

-- instance OEIS 55087 where
--   oeis = tablList @55087
-- instance Table 55087 where
--   rowCol n k = (tabf @55087) !! n !! k
--   rowT n = (tabf @55087) !! n
--   tabf = concat $ transpose [oeisIx_tabl, (tabl @2262)]
--   oeis = concat (tabf @55087)

-- instance OEIS 55096 where
--   oeis = tablList @55096
-- instance Table 55096 where
--   rowCol = rowCol_off @55096 @1 @1
--   rowT   = rowT_off   @55096 @1
--   tabl = zipWith (zipWith (+)) (tabl @133819) (tabl @140978)

instance OEIS 55098 where
  oeisIx (succ->n) = genericLength $ nub $ filter ((> '0') . head) $ permutations $ show $ fi n

-- instance OEIS 55099 where
--   oeisIx n = (oeisIx @7481) (2 * n + 1) - (oeisIx @7481) (2 * n)

-- instance OEIS 55118 where
--   oeisIx 0 = 0
--   oeisIx n = if d == 0 then 8 * (oeisIx @55118) n' else 8 * (oeisIx @55118) n' + 8 - d
--               where (n', d) = divMod n 8

-- instance OEIS 55120 where
--   oeisIx = foldl f 0 . reverse . unfoldr g where
--      f v d = if d == 0 then 10 * v else 10 * v + 10 - d
--      g x = if x == 0 then Nothing else Just $ swap $ divMod x 10

-- instance OEIS 55122 where
--   oeisIx 0 = 0
--   oeisIx n = if d == 0 then 12 * (oeisIx @55122) n' else 12 * (oeisIx @55122) n' + 12 - d
--               where (n', d) = divMod n 12

-- instance OEIS 55124 where
--   oeisIx 0 = 0
--   oeisIx n = if d == 0 then 14 * (oeisIx @55124) n' else 14 * (oeisIx @55124) n' + 14 - d
--               where (n', d) = divMod n 14

-- instance OEIS 55126 where
--   oeisIx 0 = 0
--   oeisIx n = if d == 0 then 16 * (oeisIx @55126) n' else 16 * (oeisIx @55126) n' + 16 - d
--               where (n', d) = divMod n 16

-- instance OEIS 55205 where
--   oeisIx n = genericLength [d | d <- [1..n^2], n^2 `mod` d == 0, (oeisIx @10052) d == 0]

-- instance OEIS 55212 where
--   oeisIx = subtract 1 . (oeisIx @33273)

-- instance OEIS 55217 where
--   oeisIx n = sum $ take (n + 1) $ (rowT @27907) (n + 1)

-- instance OEIS 55229 where
--   oeisIx n = product $ zipWith (^) ps (map (flip mod 2) es) where
--      (ps, es) = unzip $
--                 filter ((> 1) . snd) $ zip (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 55248 where
--   oeis = tablList @55248
-- instance Table 55248 where
--   rowT n = (tabl @55248) !! n
--   tabl = map reverse (tabl @8949)

-- instance OEIS 55265 where
--   oeisIx n = (oeis @55265) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f x vs = g vs where
--        g (w:ws) = if (oeisIx @10051) (x + w) == 1
--                      then w : f w (delete w vs) else g ws

-- instance OEIS 55266 where
--   oeisIx n = (oeis @55266) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f u vs = g vs where
--        g (w:ws) | (oeisIx @10051)' (u + w) == 0 = w : f w (delete w vs)
--                 | otherwise = g ws

-- instance OEIS 55396 where
--   oeisIx = (oeisIx @49084) . (oeisIx @20639)

-- instance OEIS 55401 where
--   oeisIx n = s n $ reverse $ takeWhile (<= n) $ tail (oeis @578) where
--     s _ []                 = 0
--     s m (x:xs) | x > m     = s m xs
--                | otherwise = m' + s r xs where (m',r) = divMod m x

-- instance OEIS 55483 where
--   oeisIx n = gcd n $ (oeisIx @4086) n

-- instance OEIS 55491 where
--   oeisIx = (^ 2) . (oeisIx @7913)

-- instance OEIS 55498 where
--   oeis = 0 : 1 : map (oeisIx @7918)
--       (zipWith (+) (oeis @55498) $ tail (oeis @55498))

-- instance OEIS 55500 where
--   oeis = 1 : 1 : map (oeisIx @7917)
--                  (zipWith (+) (oeis @55500) $ tail (oeis @55500))

-- instance OEIS 55608 where
--   oeis = 1 : 13 : 92 : zipWith (+)
--      (zipWith (-) (map (* 2) $ drop 2 (oeis @55608)) (oeis @55608))
--      (drop 2 $ zipWith (+) (tail (oeis @2889)) (oeis @2889))

instance OEIS 55612 where
  oeisIx = product . map (+ 1) . tail . rowT @7318 . fi

-- instance OEIS 55615 where
--   oeisIx n = (oeisIx @8683) n * n

instance OEIS 55640 where
  oeisIx n = genericLength $ filter (/= '0') $ show $ fi n

-- instance OEIS 55641 where
--   oeisIx n | n < 10    = 0 ^ n
--             | otherwise = (oeisIx @55641) n' + 0 ^ d where (n',d) = divMod n 10

-- instance OEIS 55642 where
--   oeisIx :: Integer -> Int
--   oeisIx = genericLength . show

-- instance OEIS 55653 where
--   oeisIx = sum . map (oeisIx @10) . (rowT @77610)

-- instance OEIS 55654 where
--   oeis = zipWith (-) [1..] (oeis @55653)

-- instance OEIS 55742 where
--   oeis = [x | x <- [1..], (oeisIx @1221) x == (oeisIx @1221) (oeisIx x)]

-- instance OEIS 55744 where
--   oeis = 1 : filter f [2..] where
--      f x = all ((== 0) . mod x) (concatMap (oeisIx_row . subtract 1) ps) &&
--            all ((== 0) . mod (oeisIx x))
--                (map fst $ filter ((== 1) . snd) $ zip ps $ (rowT @124010) x)
--            where ps = (rowT @27748) x

-- instance OEIS 55768 where
--   oeisIx = (oeisIx @1221) . (oeisIx @5867)

-- instance OEIS 55769 where
--   oeisIx = (oeisIx @6530) . (oeisIx @5867)

-- instance OEIS 55790 where
--   oeis = 0 : 2 : zipWith (+)
--      (zipWith (*) [0..] (oeis @55790)) (zipWith (*) [2..] $ tail (oeis @55790))

instance OEIS 55874 where
  oeisIx (succ->n) = genericLength $ takeWhile ((== 0) . (mod n)) [1..]

instance OEIS 55897 where
  oeisIx (succ->n) = n * (n - 1) ^ (n - 1)

-- instance OEIS 55938 where
--   oeis = concat $
--      zipWith (\u v -> [u+1..v-1]) (oeis @5187) $ tail (oeis @5187)

-- instance OEIS 55944 where
--   oeisIx n = n + (oeisIx @30101) n

-- instance OEIS 55948 where
--   oeisIx n = n + (oeisIx @30103) n

-- instance OEIS 55975 where
--   oeisIx n = (oeisIx @3188) n - (oeisIx @3188) (n - 1)
--   oeis = zipWith (-) (tail (oeis @3188)) (oeis @3188)

-- instance OEIS 55980 where
--   oeisIx = floor . sum . map (1 %) . enumFromTo 1
--   oeis = map floor $ scanl1 (+) $ map (1 %) [1..]

-- instance OEIS 55983 where
--   oeis = iterate (oeisIx . (+ 1)) 10

-- instance OEIS 56001 where
--   oeisIx n = (n + 1) * (oeisIx @7318)' (n + 7) 7

-- instance OEIS 56003 where
--   oeisIx n = (n + 1) * (oeisIx @7318)' (n + 8) 8

-- instance OEIS 56011 where
--   oeisIx n = (tabl @56011) !! (n - 1)
--   oeis = concat (tabl @56011)
--   oeisIx_tabl = ox False (tabl @27) where
--     ox turn (xs:xss) = (if turn then reverse xs else xs) : ox (not turn) xss
--   oeisIx_row n = (tabl @56011) !! (n - 1)

-- instance OEIS 56020 where
--   oeis = 1 : 8 : map (+ 9) (oeis @56020)

-- instance OEIS 56045 where
--   oeisIx n = sum $ map (oeisIx n) $ (rowT @27750) n

-- instance OEIS 56062 where
--   oeisIx n = (oeis @56062) !! n
--   oeis = map length $ group (oeis @30190)

instance OEIS 56106 where
  oeisIx n = n * (3 * n - 1) + 1

-- instance OEIS 56114 where
--   oeisIx n = (n + 1) * (oeisIx @7318)' (n + 9) 9

instance OEIS 56169 where
  oeisIx = genericLength . filter (== 1) . (rowT @124010 . succ)

instance OEIS 56170 where
  oeisIx = genericLength . filter (> 1) . (rowT @124010 . succ)

-- instance OEIS 56230 where
--   oeis = tablList @56230
-- instance Table 56230 where
--   rowCol = rowCol_off @56230 @1 @1
--   tabl = [1] : f [1] [2..] [1] where
--      f adiag (a:as) us | null (adiag' `intersect` us) =
--                          adiag' : f adiag' (as \\ adiag') (us `union` adiag')
--                        | otherwise = f adiag as us
--                        where adiag' = scanl (+) a adiag

-- instance OEIS 56231 where
--   oeisIx n = ([1,2] ++ threeRows !! 0) !! (n - 1)
--   oeisIx n = ([3] ++ threeRows !! 1) !! (n - 1)
--   oeisIx n = threeRows !! 2 !! (n - 1)
--   threeRows = transpose $ f [4..] [1,2,3] [2,1] [3] [] where
--      f (u:free) used us vs ws
--          | u `notElem` used &&
--            v `notElem` used &&
--            w `notElem` used = [u, v, w] :
--                               f free (w:v:u:used) (u:us) (v:vs) (w:ws)
--          | otherwise        = f free used us vs ws
--          where v = u + head us; w = v + head vs

-- instance OEIS 56234 where
--   oeis = notUsed 1 (oeis @56231) (oeis @56232) (oeis @56233) where
--      notUsed x us'@ (u:us) vs'@ (v:vs) ws'@ (w:ws)
--       | x == u = notUsed (x + 1) us vs' ws'
--       | x == v = notUsed (x + 1) us' vs ws'
--       | x == w = notUsed (x + 1) us' vs' ws
--       | otherwise = x : notUsed (x + 1) us' vs' ws'

-- instance OEIS 56239 where
--   oeisIx n = sum $ zipWith (*) (map (oeisIx @49084) $ (rowT @27748) n) (oeisIx_row n)

-- instance OEIS 56240 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @1414))

-- instance OEIS 56242 where
--   oeis = tablList @56242
-- instance Table 56242 where
--   rowCol = rowCol_off @56242 @1 @1
--   rowT   = rowT_off   @56242 @1
--   tabl = [1] : [1,2] : f [1] [1,2] where
--      f us vs = ws : f vs ws where
--        ws = zipWith (-) (map (* 2) $ zipWith (+) ([0] ++ vs) (vs ++ [0]))
--                         (zipWith (+) ([0] ++ us ++ [0]) (us ++ [0,0]))

-- instance OEIS 56524 where
--   oeis = [read (ns ++ reverse ns) :: Integer |
--                   n <- [0..], let ns = show n]

-- instance OEIS 56525 where
--   oeis = [1..9] ++ [read (ns ++ [z] ++ reverse ns) |
--                   n <- [1..], let ns = show n, z <- "0123456789"]

-- instance OEIS 56526 where
--   oeis = zipWith (-) (tail (oeis @960)) (oeis @960)

-- instance OEIS 56538 where
--   oeis = tablList @56538
-- instance Table 56538 where
--   rowCol n k = (tabf @56538) !! (n - 1) !! (k-1)
--   rowT n = (tabf @56538) !! (n - 1)
--   tabf = map reverse (tabf @27750)

-- instance OEIS 56542 where
--   oeis = 0 : map (+ 1) (zipWith (*) [2..] (oeis @56542))

-- instance OEIS 56558 where
--   oeisIx n = (oeis @56558) !! n
--   oeis = concatMap (concat . init . inits . enumFromTo 0) [0..]

-- instance OEIS 56561 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @202018)) [0..]

-- instance OEIS 56576 where
--   oeisIx = subtract 1 . (oeisIx @20914)

-- instance OEIS 56577 where
--   oeisIx = head . (rowT @227048)

-- instance OEIS 56595 where
--   oeisIx n = genericLength [d | d <- [1..n], mod n d == 0, (oeisIx @10052) d == 0]

-- instance OEIS 56606 where
--   oeisIx = (oeisIx @7947) . (oeisIx @1142) . succ

-- instance OEIS 56608 where
--   oeisIx = (oeisIx @20639) . (oeisIx @2808)

-- instance OEIS 56753 where
--   oeisIx n = (oeis @56753) !! n
--   oeis = [1] ++ odds [] where
--      odds xs = xs ++ (intercalate xs' $ group [y+2,y+4..2*y+1]) ++ odds xs'
--           where y = 2 * length xs + 1
--                 xs' = xs ++ [y] ++ xs

-- instance OEIS 56768 where
--   oeisIx = (oeisIx @607) . (oeisIx @40)

-- instance OEIS 56789 where
--   oeisIx = sum . (rowT @51537)

-- instance OEIS 56792 where
--   c i = if i `mod` 2 == 0 then i `div` 2 else i - 1
--   b 0 foldCount = foldCount
--   b sheetCount foldCount = b (c sheetCount) (foldCount + 1)
--   oeisIx n = b n 0

-- instance OEIS 56815 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @45918)) (oeis @40)

-- instance OEIS 56832 where
--   oeis = 1 : f [1] where
--      f xs = y : f (y : xs) where
--             y = 1 + sum (zipWith (*) xs $ reverse xs) `mod` 2

-- instance OEIS 56867 where
--   oeis = filter (\x -> gcd x (oeisIx x) == 1) [1..]

-- instance OEIS 56868 where
--   oeis = filter (any (== 1) . pks) [1..] where
--      pks x = [p ^ k `mod` q | let fs = (rowT @27748) x, q <- fs,
--                               (p,e) <- zip fs $ (rowT @124010) x, k <- [1..e]]

-- instance OEIS 56875 where
--   oeis =  f [1..] where
--      f zs = head zs : f (g zs) where
--        g (x:xs) = us ++ g vs where (us, vs) = splitAt (x - 1) xs

-- instance OEIS 56911 where
--   oeis = filter ((== 1) . (oeisIx @8966)) [1,3..]

-- instance OEIS 56918 where
--   oeis = 2 : 9 :
--      zipWith (-) (map (* 9) $ tail (oeis @56918)) (oeis @56918)

-- instance OEIS 56924 where
--   oeisIx = (`div` 2) . (oeisIx @5)

-- instance OEIS 56942 where
--   oeis = concatMap
--                  (\x -> (x ^ 2) : (take x $ repeat (x * (x + 1)))) [0..]

-- instance OEIS 56965 where
--   oeisIx n = n - (oeisIx @4086) n

-- instance OEIS 56970 where
--   oeisIx n = p (oeis @47261) n where
--      p _  0     = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 56973 where
--   oeisIx = f 0 where
--      f y x = if x == 0 then y else f (y + 0 ^ (mod x 4)) $ div x 2
--   a (n) = { my (x = bitor (n, n>>1));
--            if (x == 0, 0, 1 + logint (x, 2) - hammingweight (x)) }

-- instance OEIS 56978 where
--   oeisIx = sum . map (fromEnum . ([0,0,1] `isPrefixOf`)) .
--                       tails . (rowT @30308)

-- instance OEIS 56979 where
--   oeisIx = sum . map (fromEnum . ([1,0,1] `isPrefixOf`)) .
--                       tails . (rowT @30308)

-- instance OEIS 56980 where
--   oeisIx = sum . map (fromEnum . ([0,1,1] `isPrefixOf`)) .
--                       tails . (rowT @30308)

-- instance OEIS 56992 where
--   oeisIx = (oeisIx @10888) . (oeisIx @290)

-- instance OEIS 57020 where
--   oeisIx n = numerator $ (oeisIx @203) n % (oeisIx @5) n

-- instance OEIS 57021 where
--   oeisIx n = denominator $ (oeisIx @203) n % (oeisIx @5) n

-- instance OEIS 57022 where
--   oeisIx n = (oeisIx @203) n `div` (oeisIx @5) n

-- instance OEIS 57062 where
--   oeis = f 1 [1..] where
--      f j xs = (replicate (sum $ map (oeisIx @10051) dia) j) ++ f (j + 1) xs'
--        where (dia, xs') = splitAt j xs

instance OEIS 57078 where
  oeisIx = (1 -) . (`mod` 3)

-- instance OEIS 57142 where
--   oeisIx n = head $ reverse $ sort $ map length $ group $
--               sort [u * v | u <- [1..n], v <- [1..n]]

-- instance OEIS 57143 where
--   oeisIx n = head $ head $ reverse $ sortBy (compare `on` length) $
--               group $ sort [u * v | u <- [1..n], v <- [1..n]]

-- instance OEIS 57144 where
--   oeisIx n = head $ last $ head $ groupBy ((==) `on` length) $
--               reverse $ sortBy (compare `on` length) $
--               group $ sort [u * v | u <- [1..n], v <- [1..n]]

-- instance OEIS 57147 where
--   oeisIx n = (oeisIx @7953) n * n

-- instance OEIS 57153 where
--   oeisIx n = (tabl @56230) !! (n - 1) !! (n-1)

-- instance OEIS 57154 where
--   oeisIx n = (oeis @57154) !! (n - 1)
--   oeis = g [1] [2..] [1] where
--      g ds (a:as) us
--        | null (ds' `intersect` us) = g ds' (as \\ ds') (us `union` ds')
--        | otherwise = a : g ds as us
--        where ds' = scanl (+) a ds

-- instance OEIS 57165 where
--   import Data.Set (Set, singleton, notMember, insert)
--   oeisIx n = (oeis @57165) !! n
--   oeis = r (singleton 0) 1 0 where
--      r :: Set Integer -> Integer -> Integer -> [Integer]
--      r s n x = if x > n && (x - n) `notMember` s
--                   then r (insert (x-n) s) (n+1) (x-n)
--                   else n : r (insert (x+n) s) (n+1) (x+n)

instance OEIS 57168 where
  oeis = f 2 $ tail (oeis @120) where
     f x (z:zs) = (x + genericLength (takeWhile (/= z) zs)) : f (x + 1) zs

-- instance OEIS 57194 where
--   oeis = 1 : f 1 1 where
--      f u v = w : f (u * w) (v + w) where w = u * v

-- instance OEIS 57211 where
--   oeis = concat $ zipWith ($) (map replicate [1..]) (oeis @59841)

-- instance OEIS 57212 where
--   oeis = concat $ zipWith ($) (map replicate [1..]) (oeis @35)

-- instance OEIS 57226 where
--   oeisIx = (oeisIx @43537) . (oeisIx @61493)

-- instance OEIS 57338 where
--   oeisIx n = head $ reverse $ sort $ map length $ group $
--               sort [u * v * w | u <- [1..n], v <- [1..n], w <- [1..n]]

-- instance OEIS 57427 where
--   oeisIx = signum
--   oeis = 0 : [1, 1 ..]

-- instance OEIS 57436 where
--   oeisIx n = (oeis @57436) !! (n - 1)
--   oeis = filter (null . (intersect "0789") . show) [1..]

-- instance OEIS 57449 where
--   oeisIx = product . (rowT @193829)

-- instance OEIS 57533 where
--   oeis = filter (\z -> p z [z]) [1..] where
--      p x ts = y > 0 && (y `elem` ts || p y (y:ts)) where y = (oeisIx @48050) x

-- instance OEIS 57562 where
--   oeisIx n = p (oeisIx_row n) n where
--      p _          0 = 1
--      p []         _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 57588 where
--   oeisIx = (subtract 1) . product . (flip take (oeis @40))

-- instance OEIS 57597 where
--   oeis = 0 : 0 : 1 : zipWith3 (\x y z -> - x - y + z)
--                  (drop 2 (oeis @57597)) (tail (oeis @57597)) (oeis @57597)

-- instance OEIS 57606 where
--   oeis = tablList @57606
-- instance Table 57606 where
--   rowCol n k = (tabf @57606) !! (n - 3) !! (k-1)
--   rowT n = (tabf @57606) !! (n - 3)
--   tabf = map g $ drop 3 $
--     iterate (\xs -> (map (0 :) xs) ++ (map (1 :) xs)) [[]] where
--     g xss = map length $ fill0 $ group $ sort $ map (length . del2) xss
--       where fill0 uss = f0 uss [1 .. length xss `div` 4] where
--              f0 _  []        = []
--              f0 [] (j:js)    = [] : f0 [] js
--              f0 vss'@ (vs:vss) (j:js)
--               | j == head vs = vs : f0 vss js
--               | otherwise    = [] : f0 vss' js
--     del2 = nub . (concatMap del1) . del1
--     del1 xs = nub $
--               zipWith (++) (init $ inits xs) (map tail $ init $ tails xs)

-- instance OEIS 57607 where
--   oeis = tablList @57607
-- instance Table 57607 where
--   rowCol n k = (tabf @57607) !! (n - 2) !! k
--   rowT n = (tabf @57607) !! (n - 2)
--   tabf =  [2] : map (0 :) (tabf @57606)

instance OEIS 57655 where
  oeisIx n = genericLength [ (x,y) | x <- [-n..n], y <- [-n..n], x^2 + y^2 <= n]

-- instance OEIS 57660 where
--   oeisIx n = sum $ map (div n) $ (rowT @50873) n

-- instance OEIS 57661 where
--   oeisIx n = (oeisIx @51193) n `div` n

-- instance OEIS 57683 where
--   oeis = filter (all (== 1) . p) [1..] where
--      p x = map (oeisIx . (+ (x + 1)) . (x ^)) [2..4]

-- instance OEIS 57705 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @57588)

-- instance OEIS 57716 where
--   oeis = filter ((== 0) . (oeisIx @209229)) [0..]

-- instance OEIS 57728 where
--   oeis = tablList @57728
-- instance Table 57728 where
--   rowCol = rowCol_off @57728 @1 @1
--   rowT   = rowT_off   @57728 @1
--   tabl = iterate
--      (\row -> zipWith (+) (row ++ [0]) ([0] ++ tail row ++ [1])) [1]

-- instance OEIS 57820 where
--   oeis = zipWith (-) (tail (oeis @961)) (oeis @961)

-- instance OEIS 57828 where
--   oeisIx x = genericLength $ filter ((== 1) . (gcd x)) $
--                        takeWhile (<= x) $ tail (oeis @290)

-- instance OEIS 57890 where
--   oeis = 0 : filter ((== 1) . (oeisIx @178225) . (oeisIx @265)) [1..]

-- instance OEIS 57891 where
--   oeis = filter ((== 0) . (oeisIx @178225) . (oeisIx @265)) [1..]

instance OEIS 57918 where
  oeisIx (succ->n) = sum $ map ((0 ^) . (`mod` n) . (^ 2)) [1..n - 1]

-- instance OEIS 57944 where
--   oeis = concat (tabl @57944)
--   oeisIx' n k = (tabl @57944) !! n !! k  -- access when seen as a triangle
--   oeisIx_row n = (tabl @57944) !! n
--   oeisIx_tabl = zipWith ($) (map replicate [1..]) (oeis @217)

-- instance OEIS 57945 where
--   oeisIx n = g n $ reverse $ takeWhile (<= n) $ tail (oeis @217) where
--      g 0 _      = 0
--      g x (t:ts) = g r ts + a where (a,r) = divMod x t

-- instance OEIS 57979 where
--   oeisIx n = 1 - rest * (1 - n') where (n', rest) = divMod n 2
--   oeis = concat $ transpose [repeat 1, [0..]]

-- instance OEIS 58006 where
--   oeis = scanl1 (+) (oeis @133942)

-- instance OEIS 58026 where
--   oeisIx n = product $ zipWith (\p e -> p ^ (e - 1) * (p - 2))
--                                 (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 58035 where
--   oeisIx n = product $
--      zipWith (^) (oeisIx_row n) (map (min 3) $ (rowT @124010) n)

-- instance OEIS 58042 where
--   oeisIx = (oeisIx @7088) . (oeisIx @61561)

-- instance OEIS 58071 where
--   oeis = tablList @58071
-- instance Table 58071 where
--   rowT n = (tabl @58071) !! n
--   tabl = map (\fs -> zipWith (*) fs $ reverse fs) (tabl @104763)

instance OEIS 58084 where
  oeisIx (succ->n) = fi . fromJust $ findIndex (elem n) (tabl @7318)

-- instance OEIS 58187 where
--   oeis = 1 : f 1 1 [1] where
--      f x y zs = z : f (x + y) (1 - y) (z:zs) where
--        z = sum $ zipWith (*) [1..x] [x,x-1..1]

-- instance OEIS 58197 where
--   oeisIx n = (+ 1) $ fromJust $ findIndex (n <=) $ tail (oeis @51950)

-- instance OEIS 58198 where
--   oeisIx = (+ 1) . (oeisIx @58197)

-- instance OEIS 58199 where
--   oeisIx n = fromJust $ findIndex (n <=) $ map negate (oeis @51950)

instance OEIS 58207 where
  oeis = f [0,1,2,3,2] where f xs = xs ++ f (map (+ 1) xs)

instance OEIS 58212 where
  oeisIx n = 1 + n * (n - 3) `div` 6

-- instance OEIS 58254 where
--   oeis = scanl1 lcm (oeis @6093)

-- instance OEIS 58257 where
--   oeis = tablList @58257
-- instance Table 58257 where
--   rowT n = (tabl @58257) !! n
--   tabl = [1] : ox 0 [1] where
--      ox turn xs = ys : ox (mod (turn + 1) 4) ys
--         where ys | turn <= 1 = scanl (+) 0 xs
--                  | otherwise = reverse $ scanl (+) 0 $ reverse xs

-- instance OEIS 58277 where
--   oeisIx n = (oeis @58277) !! (n - 1)
--   oeis = map length $ group (oeis @7614)

-- instance OEIS 58294 where
--   oeis = tablList @58294
-- instance Table 58294 where
--   rowCol n k = (tabf @58294) !! (n - 1) !! (k-1)
--   rowT n = (tabf @58294) !! (n - 1)
--   tabf = [1] : zipWith (++) xss (map (tail . reverse) xss)
--                  where xss = tail (tabl @102473)

-- instance OEIS 58312 where
--   oeisIx n = (oeis @58312) !! (n - 1)
--   oeis = map denominator $ scanl1 (+) $
--                      map (1 %) $ tail (oeis @181983)

-- instance OEIS 58313 where
--   oeisIx n = (oeis @58313) !! (n - 1)
--   oeis = map numerator $ scanl1 (+) $ map (1 %) $ tail (oeis @181983)

-- instance OEIS 58331 where
--   oeisIx = (+ 1) . (oeisIx @1105)

-- instance OEIS 58345 where
--   oeis = 1 : f 1 1 where
--      f u v = w : f (u * w) (v + w) where w = lcm u v

-- instance OEIS 58369 where
--   oeisIx n = (oeis @58369) !! (n - 1)
--   oeis =
--      elemIndices 0 $ zipWith ((-) `on` (oeisIx @7953)) [0..] (oeis @290)

-- instance OEIS 58529 where
--   oeis = filter (\x -> all (`elem` (takeWhile (<= x) (oeis @1132)))
--                                    $ (rowT @27748) x) [1..]

-- instance OEIS 58698 where
--   import Data.MemoCombinators (memo2, integral)
--   oeisIx n = (oeis @58698) !! (n - 1)
--   oeis = map (pMemo 1) (oeis @40) where
--      pMemo = memo2 integral integral p
--      p _ 0 = 1
--      p k m | m < k     = 0
--            | otherwise = pMemo k (m - k) + pMemo (k + 1) m

-- instance OEIS 58840 where
--   oeisIx n = (oeis @58840) !! n
--   oeis = 1 : renyi' 1 where
--      renyi' x = y : renyi' r  where
--         (r, y) | q > 1     = (q - 1, 1)
--                | otherwise = (q, 0)
--         q = 3%2 * x

-- instance OEIS 58841 where
--   oeisIx n = (oeis @58841) !! n
--   oeis =
--      0 : (map length $ filter ((== 0) . head) $ group (oeis @58840))

-- instance OEIS 58842 where
--   oeisIx n = (oeis @58842) !! (n - 1)
--   oeis = map numerator (renyi 1 []) where
--      renyi :: Rational -> [Rational] -> [Rational]
--      renyi x xs = r : renyi r (x:xs) where
--         r = q - fromInteger ((numerator q) `div` (denominator q))
--         q = 3%2 * x

-- instance OEIS 58922 where
--   oeisIx n = (n - 1) * 2 ^ n
--   oeis = zipWith (*) [0..] $ tail (oeis @79)

-- instance OEIS 58971 where
--   oeisIx n = f [n % 1] where
--      f xs@ (x:_) | denominator y == 1 = numerator y
--                 | y `elem` xs        = 0
--                 | otherwise          = f (y : xs)
--                 where y = (oeisIx x') % (oeisIx x')
--                       x' = numerator x + denominator x

-- instance OEIS 58972 where
--   oeisIx n = (oeis @58972) !! (n - 1)
--   oeis = map numerator $ filter ((f [])) [1..] where
--      f ys q = denominator y == 1 || not (y `elem` ys) && f (y : ys) y
--               where y = (oeisIx @1065) q' % (oeisIx @5) q'
--                     q' = numerator q + denominator q

-- instance OEIS 58977 where
--   oeisIx = numerator . until ((== 1) . denominator) f . f . fi
--      where f x = (oeisIx @8472) z % (oeisIx @1221) z
--                  where z = numerator x + denominator x

-- instance OEIS 58988 where
--   oeisIx n = numerator $ fst $
--     until ((== 1) . denominator . fst) f $ f (fi n, []) where
--     f (x, ys) = if y `elem` ys then (0, []) else (y, y:ys) where
--      y = numerator x * denominator x % (oeisIx @5) (numerator x + denominator x)

-- instance OEIS 59009 where
--   oeis = filter (odd . (oeisIx @23416)) [1..]

-- instance OEIS 59010 where
--   oeis = filter (even . (oeisIx @23416)) [1..]

-- instance OEIS 59011 where
--   oeis = filter (odd . (oeisIx @71295)) [0..]

-- instance OEIS 59015 where
--   oeis = scanl1 (+) $ map (oeisIx @23416) [0..]

-- instance OEIS 59100 where
--   oeisIx = (+ 2) . (^ 2)
--   oeis = scanl (+) (2) [1, 3 ..]

-- instance OEIS 59169 where
--   oeis = map abs $ zipWith (-) (tail (oeis @178804)) (oeis @178804)

-- instance OEIS 59175 where
--   oeisIx n = f [n % 1] where
--      f xs@ (x:_) | denominator y == 1 = numerator y
--                 | y `elem` xs        = 0
--                 | otherwise          = f (y : xs)
--                 where y = (numerator x * denominator x) %
--                           (oeisIx (numerator x) + (oeisIx @7953) (denominator x))

-- instance OEIS 59233 where
--   oeisIx ((+2)->n) = genericLength $ filter (n `elem`) $ take (fi n) $ tail (tabl @7318)
--   oeis = map (oeisIx @59233) [2..]

-- instance OEIS 59268 where
--   oeis = tablList @59268
-- instance Table 59268 where
--   rowT n = (tabl @59268) !! n
--   tabl = iterate (scanl (+) 1) [1]

-- instance OEIS 59283 where
--   oeis = tablList @59283
-- instance Table 59283 where
--   rowT n = (tabl @59283) !! n
--   tabl = [1] : [0,1] : f [1] [0,1] where
--      f us vs = ws : f vs ws where
--        ws = scanl1 (+) $ zipWith (+)
--                          ([0]++us++[0]) $ zipWith (+) ([0]++vs) (vs++[0])

-- instance OEIS 59316 where
--   oeisIx n = (oeis @59316) !! n
--   oeis = map (+ 1) $ mapMaybe (`elemIndex` (oeis @35250)) [1..]

-- instance OEIS 59317 where
--   oeis = tablList @59317
-- instance Table 59317 where
--   rowCol n k = (tabf @59317) !! n !! k
--   rowT n = (tabf @59317) !! n
--   tabf = [1] : [1,1,1] : f [1] [1,1,1] where
--      f ws vs = vs' : f vs vs' where
--        vs' = zipWith4 (\r s t x -> r + s + t + x)
--              (vs ++ [0,0]) ([0] ++ vs ++ [0]) ([0,0] ++ vs)
--              ([0,0] ++ ws ++ [0,0])

-- instance OEIS 59401 where
--   oeisIx n = (oeis @59401) !! (n - 1)
--   oeis = filter (\x -> (oeisIx @10055) x == 0 &&
--                  all (`isInfixOf` show x) (map show $ (rowT @141809) x)) [1..]

-- instance OEIS 59402 where
--   oeisIx n = (oeis @59402) !! (n - 1)
--   oeis = filter chi [1..] where
--     chi n = n `mod` 10 > 0 && f n 1 0 (oeis @40) where
--       f :: Integer -> Integer -> Int -> [Integer] -> Bool
--       f 1 1 o _    = o > 1
--       f m x o ps'@ (p:ps)
--        | r == 0    = f m' (p*x) o ps'
--        | x > 1     = show x `isInfixOf` show n && f m 1 (o+1) ps
--        | m < p * p = f 1 m o ps
--        | otherwise = f m 1 o ps
--        where (m',r) = divMod m p

-- instance OEIS 59405 where
--   oeis = filter f (oeis @238985) where
--      f x = all (== 0) (map (mod x) digs) && g x digs where
--            g z []         = z == 1
--            g z ds'@ (d:ds) = r == 0 && (h z' ds' || g z' ds)
--                             where (z', r) = divMod z d
--            h z []         = z == 1
--            h z ds'@ (d:ds) = r == 0 && h z' ds' || g z ds
--                             where (z', r) = divMod z d
--            digs = map (read . return) $ filter (/= '1') $ show x

-- instance OEIS 59436 where
--   oeisIx n = head [x | x <- [1..],
--      let dds = map length $ group $ sort $ concatMap show $ (rowT @27750) x,
--      minimum dds == n, length dds == 10]

-- instance OEIS 59448 where
--   oeisIx = (`mod` 2) . (oeisIx @23416)

-- instance OEIS 59481 where
--   oeis = tablList @59481
--   rowCol n k = (tabl @59481) !! n !! n
--   rowT n = (tabl @59481) !! n
--   tabl = map reverse (tabl @100100)

-- instance OEIS 59496 where
--   oeis = 2 : f [2] [2] where
--      f qs xs = g candidates where
--        g [] = []
--        g (ys:yss) | (oeisIx @10051) q == 0 || q `elem` qs = g yss
--                   | otherwise = q : f (q:qs) ys
--                   where q = foldr (\d r -> 10 * r + d) 0 ys
--        candidates = [us ++ [z] ++ vs | i <- [0 .. length xs - 1],
--                            let (us, (_:vs)) = splitAt i xs, z <- [1..9]] ++
--                     [xs ++ [z] | z <- [1..9]]

-- instance OEIS 59497 where
--   oeisIx n = (oeis @59497) !! (n - 1)
--   oeis = (oeis @40) \\  (oeis @59496)

-- instance OEIS 59514 where
--   oeisIx n = f [n % 1] where
--      f xs@ (x:_)
--        | denominator y == 1 = numerator y
--        | y `elem` xs        = 0
--        | otherwise          = f (y : xs)
--        where y = (numerator x * denominator x) %
--                  (oeisIx (numerator x) + (oeisIx @7953) (denominator x) - 1)

-- instance OEIS 59576 where
--   oeis = tablList @59576
-- instance Table 59576 where
--   rowT n = (tabl @59576) !! n
--   tabl = [1] : map fst (iterate f ([1,1], [2,3,2])) where
--      f (us, vs) = (vs, map (* 2) ws) where
--        ws = zipWith (-) (zipWith (+) ([0] ++ vs) (vs ++ [0]))
--                         ([0] ++ us ++ [0])

-- instance OEIS 59590 where
--   oeisIx n = (oeis @59590) !! n
--   oeis = elemIndices 1 $ map (oeisIx @115944) [0..]

-- instance OEIS 59632 where
--   oeisIx n = foldl (\v d -> 10 * v + d) 0 $
--                     map (flip mod 10) $ zipWith (+) ([0] ++ ds) (ds ++ [0])
--               where ds = map (read . return) $ show n

-- instance OEIS 59707 where
--   oeisIx n = if u == n || v == n then n else (oeisIx @59707) (u * v) where
--      (u,v) = foldl (\ (x,y) d -> if odd d then (10*x+d,y) else (x,10*y+d))
--           (0,0) $ reverse $ unfoldr
--           (\z -> if z == 0 then Nothing else Just $ swap $ divMod z 10) n

-- instance OEIS 59708 where
--   oeis = filter sameParity [0..] where
--      sameParity n = all (`elem` "02468") ns
--                  || all (`elem` "13579") ns where ns = show n

-- instance OEIS 59717 where
--   oeisIx n = if u == n || v == n then n else (oeisIx @59717) (u + v) where
--      (u,v) = foldl (\ (x,y) d -> if odd d then (10*x+d,y) else (x,10*y+d))
--           (0,0) $ reverse $ unfoldr
--           (\z -> if z == 0 then Nothing else Just $ swap $ divMod z 10) n

-- instance OEIS 59727 where
--   oeis = zipWith (*) (oeis @45) $ map (+ 1) (oeis @45)

-- instance OEIS 59841 where
--   oeisIx n = (1 -) . (`mod` 2)
--   oeis = cycle [1,0]

-- instance OEIS 59893 where
--   oeisIx = foldl (\v b -> v * 2 + b) 1 . init . (rowT @30308)

-- instance OEIS 59922 where
--   oeis = tablList @59922
-- instance Table 59922 where
--   oeisIx_flattened = concat (tabl @59922)
--   tabl = iterate (\rs ->
--      zipWith (+) (0 : reverse (0 : replicate (length rs - 1) 1))
--                  $ zipWith (*) ([1] ++ rs) (rs ++ [1])) [1]
--   oeisIx n = (tabl @59922) !! n !! (n - 3)
--   oeisIx n = sum (oeisIx_tabl !! n)
--   oeisIx n = (tabl @59922) !! (2*n) !! n
--   oeisIx n = (tabl @59922) !! n !! n `div` 2

-- instance OEIS 59941 where
--   oeisIx n = (oeis @59941) !! (n - 1)
--   oeis = map (foldr (\d v -> v * 10 + d) 0) $ f (tabf @30341) where
--      f (xs:xss)
--        | 0 `elem` xs = f xss
--        | otherwise = map fromEnum (zipWith (==)
--                      (tail $ inits xs) (reverse $ init $ tails xs)) : f xss

-- instance OEIS 59942 where
--   oeisIx n = (oeis @59942) !! (n - 1)
--   oeis = map (foldr (\d v -> v * 2 + d) 0) $ f (tabf @30341) where
--      f (xs:xss)
--        | 0 `elem` xs = f xss
--        | otherwise = map fromEnum (zipWith (==)
--                      (tail $ inits xs) (reverse $ init $ tails xs)) : f xss

-- instance OEIS 59943 where
--   oeisIx = (* 2) . (oeisIx @59942)

-- instance OEIS 59966 where
--   oeisIx n = sum (map (\x -> (oeisIx @8683) (n `div` x) * (oeisIx @225) x)
--                        [d | d <- [1..n], mod n d == 0]) `div` n

-- instance OEIS 59983 where
--   oeisIx n = (oeis @59983) !! n
--   oeis = mapMaybe (`elemIndex` (oeis @7599)) [0..]

-- instance OEIS 60000 where
--   oeis = 1 : 2 : f 1 2 2 [] where
--      f x y m []     = z : f y z z [m+1..z-1] where z = x + y
--      f x y m (h:hs) = h : f y h m hs

-- instance OEIS 60030 where
--   oeisIx n = (oeis @60030) !! (n - 1)
--   oeis = 1 : 2 : f 1 2 [3..] where
--      f u v ws = y : f v y (delete y ws) where
--        y = if null xs then u + v else last xs
--        xs = takeWhile (< v) ws

-- instance OEIS 60036 where
--   oeis = tablList @60036
-- instance Table 60036 where
--   rowCol = rowCol_off @60036 @2 @1
--   rowT = rowT_off @60036 @2
--   tabl = map init $ tail (tabl @48152)

-- instance OEIS 60054 where
--   oeis = -1 : map (numerator . sum) (tail $ zipWith (zipWith (%))
--      (zipWith (map . (*)) (oeis @142) (tabf @242179)) (oeisIx @106831)_tabf)

-- instance OEIS 60109 where
--   oeisIx n = if n == 0 then 22222 else read (conv n) :: Integer where
--      conv 0 = []
--      conv x = conv x' ++ mCode !! d where (x', d) = divMod x 10
--      mCode = map ('0' :) (mc ++ (reverse $ init $ tail $ map reverse mc))
--      mc = zipWith (++) (inits "111111") (tails "22222")

-- instance OEIS 60110 where
--   oeisIx = t . (oeisIx @60109) where
--      t 0 = 0
--      t n = if n == 0 then 0 else 3 * t n' + d  where (n', d) = divMod n 10

-- instance OEIS 60142 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @60142) !! n
--   oeis = 0 : f (singleton 1) where
--      f s = x : f (insert (4 * x) $ insert (2 * x + 1) s') where
--          (x, s') = deleteFindMin s

-- instance OEIS 60144 where
--   oeis = 0 : 0 : scanl1 (+) (oeis @3849)

-- instance OEIS 60226 where
--   oeisIx 0 = 1
--   oeisIx n = (oeisIx @312) n - n * (oeisIx @312) (n - 1)

-- instance OEIS 60264 where
--   oeisIx = (oeisIx @151800) . (* 2)

-- instance OEIS 60265 where
--   oeisIx = (oeisIx @7917) . (* 2)

-- instance OEIS 60278 where
--   oeisIx 1 = 0
--   oeisIx n = sum $ filter ((== 0) . (oeisIx @10051)) $ tail $ (rowT @27751) n

-- instance OEIS 60308 where
--   oeisIx = (oeisIx @7917) . (oeisIx @5843)

-- instance OEIS 60324 where
--   oeisIx n = head [q | q <- (oeis @40), (oeisIx @10051)' (n * (q + 1) - 1) == 1]

-- instance OEIS 60355 where
--   oeis = map (oeisIx @1694) $ filter ((== 1) . (oeisIx @76446)) [1..]

-- instance OEIS 60372 where
--   oeisIx n = (oeisIx n + n) `div` 2

-- instance OEIS 60373 where
--   oeisIx n = (oeisIx @60372) n - n

-- instance OEIS 60374 where
--   oeisIx n = f $ dropWhile (< n) (oeis @5836) where
--      f (p:ps) | (oeisIx @39966) (p-n) == 1 && (oeisIx @39966) (2*p-n) == 1 = 2*p - n
--               | otherwise                                  = f ps

-- instance OEIS 60381 where
--   oeisIx n = (oeisIx @98012) (2 * n - 1) n

-- instance OEIS 60384 where
--   oeisIx = (oeisIx @55642) . (oeisIx @45)

-- instance OEIS 60417 where
--   oeisIx = genericLength . nub . show . (oeisIx @40)

-- instance OEIS 60418 where
--   oeisIx = (oeisIx @54055) . (oeisIx @40)

-- instance OEIS 60431 where
--   oeis = scanl1 (+) (oeis @212793)

-- instance OEIS 60432 where
--   oeisIx n = sum $ zipWith (*) [n,n - 1..1] (oeis @10054)

-- instance OEIS 60441 where
--   oeis = tablList @60441
-- instance Table 60441 where
--   rowCol n k = (tabf @60441) !! (n - 1) !! (k-1)
--   rowT n = (tabf @60441) !! (n - 1)
--   tabf = [0] : [1] : [1] : map (rowT @27746) (drop 3 (oeis @45))

-- instance OEIS 60442 where
--   oeis = tablList @60442
-- instance Table 60442 where
--   rowCol n k = (tabf @60442) !! n !! k
--   rowT n = (tabf @60442) !! n
--   tabf = [0] : [1] : [1] : map (rowT @27748) (drop 3 (oeis @45))

-- instance OEIS 60445 where
--   oeisIx 0 = 0
--   oeisIx n = genericLength $ takeWhile (>= n') $ (rowT @70165) n'
--               where n' = 2 * n + 1

-- instance OEIS 60448 where
--   oeisIx n = genericLength [us | let ds = (rowT @27750) n,
--                            us <- init $ tail $ subsequences ds,
--                            let vs = ds \\ us, head us < head vs,
--                            product us `mod` product vs == 0] + 1

-- instance OEIS 60476 where
--   oeis = filter ((== 0) . (oeisIx @10051)' . (+ 1) . (oeisIx @51903)) [1..]

-- instance OEIS 60547 where
--   oeisIx = (2 ^) . (oeisIx @8611) . (subtract 1)
--   oeis = f [2,1,2] where f xs = xs ++ f (map (* 2) xs)

-- instance OEIS 60640 where
--   oeisIx n = sum [d * (oeisIx @5) d | d <- (rowT @27750) n]

-- instance OEIS 60646 where
--   oeisIx n = (fromJust $ findIndex ((n+1) <) (oeis @14688)) + 1

-- instance OEIS 60652 where
--   oeis = filter h [1..] where
--      h x = any (> 2) (map snd pfs) || any (== 1) pks where
--        pks = [p ^ k `mod` q | (p,e) <- pfs, q <- map fst pfs, k <- [1..e]]
--        pfs = zip (oeisIx_row x) (oeisIx_row x)

-- instance OEIS 60680 where
--   oeisIx = minimum . (rowT @193829)

-- instance OEIS 60681 where
--   oeisIx n = div n p * (p - 1) where p = (oeisIx @20639) n

-- instance OEIS 60682 where
--   oeisIx = genericLength . nub . (rowT @193829)

-- instance OEIS 60683 where
--   oeis = 1 : filter (\x -> (oeisIx @60682) x == (oeisIx @5)' x - 1) [2..]

-- instance OEIS 60684 where
--   oeisIx = minimum . (rowT @193829) . (+ 1) . (* 2)

-- instance OEIS 60687 where
--   oeis = filter ((== 1) . (oeisIx @46660)) [1..]

instance OEIS 60692 where
  oeisIx (succ->n) = uncurry (+) $ divMod (3 ^ n) (2 ^ n)

-- instance OEIS 60715 where
--   oeisIx n = sum $ map (oeisIx @10051) [n+1..2*n - 1]

-- instance OEIS 60747 where
--   oeisIx = subtract 1 . (* 2)
--   oeis = [-1, 1 ..]

-- instance OEIS 60756 where
--   oeisIx n = (oeis @60756) !! n
--   oeis = map (+ 1) $ mapMaybe (`elemIndex` (oeis @60715)) [0..]

-- instance OEIS 60765 where
--   oeisIx n = (oeis @60765) !! (n - 1)
--   oeis = filter
--   (\x -> sort (nub $ (rowT @193829) x) `subset` (rowT @27750)' x) [1..]

-- instance OEIS 60819 where
--   oeisIx n = n `div` (oeisIx @109008) n

-- instance OEIS 60837 where
--   oeisIx n = (oeisIx n ^ 2) *
--      product (zipWith (^) (oeisIx_row m)
--                           (map ((subtract 1) . (* 2)) (oeisIx_row m)))
--      where m = (oeisIx @20653) n

-- instance OEIS 60857 where
--   oeisIx n = (oeis @60857) !! n
--   oeis = 1 : f [1] :: [Integer] where
--      f xs = (read $ concatMap show ys) : f (xs ++ ys) where
--             ys = concat $ transpose [map length zss, map head zss]
--             zss = group $ sort xs

-- instance OEIS 60901 where
--   oeisIx = (oeisIx @38500) . (oeisIx @45)

-- instance OEIS 60945 where
--   oeis = 1 : 1 : 2 : 3 : 6 : zipWith (+) (oeis @60945)
--      (zipWith (+) (drop 2 (oeis @60945)) (drop 3 (oeis @60945)))

-- instance OEIS 60968 where
--   oeisIx 1 = 1
--   oeisIx n = (if p == 2 then (if e == 1 then 2 else 2^ (e+1)) else 1) *
--      (product $ zipWith (*) (map (\q -> q - 2 + mod q 4) ps'')
--                             (zipWith (^) ps'' (map (subtract 1) es'')))
--      where (ps'', es'') = if p == 2 then (ps, es) else (ps', es')
--            ps'@ (p:ps) = (rowT @27748) n; es'@ (e:es) = (rowT @124010) n

-- instance OEIS 60979 where
--   oeis = filter (\x -> let digs = map (read . return) $ show x in
--                                evens digs /= odds digs) [11, 22 ..]
--      where evens [] = 0; evens [x] = x; evens (x:_:xs) = x + evens xs
--            odds [] = 0; odds [x] = 0; odds (_:x:xs) = x + odds xs

-- instance OEIS 60984 where
--   oeis = iterate (\x -> x + (oeisIx @48760) x) 1

-- instance OEIS 60985 where
--   oeis = iterate (oeisIx @61885) 1

-- instance OEIS 61019 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map negate $ (rowT @27746) n

-- instance OEIS 61020 where
--   oeisIx = sum . map (oeisIx @61019) . (rowT @27750)

-- instance OEIS 61021 where
--   oeis = 3 : 3 : 3 : zipWith (-)
--   (tail $ zipWith (*) (tail (oeis @61021)) (oeis @61021)) (oeis @61021)

-- instance OEIS 61023 where
--   oeisIx n = abs (oeisIx n - (oeisIx @201053) n)
--   oeis = map (oeisIx @61023) [0..]

-- instance OEIS 61035 where
--   oeis = tablList @61035
-- instance Table 61035 where
--   rowCol = rowCol_off @61035 @1 @1
--   rowT = map numerator . balmer where
--      balmer n = map (subtract (1 % n ^ 2) . (1 %) . (^ 2)) [n, n - 1 .. 1]
--   tabl = map (rowT @61035) [1..]

-- instance OEIS 61036 where
--   oeis = tablList @61036
-- instance Table 61036 where
--   rowCol = rowCol_off @61036 @1 @1
--   rowT = map denominator . balmer where
--      balmer n = map (subtract (1 % n ^ 2) . (1 %) . (^ 2)) [n, n - 1 .. 1]
--   tabl = map (rowT @61036) [1..]

instance OEIS 61037 where
  oeisIx (succ.succ->n) = numerator (1%4 - 1%n^2)

instance OEIS 61038 where
  oeisIx (succ.succ->n) = denominator (1%4 - 1%n^2)

instance OEIS 61039 where
  oeisIx (succ.succ->succ->n) = numerator $ 1%9 - 1%n ^ 2

instance OEIS 61040 where
  oeisIx (succ.succ->succ->n) = denominator $ 1%9 - 1%n^2

instance OEIS 61041 where
  oeisIx ((+4)->n) = numerator (1%16 - 1%n^2)

instance OEIS 61042 where
  oeisIx ((+4)->n) = denominator (1%16 - 1%n^2)

instance OEIS 61043 where
  oeisIx = numerator . (1 % 25 -) . recip . (^ 2) . fi . (+5)

instance OEIS 61044 where
  oeisIx = denominator . (1 % 25 -) . recip . (^ 2) . fi . (+5)

instance OEIS 61045 where
  oeisIx = numerator . (1 % 36 -) . recip . (^ 2) . fi . (+1)

instance OEIS 61046 where
  oeisIx = denominator . (1 % 36 -) . recip . (^ 2) . fi . succ

-- instance OEIS 61083 where
--   oeis = 1 : 2 : zipWith divIgnPnt (oeis @61083) (tail (oeis @61083))
--      where divIgnPnt x y = ddiv (10 * m) x' where
--               ddiv u w | r == 0    = 10 * w + q
--                        | otherwise = ddiv (10 * r) (10 * w + q)
--                        where (q,r) = divMod u y
--               (x',m) = divMod x y

-- instance OEIS 61084 where
--   oeis = 1 : 2 : zipWith (-) (oeis @61084) (tail (oeis @61084))

-- instance OEIS 61168 where
--   oeisIx n = (oeis @61168) !! n
--   oeis = zipWith (+) [0..] (zipWith (+) hs $ tail hs) where
--      hs = concat $ transpose [oeis, (oeis @1855)]

-- instance OEIS 61205 where
--   oeisIx n = (oeisIx @4086) n * n

-- instance OEIS 61214 where
--   oeis = f (oeis @40) where
--      f (p:ps'@ (p':ps)) = (product [p+1..p'-1]) : f ps'

-- instance OEIS 61217 where
--   oeis = scanl1 (+) $ map (oeisIx @55641) [1..]

-- instance OEIS 61227 where
--   oeisIx n = p + (oeisIx @4086) p  where p = (oeisIx @40) n

-- instance OEIS 61228 where
--   oeisIx n = n + (oeisIx @20639) n

-- instance OEIS 61258 where
--   oeisIx n = sum $ zipWith (*) ds $ map (oeisIx @2322) ds
--               where ds = (rowT @27750) n

-- instance OEIS 61259 where
--   oeisIx n = sum $ zipWith (*) divs $ map (oeisIx @41) divs
--               where divs = (rowT @27750)' n

-- instance OEIS 61265 where
--   oeis = map sum $
--      zipWith (\u v -> map (oeisIx @10052) [u..v]) (oeis @40) $ tail (oeis @40)

-- instance OEIS 61282 where
--   c i = if i `mod` 3 == 0 then i `div` 3 else i - 1
--   b 0 foldCount = foldCount
--   b sheetCount foldCount = b (c sheetCount) (foldCount + 1)
--   oeisIx n = b n 0

-- instance OEIS 61292 where
--   oeis = 2 : 2 : 2 : 2 : zipWith (-)
--      (zipWith3 (((*) .) . (*)) (drop 2 xs) (tail xs) xs) (oeis @61292)
--      where xs = tail (oeis @61292)

instance OEIS 61293 where
  oeisIx = floor . (** exp 1) . fi . succ

-- instance OEIS 61313 where
--   oeisIx n = fst $ until ((== 1) . snd) (\ (u, v) -> (u + 1, f v)) (0, n)
--      where f n = if r == 0 then n' else n + 1  where (n', r) = divMod n 2

-- instance OEIS 61338 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @6519) n + (oeisIx @120) n - 1

-- instance OEIS 61357 where
--   oeisIx n = sum $
--      zipWith (\u v -> (oeisIx @10051) u * (oeisIx @10051) v) [n+1..] $ reverse [1..n - 1]

-- instance OEIS 61373 where
--   oeisIx 1 = 1
--   oeisIx n = genericIndex (oeis @61373) (n - 1)
--   oeis = 1 : f 2 where
--      f x | x == spf  = 1 + (oeisIx @61373) (spf - 1) : f (x + 1)
--          | otherwise = (oeisIx @61373) spf + (oeisIx @61373) (x `div` spf) : f (x + 1)
--          where spf = (oeisIx @20639) x

-- instance OEIS 61383 where
--   oeis = filter (\x -> mod (oeisIx x) (oeisIx x) == 0) [0..]

-- instance OEIS 61389 where
--   oeisIx = product . map ((+ 1) . (oeisIx @10) . fi) . (rowT @124010) . succ

-- instance OEIS 61394 where
--   oeisIx = fromJust . (`elemIndex` (oeis @2110)) . (oeisIx @247451)

-- instance OEIS 61395 where
--   oeisIx = (oeisIx @49084) . (oeisIx @6530)

-- instance OEIS 61397 where
--   oeisIx n = (fi $ (oeisIx @10051) n) * n

-- instance OEIS 61417 where
--   oeisIx = sum . (rowT @47917)

-- instance OEIS 61426 where
--   oeis = g [1] where
--      g ds = if product ds == 2 ^ length ds
--             then foldr (\d v -> 10 * v + d) 0 ds : g (s ds) else g (s ds)
--      s [] = [1]; s (8:ds) = 1 : s ds; s (d:ds) = 2*d : ds

-- instance OEIS 61427 where
--   oeis = g [1] where
--      g ds = if product ds == 3 ^ length ds
--             then foldr (\d v -> 10 * v + d) 0 ds : g (s ds) else g (s ds)
--      s [] = [1]; s (9:ds) = 1 : s ds; s (d:ds) = 3*d : ds

-- instance OEIS 61428 where
--   oeis = g [1] where
--      g ds = if product ds == 4 ^ length ds
--             then foldr (\d v -> 10 * v + d) 0 ds : g (s ds) else g (s ds)
--      s [] = [1]; s (8:ds) = 1 : s ds; s (d:ds) = 2*d : ds

-- instance OEIS 61429 where
--   oeis = filter (h 1 1) [1..] where
--      h 0 _ _ = False
--      h u v 0 = u == v
--      h u v w = h (r * u) (6 * v) w' where (w', r) = divMod w 10

-- instance OEIS 61430 where
--   oeis = filter g [0..] where
--      g u = round (fi p ** (1 / fi k)) ^ k == p where
--            (p, k) = h (1, 0) u
--            h (p, l) 0 = (p, l)
--            h (p, l) v = h (p * r, l + 1) v' where (v', r) = divMod v 10

-- instance OEIS 61467 where
--   oeisIx 0 = 0
--   oeisIx n = mod (max n n') (min n n') where n' = (oeisIx @4086) n

-- instance OEIS 61470 where
--   oeis = filter ((== 1) . (oeisIx @225693)) [0..]

-- instance OEIS 61493 where
--   oeisIx n = read $ r 1 [] n :: Integer where
--     r _ roms 0 = roms
--     r p roms z = case p of
--       1 -> r 2 (d '1' '2' '3' m) z'
--       2 -> r 3 (d '3' '4' '5' m ++ roms) z'
--       3 -> r 4 (d '5' '6' '7' m ++ roms) z'
--       4 -> replicate z '7' ++ roms
--       where (z',m) = divMod z 10
--     d i j k c =
--       [[],[i],[i,i],[i,i,i],[i,j],[j],[j,i],[j,i,i],[j,i,i,i],[i,k]] !! c

-- instance OEIS 61509 where
--   oeisIx n = product $ zipWith (^)
--     (oeis @40) (map digitToInt $ filter (/= '0') $ show n)

-- instance OEIS 61561 where
--   oeis = iterate (oeisIx @55944) 22

-- instance OEIS 61601 where
--   oeisIx n = if n <= 9 then 9 - n else 10 * ad n' + 9 - d
--               where (n',d) = divMod n 10

-- instance OEIS 61646 where
--   oeis = 1 : 1 : 1 : zipWith (-) (map (* 2)
--      (zipWith (+) (drop 2 (oeis @61646)) (tail (oeis @61646)))) (oeis @61646)

-- instance OEIS 61673 where
--   oeis = filter bothComp [4,6..] where
--      bothComp n = (1 - (oeisIx @10051) (n - 1)) * (1 - (oeisIx @10051) (n+1)) > 0

-- instance OEIS 61674 where
--   oeisIx n = until ((== 1) . (oeisIx @136522) . (oeisIx @4151) . (* n)) (+ 1) 1

-- instance OEIS 61681 where
--   oeis = iterate (oeisIx @182324) 1

instance OEIS 61712 where
  oeisIx (succ->n) = fromJust $ find ((== n) . (oeisIx @120)) (oeis @40)

-- instance OEIS 61775 where
--   oeisIx n = genericIndex (oeis @61775) (n - 1)
--   oeis = 1 : g 2 where
--      g x = y : g (x + 1) where
--         y = if t > 0 then (oeisIx @61775) t + 1 else (oeisIx @61775) u + (oeisIx @61775) v - 1
--             where t = (oeisIx @49084) x; u = (oeisIx @20639) x; v = x `div` u

-- instance OEIS 61797 where
--   oeisIx 0 = 1
--   oeisIx n = head [k | k <- [1..], let x = k * n,
--                    all (`elem` "02468") $ show x, (oeisIx @136522) (oeisIx x) == 1]

instance OEIS 61799 where
  oeisIx 0 = 1
  oeisIx (succ->n) = fi . (+2) $ fromJust $ findIndex (n <=) $ map (oeisIx @5) [1..]

-- instance OEIS 61827 where
--   oeisIx n =
--      p n (map digitToInt $ nub $ sort $ filter (/= '0') $ show n) where
--         p _ []        = 0
--         p 0 _         = 1
--         p m ds'@ (d:ds)
--           | m < d     = 0
--           | otherwise = p (m - d) ds' + p m ds

-- instance OEIS 61857 where
--   oeis = tablList @61857
-- instance Table 61857 where
--   rowCol n k = length [ ()| i <- [2..n], j <- [1..i-1], mod (i + j) k == 0]
--   rowT n = map (oeisIx n) [1..n]
--   tabl = map (rowT @61857) [1..]

-- instance OEIS 61862 where
--   oeis = filter f [0..] where
--      f x = g x 0 where
--        g 0 v = v == x
--        g u v = if d <= 1 then g u' (v + d) else v <= x && h 1
--                where h p = p <= x && (g u' (v + p) || h (p * d))
--                      (u', d) = divMod u 10

-- instance OEIS 61883 where
--   oeis = 1 : zipWith (-) (tail (oeis @60985)) (oeis @60985)

-- instance OEIS 61885 where
--   oeisIx n = n + (oeisIx @57944) n

-- instance OEIS 61886 where
--   oeis = 1 : zipWith (-) (tail (oeis @60984)) (oeis @60984)

-- instance OEIS 61909 where
--   oeis = filter (\x -> (oeisIx @4086) (x^2) == (oeisIx x)^2) [0..]

-- instance OEIS 61917 where
--   oeis = filter chi [0..] where
--      chi x = zs == reverse zs where
--         zs = dropWhile (== '0') $ reverse $ show x

-- instance OEIS 61984 where
--   oeis = 0 : map (+ 1) (zipWith (+)
--      (map (oeisIx . (`div` 2)) [1..]) (map (oeisIx . (`div` 3)) [1..]))

-- instance OEIS 61985 where
--   oeis = f (-1) (oeis @61984) where
--      f u (v:vs) = if v == u then f u vs else v : f v vs

-- instance OEIS 61987 where
--   oeisIx n = (oeis @61987) !! n
--   oeis = map length $ group (oeis @61984)

-- instance OEIS 62010 where
--   oeisIx n = (oeis @62010) !! (n - 1)
--   oeis = filter f [1..] where
--      f x = any (== 0) $ map (mod x) lower where
--          lower = map bas [1 + (oeisIx @54055) x .. 9]
--          bas b = foldl (\v d -> b*v + d) 0 bas10
--          bas10 = reverse $ unfoldr dig x where
--             dig n = if n== 0 then Nothing else Just $ swap $ divMod n 10

-- instance OEIS 62039 where
--   oeis = 1 : f 1 0 where
--      f x n | x > n     = (x-n) : f (x-n) (n+1)
--            | otherwise =    x' : f x' (n+1) where x' = x + (oeisIx @62039) x

-- instance OEIS 62050 where
--   oeisIx n = if n < 2 then n else 2 * (oeisIx @62050) n' + m - 1
--               where (n',m) = divMod n 2

-- instance OEIS 62052 where
--   oeisIx n = (oeis @62052) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 2 (oeis @78719)

-- instance OEIS 62053 where
--   oeisIx n = (oeis @62053) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 3 (oeis @78719)

-- instance OEIS 62054 where
--   oeisIx n = (oeis @62054) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 4 (oeis @78719)

-- instance OEIS 62055 where
--   oeisIx n = (oeis @62055) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 5 (oeis @78719)

-- instance OEIS 62056 where
--   oeisIx n = (oeis @62056) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 6 (oeis @78719)

-- instance OEIS 62057 where
--   oeisIx n = (oeis @62057) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 7 (oeis @78719)

-- instance OEIS 62058 where
--   oeisIx n = (oeis @62058) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 8 (oeis @78719)

-- instance OEIS 62059 where
--   oeisIx n = (oeis @62059) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 9 (oeis @78719)

-- instance OEIS 62060 where
--   oeisIx n = (oeis @62060) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 10 (oeis @78719)

-- instance OEIS 62090 where
--   oeis = f [1, 3 ..] [] where
--      f (x:xs) ys = g x ys where
--        g _ []     = x : f xs (x : ys)
--        g 1 _      = f xs ys
--        g z (v:vs) = g (z `div` gcd z v) vs

-- instance OEIS 62097 where
--   oeis = 1 : f 1 1 where
--      f u v = w : f (u + w) (v * w) where w = u + v

-- instance OEIS 62113 where
--   oeis = 1 : 2 : zipWith (+)
--      (tail (oeis @62113)) (zipWith (*) (oeis @34) (oeis @62113))

-- instance OEIS 62115 where
--   oeis = filter ((== 0) . (oeisIx @39997)) (oeis @84984)

-- instance OEIS 62119 where
--   oeisIx n = (n - 1) * (oeisIx @142) n

-- instance OEIS 62161 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) $ cycle [0,1]

-- instance OEIS 62162 where
--   oeisIx = abs . sum . (rowT @247453)

-- instance OEIS 62173 where
--   import Math.NumberTheory.Moduli (powerMod)
--   oeisIx n = powerMod 2 (n - 1) n

-- instance OEIS 62178 where
--   oeis = scanl (+) 0 (oeis @2083)

-- instance OEIS 62234 where
--   oeis = zipWith (-) (map (* 2) (oeis @40)) (tail (oeis @40))

-- instance OEIS 62249 where
--   oeisIx n = (oeisIx @5) n + n

-- instance OEIS 62251 where
--   oeisIx n = (oeisIx n + 1) * n - 1

-- instance OEIS 62272 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) $ cycle [1,0]

-- instance OEIS 62279 where
--   oeisIx 0 = 0
--   oeisIx n = until ((== 1) . (oeisIx @136522) . (oeisIx @4151)) (+ n) n

-- instance OEIS 62285 where
--   oeis = filter (even . (oeisIx @30)) (oeis @30141)

-- instance OEIS 62289 where
--   oeis = 2 : g 2 where
--      g n = nM n : g (n+1)
--      nM k = maximum $ map (\i -> i + min i (oeisIx $ k-i+1)) [2..k]
--

-- instance OEIS 62293 where
--   oeisIx 0 = 0
--   oeisIx n = head [x | x <- map (* n) [1..],
--                    all (`elem` "02468") $ show x, (oeisIx @136522) (oeisIx x) == 1]

-- instance OEIS 62296 where
--   oeisIx = sum . map ((1 -) . signum) . (rowT @83093)

-- instance OEIS 62298 where
--   oeis = scanl1 (+) $ map (1 -) (oeis @10051)

-- instance OEIS 62320 where
--   oeisIx = (^ 2) . (oeisIx @13929)

-- instance OEIS 62323 where
--   oeis = tablList @62323
-- instance Table 62323 where
--   rowT n = (tabl @62323) !! n
--   tabl = map fst $ iterate f ([1], [0,1]) where
--      f (us, vs) = (vs, ws) where
--        ws = (zipWith (+) (us ++ [0]) (map (* v) vs)) ++ [1]
--             where v = last (init vs) + 1

-- instance OEIS 62326 where
--   oeisIx = (oeisIx @40) . (oeisIx @137291)
--   oeis = map (oeisIx . (+ 1)) $
--                  elemIndices 1 $ map (oeisIx @10051)' (oeis @49001)

-- instance OEIS 62327 where
--   oeisIx n = product $ zipWith f (oeisIx_row n) (oeisIx_row n) where
--      f 2 e                  = 2 * e + 1
--      f p e | p `mod` 4 == 1 = (e + 1) ^ 2
--            | otherwise      = e + 1

-- instance OEIS 62332 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @208259)

-- instance OEIS 62373 where
--   oeis = filter ((== 2) . (oeisIx @34380)) [1..]

-- instance OEIS 62383 where
--   oeisIx n = (oeis @62383) !! n
--   oeis = 1 : zs where
--      zs = 2 : (map (* 2) $ concat $ transpose [zs, zs])

-- instance OEIS 62401 where
--   oeisIx = (oeisIx @10) . (oeisIx @203)

-- instance OEIS 62402 where
--   oeisIx = (oeisIx @203) . (oeisIx @10)

-- instance OEIS 62503 where
--   oeisIx = (oeisIx @290) . (oeisIx @5117)

-- instance OEIS 62509 where
--   oeisIx n = n ^ (oeisIx @1221) n

-- instance OEIS 62515 where
--   primes :: [Integer]
--   primes = 2 : 3 : filter (\a -> all (not . divides a) (takeWhile (\x -> x <= a `div` 2) primes)) [4..]
--       where
--     divides a b = a `mod` b == 0
--   primorials :: [Integer]
--   primorials = map product $ inits primes
--   partitions :: [[Integer]]
--   partitions = concat $ map (partitions_of_n) [0..]
--   partitions_of_n :: Integer -> [[Integer]]
--   partitions_of_n n = partitions_at_most n n
--   partitions_at_most :: Integer -> Integer -> [[Integer]]
--   partitions_at_most _ 0 = [[]]
--   partitions_at_most 0 _ = []
--   partitions_at_most m n = concat $ map (\k -> map ([k] ++) (partitions_at_most k (n-k))) ( reverse [1.. (min m n)])
--   oeisIx :: [Integer]
--   oeisIx = map primorial_signature partitions
--       where
--     primorial_signature p = product $ map ((drop 1 primorials) !!) (map fi p)

-- instance OEIS 62537 where
--   oeisIx 1 = 0
--   oeisIx n = sum $ map (+ 1) $
--      zipWith ((+) `on` (oeisIx @62537)) (map (oeisIx @49084) $ (rowT @27748) n) (oeisIx_row n)

-- instance OEIS 62550 where
--   oeisIx 0 = 0
--   oeisIx n = sum $ (rowT @13942) n

-- instance OEIS 62584 where
--   oeisIx n = head [p | p <- (oeis @40), show n `isInfixOf` show p]

-- instance OEIS 62634 where
--   oeis = filter
--      (and . map ((elem '1') . show) . (rowT @27750)) (oeis @11531)

-- instance OEIS 62682 where
--   import Data.Set (singleton, deleteFindMin, insert, Set)
--   oeisIx n = (oeis @62682) !! (n - 1)
--   oeis = f (singleton (1 + 2^3, (1, 2))) 0 0 where
--      f s z z' = if y == z && z' /= z then y : f s'' y z else f s'' y z
--                 where s'' = (insert (y', (i, j')) $
--                              insert (y' - i ^ 3 , (i + 1, j')) s')
--                       y' = y + j' ^ 3; j' = j + 1
--                       ((y, (i, j)), s') = deleteFindMin s

-- instance OEIS 62715 where
--   oeis = tablList @62715
-- instance Table 62715 where
--   rowT n = (tabl @62715) !! n
--   tabl = 1 : zipWith (:) (oeis @12) (tabl @38207)

-- instance OEIS 62723 where
--   oeis = scanl1 lcm (oeis @792)

instance OEIS 62725 where
  oeisIx n = n * (9 * n + 5) `div` 2

-- instance OEIS 62730 where
--   oeisIx n = (oeis @62730) !! (n - 1)
--   oeis =  filter f $ [3..] where
--      f x = not $ all null $ zipWith
--            (\us (v:vs) -> map (v -) us `intersect` map (subtract v) vs)
--            (tail $ init $ inits bns) (tail $ init $ tails bns)
--            where bns = (rowT @34868) x

-- instance OEIS 62756 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @62756) n' + m `mod` 2 where (n',m) = divMod n 3

-- instance OEIS 62759 where
--   oeisIx n = (oeisIx @7947) n ^ (oeisIx @51904) n

-- instance OEIS 62789 where
--   oeisIx n = gcd n (phi * (phi + 1)) where phi = (oeisIx @10) n

-- instance OEIS 62799 where
--   oeisIx = sum . map (oeisIx @1221) . (rowT @27750)

instance OEIS 62806 where
  oeisIx (succ->n) = sum $ zipWith (*) [1..n] $ iterate (* n) n

instance OEIS 62813 where
  oeisIx (succ->n) = foldr (\dig val -> val * n + dig) 0 [0 .. n - 1]

-- instance OEIS 62822 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map (+ 1) $ (rowT @265668) n

-- instance OEIS 62825 where
--   oeisIx 1 = 0
--   oeisIx n = sum $ (rowT @163870) (n - 1)

-- instance OEIS 62880 where
--   oeis = filter f [0..] where
--      f 0 = True
--      f x = (m == 0 || m == 2) && f x'  where (x', m) = divMod x 4

-- instance OEIS 62974 where
--   oeisIx n = (oeis @62974) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (< 0) $
--      zipWith (-) (tail (oeis @1221)) $ map (* 2) (oeis @1221)

-- instance OEIS 62980 where
--   oeis = 1 : 5 : f 2 [5,1] where
--      f u vs'@ (v:vs) = w : f (u + 1) (w : vs') where
--        w = 6 * u * v + sum (zipWith (*) vs_ $ reverse vs_)
--        vs_ = init vs

-- instance OEIS 62992 where
--   oeisIx = sum . (rowT @234950)

-- instance OEIS 63007 where
--   oeis = tablList @63007
-- instance Table 63007 where
--   rowT n = (tabl @63007) !! n
--   tabl = zipWith (zipWith (*)) (tabl @7318) (tabl @46899)

-- instance OEIS 63051 where
--   oeisIx n = (oeis @33651) !! n
--   oeis = iterate (oeisIx @56964) 9

-- instance OEIS 63054 where
--   oeis = iterate (oeisIx @56964) 1997

-- instance OEIS 63057 where
--   oeis = iterate (oeisIx @56964) 7059

-- instance OEIS 63060 where
--   oeis = iterate (oeisIx @56964) 10553

-- instance OEIS 63063 where
--   oeis = iterate (oeisIx @56964) 10563

-- instance OEIS 63108 where
--   oeis = iterate (oeisIx @63114) 1

-- instance OEIS 63114 where
--   oeisIx n = n + (oeisIx @51801) n

-- instance OEIS 63171 where
--   import Data.Set (singleton, deleteFindMin, union, fromList)
--   newtype Word = Word String deriving (Eq, Show, Read)
--   instance Ord Word where
--      Word us <= Word vs | length us == length vs = us <= vs
--                         | otherwise              = length us <= length vs
--   oeisIx n = (oeis @63171) !! (n - 1)
--   oeis = dyck $ singleton (Word "S") where
--      dyck s | null ws   = (read w :: Integer) : dyck s'
--             | otherwise = dyck $ union s' (fromList $ concatMap gen ws)
--             where ws = filter ((== 'S') . head . snd) $
--                               map (`splitAt` w) [0..length w - 1]
--                   (Word w, s') = deleteFindMin s
--      gen (us,vs) = map (Word . (us ++) . (++ tail vs)) ["10", "1S0", "SS"]

-- instance OEIS 63232 where
--   oeis = 5 : 16 : 24 : 36 : zipWith3 (((-) .) . (+))
--      (drop 3 (oeis @63232)) (drop 2 (oeis @63232)) (tail (oeis @63232))

-- instance OEIS 63433 where
--   oeis = iterate (oeisIx @56964) 10577

-- instance OEIS 63453 where
--   oeisIx = product . map ((1 -) . (^ 3)) . (rowT @27748)

-- instance OEIS 63510 where
--   oeisIx 1 = 1
--   oeisIx n = (oeisIx @63510) (oeisIx n) + 1

instance OEIS 63524 where
  oeisIx = fi . fromEnum . (== 1)

-- instance OEIS 63574 where
--   oeisIx n = fst $ until ((== 1) . flip mod 4 . snd)
--                           (\ (u, v) -> (u + 1, (oeisIx @7494) v)) (0, n)

-- instance OEIS 63637 where
--   oeis = filter ((== 1) . (oeisIx @64911) . (+ 2)) (oeis @40)

-- instance OEIS 63638 where
--   oeis = map (+ 2) $ filter ((== 1) . (oeisIx @64911)) (oeis @40976)

-- instance OEIS 63639 where
--   oeis = [p | p <- (oeis @40), (oeisIx @1222) (p+1) == 3]

-- instance OEIS 63656 where
--   oeis = f 1 [0..] where
--      f k xs = us ++ f (k + 1) (drop (k - 1) vs) where
--                       (us, vs) = splitAt k xs

-- instance OEIS 63657 where
--   oeis = f 0 [0..] where
--      f k (_:xs) = us ++ f (k + 1) (drop (k + 1) vs) where
--                           (us, vs) = splitAt k xs

-- instance OEIS 63660 where
--   oeisIx n = head [m | m <- [n + 1 ..],
--                         not $ null $ show m `intersect` show n]

-- instance OEIS 63662 where
--   oeis = iterate (oeisIx @63660) 0

-- instance OEIS 63694 where
--   oeisIx 0 = 0
--   oeisIx n = 4 * (oeisIx @63694) n' + mod q 2
--               where (n', q) = divMod n 4

-- instance OEIS 63695 where
--   oeisIx 0 = 0
--   oeisIx n = 4 * (oeisIx @63695) n' + 2 * div q 2
--               where (n', q) = divMod n 4

-- instance OEIS 63720 where
--   oeis = [6,2,5,5,4,5,5,3,7,5] ++ f 10 where
--      f x = (oeisIx x' + (oeisIx @63720) d) : f (x + 1)
--            where (x',d) = divMod x 10

-- instance OEIS 63725 where
--   oeisIx n =
--      sum $ map (oeisIx . (n -)) $ takeWhile (< n) $ tail (oeis @290)
--   oeis = map (oeisIx @63725) [0..]

-- instance OEIS 63733 where
--   oeis = 1 : f 0 [1] where
--      f x ys@ (y:_) | u > 0 && u `notElem` ys = u : f (x + 1) (u : ys)
--                   | otherwise               = v : f (x + 1) (v : ys)
--                   where u = y - x; v = x + y

-- instance OEIS 63759 where
--   oeisIx n = (oeis @63759) !! n
--   oeis = concat $ transpose [oeis, (oeis @7283)]

-- instance OEIS 63776 where
--   oeisIx n = (oeisIx @53636) n `div` n

-- instance OEIS 63882 where
--   oeis = 1 : 1 : 1 : 1 : zipWith (+)
--      (map (oeisIx @63882) $ zipWith (-) [5..] (oeis @63882))
--      (map (oeisIx @63882) $ zipWith (-) [5..] $ drop 3 (oeis @63882))

-- instance OEIS 63905 where
--   oeis =
--      concat $ zipWith ($) (map replicate (oeis @40)) (oeis @40)

-- instance OEIS 63908 where
--   oeis = filter
--      ((== 1) . (oeisIx @10051)' . (subtract 3) . (* 2)) (oeis @40)

-- instance OEIS 63919 where
--   oeisIx 1 = 1
--   oeisIx n = sum $ init $ (rowT @77610) n

-- instance OEIS 63936 where
--   oeisIx n = (oeis @63936) !! (n - 1)
--   oeis = map (+ 1) $
--                  findIndices (\x -> x > 1 && (oeisIx @10052) x == 1) (oeis @34460)

-- instance OEIS 63937 where
--   oeisIx n = (oeis @63937) !! (n - 1)
--   oeis = map (+ 2) $
--                  findIndices ((== 1) . (oeisIx @10052)) $ tail (oeis @34448)

-- instance OEIS 63947 where
--   oeisIx n = (oeis @63947) !! (n - 1)
--   oeis = filter ((== 1) . denominator . hm . (rowT @77609)) [1..]
--      where hm xs = genericLength xs / sum (map (recip . fi) xs)

-- instance OEIS 63962 where
--   oeisIx n = genericLength [p | p <- (rowT @27748) n, p ^ 2 <= n]

-- instance OEIS 63967 where
--   oeisIx_tabl = [1] : [1,1] : f [1] [1,1] where
--      f us vs = ws : f vs ws where
--        ws = zipWith (+) ([0] ++ us ++ [0]) $
--             zipWith (+) (us ++ [0,0]) $ zipWith (+) ([0] ++ vs) (vs ++ [0])

-- instance OEIS 63982 where
--   oeis = f [] $ tail (oeis @225) where
--      f us (v:vs) = (length ds) : f (v:us) vs where
--        ds = [d | d <- (rowT @27750) v, all ((== 1). (gcd d)) us]

instance OEIS 63985 where
  oeisIx (succ->n) = genericLength [ ()| x <- [1..n], y <- [x..n], gcd x y > 1]

-- instance OEIS 63993 where
--   oeisIx n = genericLength [ () | let ts = takeWhile (< n) $ tail (oeis @217),
--                       x <- ts, y <- takeWhile (<= x) ts,
--                       let z = n - x - y, 0 < z, z <= y, (oeisIx @10054) z == 1]

-- instance OEIS 63994 where
--   oeisIx n = product $ map (gcd (n - 1) . subtract 1) $ (rowT @27748) n

-- instance OEIS 63995 where
--   oeis = tablList @63995
-- instance Table 63995 where
--   rowCol n k = (tabf @63995) !! (n - 1) !! (n-1+k)
--   rowT n = (tabf @63995) !! (n - 1)
--   tabf = [[1], [1, 0, 1]] ++ (map
--      (\rs -> [1, 0] ++ (init $ tail $ rs) ++ [0, 1]) $ drop 2 $ map
--      (map length . group . sort . map rank) $ tail pss) where
--         rank ps = maximum ps - length ps
--         pss = [] : map (\u -> [u] : [v : ps | v <- [1..u],
--                                ps <- pss !! (u - v), v <= head ps]) [1..]

-- instance OEIS 64097 where
--   oeisIx n = genericIndex (oeis @64097) (n - 1)
--   oeis = 0 : f 2 where
--      f x | x == spf  = 1 + (oeisIx @64097) (spf - 1) : f (x + 1)
--          | otherwise = (oeisIx @64097) spf + (oeisIx @64097) (x `div` spf) : f (x + 1)
--          where spf = (oeisIx @20639) x

-- instance OEIS 64113 where
--   oeisIx n = (oeis @64113) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @36263)

-- instance OEIS 64150 where
--   oeis = filter (\x -> x `mod` (oeisIx @53735) x == 0) [1..]

-- instance OEIS 64222 where
--   oeis = iterate (oeisIx . (+ 1)) 0

-- instance OEIS 64223 where
--   oeis = iterate (\x -> x + (fi $ (oeisIx @55642) x)) 1

-- instance OEIS 64235 where
--   oeisIx n = genericIndex (oeis @64235) (n - 1)
--   oeis = 1 : zs where
--      zs = 3 : 3 : (map (* 3) $ concat $ transpose [zs, zs, zs])

-- instance OEIS 64236 where
--   oeisIx = genericLength . show . (oeisIx @1042)

-- instance OEIS 64272 where
--   oeisIx n = sum $
--      map (oeisIx . (n -)) $ takeWhile (< n) $ tail (oeis @290)

-- instance OEIS 64275 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @32447))

-- instance OEIS 64283 where
--   oeisIx = (+ 2) . fromJust . (`elemIndex` (oeis @64272))

-- instance OEIS 64364 where
--   oeis = tablList @64364
-- instance Table 64364 where
--   rowCol n k = (tabf @64364) !! (n - 1) !! (k-1)
--   rowT n = (tabf @64364) !! (n - 1)
--   tabf = [1] : tail (f 1 [] 1 (map (oeisIx @792) [2..])) where
--      f k pqs v (w:ws) = (map snd pqs') :
--        f (k + 1) (union pqs'' (zip (map (oeisIx @1414) us) us )) w ws where
--          us = [v + 1 .. w]
--          (pqs', pqs'') = partition ((== k) . fst) pqs
--   oeis = concat (tabf @64364)

-- instance OEIS 64365 where
--   import Data.Set (singleton, notMember, insert)
--   oeisIx n = (oeis @64365) !! n
--   oeis = 0 : f 0 (oeis @40) (singleton 0) where
--      f x (p:ps) s | x' > 0 && x' `notMember` s = x' : f x' ps (insert x' s)
--                   | otherwise                  = xp : f xp ps (insert xp s)
--                   where x' = x - p; xp = x + p

-- instance OEIS 64372 where
--   oeisIx 0 = 1
--   oeisIx n = sum $ map (oeisIx @64372) $ (rowT @124010 . succ) n

-- instance OEIS 64413 where
--   oeisIx n = genericIndex (oeis @64413) (n - 1)
--   oeis = 1 : f 2 [2..] where
--      ekg x zs = f zs where
--          f (y:ys) = if gcd x y > 1 then y : ekg y (delete y zs) else f ys

-- instance OEIS 64415 where
--   oeisIx 1 = 0
--   oeisIx n = (oeisIx @3434) n - n `mod` 2

-- instance OEIS 64417 where
--   oeisIx n = (oeis @64417) !! (n - 1)
--   oeis = 1 : 2 : 3 : f 3 [4..] where
--      f x us = x' : f x' (delete x' us) where
--         x' = head [u | u <- us, gcd u x > 2]

-- instance OEIS 64418 where
--   oeisIx n = (oeis @64418) !! (n - 1)
--   oeis = 1 : 2 : 3 : 4 : (f 4 [5..]) where
--      f :: Integer -> [Integer] -> [Integer]
--      f x xs = m : (f m $ delete m xs) where
--         m = head $ dropWhile ((< 4) . (gcd x)) xs

-- instance OEIS 64419 where
--   oeis = [1,2,3,4,5] ++ f 5 [] [6..] where
--      f z xs (y:ys) | y `gcd` z > 4 = y : f y [] (reverse xs ++ ys)
--                    | otherwise     = f z (y:xs) ys

-- instance OEIS 64426 where
--   oeis = zipWith (-) (tail (oeis @64413)) (oeis @64413)

-- instance OEIS 64427 where
--   oeisIx 1 = 1
--   oeisIx n = (oeisIx @720) (n - 1) + toInteger n

-- instance OEIS 64437 where
--   oeis = 1 : f 2 [1] where
--      f x zs@ (z:_) = y : f (x + 1) (y : zs) where
--        y = if x `elem` zs then z + 3 else z + 2

-- instance OEIS 64455 where
--   oeisIx n = n + if m == 0 then n' else - n'  where (n',m) = divMod n 2
--   oeis = concat $ transpose [[1 ..], [3, 6 ..]]

-- instance OEIS 64476 where
--   oeis = filter (\x -> (oeisIx @3959) x `mod` x == 0) [1..]

-- instance OEIS 64478 where
--   oeisIx n = if n <= 1 then n + 1 else (oeisIx @3959) n

-- instance OEIS 64491 where
--   oeis = iterate (oeisIx @62249) 1

-- instance OEIS 64547 where
--   oeisIx 1 = 0
--   oeisIx n = genericLength $ (rowT @213925) n

-- instance OEIS 64549 where
--   oeisIx n = (oeisIx @7947) n * n

-- instance OEIS 64550 where
--   oeis = 1 : 2 : zipWith3 (\a q n -> a + 2 * q - n)
--       (tail (oeis @64550)) (drop 2 (oeis @5185)) [2..]

-- instance OEIS 64551 where
--   oeis = 1 : zipWith (+) (oeis @64551)
--                      (map (* 2) $ zipWith (-) (drop 2 (oeis @45)) [1..])

-- instance OEIS 64553 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map ((+ 1) . (oeisIx @49084)) $ (rowT @27746) n

-- instance OEIS 64554 where
--   oeisIx = head . (rowT @80688)

-- instance OEIS 64555 where
--   oeisIx = last . (rowT @80688)

-- instance OEIS 64614 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map f $ (rowT @27746) n where
--      f 2 = 3; f 3 = 2; f p = p

-- instance OEIS 64649 where
--   oeisIx = sum . (rowT @47916)

-- instance OEIS 64650 where
--   oeis = 1 : 2 : zipWith (+)
--                          (oeis @64650) (map (flip div 2) $ tail (oeis @64650))

-- instance OEIS 64651 where
--   oeis = 0 : 1 : zipWith (+)
--      (oeis @64651) (map (flip div 2 . (+ 1)) $ tail (oeis @64651))

-- instance OEIS 64654 where
--   oeisIx n = (oeis @64654) !! (n - 1)
--   oeis = map length $ group (oeis @195376)

-- instance OEIS 64657 where
--   oeis = map fromJust $ takeWhile (/= Nothing) zs where
--     z n = fromJust $ zs !! n
--     zs = (map Just [1,1,1,1]) ++ f 4 where
--        f x = y : f (x + 1) where
--          y | 2*x < max i3 i4 = Nothing
--            | otherwise       = Just $ z (abs (x - i3)) + z (abs (x - i4))
--            where i3 = z (x - 3); i4 = z (x - 4)

-- instance OEIS 64664 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @64413))

-- instance OEIS 64672 where
--   oeis = 0 : 1 : f (drop 2 (oeis @196)) 1 1 (tail (oeis @64672))
--      where f (r:rs) r' u (v:vs)
--              | r == r' = (u + v) : f rs r u vs
--              | r /= r' = u' : f rs r u' (tail (oeis @64672))
--              where u' = (oeisIx @64672) $ fromInteger r

instance OEIS 64680 where
  oeis = zipWith ($) (cycle [ (`div` 2), (* 2)]) [0..]

-- instance OEIS 64689 where
--   oeisIx = fromJust . (`elemIndex` (oeis @64672))

-- instance OEIS 64700 where
--   oeis = filter f [1..] where
--      f x = mdr > 0 && x `mod` mdr == 0 where mdr = (oeisIx @31347) x

-- instance OEIS 64702 where
--   oeis = filter (\x -> (oeisIx @10888) x == (oeisIx @31347) x) [1..]

-- instance OEIS 64736 where
--   oeisIx n = (oeis @64736) !! (n - 1)
--   oeis = 1 : 2 : f 1 2 [3..] where
--      f u v (w:ws) = u' : w : f u' w (delete u' ws) where u' = v * w

-- instance OEIS 64745 where
--   oeisIx n = fromJust (elemIndex n (oeis @64736)) + 1

-- instance OEIS 64770 where
--   oeisIx :: Integer -> Integer
--   oeisIx = read . map (("0111222223" !!) . digitToInt) . show

-- instance OEIS 64771 where
--   oeis = map (+ 1) $ elemIndices 1 (oeis @65205)

-- instance OEIS 64787 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @53212))

-- instance OEIS 64800 where
--   oeisIx n = (oeisIx @1222) n + n

-- instance OEIS 64801 where
--   oeis = f 1 [1..] where
--      f k xs = us ++ f (k + 1) (drop (k + 1) vs)
--               where (us, vs) = splitAt k xs

-- instance OEIS 64806 where
--   oeisIx n = n + (oeisIx @10888) n

-- instance OEIS 64807 where
--   oeis = filter (\x -> x `mod` (oeisIx @10888) x == 0) [1..]

-- instance OEIS 64823 where
--   oeis = f (oeis @796) $ replicate 10 0 where
--      f (d:ds) cs = (v + 1) : f ds (us ++ (v + 1) : vs) where
--        (us, v:vs) = splitAt d cs

-- instance OEIS 64834 where
--   oeisIx n = sum $ take (length nds `div` 2) $
--                     map abs $ zipWith (-) nds $ reverse nds
--      where nds = (rowT @31298) n

-- instance OEIS 64847 where
--   oeis = 1 : f [1,1] where
--      f xs'@ (x:xs) = y : f (y : xs') where y = x * sum xs

-- instance OEIS 64861 where
--   oeis = tablList @64861
-- instance Table 64861 where
--   rowT n = (tabl @64861) !! n
--   tabl = map fst $ iterate f ([1], 2) where
--   f (xs, z) = (zipWith (+) ([0] ++ map (* z) xs) (xs ++ [0]), 3 - z)

-- instance OEIS 64924 where
--   oeisIx n = (oeis @64924) !! (n - 1)
--   oeis = concat $ zipWith (\p g -> genericTake g [p, 2 * p ..])
--      (oeis @40) $ zipWith (-) (tail (oeis @40)) (oeis @40)

-- instance OEIS 64944 where
--   oeisIx = sum . zipWith (*) [1..] . (rowT @27750)'

-- instance OEIS 64945 where
--   oeisIx = sum . zipWith (*) [1..] . reverse . (rowT @27750)'

-- instance OEIS 64953 where
--   oeisIx n = (oeis @64953) !! (n - 1)
--   oeis = map (+ 1) $ findIndices even (oeis @64413)

-- instance OEIS 64955 where
--   oeisIx n = (oeis @64955) !! (n - 1)
--   oeis =
--      map ((+ 1) . fromJust . (`elemIndex` (oeis @64413))) (oeis @40)

-- instance OEIS 64956 where
--   oeisIx n = (fromJust $ elemIndex n (oeis @64417)) + 1

-- instance OEIS 64957 where
--   oeisIx n = (oeis @64957) !! (n - 1)
--   oeis = map (+ 1) $ findIndices odd (oeis @64413)

-- instance OEIS 64959 where
--   oeisIx n = (oeis @64959) !! (n - 1)
--   oeis = map ((+ 1) . fromJust . (`elemIndex` (oeis @64419))) [1..]

-- instance OEIS 64986 where
--   oeisIx = p (tail (oeis @142)) where
--      p _          0             = 1
--      p fs'@ (f:fs) m | m < f     = 0
--                     | otherwise = p fs' (m - f) + p fs m

-- instance OEIS 64987 where
--   oeisIx n = (oeisIx @203) n * n

-- instance OEIS 64989 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map (oeisIx . (oeisIx @49084)) $ (rowT @27746) n

-- instance OEIS 65003 where
--   oeisIx n = (oeis @65003) !! n
--   oeis = elemIndices 0 $ map (oeisIx @214772) [0..43]

-- instance OEIS 65031 where
--   oeisIx n = f n  where
--      f x | x < 10    = 2 - x `mod` 2
--          | otherwise = 10 * (f x') + 2 - m `mod` 2
--          where (x',m) = divMod x 10

instance OEIS 65033 where
  oeisIx n = 0 ^ n + div (n + 1) 2

-- instance OEIS 65037 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @36552))

instance OEIS 65039 where
  oeisIx n = sum $ map (fi . read) $ tail $ inits $ show $ fi n

instance OEIS 65075 where
  oeis = 1 : 1 : f 2 where
     f x = y : f (x + y) where y = (oeisIx @7953) x

instance OEIS 65076 where
  oeis = 0 : 1 : zipWith (+)
                  (oeis @65076) (map (oeisIx @7953) $ tail (oeis @65076))

-- instance OEIS 65090 where
--   oeisIx n = (oeis @65090) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @151763)

-- instance OEIS 65091 where
--   oeis = tail (oeis @40)

-- instance OEIS 65094 where
--   oeis = 1 : f 1 1 1 where
--      f k s x = y : f (k + 1) (s + y) y where y = x + div s k

-- instance OEIS 65109 where
--   oeis = tablList @65109
-- instance Table 65109 where
--   rowT n = (tabl @65109) !! n
--   tabl = iterate
--      (\row -> zipWith (-) (map (* 2) row ++ [0]) ([0] ++ row)) [1]

-- instance OEIS 65205 where
--   oeisIx n = p (oeisIx_row n) n where
--      p _      0 = 1
--      p []     _ = 0
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 65206 where
--   oeis = filter ((== 1) . (oeisIx @136522) . (oeisIx @56964)) (oeis @29742)

-- instance OEIS 65220 where
--   oeis = zipWith (-) (oeis @45) [0..]

-- instance OEIS 65253 where
--   oeis = zipWith (+)
--                  (map ((* 10) . (subtract 1)) (oeis @64823)) (oeis @796)

-- instance OEIS 65254 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @65253))

-- instance OEIS 65297 where
--   oeisIx n = (oeis @65297) !! n
--   oeis = 1 : f 1 (drop 2 (oeis @290)) where
--      f x (q:qs) | null (xs \\ sq) && sort xs /= sort sq = y : f y qs
--                 | otherwise                             = f x qs
--                 where y = (oeisIx @196) q; sq = show q; xs = show (x * x)

-- instance OEIS 65305 where
--   oeis = tablList @65305
-- instance Table 65305 where
--   rowCol = rowCol_off @65305 @2 @1
--   rowT = rowT_off @65305 @2
--   tabl = zipWith (map . (flip div 2 .) . (+))
--                          (oeis @65091) $ tail $ inits (oeis @65091)

-- instance OEIS 65306 where
--   oeis = map (subtract 2) $ f (concat (tabl @65305)) [] where
--      f (x:xs) ys = if x `elem` ys then f xs ys else x : f xs (x:ys)

-- instance OEIS 65307 where
--   oeisIx n = (fromJust $ elemIndex n (oeis @65306)) + 1

-- instance OEIS 65330 where
--   oeisIx = (oeisIx @38502) . (oeisIx @265)

-- instance OEIS 65331 where
--   oeisIx = f 2 1 where
--      f p y x | r == 0    = f p (y * p) x'
--              | otherwise = if p == 2 then f 3 y x else y
--              where (x', r) = divMod x p

-- instance OEIS 65333 where
--   oeisIx = fromEnum . (== 1) . (oeisIx @38502) . (oeisIx @265)

-- instance OEIS 65338 where
--   oeisIx 1 = 1
--   oeisIx n = (spf `mod` 4) * (oeisIx @65338) (n `div` spf) where spf = (oeisIx @20639) n

-- instance OEIS 65339 where
--   oeisIx 1 = 0
--   oeisIx n = genericLength [x | x <- (rowT @27746) n, mod x 4 == 3]

-- instance OEIS 65342 where
--   oeis = tablList @65342
-- instance Table 65342 where
--   rowCol = rowCol_off @65342 @1 @1
--   rowT   = rowT_off   @65342 @1
--   tabl = zipWith (map . (+)) (oeis @40) $ tail $ inits (oeis @40)

-- instance OEIS 65350 where
--   oeis = zipWith mod (tail (oeis @984)) (drop 2 (oeis @290))

-- instance OEIS 65359 where
--   oeisIx 0 = 0
--   oeisIx n = - (oeisIx @65359) n' + m where (n', m) = divMod n 2

-- instance OEIS 65371 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map (oeisIx . (oeisIx @49084)) $ (rowT @27746) n

-- instance OEIS 65380 where
--   oeis = filter f (oeis @40) where
--      f p = any ((== 1) . (oeisIx @10051) . (p -)) $ takeWhile (<= p) (oeis @79)

-- instance OEIS 65381 where
--   oeis = filter f (oeis @40) where
--      f p = all ((== 0) . (oeisIx @10051) . (p -)) $ takeWhile (<= p) (oeis @79)

-- instance OEIS 65383 where
--   oeisIx n = head $ dropWhile (< (oeisIx @217) n) (oeis @40)

-- instance OEIS 65422 where
--   oeis = 1 : 1 : f 2 1 where
--      f n x = x' : f (n+1) x' where
--          x' | x `mod` n == 0 = until ((> 0) . (`mod` n)) (`div` n) x
--             | otherwise      = x * n

-- instance OEIS 65428 where
--   oeis = filter f [1..] where
--      f x = all (== 0) $
--            map (oeisIx' . (`mod` x) . (oeisIx @290)) [oeisIx x .. x-1]

-- instance OEIS 65435 where
--   oeis = 2 : 3 : zipWith (+) xs (tail xs) where
--                  xs = map (oeisIx . fromInteger) (oeis @65435)

-- instance OEIS 65500 where
--   oeisIx n = (oeisIx @3418) n + n - signum n

instance OEIS 65502 where
  oeis = filter ((> 1) . (gcd 10)) [1..]

-- instance OEIS 65515 where
--   oeisIx n = genericLength $ takeWhile (<= n) (oeis @961)

-- instance OEIS 65516 where
--   oeis = zipWith (-) (tail (oeis @1358)) (oeis @1358)

-- instance OEIS 65602 where
--   oeis = tablList @65602
-- instance Table 65602 where
--   rowCol n k = sum
--      [ (k-1+2*j) * (oeisIx @7318)' (2*n-k-1-2*j) (n - 1) `div` (2*n-k-1-2*j) |
--       j <- [0 .. div (n-k) 2]]
--   rowT n = map (oeisIx n) [2..n]
--   tabl = map (rowT @65602) [2..]

-- instance OEIS 65620 where
--   oeisIx n = (oeis @65620) !! n
--   oeis = 1 : concat (transpose [zs, map ((+ 1) . negate) zs])
--                  where zs = map (* 2) (oeis @65620)

-- instance OEIS 65621 where
--   oeisIx (succ->fi->n) = fi do n `xor` 1 * (n - n .&. negate n) :: Integer

-- instance OEIS 65641 where
--   oeisIx n = (oeis @65641) !! (n - 1)
--   oeis = map (fromJust . (`elemIndex` (oeis @193582))) [1..]

-- instance OEIS 65642 where
--   oeisIx 1 = 1
--   oeisIx n = head [x | let rad = (oeisIx @7947) n, x <- [n+1..], (oeisIx @7947) x == rad]

-- instance OEIS 65648 where
--   oeis = f (0 : (oeis @33307)) $ take 10 $ repeat 1 where
--      f (d:ds) counts = y : f ds (xs ++ (y + 1) : ys) where
--                              (xs, y:ys) = splitAt d counts

-- instance OEIS 65649 where
--   oeis = zipWith (+)
--                  (map ((* 10) . subtract 1) (oeis @65648)) (0 : (oeis @33307))

-- instance OEIS 65650 where
--   oeisIx = fromJust . (`elemIndex` (oeis @65649))

-- instance OEIS 65730 where
--   oeisIx = (oeisIx @48760) . (oeisIx @40)

-- instance OEIS 65855 where
--   oeis = scanl1 (+) (map (oeisIx @66247) [1..])

instance OEIS 65877 where
  oeis = map (fi . (+2)) $ findIndices (> 0) $ map (oeisIx @70635) [1..]

-- instance OEIS 65896 where
--   oeisIx = (oeisIx @65855) . (* 2)

-- instance OEIS 65941 where
--   oeis = tablList @65941
-- instance Table 65941 where
--   rowT n = (tabl @65941) !! n
--   tabl = iterate (\row ->
--      zipWith (+) ([0] ++ row) (zipWith (*) (row ++ [0]) (oeis @59841))) [1]

-- instance OEIS 66028 where
--   oeisIx = maximum . filter ((== 1) . (oeisIx @10051)') .
--                       map sum . tail . subsequences . flip take (oeis @40)

-- instance OEIS 66032 where
--   oeisIx 1 1 = 1
--   oeisIx n k = fromEnum (n <= k) +
--      (sum $ map (\d -> (oeisIx @66032) (n `div` d) d) $
--                 takeWhile (<= k) $ tail $ (rowT @27751) n)
--   oeisIx_row n = map (oeisIx n) [1..n]
--   oeisIx_tabl = map (rowT @66032) [1..]

-- instance OEIS 66054 where
--   oeis = iterate (oeisIx @56964) 10583

-- instance Table 66099 where
--   oeisIx_tabf = map (rowT @66099) [1..]
--   oeisIx_row n = reverse $ (rowT @228351) n
-- instance OEIS 66099 where
--   oeis = tablList @66099

-- instance OEIS 66186 where
--   oeisIx = sum . concat . ps 1 where
--      ps _ 0 = [[]]
--      ps i j = [t:ts | t <- [i..j], ts <- ps t (j - t)]

-- instance OEIS 66195 where
--   oeisIx n = fromJust $ find ((== n) . (oeisIx @23416)) (oeis @40)

-- instance OEIS 66197 where
--   oeisIx n = (oeisIx @7947) $ (oeisIx @33286) n * (oeisIx @14688) n

-- instance OEIS 66246 where
--   oeisIx n = genericIndex (oeis @66246) (n - 1)
--   oeis = unfoldr x (1, 1, (oeis @2808)) where
--      x (i, z, cs'@ (c:cs)) | i == c = Just (z, (i + 1, z + 1, cs))
--                           | i /= c = Just (0, (i + 1, z, cs'))

instance OEIS 66247 where
  oeisIx 0 = 0
  oeisIx n = 1 - (oeisIx @10051) n

instance OEIS 66301 where
  oeisIx 0 = 0
  oeisIx n = (oeisIx @51903) n - 1

-- instance OEIS 66339 where
--   oeis = scanl1 (+) $ map (oeisIx @79260) [1..]

-- instance OEIS 66360 where
--   oeisIx n = genericLength [ (x,y,z) | x <- [1 .. (oeisIx @196) n],
--                                 y <- [x .. div n x],
--                                 z <- [y .. n - x*y],
--                                 x*y+ (x+y)*z == n, gcd (gcd x y) z == 1]

-- instance OEIS 66376 where
--   oeisIx :: Int -> Int
--   oeisIx n = genericLength [d | d <- [1..n - 1], any ((== n) . (orm d)) [1..n]] where
--      orm 1 v = v
--      orm u v = orm (shiftR u 1) (shiftL v 1) .|. if odd u then v else 0

-- instance OEIS 66400 where
--   oeisIx = genericLength . (rowT @245499)

-- instance OEIS 66401 where
--   oeisIx = (oeisIx @196) . (oeisIx @245530)

-- instance OEIS 66411 where
--   oeisIx 0 = 1
--   oeisIx n = genericLength $ nub $ map
--      apex [perm | perm <- permutations [0..n], head perm < last perm] where
--      apex = head . until ((== 1) . length)
--                          (\xs -> (zipWith (+) xs $ tail xs))

-- instance OEIS 66446 where
--   oeisIx = (oeisIx @217) . subtract 1 . (oeisIx @5)'

-- instance OEIS 66459 where
--   oeisIx = product . map (oeisIx @142) .
--      unfoldr (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 10)
--   import math

-- instance OEIS 66484 where
--   oeisIx n = (oeis @66484) !! (n - 1)
--   oeis = filter h [1..] where
--      h x = notElem '0' xs && length (nub xs) > 1 &&
--            all d (map read $ zipWith (++)
--                  (tail $ tails xs) (tail $ inits xs)) where xs = show x
--      d u = g u where
--            g v = v == 0 || mod u d == 0 && g v' where (v', d) = divMod v 10

-- instance OEIS 66490 where
--   oeis = scanl1 (+) $ map (oeisIx @79261) [1..]

-- instance OEIS 66520 where
--   oeis = scanl1 (+) $ map (negate . (oeisIx @151763)) [1..]

-- instance OEIS 66522 where
--   oeisIx n = (oeis @66522) !! (n - 1)
--   oeis = filter f [1..] where
--      f x = genericLength ds == maximum ds where ds = (rowT @161906) x

-- instance OEIS 66527 where
--   oeis = filter ((== 1) . (oeisIx @10054)) (oeis @7504)

-- instance OEIS 66571 where
--   oeisIx n = f [1..] 1 n 0 where
--      f (k:ks) l nl x
--        | y > nl  = 0
--        | y < nl  = f ks (l + 1) (nl + n) y + f ks l nl x
--        | otherwise = if y `mod` l == 0 then 1 else 0
--        where y = x + k

-- instance OEIS 66638 where
--   oeisIx n = (oeisIx @7947) n ^ (oeisIx @51903) n

-- instance OEIS 66657 where
--   oeisIx n = (oeis @66657) !! n
--   oeis = map numerator
--      (1 : (concat $ tail $ zipWith (\u vs -> map (% u) vs)
--                                    (oeis @66720) (inits (oeis @66720))))

-- instance OEIS 66658 where
--   oeisIx n = (oeis @66658) !! n
--   oeis = map denominator
--      (1 : (concat $ tail $ zipWith (\u vs -> map (% u) vs)
--                                    (oeis @66720) (inits (oeis @66720))))

-- instance OEIS 66664 where
--   oeis = filter ((== 0) . (oeisIx @10051)) $ tail (oeis @66522)

-- instance OEIS 66680 where
--   oeis = s [2..] where
--      s (b:bs) = b : s [x | x <- bs, x > b ^ 2 || mod x b > 0]

-- instance OEIS 66681 where
--   oeis = filter ((== 0) . (oeisIx @10051)) (oeis @66680)

-- instance OEIS 66710 where
--   oeis = iterate (oeisIx @36839) 3

-- instance OEIS 66711 where
--   oeis = iterate (oeisIx @36839) 9

-- instance OEIS 66713 where
--   oeisIx = (oeisIx @36839) . (2 ^)

-- instance OEIS 66720 where
--   import qualified Data.Set as Set (null)
--   import Data.Set as Set (empty, insert, member)
--   oeisIx n = (oeis @66720) !! (n - 1)
--   oeis = f [] 1 empty where
--      f ps z s | Set.null s' = f ps (z + 1) s
--               | otherwise   = z : f (z:ps) (z + 1) s'
--        where s' = g (z:ps) s
--              g []     s                      = s
--              g (x:qs) s | (z * x) `member` s = empty
--                         | otherwise          = g qs $ insert (z * x) s

-- instance OEIS 66721 where
--   oeis = filter ((== 0) . (oeisIx @10051)') (oeis @66720)

-- instance OEIS 66729 where
--   oeisIx n = if pds == [1] then n else product pds
--               where pds = (rowT @27751) n

-- instance OEIS 66822 where
--   oeisIx = flip (oeisIx @38622) 3 . (+ 3)

-- instance OEIS 66825 where
--   oeisIx n = (oeis @66825) !! (n - 1)
--   oeis = 1 : f 1 (drop 2 (oeis @290)) where
--      f x (q:qs) | all (`elem` show q) xs = y : f y qs
--                 | otherwise              = f x qs
--                 where y = (oeisIx @196) q; xs = show (x * x)

-- instance OEIS 66829 where
--   oeisIx = (`mod` 2) . (oeisIx @1222)

-- instance OEIS 66839 where
--   oeisIx = sum . (rowT @161906)

-- instance OEIS 66853 where
--   oeisIx 1 = 1
--   oeisIx n = f 1 ps [] where
--      f 0 (1 : xs) ys = length ys
--      f _ (x : xs) ys = if x `elem` ys then f x xs ys else f x xs (x:ys)
--      ps = 1 : 1 : zipWith (\u v -> (u + v) `mod` n) (tail ps) ps

-- instance OEIS 66897 where
--   oeisIx = p 0 1 where
--      p o _             0 = o
--      p o k m | m < k     = 0
--              | otherwise = p (o + mod k 2) k (m - k) + p o (k + 1) m

-- instance OEIS 66898 where
--   oeisIx = p 0 1 where
--      p e _             0 = e
--      p e k m | m < k     = 0
--              | otherwise = p (e + 1 - mod k 2) k (m - k) + p e (k + 1) m

-- instance OEIS 66926 where
--   oeis = filter f [1..] where
--      f x = elem x $ map sum $ map (map (div x)) $ ps 1 x where
--        ps u 0 = [[]]
--        ps u v = [t:ts | t <- [u..v], t > 1, mod x t == 0, ts <- ps t (v - t)]

-- instance OEIS 66938 where
--   oeis = map (oeisIx @40) $ filter ((> 0) . (oeisIx @67432)) [1..]

-- instance OEIS 66949 where
--   oeis = 0 : 1 : f 2 1 0 where
--      f k x x' | z > k     = (z - k) : f (k+1) (z - k) x
--               | otherwise = z : f (k+1) z x where z = x + x'

-- instance OEIS 66955 where
--   oeisIx n = genericLength [ (x,y,z) | x <- [1 .. (oeisIx @196) (div n 3)],
--                                 y <- [x .. div n x],
--                                 z <- [y .. div (n - x*y) (x + y)],
--                                 x * y + (x + y) * z == n]

-- instance OEIS 66976 where
--   oeisIx 0 = 1
--   oeisIx n = sum $ zipWith (*) (oeis @66976) $ map (n ^) [0..n - 1]
--   oeis = map (oeisIx @66976) [0..]

-- instance OEIS 66990 where
--   oeisIx n = product $ zipWith (^)
--              (oeisIx_row n) (map ((2 -) . (`mod` 2)) $ (rowT @124010) n)

-- instance OEIS 67016 where
--   oeis = [1,4,3,2] ++ f [2,3,4,1] where
--      f xs = maxi : f (maxi : xs) where
--        maxi = maximum $ zipWith (+) xs (reverse xs)

-- instance OEIS 67017 where
--   oeisIx n = (oeis @67017) !! n
--   oeis =  [1,4,3,2] ++ f [2,3,4,1] where
--     f xs = mexi : f (mexi : xs) where
--       mexi = head $ [0..] \\ zipWith (+) xs (reverse xs)

-- instance OEIS 67018 where
--   oeisIx n = (oeis @67018) !! n
--   oeis =  [1,4,3,2] ++ f [2,3,4,1] where
--     f xs = mexi : f (mexi : xs) where
--       mexi = head $ [0..] \\ zipWith xor xs (reverse xs) :: Integer

instance OEIS 67029 where
  oeisIx = head . (rowT @124010) . succ

-- instance OEIS 67043 where
--   oeis = 0 : f 1 1 0 1 where
--      f k x y z
--        | y > 0     = (x-y) : f k x (y `div` 10) z
--        | k < 9     = x : f (k+1) (2*x-k*z+1) (z `div` 10) z
--        | otherwise = x : f 1 (20*z-1) z (10*z)

-- instance OEIS 67046 where
--   oeisIx = (`div` 6) . (oeisIx @33931)

-- instance OEIS 67078 where
--   oeis = scanl (+) 1 (oeis @142)

instance OEIS 67079 where
  oeisIx = product . map (fi . read) . init . tails . show . fi

-- instance OEIS 67080 where
--   oeisIx n = if n <= 9 then n else n * (oeisIx @67080) (n `div` 10)

-- instance OEIS 67109 where
--   oeisIx n = sum $
--      map (fromEnum . (show n `isPrefixOf`)) (tails $ show $ (oeisIx @142) n)

-- instance OEIS 67139 where
--   oeisIx n = (oeis @67139) !! (n - 1)
--   oeis = 1 : map (+ 1) (elemIndices 1 (oeis @66376))

-- instance OEIS 67240 where
--   oeisIx 1 = 0
--   oeisIx n = sum $ map (oeisIx @10) $ (rowT @141809) $ toInteger n

instance OEIS 67251 where
  oeis = filter ((> 0) . flip mod 10) [0..]

-- instance OEIS 67255 where
--   oeis = tablList @67255
-- instance Table 67255 where
--   rowCol n k = (tabf @67255) !! (n - 1) !! (k-1)
--   rowT 1 = [0]
--   rowT n = f n (oeis @40) where
--      f 1 _      = []
--      f u (p:ps) = g u 0 where
--        g v e = if m == 0 then g v' (e + 1) else e : f v ps
--                where (v',m) = divMod v p
--   tabf = map (rowT @67255) [1..]

instance OEIS 67259 where
  oeis = map (+1) $ filter ((== 2) . (oeisIx @51903)) [1..]

-- instance OEIS 67266 where
--   oeis = filter (\x -> (oeisIx @1221) x == (oeisIx @2321) x) [1..]

-- instance OEIS 67391 where
--   oeisIx n | n <= 2    = 1
--             | otherwise = foldl lcm 1 $ (rowT @173540) n

-- instance OEIS 67398 where
--   oeisIx :: Integer -> Integer
--   oeisIx 0 = 0
--   oeisIx n = orm n n where
--      orm 1 v = v
--      orm u v = orm (shiftR u 1) (shiftL v 1) .|. if odd u then v else 0

-- instance OEIS 67432 where
--   oeisIx n = genericLength [p | let prime_n = (oeisIx @40) n,
--      p <- takeWhile (< (oeisIx @196) prime_n) (oeis @40),
--      let (q,m) = divMod (prime_n - p) (p + 1),
--      m == 0, (oeisIx @10051) q == 1]
--   oeis = map (oeisIx @67432) [1..]

-- instance OEIS 67434 where
--   oeisIx = (oeisIx @1221) . (oeisIx @984)

-- instance OEIS 67458 where
--   oeisIx n = f 0 n where
--      f y 0 = y
--      f y x = if d == 0 then f y x' else f (y + mod n d) x'
--              where (x', d) = divMod x 10

-- instance OEIS 67513 where
--   oeisIx = sum . map (oeisIx . (+ 1)) . (rowT @27750)

-- instance OEIS 67581 where
--   oeisIx n = (oeis @67581) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f u vs = v : f v (delete v vs)
--        where v : _ = filter (null . (intersect `on` show) u) vs

-- instance OEIS 67599 where
--   oeisIx n = read $ foldl1 (++) $
--      zipWith ((++) `on` show) (oeisIx_row n) (oeisIx_row n) :: Integer

-- instance OEIS 67611 where
--   oeis = map (`div` 6) $
--      filter (\x -> (oeisIx @10051)' (x-1) == 0 || (oeisIx @10051)' (x+1) == 0) [6,12..]

-- instance OEIS 67722 where
--   oeisIx n = head [k | k <- [1..], (oeisIx @10052) (n * (n + k)) == 1]

-- instance OEIS 67747 where
--   oeisIx n = (oeis @67747) !! (n - 1)
--   oeis = concat $ transpose [oeis, (oeis @2808)]

-- instance OEIS 67815 where
--   oeisIx n = gcd n $ (oeisIx @196) n

-- instance OEIS 67824 where
--   oeisIx n = 1 + sum (map (oeisIx @67824) [d | d <- [1..n - 1], mod n d == 0])

-- instance OEIS 67872 where
--   oeisIx n = (until ((== 1) . (oeisIx @10052) . (+ 1)) (+ nn) nn) `div` nn
--               where nn = n ^ 2

-- instance OEIS 67898 where
--   oeisIx n = f n [0..10] where
--      f x ys | x <= 9    = head $ delete x ys
--             | otherwise = f x' $ delete d ys where (x',d) = divMod x 10

-- instance OEIS 67953 where
--   oeisIx n = p [1..n] $ (oeisIx @40) n where
--      p _  0 = 1
--      p [] _ = 0
--      p (k:ks) m | m < k = 0 | otherwise = p ks (m - k) + p ks m

-- instance OEIS 67962 where
--   oeis = 1 : zipWith (*) (oeis @67962) (drop 2 (oeis @1654))

-- instance OEIS 67970 where
--   oeis = zipWith (-) (tail (oeis @14076)) (oeis @14076)

-- instance OEIS 67998 where
--   oeisIx n = n * (n - 2)
--   oeis = scanl (+) 0 [-1, 1 ..]

-- instance OEIS 68050 where
--   oeisIx n = genericLength [k | k <- [1..n], (oeisIx @10051) (n `div` k) == 1]

-- instance OEIS 68068 where
--   oeisIx = genericLength . filter odd . (rowT @77610)

-- instance OEIS 68074 where
--   oeisIx n | odd n     = - (oeisIx @48691) n
--             | otherwise = 2 * (oeisIx @48691) (n `div` 2) - (oeisIx @48691) n

-- instance OEIS 68101 where
--   oeisIx = sum . map (oeisIx @8683) . (rowT @161906)

-- instance OEIS 68106 where
--   oeis = tablList @68106
-- instance Table 68106 where
--   rowT n = (tabl @68106) !! n
--   tabl = map reverse (tabl @47920)

-- instance OEIS 68119 where
--   oeisIx n = fst $ until ((== 1) . denominator . snd)
--                           (\ (i, x) -> (i + 1, f x)) (0, fromInteger n + 1%4)
--      where f x = x * fi (ceiling x)

-- instance OEIS 68148 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @32981)

-- instance OEIS 68164 where
--   oeisIx n = head (filter isPrime (digitExtensions n))
--   digitExtensions n = filter (includes n) [0..]
--   includes n k = listIncludes (show n) (show k)
--   listIncludes [] _ = True
--   listIncludes (h:_) [] = False
--   listIncludes l1@ (h1:t1) (h2:t2) = if (h1 == h2) then (listIncludes t1 t2) else (listIncludes l1 t2)
--   isPrime 1 = False
--   isPrime n = not (hasDivisorAtLeast 2 n)
--   hasDivisorAtLeast k n = (k*k <= n) && (((n `rem` k) == 0) || (hasDivisorAtLeast (k+1) n))

-- instance OEIS 68191 where
--   oeisIx n = (oeis @68191) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @86299)

-- instance OEIS 68310 where
--   oeisIx n = f 1 $ (rowT @27746) (n^2 - 1) where
--      f y [] = y
--      f y [p] = y*p
--      f y (p:ps'@ (p':ps)) | p == p' = f y ps
--                          | otherwise = f (y*p) ps'

-- instance OEIS 68312 where
--   oeisIx = (oeisIx @3415) . (oeisIx @217)

-- instance OEIS 68319 where
--   oeisIx n = if n <= spf ^ 2 then spf else (oeisIx @68319) $ spf + div n spf
--               where spf = (oeisIx @20639) n

-- instance OEIS 68328 where
--   oeisIx = (oeisIx @3415) . (oeisIx @5117)

-- instance OEIS 68336 where
--   oeis = 1 : f 1 where
--      f x = (1 + sum (map (oeisIx @68336) $ (rowT @27750) x)) : f (x + 1)

-- instance OEIS 68340 where
--   oeis = scanl1 (+) (oeis @55615)

-- instance OEIS 68341 where
--   oeis = f 1 [] where
--      f x ms = (sum $ zipWith (*) ms' $ reverse ms') : f (x + 1) ms' where
--        ms' = (oeisIx x) : ms

-- instance OEIS 68346 where
--   oeisIx = (oeisIx @3415) . (oeisIx @3415)

-- instance OEIS 68395 where
--   oeis = zipWith (-) (oeis @40) (oeis @7605)

-- instance OEIS 68396 where
--   oeisIx n = p - (oeisIx @4086) p  where p = (oeisIx @40) n

instance OEIS 68475 where
  oeisIx n = sum $ zipWith (*) [1..n] $ iterate (* n) 1

-- instance OEIS 68494 where
--   oeisIx n = mod n $ (oeisIx @10) n

instance OEIS 68498 where
  oeis = f [0..] (oeis @45) where
     f (u:us) (v:vs) = if u < (oeisIx @7953) v then v : f us vs else f us vs

-- instance OEIS 68500 where
--   oeis = h 0 (oeis @4090) (oeis @45) where
--      h r (q:qs) (f:fs) = if q <= r then h r qs fs else f : h q qs fs

-- instance OEIS 68505 where
--   oeisIx n = foldr (\d v -> v * b + d) 0 dds where
--   b = maximum dds + 1
--   dds = (rowT @31298) n

-- instance OEIS 68522 where
--   oeisIx 0 = 0
--   oeisIx n = 10 * (oeisIx @68522) n' + m ^ 2  where (n', m) = divMod n 10

-- instance OEIS 68636 where
--   oeisIx n = min n $ (oeisIx @4086) n

-- instance OEIS 68637 where
--   oeisIx n = max n $ (oeisIx @4086) n

-- instance OEIS 68690 where
--   oeis = filter (all (`elem` "02468") . init . show) (oeis @40)

-- instance OEIS 68700 where
--   import Data.List.Ordered (isect)
--   oeisIx n = (oeis @68700) !! (n - 1)
--   oeis = isect (oeis @30457) (oeis @54211)

-- instance OEIS 68720 where
--   oeisIx = (oeisIx @3415) . (oeisIx @290)

instance OEIS 68722 where
  oeisIx n = (1 + 2 * n + 2 * n ^ 2) * (1 + 3 * n + 3 * n ^ 2)

-- instance OEIS 68781 where
--   oeis = filter ((== 0) . (oeisIx @261869)) [1..]

-- instance OEIS 68861 where
--   oeisIx n = (oeis @68861) !! (n - 1)
--   oeis = f "x" (map show [1..]) where
--      f u us = g us where
--        g (v:vs)
--          | and $ zipWith (/=) u v = (read v :: Int) : f v (delete v us)
--          | otherwise = g vs

-- instance OEIS 68863 where
--   oeisIx n = (oeis @68863) !! (n - 1)
--   oeis = f "x" (map show (oeis @40)) where
--      f p ps = g ps where
--        g (q:qs)
--          | and $ zipWith (/=) p q = (read q :: Int) : f q (delete q ps)
--          | otherwise = g qs

-- instance OEIS 68872 where
--   oeis = filter
--      (all (== 1) . map (`mod` 10) . (rowT @27750)) (oeis @2808)

-- instance OEIS 68901 where
--   oeisIx n = head $
--      filter ((== 0) . (`mod` fi n) . (+ (oeisIx @40) n)) $ [0..]

-- instance OEIS 68919 where
--   oeis = filter ((== 1) . (oeisIx @8966)) (oeis @56868)

-- instance OEIS 68936 where
--   oeis = [x | x <- [1..], (oeisIx @8472) x <= (oeisIx @1222) x]

-- instance OEIS 68997 where
--   oeis = filter (\x -> mod x (oeisIx x) == 0) [1..]

-- instance OEIS 69011 where
--   oeis = tablList @69011
-- instance Table 69011 where
--   rowT n = (tabl @69011) !! n
--   tabl = map snd $ iterate f (1, [0]) where
--      f (i, xs@ (x:_)) = (i + 2, (x + i) : zipWith (+) xs [i + 1, i + 3 ..])

-- instance OEIS 69056 where
--   oeis = filter (\x -> x ^ 2 `mod` (oeisIx @46970) x == 0) [1..]

-- instance OEIS 69059 where
--   oeis = filter ((> 1) . (oeisIx @9194)) [1..]

-- instance OEIS 69090 where
--   oeisIx n = (oeis @69090) !! (n - 1)
--   oeis = filter
--      (all (== 0) . map (oeisIx . read) . init . tail . inits . show)
--      (oeis @40)

-- instance OEIS 69099 where
--   oeisIx n = length
--      [ (x,y) | x <- [-n+1..n - 1], y <- [-n+1..n-1], x + y <= n - 1]

-- instance OEIS 69104 where
--   oeisIx n = (oeis @69104) !! (n - 1)
--   oeis =
--      map (+ 1) $ elemIndices 0 $ zipWith mod (drop 2 (oeis @45)) [1..]

-- instance OEIS 69106 where
--   oeis = [x | x <- (oeis @2808), (oeisIx @45) (x-1) `mod` x == 0]

-- instance OEIS 69107 where
--   oeis = h 2 $ drop 3 (oeis @45) where
--      h n (fib:fibs) = if fib `mod` n > 0 || (oeisIx @10051) n == 1
--          then h (n+1) fibs else n : h (n+1) fibs

-- instance OEIS 69158 where
--   oeisIx = product . (rowT @225817)

-- instance OEIS 69213 where
--   oeisIx = last . (rowT @77581)

-- instance OEIS 69283 where
--   oeisIx 0 = 0
--   oeisIx n = genericLength $ tail $ (rowT @182469) n

-- instance OEIS 69288 where
--   oeisIx n = genericLength $ takeWhile (<= (oeisIx @196) n) $ (rowT @182469) n

-- instance OEIS 69289 where
--   oeisIx n = sum $ takeWhile (<= (oeisIx @196) n) $ (rowT @182469) n

-- instance OEIS 69352 where
--   oeisIx = (oeisIx @1222) . (oeisIx @3586)

-- instance OEIS 69360 where
--   oeisIx n = sum [oeisIx' (4*n-p) | p <- takeWhile (<= 2*n) (oeis @40)]

instance OEIS 69482 where
  oeis = zipWith (-) (tail (oeis @1248)) (oeis @1248)

-- instance OEIS 69488 where
--   oeis = filter f $ dropWhile (<= 100) (oeis @38618) where
--      f x = x < 10 || (oeisIx @10051) (x `mod` 100) == 1 && f (x `div` 10)

-- instance OEIS 69489 where
--   oeis = filter g $ dropWhile (<= 1000) (oeis @40) where
--      g x = x < 100 || (oeisIx @10051) (x `mod` 1000) == 1 && g (x `div` 10)

-- instance OEIS 69490 where
--   import Data.Set (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @69490) !! (n - 1)
--   oeis = f $ fromList [1..9] where
--      f s | m < 1000               = f s''
--          | h m && (oeisIx @10051)' m == 1 = m : f s''
--          | otherwise              = f s''
--          where s'' = union s' $ fromList $ map (+ (m * 10)) [1, 3, 7, 9]
--                (m, s') = deleteFindMin s
--      h x = x < 100 && (oeisIx @10051)' x == 1 ||
--            (oeisIx @10051)' (x `mod` 1000) == 1 &&
--            (oeisIx @10051)' (x `mod` 100) == 1 && h (x `div` 10)

-- instance OEIS 69492 where
--   import Data.Set (singleton, deleteFindMin, fromList, union)
--   oeisIx n = (oeis @69492) !! (n - 1)
--   oeis = 1 : f (singleton z) [1, z] zs where
--      f s q5s p5s'@ (p5:p5s)
--        | m < p5 = m : f (union (fromList $ map (* m) ps) s') q5s p5s'
--        | otherwise = f (union (fromList $ map (* p5) q5s) s) (p5:q5s) p5s
--        where ps = (rowT @27748) m
--              (m, s') = deleteFindMin s
--      (z:zs) = (oeis @50997)

-- instance OEIS 69493 where
--   import Data.Set (singleton, deleteFindMin, fromList, union)
--   oeisIx n = (oeis @69493) !! (n - 1)
--   oeis = 1 : f (singleton z) [1, z] zs where
--      f s q6s p6s'@ (p6:p6s)
--        | m < p6 = m : f (union (fromList $ map (* m) ps) s') q6s p6s'
--        | otherwise = f (union (fromList $ map (* p6) q6s) s) (p6:q6s) p6s
--        where ps = (rowT @27748) m
--              (m, s') = deleteFindMin s
--      (z:zs) = (oeis @30516)

-- instance OEIS 69513 where
--   oeisIx 1 = 0
--   oeisIx n = (oeisIx @10055) n

-- instance OEIS 69536 where
--   oeis = map (* 8) (oeis @77495)

-- instance OEIS 69545 where
--   oeisIx n = (oeis @69545) !! (n - 1)
--   oeis = map length $ group (oeis @8836)

-- instance OEIS 69567 where
--   oeisIx n = (oeis @69567) !! (n - 1)
--   oeis = f (oeis @40) where
--      f (p:ps@ (p':_)) = if sort (show p) == sort (show p')
--                        then p : f ps else f ps

-- instance OEIS 69715 where
--   oeis = filter ((== 1) . (oeisIx @52423)) [1..]

-- instance OEIS 69720 where
--   oeisIx n = (oeisIx $ n - 1) * (oeisIx $ n - 1)

-- instance OEIS 69754 where
--   oeisIx 1 = 0
--   oeisIx 2 = 1
--   oeisIx n = 2 * (oeisIx @720) n - 2 - (toInteger $ (oeisIx @10051) $ toInteger n)

-- instance OEIS 69799 where
--   oeisIx n = product $ zipWith (^) (oeisIx_row n) (reverse $ (rowT @124010) n)

-- instance OEIS 69817 where
--   oeisIx 1 = 1
--   oeisIx n = if null ms then n else minimum $ map (`mod` n) ms
--      where ms = zipWith (+) ds $ map (div n') ds
--            ds = takeWhile (< n - 1) $ tail $ (rowT @27750) n'
--            n' = n ^ 2 - 1

-- instance OEIS 69835 where
--   oeisIx n = (oeisIx @81577) (2 * n) n

-- instance OEIS 69905 where
--   oeis = scanl (+) 0 (oeis @8615)

-- instance OEIS 69915 where
--   oeisIx n = product $ zipWith sum_1phi (oeisIx_row n) (oeisIx_row n)
--      where sum_1phi p e = 1 + sum [p ^ k | k <- (rowT @38566) e]

-- instance OEIS 69928 where
--   oeis = scanl1 (+) (oeis @245656)

-- instance OEIS 70005 where
--   oeis = filter ((== 0) . (oeisIx @10055)) (oeis @78174)

-- instance OEIS 70047 where
--   oeisIx n = p 1 n where
--      p k m | m == 0 = 1 | m < k = 0 | otherwise = q k (m-k) + p (k+1) m
--      q k m | m == 0 = 1 | m < k = 0 | otherwise = p (k+2) (m-k) + p (k+2) m

-- instance OEIS 70048 where
--   oeisIx = p (oeis @42968) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 70072 where
--   oeisIx n = genericLength [ () | x <- [1..n], y <- [1..x], (oeisIx @8966) (x*y) == 1]

-- instance OEIS 70073 where
--   oeisIx n = genericLength [ () | x <- [1..n], y <- [1..x], z <- [1..y],
--                            (oeisIx @212793) (x*y*z) == 1]

-- instance OEIS 70165 where
--   oeis = tablList @70165
-- instance Table 70165 where
--   rowCol n k = (tabf @70165) !! (n - 1) !! (k-1)
--   tabf = map (rowT @70165) [1..]
--   rowT n = (takeWhile (/= 1) $ iterate (oeisIx @6370) n) ++ [1]
--   oeis = concat (tabf @70165)

-- instance OEIS 70167 where
--   oeisIx n = fromJust (findIndex (elem n) (tabf @70165)) + 1

-- instance OEIS 70168 where
--   oeis = tablList @70168
-- instance Table 70168 where
--   rowCol n k = (tabf @70168) !! (n - 1) !! (k-1)
--   tabf = map (rowT @70168) [1..]
--   rowT n = (takeWhile (/= 1) $ iterate (oeisIx @14682) n) ++ [1]
--   oeis = concat (tabf @70168)

-- instance OEIS 70176 where
--   oeisIx n = (head $ dropWhile (< n) (oeis @1481)) - n
--   oeis = map (oeisIx @70176) [0..]

-- instance OEIS 70194 where
--   oeisIx n = maximum $ zipWith (-) (tail ts) ts where ts = (rowT @38566) n

instance OEIS 70196 where
  oeisIx n = n + (oeisIx @4185) n

instance OEIS 70198 where
  oeis = map (subtract 1) $ scanl lcm 1 [2..]

-- instance OEIS 70215 where
--   oeisIx = (oeisIx @586) . (oeisIx @40)

-- instance OEIS 70216 where
--   oeis = tablList @70216
-- instance Table 70216 where
--   rowCol = rowCol_off @70216 @1 @1
--   rowT   = rowT_off   @70216 @1
--   tabl = zipWith (zipWith (\u v -> (u + v) `div` 2))
--                          (tabl @215630) (tabl @215631)

-- instance OEIS 70229 where
--   oeisIx n = n + (oeisIx @6530) n

-- instance OEIS 70319 where
--   oeis = scanl1 max $ map (oeisIx @5) [1..]

-- instance OEIS 70550 where
--   oeis = 1 : 2 : 2 : 3 :
--      zipWith (+) (oeis @70550)
--                  (zipWith (+) (tail (oeis @70550)) (drop 3 (oeis @70550)))

instance OEIS 70635 where
  oeisIx (succ->n) = n `mod` (oeisIx @7953 n)

-- instance OEIS 70647 where
--   oeisIx = (oeisIx @6530) . (oeisIx @6881)

-- instance OEIS 70750 where
--   oeisIx = (2 -) . (`mod` 4) . (oeisIx @40)

-- instance OEIS 70760 where
--   oeis = [x | x <- [0..], let y = (oeisIx @61205) x,
--                       y /= x ^ 2, (oeisIx @10052) y == 1]

-- instance OEIS 70861 where
--   oeis = concat (tabf @70861)
--   oeisIx_tabf = [1] : f 2 [1] where
--      f n ps = ps' : f (n+1) ps' where ps' = m ps $ map (n*) ps
--      m []         ys = ys
--      m xs'@ (x:xs) ys'@ (y:ys)
--          | x < y     = x : m xs ys'
--          | x == y    = x : m xs ys
--          | otherwise = y : m xs' ys
--   b070861 = bFile' "A070861" (concat $ take 20 (tabf @70861)) 1

-- instance OEIS 70867 where
--   oeis = 1 : 1 : zipWith (+)
--      (map (oeisIx @70867) $ zipWith (-) [2..] (oeis @70867))
--      (map (oeisIx @70867) $ zipWith (-) [2..] $ tail (oeis @70867))

-- instance OEIS 70870 where
--   oeis = 6 : f 6 where
--      f x = y : f y where
--        y = (if even x then 5 * x else x + 1) `div` 2

-- instance OEIS 70883 where
--   oeisIx n = (oeis @70883) !! (n - 1)
--   oeis = zipWith xor [1..] (oeis @40)

-- instance OEIS 70885 where
--   oeis = 1 : map (flip (*) 3 . flip div 2 . (+ 1)) (oeis @70885)

-- instance OEIS 70887 where
--   oeis = tablList @70887
-- instance Table 70887 where
--   rowCol = rowCol_off @70887 @1 @1
--   rowT   = rowT_off   @70887 @1
--   tabl = zipWith take [1..] (tabf @75437)

-- instance OEIS 70897 where
--   oeisIx n = genericLength $ filter (all ((== 1) . (oeisIx @10051)))
--                        $ map (zipWith (+) [1..n]) (permutations [n+1..2*n])

instance OEIS 70939 where
  oeisIx n = if n < 2 then 1 else (oeisIx @70939) (n `div` 2) + 1
  oeis = 1 : 1 : l [1] where
     l bs = bs' ++ l bs' where bs' = map (+ 1) (bs ++ bs)

-- instance OEIS 70940 where
--   oeisIx = maximum . (rowT @80080)

-- instance OEIS 70950 where
--   oeis = tablList @70950
-- instance Table 70950 where
--   rowCol n k = (tabf @70950) !! n !! k
--   rowT n = (tabf @70950) !! n
--   tabf = iterate rule30 [1] where
--      rule30 row = f ([0,0] ++ row ++ [0,0]) where
--          f [_,_]          = []
--          f (u:ws@ (0:0:_)) = u : f ws
--          f (u:ws)         = (1 - u) : f ws

-- instance OEIS 70951 where
--   oeisIx = genericLength . filter (== 0) . (rowT @70950)

-- instance OEIS 70952 where
--   oeisIx = sum . (rowT @70950)

-- instance OEIS 70960 where
--   oeisIx n = if n == 1 then 1 else 3 * (oeisIx @142) n `div` 2
--   oeis = map (flip div 2) fs where fs = 3 : zipWith (*) [2..] fs

-- instance OEIS 70965 where
--   oeis = 1 : f 1 where
--      f x = y : f (x + 1) where
--        y = sum $ zipWith (*) (map (oeisIx @70965) $ (rowT @27750) x) (oeisIx_row x)

-- instance OEIS 70991 where
--   oeis = filter (\x -> (x - 1) `elem` (rowT @70165) x) [1..]

-- instance OEIS 71032 where
--   oeis = tablList @71032
-- instance Table 71032 where
--   rowCol n k = (tabf @71032) !! n !! k
--   rowT n = (tabf @71032) !! n
--   tabf = map reverse (tabf @70950)

-- instance OEIS 71139 where
--   oeis = filter (\x -> (oeisIx @8472) x `mod` (oeisIx @6530) x == 0) [2..]

-- instance OEIS 71140 where
--   oeis = filter (\x -> (oeisIx @8472) x `mod` (oeisIx @6530) x == 0) (oeis @24619)

-- instance OEIS 71176 where
--   oeisIx n = fromJust $ findIndex (== 1) $
--               map (oeisIx . read . (show n ++) . show) [0..]

instance OEIS 71178 where
  oeisIx = last . (rowT @124010) . succ

-- instance OEIS 71188 where
--   oeisIx = (oeisIx @6530) . (oeisIx @5)

instance OEIS 71222 where
  oeisIx n = head [k | k <- [1..], gcd (n + 1) (k + 1) == gcd n k]

-- instance OEIS 71249 where
--   oeis = filter ((> 1) . (oeisIx @55483)) [1..]

-- instance OEIS 71295 where
--   oeisIx n = (oeisIx @120) n * (oeisIx @23416) n

-- instance OEIS 71317 where
--   oeis = scanl1 (+) (oeis @4159)

-- instance OEIS 71318 where
--   oeis = [x | x <- [1..],  (oeisIx @212793) x == 1, (oeisIx @8966) x == 0,
--                       let y = x+1, (oeisIx @212793) y == 1, (oeisIx @8966) y == 0]

-- instance OEIS 71321 where
--   oeisIx 1 = 0
--   oeisIx n = sum $ zipWith (*) (oeis @33999) $ (rowT @27746) n

-- instance OEIS 71330 where
--   oeisIx n = sum $
--      map (oeisIx . (n -)) $ takeWhile (<= n `div` 2) (oeis @961)

-- instance OEIS 71331 where
--   oeis = filter ((== 0) . (oeisIx @71330)) [1..]

instance OEIS 71364 where
  oeisIx = product . zipWith (^) (oeis @40) . (rowT @124010) . succ

-- instance OEIS 71367 where
--   oeis = tail $ filter f [1..] where
--      f x = and $ map g [5, 4 .. 1] where
--        g k = sum (map h $ map (+ x) [0..4]) == 1 where
--          h z = if r == 0 then (oeisIx @10051)' z' else 0
--                where (z', r) = divMod z k

-- instance OEIS 71368 where
--   oeis = filter f [1..] where
--      f x = and $ map g [6, 5 .. 1] where
--        g k = sum (map h $ map (+ x) [0..5]) == 1 where
--          h z = if r == 0 then (oeisIx @10051)' z' else 0
--                where (z', r) = divMod z k

-- instance OEIS 71407 where
--   oeisIx n = head [k | k <- [2,4..], let x = k * (oeisIx @40) n,
--                         (oeisIx @10051)' (x - 1) == 1, (oeisIx @10051)' (x + 1) == 1]

-- instance OEIS 71413 where
--   oeisIx 0 = 0
--   oeisIx n | m == 0    = (oeisIx @71413) n' + n
--             | otherwise = (oeisIx @71413) n' - n  where (n',m) = divMod n 2

-- instance OEIS 71521 where
--   oeisIx n = genericLength $ takeWhile (<= n) (oeis @3586)

-- instance OEIS 71558 where
--   oeisIx n = head [k | k <- [1..], let x = k * n,
--                         (oeisIx @10051)' (x - 1) == 1, (oeisIx @10051)' (x + 1) == 1]

-- instance OEIS 71574 where
--   oeisIx 1 = 0
--   oeisIx n = 2 * (oeisIx @71574) (if j > 0 then j + 1 else (oeisIx @49084) n) + 1 - signum j
--               where j = (oeisIx @66246) n

-- instance OEIS 71681 where
--   oeisIx n = sum $ map (oeisIx @10051)' $
--      takeWhile (> 0) $ map (2 * (oeisIx @40) n -) $ drop n (oeis @40)

-- instance OEIS 71695 where
--   oeis = [p | p <- (oeis @2144), (oeisIx @10051)' (p + 2) == 1]

-- instance OEIS 71696 where
--   oeis = [p | p <- tail (oeis @2145), (oeisIx @10051)' (p - 2) == 1]

-- instance OEIS 71698 where
--   oeis = [x | x <- [3, 7 ..], (oeisIx @10051)' x == 1, (oeisIx @10051)' (x+2) == 1]

-- instance OEIS 71699 where
--   oeis = [x | x <- [5, 9 ..], (oeisIx @10051)' x == 1, (oeisIx @10051)' (x-2) == 1]

-- instance OEIS 71700 where
--   oeis = [x * y | x <- [3, 7 ..], (oeisIx @10051)' x == 1,
--                           let y = x + 2, (oeisIx @10051)' y == 1]

-- instance OEIS 71703 where
--   oeisIx = z (oeis @65091) 0 . (* 3) . (oeisIx @40) where
--      z _ 3 m = fromEnum (m == 0)
--      z ps'@ (p:ps) i m = if m < p then 0 else z ps' (i+1) (m - p) + z ps i m

-- instance OEIS 71704 where
--   oeisIx n = z (us ++ vs) 0 (3 * q)  where
--      z _ 3 m = fromEnum (m == 0)
--      z ps'@ (p:ps) i m = if m < p then 0 else z ps' (i+1) (m - p) + z ps i m
--      (us, _:vs) = span (< q) (oeis @65091); q = (oeisIx @40) n

-- instance OEIS 71786 where
--   oeisIx = product . map (oeisIx @4086) . (rowT @27746)

-- instance OEIS 71797 where
--   oeisIx n = (oeis @71797) !! (n - 1)
--   oeis = f $ tail $ inits [1..] where
--      f (xs:_:xss) = xs ++ f xss

-- instance OEIS 71810 where
--   oeisIx = sum . map (oeisIx @10051)' . map sum .
--             tail . subsequences . flip take (oeis @40)

-- instance OEIS 71888 where
--   oeisIx 1 = 2
--   oeisIx n = head [m | m <- dropWhile (<= n) (oeis @5117), gcd m n > 1]

-- instance OEIS 71889 where
--   oeisIx n = gcd n $ (oeisIx @71888) n

-- instance OEIS 71890 where
--   oeisIx n = (oeisIx @71888) n - n

-- instance OEIS 71891 where
--   oeisIx n = (oeisIx @71890) n `div` (oeisIx @71889) n

-- instance OEIS 71892 where
--   oeisIx n = lcm n $ (oeisIx @71888) n

-- instance OEIS 71893 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @71891))

-- instance OEIS 71904 where
--   oeis = filter odd (oeis @2808)

-- instance OEIS 71931 where
--   oeis = filter f (oeis @2312) where
--      f x = 2 * gpf <= (oeisIx @6530) (gpf ^ 2 + 1) where gpf = (oeisIx @6530) x

-- instance OEIS 71954 where
--   oeis = 2 : 4 : zipWith (-)
--                  (map ((4 *) . pred) (tail (oeis @71954))) (oeis @71954)

-- instance OEIS 71974 where
--   oeisIx n = product $ zipWith (^) (oeisIx_row n) $
--      map (\e -> (1 - e `mod` 2) * e `div` 2) $ (rowT @124010) n

-- instance OEIS 71975 where
--   oeisIx n = product $ zipWith (^) (oeisIx_row n) $
--      map (\e -> (e `mod` 2) * (e + 1) `div` 2) $ (rowT @124010) n

-- instance OEIS 71977 where
--   oeis = tablList @71977
-- instance Table 71977 where
--   rowCol = rowCol_off @71977 @1 @1
--   rowT   = rowT_off   @71977 @1
--   tabl = f 1 [1..] where
--      f k xs = ys : f (k+1) (dropWhile (<= last ys) xs) where
--        ys  = take k $ filter ((== 1) . (gcd k)) xs

-- instance OEIS 72007 where
--   oeisIx n = (oeis @72007) !! n
--   oeis = 0 : f 1 0 [1..] where
--      f u v ws = g ws where
--        g (x:xs) = if abs (x - v) < u
--                      then g xs else x : f (u + 1) x (delete x ws)

-- instance OEIS 72010 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map f $ (rowT @27746) n where
--      f 2 = 2
--      f p = p + 2 * (2 - p `mod` 4)

-- instance OEIS 72046 where
--   oeisIx n = gcd (oeisIx n) (oeisIx n)

-- instance OEIS 72047 where
--   oeis = map (oeisIx @1221) $ (oeis @5117)

-- instance OEIS 72048 where
--   oeisIx = (2 ^) . (oeisIx @72047)

-- instance OEIS 72055 where
--   oeisIx = (+ 1) . (* 2) . (oeisIx @40)

-- instance OEIS 72057 where
--   oeisIx = (oeisIx @203) . (oeisIx @72055)

instance OEIS 72065 where
  oeis = filter ((`elem` [0,2,9,11]) . (`mod` 12)) [0..]

-- instance OEIS 72084 where
--   oeisIx = product . map (oeisIx @120) . (rowT @27746)

-- instance OEIS 72085 where
--   oeisIx = (oeisIx @72084) . (oeisIx @72084)

-- instance OEIS 72086 where
--   oeisIx n = fst $
--      until ((== 1) . snd) (\ (i, x) -> (i + 1, (oeisIx @72084) x)) (0, n)

-- instance OEIS 72087 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map (oeisIx @61712) $ (rowT @27746) n

-- instance OEIS 72103 where
--   import Data.Set (singleton, findMin, deleteMin, insert)
--   oeisIx n = (oeis @72103) !! (n - 1)
--   oeis = f 9 3 $ Set.singleton (4,2) where
--      f zz z s
--        | xx < zz   = xx : f zz z (Set.insert (x*xx, x) $ Set.deleteMin s)
--        | otherwise = zz : f (zz+2*z+1) (z+1) (Set.insert (z*zz, z) s)
--        where (xx, x) = Set.findMin s

-- instance OEIS 72137 where
--   oeisIx :: Int -> Int
--   oeisIx = genericLength . fst . spanCycle (abs . (oeisIx @56965)) where
--      spanCycle :: Eq a => (a -> a) -> a -> ([a],[a])
--      spanCycle f x = fromJust $ find (not . null . snd) $
--                                 zipWith (span . (/=)) xs $ inits xs
--                      where xs = iterate f x

-- instance OEIS 72182 where
--   (oeis, (oeis @72186)) = unzip wallisPairs
--     wallisPairs = [ (x, y) | (y, sy) <- tail ws,
--                             (x, sx) <- takeWhile ((< y) . fst) ws, sx == sy]
--                   where ws = zip [1..] $ map (oeisIx @203) $ tail (oeis @290)

-- instance OEIS 72186 where

-- instance OEIS 72202 where
--   oeis = [x | x <- [1..], (oeisIx @83025) x == (oeisIx @65339) x]

-- instance OEIS 72203 where
--   oeis = scanl1 (\x y -> x + 2*y - 1) (oeis @66829)

-- instance OEIS 72211 where
--   oeis = 1 : zipWith div (tail (oeis @217863)) (oeis @217863)

-- instance OEIS 72214 where
--   oeisIx = (oeisIx @41) . (oeisIx @45) . (+ 1)

-- instance OEIS 72219 where
--   oeisIx = (+ 1) . (* 2) . (oeisIx @33264) . subtract 1

-- instance OEIS 72221 where
--   oeis = 1 : 4 : (map (+ 2) $
--      zipWith (-) (map (* 6) $ tail (oeis @72221)) (oeis @72221))

-- instance OEIS 72229 where
--   oeis = [0, 0, 0, 0, 1, 2, 3, 4] ++ zipWith (+)
--                  (zipWith (-) (tail (oeis @72229)) (oeis @72229))
--                  (drop 7 (oeis @72229))

-- instance OEIS 72292 where
--   oeis = scanl (+) 0 $ tail (oeis @75802)

-- instance OEIS 72358 where
--   oeis = scanl1 (+) $
--      zipWith (*) (oeis @212793) $ map (1 -) (oeis @8966)

-- instance OEIS 72403 where
--   oeisIx n = (oeis @72404) !! (n - 1)
--   oeis = map denominator $
--                  scanl1 (-) $ map ((1 %) . (oeisIx @244)) $ (oeis @29837)

-- instance OEIS 72404 where
--   oeisIx n = (oeis @72404) !! (n - 1)
--   oeis = map denominator $
--                  scanl1 (-) $ map ((1 %) . (oeisIx @244)) $ (oeis @29837)

-- instance OEIS 72437 where
--   oeis = map (+ 1) $ elemIndices 0 (oeis @5091)

-- instance OEIS 72452 where
--   oeis = 0 : map (oeisIx @4086) (zipWith (+) (oeis @72452) [1..])

-- instance OEIS 72486 where
--   oeis = scanl1 (*) (oeis @20639)

-- instance OEIS 72499 where
--   oeisIx = product . (rowT @161906)

instance OEIS 72502 where
  oeis = f (S.singleton 9) $ drop 2 (oeis @1248) where
     f s (x:xs) = m : f (S.insert (2 * m) $ S.insert x s') xs where
                  (m,s') = S.deleteFindMin s

-- instance OEIS 72504 where
--   oeisIx = foldl1 lcm . (rowT @161906)

-- instance OEIS 72511 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @61357))

-- instance OEIS 72513 where
--   oeisIx n = product $ map (n -) $ (rowT @27751) n

-- instance OEIS 72541 where
--   oeisIx n = (oeis @72541) !! (n - 1)
--   oeis = concat $ transpose
--                  [map (+ 1) (oeis @23200), map (+ 5) (oeis @23200)]

-- instance OEIS 72543 where
--   oeis = [x | x <- [0..], (oeisIx @54055) x == (oeisIx @30) x]

-- instance OEIS 72544 where
--   oeis = [x | x <- [0..], (oeisIx @54054) x == (oeisIx @30) x]

-- instance OEIS 72547 where
--   oeisIx n = (oeisIx @108561) (2 * (n - 1)) (n - 1)

instance OEIS 72587 where
  oeis = tail $ filter (any even . (rowT @124010)) [1..]

instance OEIS 72588 where
  oeis = filter f [1..] where
     f x = any odd es && any even es  where es = (rowT @124010) x

-- instance OEIS 72591 where
--   oeisIx = foldl1 (.&.) . (rowT @27746)

-- instance OEIS 72593 where
--   oeisIx = foldl1 (.|.) . (rowT @27746)

-- instance OEIS 72594 where
--   oeisIx = foldl1 xor . (rowT @27746) :: Integer -> Integer

-- instance OEIS 72595 where
--   oeis = filter ((== 0) . (oeisIx @72594)) [1..]

-- instance OEIS 72596 where
--   oeis = filter ((== 0) . (oeisIx @10052)) (oeis @72595)

-- instance OEIS 72600 where
--   oeis = filter ((< 0) . (oeisIx @37861)) [0..]

-- instance OEIS 72601 where
--   oeis = filter ((<= 0) . (oeisIx @37861)) [0..]

-- instance OEIS 72602 where
--   oeis = filter ((>= 0) . (oeisIx @37861)) [1..]

-- instance OEIS 72603 where
--   oeis = filter ((> 0) . (oeisIx @37861)) [1..]

-- instance OEIS 72618 where
--   oeisIx n = (oeis @72618) !! (n - 1)
--   oeis = filter f [1 ..] where
--      f x = any (all ((== 1) . (oeisIx @10051)' . fi)) $
--            map cs [concat $ transpose [[2*x, 2*x-2 .. 2] , us] |
--                    us <- map (uncurry (++) . (uncurry $ flip (,))
--                               . flip splitAt [1, 3 .. 2 * x]) [1 .. x]]
--      cs zs = (head zs + last zs) : zipWith (+) zs (tail zs)

-- instance OEIS 72627 where
--   oeisIx = genericLength . filter ((== 1) . (oeisIx @10051) . (subtract 1)) . (rowT @27749)

-- instance OEIS 72649 where
--   oeis = f 1 where
--      f n = (replicate (fromInteger $ (oeisIx @45) n) n) ++ f (n+1)

-- instance OEIS 72701 where
--   oeisIx n = f (oeis @40) 1 n 0 where
--      f (p:ps) l nl x
--        | y > nl    = 0
--        | y < nl    = f ps (l + 1) (nl + n) y + f ps l nl x
--        | otherwise = if y `mod` l == 0 then 1 else 0
--        where y = x + p

-- instance OEIS 72750 where
--   oeis = scanl1 (+) $ map ((0 ^) . (`mod` 7)) (oeis @5117)

-- instance OEIS 72762 where
--   oeisIx n = foldl (\v d -> 2*v + d) 0 $ map (oeisIx @10051) [1..n]

-- instance OEIS 72774 where
--   import Data.Map (empty, findMin, deleteMin, insert)
--   import qualified Data.Map.Lazy as Map (null)
--   oeisIx n = (oeis @72774) !! (n - 1)
--   (oeis, (oeis @72775), (oeis @72776)) = unzip3 $
--      (1, 1, 1) : f (tail (oeis @5117)) empty where
--      f vs'@ (v:vs) m
--       | Map.null m || xx > v = (v, v, 1) :
--                                f vs (insert (v^2) (v, 2) m)
--       | otherwise = (xx, bx, ex) :
--                     f vs' (insert (bx*xx) (bx, ex+1) $ deleteMin m)
--       where (xx, (bx, ex)) = findMin m

-- instance OEIS 72775 where

-- instance OEIS 72776 where

-- instance OEIS 72777 where
--   import Data.Map (singleton, findMin, deleteMin, insert)
--   oeisIx n = (oeis @72777) !! (n - 1)
--   oeis = f 9 (drop 2 (oeis @5117)) (singleton 4 (2, 2)) where
--      f vv vs'@ (v:ws@ (w:_)) m
--       | xx < vv = xx : f vv vs' (insert (bx*xx) (bx, ex+1) $ deleteMin m)
--       | xx > vv = vv : f (w*w) ws (insert (v^3) (v, 3) m)
--       where (xx, (bx, ex)) = findMin m

-- instance OEIS 72779 where
--   oeisIx n = (oeisIx @1157) n + (oeisIx n) * (oeisIx n)

-- instance OEIS 72823 where
--   oeis = tail $ elemIndices 0 (oeis @73267)

-- instance OEIS 72873 where
--   import Data.Set (empty, fromList, deleteFindMin, union)
--   import qualified Data.Set as Set (null)
--   oeisIx n = (oeis @72873) !! (n - 1)
--   oeis = 1 : h empty [1] (oeis @51674) where
--      h s mcs xs'@ (x:xs)
--       | Set.null s || x < m = h (s `union` fromList (map (* x) mcs)) mcs xs
--       | otherwise = m : h (s' `union` fromList (map (* m) $ init (m:mcs)))
--                           (m:mcs) xs'
--       where (m, s') = deleteFindMin s

-- instance OEIS 72905 where
--   oeisIx n = head [k | k <- [n + 1 ..], (oeisIx @10052) (k * n) == 1]

-- instance OEIS 72911 where
--   oeisIx = product . map (oeisIx . fi) . (rowT @124010)

-- instance OEIS 72941 where
--   oeisIx n = product $ zipWith (^) ps $ map (max 1) es where
--               (ps, es) = unzip $ dropWhile ((== 0) . snd) $
--                          zip (oeis @40) $ (rowT @67255) n

-- instance OEIS 72965 where
--   oeisIx n = f 1 (oeisIx_row n) where
--      f y []      = y
--      f y [p]     = p * y
--      f y (2:ps)  = f (2 * y) ps
--      f y (3:5:_) = (oeisIx @72965) (n `div` 15)
--      f y (p:qs@ (q:ps)) | q == p + 2 = f y ps
--                        | otherwise  = f (p * y) qs

-- instance OEIS 72979 where
--   oeis = 1 : f 2 [1] where
--      f z xs = y : f (z + 1) (y : xs) where
--        y = sum $ zipWith (*) xs (map (gcd z) [z-1, z-2 ..])

instance OEIS 73015 where
  oeis = iterate (\x -> (x - 1) ^ 2) 3

-- instance OEIS 73034 where
--   oeis = filter (`elem` [2,3,5,7]) (oeis @33308)

-- instance OEIS 73046 where
--   oeisIx n = head $ dropWhile (== 0) $
--                      zipWith (*) prims $ map (oeisIx . (2*n -)) prims
--      where prims = takeWhile (<= n) (oeis @40)

-- instance OEIS 73093 where
--   oeisIx = genericLength . (rowT @210208)

-- instance OEIS 73101 where
--   oeisIx n = genericLength [ (x,y) |
--      x <- [n `div` 4 + 1 .. 3 * n `div` 4],   let y' = recip $ 4%n - 1%x,
--      y <- [floor y' + 1 .. floor (2*y') + 1], let z' = recip $ 4%n - 1%x - 1%y,
--      denominator z' == 1 && numerator z' > y && y > x]

-- instance OEIS 73121 where
--   oeisIx n = (oeisIx @53644) n * (fi n + 2 * (oeisIx @53645) n)

-- instance OEIS 73138 where
--   oeisIx n = (oeisIx @38573) n * (oeisIx @80100) n

-- instance OEIS 73180 where
--   oeisIx n = genericLength [x | x <- (rowT @27750) n, x <= (oeisIx @7947) n]

-- instance OEIS 73184 where
--   oeisIx = sum . map (oeisIx @212793) . (rowT @27750)

-- instance OEIS 73185 where
--   oeisIx = sum . filter ((== 1) . (oeisIx @212793)) . (rowT @27750)

-- instance OEIS 73267 where
--   oeisIx n = sum $ zipWith (*) (oeis @209229) $ reverse $ take n (oeis @36987)

-- instance OEIS 73311 where
--   oeisIx = sum . map (oeisIx @8966) . (rowT @38566)

-- instance OEIS 73334 where
--   oeisIx 0 = 3
--   oeisIx n = (oeisIx @45) $ (oeisIx @5811) n + 4

-- instance OEIS 73353 where
--   oeisIx n = n + (oeisIx @7947) n

-- instance OEIS 73364 where
--   oeisIx n = genericLength $ filter (all isprime)
--                        $ map (zipWith (+) [1..n]) (permutations [1..n])
--      where isprime n = (oeisIx @10051) n == 1

-- instance OEIS 73395 where
--   oeisIx n = (oeisIx @8472) n * (oeisIx @1414) n

-- instance OEIS 73445 where
--   oeis = zipWith (-) (tail (oeis @73783)) (oeis @73783)

-- instance OEIS 73481 where
--   oeisIx = (oeisIx @20639) . (oeisIx @5117)

-- instance OEIS 73482 where
--   oeisIx = (oeisIx @6530) . (oeisIx @5117)

-- instance OEIS 73483 where
--   oeisIx n = product $ filter ((> 0) . (mod m)) $
--      dropWhile (<= (oeisIx @20639) m) $ takeWhile (<= (oeisIx @6530) m) (oeis @40)
--      where m = (oeisIx @5117) n

-- instance OEIS 73485 where
--   oeis = filter ((== 1) . (oeisIx @192280)) [1..]

-- instance OEIS 73490 where
--   oeisIx 1 = 0
--   oeisIx n = genericLength $ filter (> 1) $ zipWith (-) (tail ips) ips
--      where ips = map (oeisIx @49084) $ (rowT @27748) n

-- instance OEIS 73491 where
--   oeis = filter ((== 0) . (oeisIx @73490)) [1..]

-- instance OEIS 73492 where
--   oeis = filter ((> 0) . (oeisIx @73490)) [1..]

-- instance OEIS 73493 where
--   oeis = filter ((== 1) . (oeisIx @73490)) [1..]

-- instance OEIS 73494 where
--   oeis = filter ((== 2) . (oeisIx @73490)) [1..]

-- instance OEIS 73495 where
--   oeis = filter ((== 3) . (oeisIx @73490)) [1..]

-- instance OEIS 73533 where
--   oeisIx n = (oeis @73533) !! (n - 1)
--   oeis = f 1 3 1 where
--      f n p3 x = numerator (y * fi p3) : f (n + 1) (p3 * 3) y
--                 where y = z - fi (floor z); z = 4%3 * x

-- instance OEIS 73576 where
--   oeisIx = p (oeis @5117) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 73579 where
--   oeisIx n = p * (2 - p `mod` 4) where p = (oeisIx @40) n

-- instance OEIS 73601 where
--   oeisIx n = 2 + length
--      (takeWhile ((oeisIx n /=) . (oeisIx @30)) $ iterate (* n) (n^2))

-- instance OEIS 73642 where
--   oeisIx = sum . zipWith (*) [0..] . (rowT @30308)

-- instance OEIS 73646 where
--   oeisIx :: Integer -> Integer
--   oeisIx = read . concat . sort . map show . (rowT @27746)

-- instance OEIS 73703 where
--   oeisIx n = head [p | p <- (oeis @40), (oeisIx @10051) (p + 2 * (oeisIx @40) n) == 1]

-- instance OEIS 73707 where
--   oeis = 1 : f 0 0 [1] where
--      f x y zs = z : f (x + y) (1 - y) (z:zs) where
--        z = sum $ zipWith (*) hzs (reverse hzs) where hzs = drop x zs

-- instance OEIS 73708 where
--   oeis = conv (oeis @73707) [] where
--      conv (v:vs) ws = (sum $ zipWith (*) ws' $ reverse ws') : conv vs ws'
--                       where ws' = v : ws

-- instance OEIS 73709 where
--   oeis = 1 : zipWith (-) (tail (oeis @73708)) (oeis @73708)
--   --- _Reinhard Zumkeller_, Jun 13 2013

-- instance OEIS 73710 where
--   oeis = conv (oeis @73709) [] where
--      conv (v:vs) ws = (sum $ zipWith (*) ws' $ reverse ws') : conv vs ws'
--                       where ws' = v : ws

-- instance OEIS 73711 where
--   oeisIx n = (oeis @73711) !! n
--   oeis = 1 :
--   (tail $ concat $ transpose [oeis, (oeis @73712)])

-- instance OEIS 73712 where
--   oeis = map (g (oeis @73711)) [1..] where
--   g xs k = sum $ zipWith (*) xs $ reverse $ take k xs

-- instance OEIS 73729 where
--   oeisIx n = 10 * (oeisIx @30) n + (oeisIx @10879) n

-- instance OEIS 73730 where
--   oeisIx n = 10 * (oeisIx @54055) n + (oeisIx @54054) n

-- instance OEIS 73734 where
--   oeis = zipWith gcd (oeis @64413) $ tail (oeis @64413)

-- instance OEIS 73736 where
--   oeis = scanl1 (+) (oeis @73737)

-- instance OEIS 73737 where
--   oeis =
--      1 : 1 : zipWith (-) (oeis @65091)
--                          (zipWith (+) (oeis @73737) $ tail (oeis @73737))

-- instance OEIS 73738 where
--   oeis = tail zs where
--      zs = 1 : 1 : zipWith (+) (oeis @6005) zs

-- instance OEIS 73739 where
--   oeisIx n = (oeis @73739) !! n
--   oeis = concat $ transpose [1 : 1 : repeat 0, tail (oeis @36467)]

-- instance OEIS 73740 where
--   oeis = tail $ f (oeis @73739) [] where
--      f (x:xs) ys = (sum $ zipWith (*) ys (oeis @73739)) : f xs (x : ys)

instance OEIS 73776 where
  oeis = 1 : f [1] where
     f xs = y : f (y : xs) where y = sum $ zipWith (*) xs ms
     ms = map negate $ tail (oeis @8683)

-- instance OEIS 73777 where
--   oeis = 1 : f [1] where
--      f xs = y : f (y : xs) where y = sum $ zipWith (*) xs ms'
--      ms' = map negate $ tail (oeis @68341)

-- instance OEIS 73783 where
--   oeis = zipWith (-) (tail (oeis @2808)) (oeis @2808)

-- instance OEIS 73785 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @73785) n' * 10 + m where
--      (n', m) = if r < 0 then (q + 1, r + 3) else (q, r)
--                where (q, r) = quotRem n (negate 3)

-- instance OEIS 73789 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @73789) n' * 10 + m where
--      (n', m) = if r < 0 then (q + 1, r + 8) else (q, r)
--                where (q, r) = quotRem n (negate 8)

-- instance OEIS 73846 where
--   oeisIx n = (oeis @73846) !! (n - 1)
--   oeis = concat $ transpose [oeis, (oeis @40)]

-- instance OEIS 73890 where
--   oeisIx n = numerator $ n % (oeisIx @196) n

-- instance OEIS 73941 where
--   oeis = 1 : f [1] where
--      f xs = x' : f (x':xs) where x' = (1 + sum xs) `div` 2

instance OEIS 74066 where
  oeis = 1 : xs where xs = 4 : 3 : 2 : map (+ 3) xs

instance OEIS 74067 where
  oeis = 1 : 2 : xs where xs = 7 : 6 : 5 : 4 : 3 : map (+ 5) xs

-- instance OEIS 74068 where
--   oeis = 1 : 2 : 3 : xs where
--      xs = 10 : 9 : 8 : 7 : 6 : 5 : 4 : map (+ 7) xs

-- instance OEIS 74206 where
--   oeisIx n | n <= 1 = n
--   | otherwise = 1 + (sum $ map (oeisIx . (div n)) $
--   tail $ (rowT @27751) n)

-- instance OEIS 74235 where
--   oeis = filter ((== 1) . (oeisIx @227481)) [1..]

-- instance OEIS 74294 where
--   oeisIx n = (oeis @74294) !! (n - 1)
--   oeis = f $ inits [1..] where
--      f (xs:_:xss) = xs ++ f xss

-- instance OEIS 74394 where
--   oeis = 1 : 2 : 3 : zipWith (-)
--      (tail $ zipWith (*) (tail (oeis @74394)) (oeis @74394)) (oeis @74394)

-- instance OEIS 74480 where
--   import Data.Set (Set, singleton, delete, findMin, deleteFindMin, insert)
--   oeisIx n = (oeis @74480) !! (n - 1)
--   oeis = multClosure (oeis @37074) where
--     multClosure []     = [1]
--     multClosure (b:bs) = 1:h [b] (singleton b) bs where
--      h cs s []    = m:h (m:cs) (foldl (flip insert) s' $ map (*m) cs) []
--       where (m, s') = deleteFindMin s
--      h cs s xs'@ (x:xs)
--       | m < x     = m:h (m:cs) (foldl (flip insert) s' $ map (*m) cs) xs'
--       | otherwise = x:h (x:cs) (foldl (flip insert) s  $ map (*x) (x:cs)) xs
--       where (m, s') = deleteFindMin s

-- instance OEIS 74583 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @74583) !! (n - 1)
--   oeis = 1 : f (singleton 2) (oeis @40) where
--     f s ps'@ (p:p':ps)
--       | m == p      = p : f (insert (p*p) $ insert p' s') (p':ps)
--       | m < spf^spf = m : f (insert (m*spf) s') ps'
--       | otherwise   = m : f s' ps'
--         where spf = (oeisIx @20639) m
--               (m, s') = deleteFindMin s
--   -- Simpler version:
--   oeis = map (oeisIx @961) (oeis @192188)

-- instance OEIS 74677 where
--   oeis = 0 : 1 : 1 : 1 : zipWith (+) (oeis @74677)
--      (zipWith (+) (tail (oeis @74677)) (drop 3 (oeis @74677)))

-- instance OEIS 74695 where
--   oeisIx n = gcd n $ (oeisIx @48760) n

-- instance OEIS 74721 where
--   oeis = f 0 $ map toInteger (oeis @33308) where
--      f c ds'@ (d:ds) | (oeisIx @10051)'' c == 1 = c : f 0 ds'
--                     | otherwise = f (10 * c + d) ds

-- instance OEIS 74819 where
--   oeis = filter ((== 0) . (oeisIx @92410)) [1..]

-- instance OEIS 74829 where
--   oeis = tablList @74829
-- instance Table 74829 where
--   rowCol = rowCol_off @74829 @1 @1
--   rowT   = rowT_off   @74829 @1
--   tabl = map fst $ iterate
--      (\ (u:_, vs) -> (vs, zipWith (+) ([u] ++ vs) (vs ++ [u]))) ([1], [1,1])

-- instance OEIS 74909 where
--   oeis = tablList @74909
-- instance Table 74909 where
--   rowT n = (tabl @74909) !! n
--   tabl = iterate
--      (\row -> zipWith (+) ([0] ++ row) (row ++ [1])) [1]

-- instance OEIS 74911 where
--   oeis = tablList @74911
-- instance Table 74911 where
--   rowCol = rowCol_off @74911 @1 @1
--   rowT   = rowT_off   @74911 @1
--   tabl = map fst $ iterate
--      (\ (vs, w:ws) -> (zipWith (+) ([w] ++ vs) (vs ++ [w]), ws))
--      ([1], tail (oeis @1563))

-- instance OEIS 74940 where
--   oeis = filter ((== 0) . (oeisIx @39966)) [0..]

-- instance OEIS 74963 where
--   oeisIx n = maximum [oeisIx (x*y) | x <- [1..n], y <- [x..n]]

-- instance OEIS 74964 where
--   oeis = filter (\x -> (oeisIx @74963) x == (oeisIx @65764) x) [1..]

-- instance OEIS 74976 where
--   oeis = map (round . recip) $ zipWith (-) (tail rs) rs
--                  where rs = map (sqrt . fi) (oeis @40)

-- instance OEIS 74985 where
--   oeisIx = (oeisIx @290) . (oeisIx @1358)

-- instance OEIS 74989 where
--   oeisIx 0 = 0
--   oeisIx n = min (n - last xs) (head ys - n) where
--      (xs,ys) = span (< n) (oeis @578)

-- instance OEIS 75075 where
--   oeisIx n = (oeis @75075) !! (n - 1)
--   oeis = 1 : 2 : f 1 2 [3..] where
--     f z z' xs = g xs where g (u:us) =
--       if (z * u) `mod` z' > 0 then g us else u : f z' u (delete u xs)

-- instance OEIS 75090 where
--   oeis = filter even (oeis @1597)

-- instance OEIS 75093 where
--   oeis = f (oeis @40) where
--      f (p:ps@ (q:r:_)) =
--        if sort (show p) == sort (show q) && sort (show q) == sort (show r)
--           then p : f ps else f ps

-- instance OEIS 75104 where
--   oeisIx n = gcd n $ (oeisIx @523) n

-- instance OEIS 75105 where
--   oeisIx n = numerator $ n % (oeisIx @523) n

-- instance OEIS 75106 where
--   oeisIx n = denominator $ n % (oeisIx @523) n

-- instance OEIS 75109 where
--   oeis = filter odd (oeis @1597)

-- instance OEIS 75110 where
--   oeisIx (fi->n) = fi . read $ show (oeisIx n) ++ show n

-- instance OEIS 75119 where
--   oeisIx n = denominator $ n % (oeisIx @196) n

-- instance OEIS 75157 where
--   oeisIx 0 = 0
--   oeisIx n = product (zipWith (^) (oeis @40) rs') - 1 where
--      rs' = reverse $ r : map (subtract 1) rs
--      (r:rs) = reverse $ map length $ group $ (rowT @30308) n

-- instance OEIS 75158 where
--   oeisIx = fromJust . (`elemIndex` (oeis @75157))

-- instance OEIS 75177 where
--   oeis = map (fi . (+ 1)) $ elemIndices 1 $ map (oeisIx @10051 . oeisIx @7953) (oeis @40)

-- instance OEIS 75180 where
--   oeis = map (denominator . sum) $ zipWith (zipWith (%))
--      (zipWith (map . (*)) (oeis @142) (tabf @242179)) (tabf @106831)

-- instance OEIS 75188 where
--   oeisIx n = (oeis @75188) !! (n - 1)
--   oeis = f 1 [] where
--      f x hs = (length $ filter ((== 1) . (oeisIx @10051)') (map numerator hs')) :
--               f (x + 1) hs' where hs' = hs ++ map (+ recip x) (0 : hs)

-- instance OEIS 75189 where
--   import Data.Set (Set, empty, fromList, toList, union, size)
--   oeisIx n = (oeis @75189) !! (n - 1)
--   oeis = f 1 empty empty where
--      f x s s1 = size s1' : f (x + 1) (s `union` fromList hs) s1' where
--        s1' = s1 `union` fromList
--              (filter ((== 1) . (oeisIx @10051)') $ map numerator hs)
--        hs = map (+ 1 % x) $ 0 : toList s

-- instance OEIS 75193 where
--   oeis = 1 : -3 : zipWith (-) (oeis @75193) (tail (oeis @75193))

-- instance OEIS 75226 where
--   oeisIx n = (oeis @75226) !! (n - 1)
--   oeis = f 2 [recip 1] where
--      f x hs = (maximum $ filter ((== 1) . (oeisIx @10051)') (map numerator hs')) :
--               f (x + 1) hs' where hs' = hs ++ map (+ recip x) hs

-- instance OEIS 75227 where
--   import Data.Set (Set, empty, fromList, toList, union)
--   oeisIx n = (oeis @75227) !! (n - 1)
--   oeis = f 1 empty (oeis @65091) where
--      f x s ps = head qs : f (x + 1) (s `union` fromList hs) qs where
--        qs = foldl (flip del)
--             ps $ filter ((== 1) . (oeisIx @10051)') $ map numerator hs
--        hs = map (+ 1 % x) $ 0 : toList s
--      del u vs'@ (v:vs) = case compare u v
--                         of LT -> vs'; EQ -> vs; GT -> v : del u vs

-- instance OEIS 75253 where
--   oeis = iterate (oeisIx @55944) 77

-- instance OEIS 75254 where
--   oeisIx n = n + (oeisIx @1414) n

-- instance OEIS 75268 where
--   oeis = iterate (oeisIx @55944) 442

instance OEIS 75311 where
  oeis = 1 : f 2 [1] where
     f x ys = if (oeisIx @120) x `elem` ys then f (x + 1) ys
                                     else x : f (x + 1) (x : ys)

-- instance OEIS 75321 where
--   oeisIx = (oeisIx @75323) . subtract 1 . (* 2)

-- instance OEIS 75322 where
--   oeisIx = (oeisIx @75323) . (* 2)

-- instance OEIS 75323 where
--   oeisIx n = (oeis @75323) !! (n - 1)
--   oeis = f 1 []  $ tail (oeis @40) where
--      f k ys qs = g qs where
--        g (p:ps) | (oeisIx @10051)' pk == 0 || pk `elem` ys = g ps
--                 | otherwise = p : pk : f (k + 1) (p:pk:ys) (qs \\ [p, pk])
--                 where pk = p + 2 * k

-- instance OEIS 75326 where
--   oeisIx n = (oeis @75326) !! n
--   oeis = 0 : f [1..] where
--      f ws@ (u:v:_) = y : f (ws \\ [u, v, y]) where y = u + v

-- instance OEIS 75345 where
--   oeisIx = sum . (rowT @75348)

-- instance OEIS 75346 where
--   oeisIx = head . (rowT @75348)

-- instance OEIS 75347 where
--   oeisIx = last . (rowT @75348)

-- instance OEIS 75348 where
--   oeis = tablList @75348
--   rowCol = rowCol_off @75348 @1 @1
--   rowT   = rowT_off   @75348 @1
--   tabl = f 0 [1..] where
--      f x zs = (us ++ [y]) : f (x + 1) (zs \\ (y : us)) where
--        y = g vs
--        g (w:ws) = if (oeisIx @10051)' (sum us + w) == 1 then w else g ws
--        (us, vs) = splitAt x zs
--   oeis = concat (tabl @75348)

-- instance OEIS 75362 where
--   oeis = tablList @75362
-- instance Table 75362 where
--   rowCol = rowCol_off @75362 @1 @1
--   rowT   = rowT_off   @75362 @1
--   tabl = zipWith (zipWith (*)) (tabl @2260) (tabl @2024)

-- instance OEIS 75366 where
--   oeis = 1 : f 2 1 (oeis @40) where
--      f x pp ps'@ (p:ps)
--        | p <= x    = f x (p * pp) ps
--        | otherwise = g $ dropWhile (< pp) $ scanl1 (*) [x+1, x+2 ..]
--        where g (z:zs) | mod z pp == 0 = z : f (x + 1) pp ps'
--                       | otherwise     = g zs

-- instance OEIS 75369 where
--   oeisIx = (^ 2) . (oeisIx @14574)

-- instance OEIS 75383 where
--   oeis = tablList @75383
--   rowCol = rowCol_off @75383 @1 @1
--   rowT   = rowT_off   @75383 @1
--   tabl = f 1 [1..] where
--      f x zs = ys : f (x + 1) (zs \\ ys) where
--               ys = take x $ filter ((== 0) . (`mod` x)) zs
--   oeis = concat (tabl @75383)

-- instance OEIS 75384 where
--   oeisIx = head . (rowT @75383)

-- instance OEIS 75386 where
--   oeisIx = sum . (rowT @75383)

-- instance OEIS 75387 where
--   oeisIx = product . (rowT @75383)

-- instance OEIS 75388 where
--   oeisIx n = (oeisIx @75384) n `div` n

-- instance OEIS 75390 where
--   oeisIx n = (oeisIx @75386) n `div` n

-- instance OEIS 75425 where
--   oeisIx n = snd $ until ((== 1) . fst)
--                           (\ (x, i) -> (oeisIx x, i + 1)) (n, 0)

-- instance OEIS 75426 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @75425))

-- instance OEIS 75427 where
--   oeis = 1 : f 1 1 where
--      f x y = z : f (x + 1) z where z = (1 + x `mod` 2) * y + 1 - x `mod` 2

-- instance OEIS 75432 where
--   oeis = f [2, 4 ..] where
--      f (u:vs@ (v:ws)) | (oeisIx @8966) v == 1 = f ws
--                      | (oeisIx @8966) u == 1 = f vs
--                      | (oeisIx @10051)' (u + 1) == 0 = f vs
--                      | otherwise            = (u + 1) : f vs

-- instance OEIS 75437 where
--   oeis = tablList @75437
-- instance Table 75437 where
--   rowCol n k = (tabf @75437) !! n !! k
--   rowT n = (tabf @75437) !! n
--   tabf = iterate rule110 [1] where
--      rule110 row = f ([0,0] ++ row ++ [0,0]) where
--          f [_,_]          = []
--          f (_:ws@ (0:0:_)) = 0 : f ws
--          f (1:ws@ (1:1:_)) = 0 : f ws
--          f (_:ws@ (_:_:_)) = 1 : f ws

instance OEIS 75517 where
  oeis = [0..9] ++ f 1 [0..9] where
     f x ys = if (oeisIx @7953) x `elem` ys then f (x + 1) ys
                                     else x : f (x + 1) (x : ys)

-- instance OEIS 75518 where
--   oeisIx = (`div` 4) . (oeisIx @40)

-- instance OEIS 75520 where
--   oeis = zipWith (+) (oeis @1749) (oeis @39702)

-- instance OEIS 75521 where
--   oeis = map (oeisIx @40) $ filter ((== 1) . (oeisIx @10051)' . (oeisIx @75520)) [1..]

-- instance OEIS 75524 where
--   oeis = filter ((== 0) . (oeisIx @10051)') (oeis @75520)

-- instance OEIS 75540 where
--   oeis = map fst $ filter ((== 0) . snd) $
--      zipWith3 (\x y z -> divMod (x + y + z) 3)
--               (oeis @40) (tail (oeis @40)) (drop 2 (oeis @40))

-- instance OEIS 75677 where
--   oeisIx = (oeisIx @265) . subtract 2 . (* 6)

-- instance OEIS 75680 where
--   oeisIx n = snd $ until ((== 1) . fst)
--               (\ (x, i) -> (oeisIx (3 * x + 1), i + 1)) (2 * n - 1, 0)

-- instance OEIS 75802 where
--   oeisIx 1 = 1
--   oeisIx n = signum $ (oeisIx @52409) n - 1

-- instance OEIS 75877 where
--   oeisIx n = if n < 10 then n else (oeisIx @75877) (n `div` 10) ^ (n `mod` 10)

-- instance OEIS 76039 where
--   oeis = f 1 1 where
--      f n x = x' : f (n+1) x' where
--              x' = (if x < n then (*) else div) x n

-- instance OEIS 76050 where
--   oeis = 2 : f [2] where
--      f xs = (drop (length xs) xs') ++ (f xs') where
--        xs' = concatMap ((enumFromTo 2) . (+ 1)) xs

-- instance OEIS 76052 where
--   oeis = scanl1 (+) $ map (oeisIx @6460) [1..]

-- instance OEIS 76132 where
--   oeis = 1 : f [1] where
--      f xs = y : f (y : xs) where y = sum $ zipWith (^) xs [1..]

-- instance OEIS 76191 where
--   oeis = zipWith (-) (tail (oeis @1222)) (oeis @1222)

-- instance OEIS 76217 where
--   oeis = 1 : zipWith (+) (oeis @76217)
--      (zipWith (*) [2..] $ map (oeisIx @57427) $ zipWith (-) [2..] (oeis @76217))

-- instance OEIS 76259 where
--   oeis = zipWith (-) (tail (oeis @5117)) (oeis @5117)

-- instance OEIS 76271 where
--   oeis = iterate (oeisIx @70229) 1

instance OEIS 76309 where
  oeisIx n =  n' - 2 * m where (n', m) = divMod n 10

instance OEIS 76310 where
  oeisIx n =  n' + 4 * m where (n', m) = divMod n 10

instance OEIS 76311 where
  oeisIx n =  n' - 5 * m where (n', m) = divMod n 10

instance OEIS 76312 where
  oeisIx n =  n' + 2 * m where (n', m) = divMod n 10

instance OEIS 76313 where
  oeisIx = uncurry (-) . flip divMod 10

instance OEIS 76314 where
  oeisIx = uncurry (+) . flip divMod 10

-- instance OEIS 76338 where
--   oeisIx n = (+ 1) . (* 512)
--   oeis = [1,513..]

-- instance OEIS 76339 where
--   oeis = filter ((== 1) . (oeisIx @10051)) [1,513..]

-- instance OEIS 76396 where
--   oeisIx = (oeisIx @20639) . (oeisIx @25478)

-- instance OEIS 76397 where
--   oeisIx = (oeisIx @6530) . (oeisIx @25478)

-- instance OEIS 76398 where
--   oeisIx = (oeisIx @1221) . (oeisIx @25478)

-- instance OEIS 76399 where
--   oeisIx n = (oeisIx @1222) (oeisIx n) * (oeisIx @25479) n

-- instance OEIS 76403 where
--   oeisIx = (oeisIx @7947) . (oeisIx @25478)

-- instance OEIS 76404 where
--   oeisIx = (`mod` 2) . (oeisIx @1597)

-- instance OEIS 76405 where
--   oeis = 1 : f (tail $ zip (oeis @1597) (oeis @25478)) where
--      f ((p, r) : us) = g us where
--        g ((q, r') : vs) = if r' == r then q : f us else g vs

-- instance OEIS 76446 where
--   oeis = zipWith (-) (tail (oeis @1694)) (oeis @1694)

instance OEIS 76467 where
  oeis = 1 : filter ((> 2) . foldl1 gcd . (rowT @124010)) [2..]

-- instance OEIS 76468 where
--   import qualified Data.Set as Set (null)
--   import Data.Set (empty, insert, deleteFindMin)
--   oeisIx n = (oeis @76468) !! (n - 1)
--   oeis = 1 : f [2..] empty where
--      f xs'@ (x:xs) s | Set.null s || m > x ^ 4 = f xs $ insert (x ^ 4, x) s
--                     | m == x ^ 4  = f xs s
--                     | otherwise = m : f xs' (insert (m * b, b) s')
--                     where ((m, b), s') = deleteFindMin s

-- instance OEIS 76478 where
--   oeisIx n = (oeis @76478) !! n
--   oeis = concat $ tail $ map (tail . reverse . unfoldr
--      (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2 )) [1..]

-- instance OEIS 76479 where
--   oeisIx = (oeisIx @8683) . (oeisIx @7947)

-- instance OEIS 76489 where
--   oeisIx n = (oeis @76489) !! n
--   oeis = map (length . nub) $
--                  zipWith intersect (tail (tabf @31298)) (tabf @31298)

-- instance OEIS 76490 where
--   oeisIx n = (oeis @76490) !! n
--   oeis = map (length . nub) $
--      zipWith (intersect `on` show) (tail (oeis @40)) (oeis @40)

instance OEIS 76493 where
  oeisIx n = genericLength $ (intersect `on` nub . show . fi) n (n^2)

-- instance OEIS 76566 where
--   oeisIx = (oeisIx @6530) . (* 3) . (+ 1)

-- instance OEIS 76627 where
--   oeisIx n = (oeisIx @5) n * (oeisIx @49820) n

-- instance OEIS 76641 where
--   oeisIx = (oeisIx @4086) . (oeisIx @67251)

-- instance OEIS 76644 where
--   oeis = scanl1 (+) (oeis @122196)

-- instance OEIS 76654 where
--   oeisIx n = (oeis @76654) !! (n - 1)
--   oeis = f (oeis @67251) 1 where
--     f xs z = g xs where
--       g (y:ys) = if (oeisIx @30) y == mod z 10 then y : f (delete y xs) y else g ys

-- instance OEIS 76805 where
--   oeisIx n = (oeis @76805) !! (n - 1)
--   oeis = filter (not . ("13" `isInfixOf`) . show) (oeis @40)

-- instance OEIS 76845 where
--   oeisIx n = head [k | k <- [1..], (oeisIx @10051)'' (n ^ k + n - 1) == 1]

-- instance OEIS 76846 where
--   oeisIx n = n ^ (oeisIx n) + n - 1

-- instance OEIS 76941 where
--   oeisIx n = 2 ^ (oeisIx n) * 3 ^ (oeisIx n)

-- instance OEIS 76948 where
--   oeisIx 1 = 1
--   oeisIx n = if null qs then 0 else head qs
--               where qs = filter ((> 0) . (oeisIx @37213) . subtract 1 . (* n)) [1..n]

-- instance OEIS 76974 where
--   oeis = 2 : s [3, 5 ..] where
--      s (x:xs) = x : s [z | z <- xs, mod z x /= 2]

-- instance OEIS 77039 where
--   oeis = scanl1 (+) (oeis @73579)

-- instance OEIS 77040 where
--   oeisIx n = (oeis @77040) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ findIndices (<= 0) $
--      zipWith (\s p -> abs s - p) (oeis @77039) (oeis @40)

-- instance OEIS 77041 where
--   oeisIx n = (oeis @77041) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ findIndices (> 0) $
--      zipWith (\s p -> abs s - p) (oeis @77039) (oeis @40)

-- instance OEIS 77043 where
--   oeis = scanl (+) 0 (oeis @1651)

-- instance OEIS 77063 where
--   oeisIx = (oeisIx @7947) . (oeisIx @6093)

-- instance OEIS 77065 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (`div` 2)) (oeis @6093)

-- instance OEIS 77066 where
--   oeisIx = (oeisIx @7947) . (oeisIx @8864)

-- instance OEIS 77068 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (`div` 2)) (oeis @8864)

-- instance OEIS 77076 where
--   oeis = iterate (oeisIx @55944) 537

-- instance OEIS 77077 where
--   oeis = iterate (oeisIx @55944) 775

-- instance OEIS 77221 where
--   oeis = scanl (+) 0 (oeis @47522)

-- instance OEIS 77223 where
--   oeis = 1 : g 1 [2..]
--     where
--       isOddSquarefree m = odd m && (oeisIx @8966) m == 1
--       g i xs = x : g x (delete x xs)
--         where
--           x = (fromJust $ find isOddSquarefree $ map (+ i))

-- instance OEIS 77267 where
--   oeisIx n = (oeisIx @79978) n + if n < 3 then 0 else (oeisIx @77267) (n `div` 3)

instance OEIS 77436 where
  oeis = map fi $ elemIndices 0
     $ zipWith ((-) `on` (oeisIx @120)) [0..] (oeis @290)

-- instance OEIS 77477 where
--   oeisIx n = (oeis @77477) !! (n - 1)
--   oeis = f [1..] where
--      f (x:xs) = x : f (delete (2*x + 1) $ delete (3*x + 1) xs)

-- instance OEIS 77495 where
--   oeisIx n = fromJust $ elemIndex n $ map (oeisIx @7953) (oeis @8590)
--   oeis = map (oeisIx @77495) [0..]

-- instance OEIS 77558 where
--   oeis = tablList @77558
-- instance Table 77558 where
--   rowCol n k = (rowT @77558) n !! (k-1)
--   rowT n = n : genericTake (n - 1)
--                       (filter ((== (oeisIx @46523) n) . (oeisIx @46523)) [n + 1 ..])
--   tabf = map (rowT @77558) [1..]

-- instance OEIS 77581 where
--   oeis = tablList @77581
-- instance Table 77581 where
--   rowCol = rowCol_off @77581 @1 @1
--   rowT   = rowT_off   @77581 @1
--   tabl = map (\x -> take x [z | z <- [1..], gcd x z == 1]) [1..]

-- instance OEIS 77582 where
--   oeisIx = sum . (rowT @77581)

-- instance OEIS 77609 where
--   oeis = tablList @77609
-- instance Table 77609 where
--   rowCol n k = (rowT @77609) n !! (k-1)
--   rowT n = filter
--      (\d -> d == 1 || null (oeisIx_row d \\ (rowT @213925) n)) $ (rowT @27750) n
--   tabf = map (rowT @77609) [1..]

-- instance OEIS 77610 where
--   oeis = tablList @77610
-- instance Table 77610 where
--   rowCol n k = (rowT @77610) n !! k
--   rowT n = [d | d <- [1..n], let (n',m) = divMod n d,
--                        m == 0, gcd d n' == 1]
--   tabf = map (rowT @77610) [1..]

-- instance OEIS 77623 where
--   oeis = 1 : 2 : 4 : zipWith3 (\u v w -> abs (w - v - u))
--                  (oeis @77623) (tail (oeis @77623)) (drop 2 (oeis @77623))

-- instance OEIS 77653 where
--   oeis = 1 : 2 : 2 : zipWith3 (\u v w -> abs (w - v - u))
--                  (oeis @77653) (tail (oeis @77653)) (drop 2 (oeis @77653))

-- instance OEIS 77664 where
--   oeis = tablList @77664
-- instance Table 77664 where
--   rowCol = rowCol_off @77664 @1 @1
--   rowT   = rowT_off   @77664 @1
--   tabl = map (\x -> take x $ filter ((== 1). gcd x) [x + 1 ..]) [1..]

-- instance OEIS 77665 where
--   oeisIx = last . (rowT @77664)

-- instance OEIS 77666 where
--   oeisIx = sum . (rowT @77664)

-- instance OEIS 77800 where
--   oeis = concat $ zipWith (\p q -> if p == q+2 then [q,p] else [])
--                                   (tail (oeis @40)) (oeis @40)

-- instance OEIS 77813 where
--   oeis = filter ((== 1) . (oeisIx @8966)) $ tail $
--      map ((foldr (\d v -> v * 10 + d) 0) . map fi) (tabf @30308)

-- instance OEIS 77854 where
--   oeisIx n = (oeis @77854) !! n
--   oeis = scanl1 xor $ tail (oeis @975) :: [Integer]

-- instance OEIS 77957 where
--   oeisIx = sum . (rowT @204293)

-- instance OEIS 78012 where
--   oeis = 1 : 0 : 0 : 1 : zipWith (+) (oeis @78012)
--      (zipWith (+) (tail (oeis @78012)) (drop 2 (oeis @78012)))

-- instance OEIS 78057 where
--   oeisIx = sum . (rowT @35607)

-- instance OEIS 78065 where
--   oeis = 1 : zipWith (*) (cycle [-1, 1])
--      (zipWith (+) (map (* 2) (oeis @5251)) (map (* 3) $ drop 2 (oeis @5251)))

-- instance OEIS 78125 where
--   import Data.MemoCombinators (memo2, list, integral)
--   oeisIx n = (oeis @78125) !! n
--   oeis = f [1] where
--      f xs = (p' xs $ last xs) : f (1 : map (* 3) xs)
--      p' = memo2 (list integral) integral p
--      p _ 0 = 1; p [] _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p' ks' (m - k) + p' ks m

-- instance OEIS 78134 where
--   oeisIx = p $ drop 2 (oeis @290) where
--      p _          0 = 1
--      p ks'@ (k:ks) x = if x < k then 0 else p ks' (x - k) + p ks x

-- instance OEIS 78147 where
--   oeis = zipWith (-) (tail (oeis @13929)) (oeis @13929)

-- instance OEIS 78174 where
--   oeis = filter (\x -> (oeisIx @8472) x `mod` (oeisIx @1221) x == 0) [2..]

-- instance OEIS 78175 where
--   oeis = filter (\x -> (oeisIx x) `mod` (oeisIx x) == 0) [2..]

-- instance OEIS 78178 where
--   oeisIx n = head [k | k <- [2..], (oeisIx @10051)'' (n ^ k + n - 1) == 1]

-- instance OEIS 78179 where
--   oeisIx n = n ^ (oeisIx n) + n - 1

-- instance OEIS 78180 where
--   oeis = 1 : f 1 1 where
--      f x k = y : f y (k+1) where
--        y = head [z | z <- [x+1..], all (q z) $ take k (oeis @78180)]
--        q u v = m > 0 || (oeisIx @10051) u' == 0 where (u',m) = divMod (u-1) v

-- instance OEIS 78241 where
--   oeisIx n = head [x | x <- tail (oeis @169965), mod x n == 0]

-- instance OEIS 78242 where
--   oeisIx n = head [x | x <- tail (oeis @169966), mod x n == 0]

-- instance OEIS 78243 where
--   oeisIx n = head [x | x <- tail (oeis @169967), mod x n == 0]

-- instance OEIS 78244 where
--   oeisIx n = head [x | x <- tail (oeis @169964), mod x n == 0]

-- instance OEIS 78245 where
--   oeisIx n = head [x | x <- tail (oeis @204093), mod x n == 0]

-- instance OEIS 78246 where
--   oeisIx n = head [x | x <- tail (oeis @204094), mod x n == 0]

-- instance OEIS 78247 where
--   oeisIx n = head [x | x <- tail (oeis @204095), mod x n == 0]

-- instance OEIS 78248 where
--   oeisIx n = head [x | x <- tail (oeis @97256), mod x n == 0]

-- instance OEIS 78310 where
--   oeisIx n = n * (oeisIx @7947) n + 1

-- instance OEIS 78311 where
--   oeisIx = (oeisIx @20639) . (oeisIx @78310)

-- instance OEIS 78312 where
--   oeisIx = (oeisIx @6530) . (oeisIx @78310)

-- instance OEIS 78313 where
--   oeisIx = (oeisIx @1221) . (oeisIx @78310)

-- instance OEIS 78314 where
--   oeisIx = (oeisIx @1222) . (oeisIx @78310)

-- instance OEIS 78315 where
--   oeisIx = (oeisIx @51904) . (oeisIx @78310)

-- instance OEIS 78316 where
--   oeisIx = (oeisIx @51903) . (oeisIx @78310)

-- instance OEIS 78317 where
--   oeisIx = (oeisIx @5) . (oeisIx @78310)

-- instance OEIS 78318 where
--   oeisIx = (oeisIx @203) . (oeisIx @78310)

-- instance OEIS 78319 where
--   oeisIx = (oeisIx @8472) . (oeisIx @78310)

-- instance OEIS 78320 where
--   oeisIx = (oeisIx @1414) . (oeisIx @78310)

-- instance OEIS 78321 where
--   oeisIx = (oeisIx @10) . (oeisIx @78310)

-- instance OEIS 78322 where
--   oeisIx = (oeisIx @7947) . (oeisIx @78310)

-- instance OEIS 78323 where
--   oeisIx = (oeisIx @3415) . (oeisIx @78310)

-- instance OEIS 78324 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @224866)

-- instance OEIS 78325 where
--   oeis = filter ((== 1) . (oeisIx @8966)) (oeis @224866)

-- instance OEIS 78343 where
--   oeis = -1 : 2 : zipWith (+)
--                           (map (* 2) $ tail (oeis @78343)) (oeis @78343)

-- instance OEIS 78358 where
--   oeis = filter ((== 0) . (oeisIx @5369)) [0..]

-- instance OEIS 78408 where
--   import Data.MemoCombinators (memo2, integral)
--   oeisIx n = (oeis @78408) !! n
--   oeis = f 1 where
--      f x = (p' 1 x) : f (x + 2)
--      p' = memo2 integral integral p
--      p _ 0 = 1
--      p k m = if m < k then 0 else p' k (m - k) + p' (k + 2) m

-- instance OEIS 78430 where
--   oeisIx = sum . (rowT @245717)

-- instance OEIS 78440 where
--   oeis = filter notbp (oeis @196871) where
--      notbp x = m > 0 && x > 1 || m == 0 && notbp x' where
--         (x',m) = divMod x 2

-- instance OEIS 78442 where
--   oeisIx n = fst $ until ((== 0) . snd)
--                           (\ (i, p) -> (i + 1, (oeisIx @49084) p)) (-2, (oeisIx @40) n)

-- instance OEIS 78465 where
--   oeisIx n = (oeis @78465) `genericIndex` (n - 1)
--   oeis = 1 : 1 : f 3 where
--      f x = (sum $ map (oeisIx . (x -)) $
--            takeWhile (< x) (oeis @40)) : f (x + 1)

-- instance OEIS 78495 where
--   oeis = [1, 1, 1, 1, 1, 1, 1] ++
--     zipWith div (foldr1 (zipWith (+)) (map b [1,3])) (oeis @78495)
--     where b i = zipWith (*) (drop i (oeis @78495)) (drop (7-i) (oeis @78495))

instance OEIS 78608 where
  oeisIx = ceiling . (2 /) . (subtract 1) . (2 **) . recip . fi . succ

-- instance OEIS 78613 where
--   oeis = filter ((== 0) . (oeisIx @5094)) [1..]

instance OEIS 78633 where
  oeisIx (succ->n) = 2 * n + ceiling (2 * sqrt (fi n))

-- instance OEIS 78637 where
--   oeisIx n = (oeisIx @7947) $ product [n..n+2]

-- instance OEIS 78649 where
--   oeis = map (+ 1) $ filter ((== 0) . (oeisIx @54354)) [1..]

-- instance OEIS 78701 where
--   oeisIx n = if null odds then 1 else head odds
--               where odds = tail $ (rowT @182469) n

-- instance OEIS 78715 where
--   oeis = filter ((== 1) . (oeisIx @136522) . (oeisIx @61493)) [1..3999]

-- instance OEIS 78719 where
--   oeisIx =
--      (+ 1) . length . filter odd . takeWhile (> 2) . (iterate (oeisIx @6370))
--   oeis = map (oeisIx @78719) [1..]

-- instance OEIS 78730 where
--   oeisIx n = sum $ zipWith (*) ps $ tail ps where ps = (rowT @27750) n

-- instance OEIS 78779 where
--   oeis = m (oeis @5117) $ map (* 2) (oeis @5117) where
--      m xs'@ (x:xs) ys'@ (y:ys) | x < y     = x : m xs ys'
--                              | x == y    = x : m xs ys
--                              | otherwise = y : m xs' ys

-- instance OEIS 78783 where
--   oeisIx n = (oeis @78783) !! n
--   (oeis, (oeis @117073)) = unzip $
--      (0,0) : (1,1) : (3,2) : f 3 2 (2:[4..]) where
--      f a d ms@ (m:_) = (a', d') : f a' d' (delete a' ms) where
--        (a', d') = if i > d then (m, i) else (a + d + 1, d + 1)
--        i = a - m

-- instance OEIS 78812 where
--   oeis = tablList @78812
-- instance Table 78812 where
--   rowT n = (tabl @78812) !! n
--   tabl = [1] : [2, 1] : f [1] [2, 1] where
--      f us vs = ws : f vs ws where
--        ws = zipWith (-) (zipWith (+) ([0] ++ vs) (map (* 2) vs ++ [0]))
--                         (us ++ [0, 0])

-- instance OEIS 78822 where
--   oeisIx = genericLength . (rowT @119709)
--   import Numeric (showIntAtBase)

-- instance OEIS 78823 where
--   oeisIx = sum . (rowT @119709)

-- instance OEIS 78826 where
--   oeisIx n | n <= 1 = 0
--             | otherwise = length $ (rowT @225243) n

-- instance OEIS 78829 where
--   oeis = filter ((== 1) . (oeisIx @78826)) [1..]

-- instance OEIS 78832 where
--   oeisIx = head . (rowT @225243)

-- instance OEIS 78833 where
--   oeisIx = last . (rowT @225243)

-- instance OEIS 78834 where
--   import Numeric (showIntAtBase)
--   oeisIx n = fromMaybe 1 $ find (\p -> showIntAtBase 2 ("01" !!) p ""
--                             `isInfixOf` showIntAtBase 2 ("01" !!) n "") $
--                    reverse $ (rowT @27748) n

-- instance OEIS 78894 where
--   oeis = sieve (oeis @40) where
--      sieve (p:ps) = p : sieve [q | (i,q) <- zip [2..] ps, mod i p > 0]

-- instance OEIS 78898 where
--   import Data.IntMap (empty, findWithDefault, insert)
--   oeisIx n = (oeis @78898) !! n
--   oeis = 0 : 1 : f empty 2 where
--      f m x = y : f (insert p y m) (x + 1) where
--              y = findWithDefault 0 p m + 1
--              p = (oeisIx @20639) x

-- instance OEIS 78972 where
--   oeisIx n = (oeis @78972) !! (n - 1)
--   oeis = filter brilliant (oeis @1358) where
--      brilliant x = (on (==) (oeisIx @55642)) p (x `div` p) where p = (oeisIx @20639) x

-- instance OEIS 79053 where
--   import Data.Set (Set, fromList, notMember, insert)
--   oeisIx n = (oeis @79053) !! (n - 1)
--   oeis = 1 : 2 : r (fromList [1,2]) 1 1 1 2 where
--     r :: Set Integer -> Integer -> Integer -> Integer -> Integer -> [Integer]
--     r s i j x y = if v > 0 && v `notMember` s
--                      then v : r (insert v s) j fib y v
--                      else w : r (insert w s) j fib y w where
--       fib = i + j
--       v = x + y - fib
--       w = x + y + fib
--   for_bFile = take 1000 (oeis @79053)

-- instance OEIS 79062 where
--   oeis = 2 : f 2 (tail (oeis @40)) where
--      f x ps = q : f q qs where
--        (q:qs) = dropWhile (\p -> (oeisIx @75802) (p - x) == 0 || p - x == 1) ps

-- instance OEIS 79066 where
--   oeisIx n =
--      length $ filter (`isInfixOf` (primesDec !! n)) $ take n primesDec
--   primesDec = "_" : map show (oeis @40)

-- instance OEIS 79070 where
--   oeisIx n = genericLength $ elemIndices (oeisIx n) $ map (oeisIx @23416) [1..n - 1]

-- instance OEIS 79079 where
--   oeis = map (`div` 4) $
--                  zipWith (*) (oeis @8864) $ tail (oeis @8864)

-- instance OEIS 79080 where
--   oeisIx n = (oeisIx @79079) n `gcd` (oeisIx @23523) (n + 1)

-- instance OEIS 79081 where
--   oeis = zipWith div (oeis @79079) (oeis @79080)

-- instance OEIS 79082 where
--   oeis = zipWith div (tail (oeis @23523)) (oeis @79080)

-- instance OEIS 79083 where
--   oeisIx = (oeisIx @78701) . (oeisIx @79079)

-- instance OEIS 79084 where
--   oeisIx = (oeisIx @6530) . (oeisIx @79079)

-- instance OEIS 79085 where
--   oeisIx = (oeisIx @1221) . (oeisIx @79079)

-- instance OEIS 79086 where
--   oeisIx = (oeisIx @1222) . (oeisIx @79079)

-- instance OEIS 79087 where
--   oeisIx = (oeisIx @51903) . (oeisIx @79079)

-- instance OEIS 79088 where
--   oeisIx = (oeisIx @5) . (oeisIx @79079)

-- instance OEIS 79089 where
--   oeisIx = (oeisIx @203) . (oeisIx @79079)

-- instance OEIS 79090 where
--   oeisIx = (oeisIx @8472) . (oeisIx @79079)

-- instance OEIS 79091 where
--   oeisIx = (oeisIx @1414) . (oeisIx @79079)

-- instance OEIS 79092 where
--   oeisIx = (oeisIx @10) . (oeisIx @79079)

-- instance OEIS 79093 where
--   oeisIx = (oeisIx @7947) . (oeisIx @79079)

-- instance OEIS 79094 where
--   oeisIx = (oeisIx @3415) . (oeisIx @79079)

-- instance OEIS 79095 where
--   oeis = filter ((== 1) . (oeisIx @8966)) (oeis @79079)

-- instance OEIS 79122 where
--   oeisIx n = p [1..n] (2 * n) where
--      p _  0     = 1
--      p [] _     = 0
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 79124 where
--   oeisIx n = p [1 .. (oeisIx @10) n] n where
--      p _      0 = 1
--      p []     _ = 0
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 79228 where
--   oeisIx n = head [k | k <- [n+1..], (oeisIx @7947) k > (oeisIx @7947) n]

-- instance OEIS 79229 where
--   oeis = f (oeis @7947) where
--      f (x:xs) = ((+ 1) . length $ takeWhile (<= x) xs) : f xs

-- instance OEIS 79260 where
--   oeisIx n = fromEnum $ n `mod` 4 == 1 && (oeisIx @10051) n == 1

-- instance OEIS 79261 where
--   oeisIx n = fromEnum $ n `mod` 4 == 3 && (oeisIx @10051) n == 1

-- instance OEIS 79364 where
--   oeis = filter
--      (\x -> (oeisIx @10051)' (x - 1) == 0 && (oeisIx @10051)' (x + 1) == 0) (oeis @2808)

-- instance OEIS 79523 where
--   oeisIx n = (oeis @79523) !! (n - 1)
--   oeis = elemIndices 0 (oeis @35263)

-- instance OEIS 79559 where
--   oeisIx = p $ tail (oeis @225) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

instance OEIS 79578 where
  oeisIx (succ->n) = head [m | m <- [n + 2 ..], gcd m n == 1]

-- instance OEIS 79579 where
--   oeisIx 1 = 1
--   oeisIx n = product $ zipWith (*) pfs $ map (subtract 1) pfs
--      where pfs = (rowT @27746) n

instance OEIS 79588 where
  oeisIx n = product $ map ((+ 1) . (* n)) [1, 2, 4]

-- instance OEIS 79623 where
--   oeis = 1 : 1 : 4 : zipWith3 (\u v w -> abs (w - v - u))
--                  (oeis @79623) (tail (oeis @79623)) (drop 2 (oeis @79623))

-- instance OEIS 79624 where
--   oeis = 1 : 1 : 6 : zipWith3 (\u v w -> abs (w - v - u))
--                  (oeis @79624) (tail (oeis @79624)) (drop 2 (oeis @79624))

-- instance OEIS 79635 where
--   oeisIx 1 = 0
--   oeisIx n = sum $ map ((2 - ) . (`mod` 4)) $ (rowT @27746) n

-- instance OEIS 79648 where
--   oeisIx = sum . map (oeisIx @10051) . (rowT @214084)

-- instance OEIS 79695 where
--   import Data.List.Ordered (minus)
--   oeisIx n = (oeis @79695) !! (n - 1)
--   oeis = [1..] `minus` (oeis @2180)

instance OEIS 79704 where
  oeisIx = (* 2) . (oeisIx @1248)

-- instance OEIS 79878 where
--   oeis = 1 : zipWith (\x n -> if x <= n then x else x - n)
--                              (map (* 2) (oeis @79878)) [2..]

-- instance OEIS 79890 where
--   oeisIx n = head [x | x <- [n + 1 ..], (oeisIx @1222) x == 1 + (oeisIx @1222) n]

-- instance OEIS 79892 where
--   oeisIx n = head [x | x <- [n + 1 ..], (oeisIx @1221) x == 1 + (oeisIx @1221) n]

-- instance OEIS 79901 where
--   oeis = tablList @79901
-- instance Table 79901 where
--   rowT n = (tabl @79901) !! n
--   tabl = zipWith (map . (^)) [0..] (tabl @2262)

-- instance OEIS 79935 where
--   oeis =
--      1 : 3 : zipWith (-) (map (4 *) $ tail (oeis @79935)) (oeis @79935)

instance OEIS 79944 where
  oeis =  f [0,1] where f (x:xs) = x : f (xs ++ [x,x])

instance OEIS 79978 where
  oeisIx = fi . fromEnum . (== 0) . (`mod` 3)
  oeis   = cycle [1,0,0]

-- instance OEIS 80040 where
--   oeis =
--      2 : 2 : map (* 2) (zipWith (+) (oeis @80040) (tail (oeis @80040)))

-- instance OEIS 80046 where
--   oeis = tablList @80046
-- instance Table 80046 where
--   rowCol = rowCol_off @80046 @1 @1
--   rowT   = rowT_off   @80046 @1
--   tabl = iterate f [1] where
--      f (x:xs) = [x + 1] ++ (zipWith (*) xs $ reverse xs) ++ [x + 1]

-- instance OEIS 80079 where
--   oeisIx n = (length $ takeWhile (< (oeisIx @70940) n) (oeisIx_row n)) + 1

-- instance OEIS 80080 where
--   oeisIx :: Int -> Int -> Int
--   oeisIx n k = addc n k 0 where
--      addc x y z | y == 0    = z - 1
--                 | otherwise = addc (x `xor` y) (shiftL (x .&. y) 1) (z + 1)
--   oeisIx_row n = map (oeisIx n) [1..n]
--   oeisIx_tabl = map (rowT @80080) [1..]

-- instance OEIS 80096 where
--   oeis = 1 : 1 : 2 : zipWith3 (\u v w -> abs (w - v - u))
--                  (oeis @80096) (tail (oeis @80096)) (drop 2 (oeis @80096))

-- instance OEIS 80098 where
--   oeis = tablList @80098
-- instance Table 80098 where
--   rowCol n k = n .|. k :: Int
--   rowT n = map (oeisIx n) [0..n]
--   tabl = map (rowT @80098) [0..]

-- instance OEIS 80099 where
--   oeis = tablList @80099
-- instance Table 80099 where
--   rowCol n k = n .&. k :: Int
--   rowT n = map (oeisIx n) [0..n]
--   tabl = map (rowT @80099) [0..]

-- instance OEIS 80100 where
--   oeisIx n = (oeis @80100) !! n
--   oeis =  1 : zs where
--      zs =  1 : (concat $ transpose [map (* 2) zs, zs])

-- instance OEIS 80170 where
--   oeis = filter f [1..] where
--      f x = foldl1 gcd (map (flip (oeisIx @7318)' x) [2*x, 3*x .. x* (x+1)]) == 1

-- instance OEIS 80225 where
--   oeisIx n = genericLength [d | d <- takeWhile (<= n) (oeis @396), mod n d == 0]

-- instance OEIS 80237 where
--   oeis = tablList @80237
-- instance Table 80237 where
--   rowCol n k = (tabf @80237) !! (n - 1) !! (k-1)
--   rowT n = (tabf @80237) !! (n - 1)
--   tabf = [1] : f (tabf @80237) where
--      f [[]] =[]
--      f (xs:xss) = concatMap (enumFromTo 1 . (+ 1)) xs : f xss
--   oeis = concat (tabf @80237)

-- instance OEIS 80239 where
--   oeis = 1 : 1 : zipWith (+)
--      (tail (oeis @11765)) (zipWith (+) (oeis @80239) $ tail (oeis @80239))

-- instance OEIS 80257 where
--   oeis = m (oeis @24619) (oeis @33942) where
--      m xs'@ (x:xs) ys'@ (y:ys) | x < y  = x : m xs ys'
--                              | x == y = x : m xs ys
--                              | x > y  = y : m xs' ys

-- instance OEIS 80342 where
--   oeisIx n = genericIndex (oeis @80342) (n - 1)
--   oeis = 0 : zs where
--      zs = 1 : 1 : (map (+ 1) $ concat $ transpose [zs, zs, zs])

-- instance OEIS 80367 where
--   oeisIx n = if null us then 0 else fst $ last us
--     where us = filter ((== 1) . snd) $ zip (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 80368 where
--   oeisIx n = if null us then 0 else fst $ head us
--     where us = filter ((== 1) . snd) $ zip (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 80425 where
--   oeisIx = (`mod` 3) . (3 -) . (`mod` 3)
--   oeis = cycle [0, 2, 1]

-- instance OEIS 80444 where
--   oeis = tablList @80444
-- instance Table 80444 where
--   rowCol n k = (tabf @80444) !! (n - 1) !! (k-1)
--   rowT n = (tabf @80444) !! (n - 1)
--   tabf = zipWith replicate (oeis @1055) [1..]
--   oeis = concat (tabf @80444)

-- instance OEIS 80478 where
--   oeis = 1 : f 1 [2..] where
--      f x (y:ys) | (oeisIx @10051) (x*x + y*y) == 1 = y : (f y ys)
--                 | otherwise                = f x ys

-- instance OEIS 80512 where
--   oeisIx n = if m == 0 then 3 * n' else n  where (n', m) = divMod n 2
--   oeis = concat $ transpose [[1, 3 ..], [3, 6 ..]]

-- instance OEIS 80578 where
--   oeis = 1 : f 2 [1] where
--      f x zs@ (z:_) = y : f (x + 1) (y : zs) where
--        y = if x `elem` zs then z + 1 else z + 3

-- instance OEIS 80579 where
--   oeis = 1 : f 2 [1] where
--      f x zs@ (z:_) = y : f (x + 1) (y : zs) where
--        y = if x `elem` zs then z + 1 else z + 4

-- instance OEIS 80590 where
--   oeis = 1 : f 2 [1] where
--      f x zs@ (z:_) = y : f (x + 1) (y : zs) where
--        y = z + (if x `elem` zs then 3 else 4)

-- instance OEIS 80655 where
--   oeis = 1 : 1 : f 3 where
--      f n = (oeisIx (n - 1) + (oeisIx @80655) (oeisIx (n-1))) : f (n+1)

-- instance OEIS 80670 where
--   oeisIx 1 = 1
--   oeisIx n = read $ foldl1 (++) $
--   zipWith (c `on` show) (oeisIx_row n) (oeisIx_row n) :: Integer
--   where c ps es = if es == "1" then ps else ps ++ es

-- instance OEIS 80672 where
--   oeis = filter ((<= 7) . (oeisIx @20639)) [2..]

-- instance OEIS 80688 where
--   oeis = tablList @80688
--   rowCol n k = (rowT @80688) n !! (k-1)
--   rowT n = map (+ 1) $ take (oeisIx n) $
--                   elemIndices n $ map fromInteger (oeis @64553)
--   tabl = map (rowT @80688) [1..]
--   oeis = concat (tabl @80688)

-- instance OEIS 80709 where
--   oeis = iterate (oeisIx @3132) 4

-- instance OEIS 80715 where
--   oeis = 1 : filter (\x -> all ((== 1) . (oeisIx @10051)) $
--      zipWith (+) (oeisIx_row x) (reverse $ (rowT @27750) x)) [2,4..]

-- instance OEIS 80719 where
--   oeisIx = foldr (\b v -> 2 * v + b) 0 .
--              concat . mapMaybe (flip lookup bin) . (rowT @31298)
--               where bin = zip [0..9] (tabf @30308)

-- instance OEIS 80736 where
--   oeisIx n = if n `mod` 4 == 2 then 0 else (oeisIx @10) n

-- instance OEIS 80737 where
--   oeis = 0 : (map f [2..]) where
--   f n | mod n 4 == 2 = (oeisIx @80737) $ div n 2
--   | otherwise = (oeisIx @67240) n

-- instance OEIS 80738 where
--   import Data.Map (singleton, deleteFindMin, insertWith)
--   oeisIx n k = (tabf @80738) !! n !! k
--   oeisIx_row n = (tabf @80738) !! n
--   oeisIx_tabf = f 3 (drop 2 (oeis @80737)) 3 (singleton 0 [2,1]) where
--      f i xs'@ (x:xs) till m
--        | i > till  = (reverse row) : f i xs' (3 * head row) m'
--        | otherwise = f (i + 1) xs till (insertWith (++) (div x 2) [i] m)
--        where ((_,row),m')  = deleteFindMin m

-- instance OEIS 80739 where
--   oeis = map length (tabf @80738)
-- instance Table 80739 where
--   rowCol n k = (oeis @80739) !! n

-- instance OEIS 80740 where
--   oeis = scanl1 (+) (oeis @80739)
-- instance Table 80740 where
--   rowCol n k = (oeis @80740) !! n

-- instance OEIS 80741 where
--   oeis = map head (tabf @80738)
-- instance Table 80741 where
--   rowCol n k = (oeis @80741) !! n

-- instance OEIS 80742 where
--   oeis = map last (tabf @80738)
-- instance Table 80742 where
--   rowCol n k = (oeis @80742) !! n

-- instance OEIS 80757 where
--   oeisIx = (subtract 1) . (oeisIx @7538) . (+ 1)

-- instance OEIS 80764 where
--   oeis = tail $ zipWith (-) (tail (oeis @49472)) (oeis @49472)

-- instance OEIS 80786 where
--   oeis = tablList @80786
-- instance Table 80786 where
--   rowCol = rowCol_off @80786 @1 @1
--   rowT   = rowT_off   @80786 @1
--   tabl = map reverse $ iterate f [1] where
--      f xs@ (x:_) = (x + 1) :
--                   (zipWith (+) xs (map (fromEnum . (lpf <=)) [x, x-1 ..]))
--           where lpf = fromInteger $ (oeisIx @6530) $ fi (x + 1)

-- instance OEIS 80788 where
--   oeisIx n = (oeis @48890) !! (n - 1)
--   oeis = filter f (oeis @40) where
--      f x = all (`elem` [0,1,6,8,9]) ds && x' /= x && (oeisIx @10051) x' == 1
--        where x' = foldl c 0 ds
--              c v 6 = 10*v + 9; c v 9 = 10*v + 6; c v d = 10*v + d
--              ds = unfoldr d x
--              d z = if z == 0 then Nothing else Just $ swap $ divMod z 10

-- instance OEIS 80941 where
--   oeisIx n = if null ds then 0 else head ds  where
--               ds = filter ((flip isPrefixOf `on` (rowT @30308)) n) $
--                           reverse $ (rowT @27751) n

-- instance OEIS 80942 where
--   oeisIx n = genericLength $
--               filter ((flip isPrefixOf `on` (rowT @30308)) n) $ (rowT @27750) n

-- instance OEIS 80943 where
--   oeis = filter ((== 2) . (oeisIx @80942)) [1..]

-- instance OEIS 80944 where
--   oeis = filter ((<= 2) . (oeisIx @80942)) [1..]

-- instance OEIS 80945 where
--   oeis = filter ((> 2) . (oeisIx @80942)) [1..]

-- instance OEIS 80946 where
--   oeis = filter ((== 3) . (oeisIx @80942)) [1..]

-- instance OEIS 80947 where
--   oeis = filter ((> 3) . (oeisIx @80942)) [1..]

-- instance OEIS 80982 where
--   oeisIx n = (+ 1) $ fromJust $
--      findIndex ((== 0) . (`mod` (n ^ 2))) $ tail (oeis @217)

-- instance OEIS 80983 where
--   oeisIx = (oeisIx @217) . (oeisIx @80982)

-- instance OEIS 80995 where
--   oeisIx = (oeisIx @33683) . (+ 1) . (* 24)

-- instance OEIS 81091 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @14311)

-- instance OEIS 81092 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @52294)

-- instance OEIS 81118 where
--   oeis = tablList @81118
--   rowCol = rowCol_off @81118 @1 @1
--   rowT   = rowT_off   @81118 @1
--   tabl  = iterate
--      (\row -> (map ((+ 1) . (* 2)) row) ++ [4 * (head row) + 1]) [1]
--   oeis = concat (tabl @81118)

-- instance OEIS 81145 where
--   oeisIx n = (oeis @81145) !! (n - 1)
--   oeis = 1 : f 1 [2..] [] where
--      f x vs ws = g vs where
--        g (y:ys) = if z `elem` ws then g ys else y : f y (delete y vs) (z:ws)
--                   where z = abs (x - y)

-- instance OEIS 81146 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @81145))

-- instance OEIS 81238 where
--   oeisIx n = genericLength [ () | u <- [1..n], v <- [1..n],
--                            (oeisIx @8683) u * (oeisIx @8683) v == -1]

-- instance OEIS 81239 where
--   oeisIx n = genericLength [ () | u <- [1..n], v <- [1..n],
--                            (oeisIx @8683) u * (oeisIx @8683) v == 0]

-- instance OEIS 81240 where
--   oeisIx n = genericLength [ () | u <- [1..n], v <- [1..n],
--                            (oeisIx @8683) u * (oeisIx @8683) v == 1]

-- instance OEIS 81308 where
--   oeisIx n = sum $ map (oeisIx' . (n -)) $ takeWhile (< n) (oeis @3586)

-- instance OEIS 81309 where
--   oeisIx n | null ps   = 0
--             | otherwise = head ps
--             where ps = [p | p <- takeWhile (< n) (oeis @40),
--                             (oeisIx @65333) (n - p) == 1]

-- instance OEIS 81310 where
--   oeis = filter ((== 0) . (oeisIx @81308)) [1..]

-- instance OEIS 81311 where
--   oeisIx n = (oeis @81310) !! (n - 1)
--   oeis = filter ((== 0) . (oeisIx @81308)) [1..]

-- instance OEIS 81312 where
--   oeis = filter ((== 1) . (oeisIx @81308)) [1..]

-- instance OEIS 81313 where
--   oeis = filter ((> 1) . (oeisIx @81308)) [1..]

-- instance OEIS 81324 where
--   oeisIx n = (oeis @81324) !! (n - 1)
--   oeis = 0 : elemIndices 1 (oeis @63725)

-- instance OEIS 81382 where
--   oeisIx 1 = 1
--   oeisIx n = head [x | let sopf = (oeisIx @8472) n, x <- [n+1..], (oeisIx @8472) x == sopf]

-- instance OEIS 81407 where
--   oeisIx n = (oeis @81408) !! n
--   oeis = 1 : 1 : 1 : 1 : zipWith (*) [5..] (oeis @81407)

-- instance OEIS 81408 where
--   oeis = 1 : 1 : 1 : 1 : zipWith (*) [5..] (oeis @81407)

-- instance OEIS 81577 where
--   oeis = tablList @81577
-- instance Table 81577 where
--   rowT n = (tabl @81577) !! n
--   tabl = map fst $ iterate
--       (\ (us, vs) -> (vs, zipWith (+) (map (* 2) ([0] ++ us ++ [0])) $
--                          zipWith (+) ([0] ++ vs) (vs ++ [0]))) ([1], [1, 1])

-- instance OEIS 81578 where
--   oeis = tablList @81578
-- instance Table 81578 where
--   rowT n = (tabl @81578) !! n
--   tabl = map fst $ iterate
--      (\ (us, vs) -> (vs, zipWith (+) (map (* 3) ([0] ++ us ++ [0])) $
--                         zipWith (+) ([0] ++ vs) (vs ++ [0]))) ([1], [1, 1])

-- instance OEIS 81603 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @81603) n' + m `div` 2 where (n',m) = divMod n 3

instance OEIS 81604 where
  oeisIx n = if n < 3 then 1 else (oeisIx @81604) (div n 3) + 1

-- instance OEIS 81605 where
--   oeisIx n = (oeis @81605) !! (n - 1)
--   oeis = findIndices (/= 0) (oeis @212193)

-- instance OEIS 81611 where
--   oeis = scanl1 (+) (oeis @39966)

-- instance OEIS 81619 where
--   oeis = filter ((== 1) . (oeisIx @10054) . (oeisIx @5)) [1..]

-- instance OEIS 81729 where
--   oeisIx n = (oeisIx @209229) n + (oeisIx @33999) (n)

instance OEIS 81757 where
  oeisIx (succ->n) = genericLength [ () | j <- [2..n], i <- [1..j - 1], i * j + i - j == n]

-- instance OEIS 81770 where
--   oeis = filter ((== 1) . (oeisIx @8966) . (`div` 4)) (oeis @17113)

-- instance OEIS 81827 where
--   oeis = zipWith (-) (tail (oeis @5185)) (oeis @5185)
--   b081827 = bFile "A081827" (oeis @81827) 1 10000

-- instance OEIS 81828 where
--   oeisIx n = (oeis @81828) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @81827)

-- instance OEIS 81829 where
--   oeisIx n = (oeis @81829) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (< 0) (oeis @81827)

-- instance OEIS 81830 where
--   oeisIx n = (oeis @81830) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (> 0) (oeis @81827)

-- instance OEIS 81834 where
--   oeis = 1 : f 2 [1] where
--      f x zs@ (z:_) = y : f (x + 1) (y : zs) where
--        y = z + (if x `elem` zs then 4 else 3)

-- instance OEIS 81848 where
--   oeis = 3 : tail (zipWith (-) (tail (oeis @70885)) (oeis @70885))

-- instance OEIS 82143 where
--   oeisIx 0 = 1
--   oeisIx n = (oeisIx $ n - 1) * (oeisIx n)

-- instance OEIS 82416 where
--   oeis = map (`mod` 2) (oeis @73941)

-- instance OEIS 82495 where
--   oeisIx n = (oeisIx @15910) n + (oeisIx @48298) n - 1

-- instance OEIS 82498 where
--   oeis = 0 : 1 : concat
--      (zipWith (\u v -> [u, u + v]) (tail (oeis @82498)) (oeis @82498))

-- instance OEIS 82500 where
--   oeisIx n = (oeis @82500) !! (n - 1)
--   oeis = concat $ transpose [[1..], (oeis @40)]

-- instance OEIS 82560 where
--   oeis = tablList @82560
-- instance Table 82560 where
--   rowCol n k = (tabf @82560) !! (n - 1) !! (k-1)
--   rowT n = (tabf @82560) !! (n - 1)
--   tabf = iterate (concatMap (\x -> [x + 1, 2 * x + 2])) [1]
--   oeis = concat (tabf @82560)

-- instance OEIS 82582 where
--   oeis = 1 : 1 : f [1,1] where
--      f xs'@ (x:_:xs) = y : f (y : xs') where
--        y = x + sum (zipWith (*) xs' $ reverse xs)

-- instance OEIS 82587 where
--   oeisIx n = (oeis @82587) !! n
--   oeis = concat $ transpose [tail (oeis @204), (oeis @204)]

-- instance OEIS 82601 where
--   oeis = tablList @82601
-- instance Table 82601 where
--   rowT n = (tabl @82601) !! n
--   tabl = [1] : [1,0] : [1,1,0] : f [0,0,1] [0,1,0] [1,1,0]
--      where f us vs ws = ys : f (0:vs) (0:ws) ys where
--                         ys = zipWith3 (((+) .) . (+)) us vs ws ++ [0]

-- instance OEIS 82763 where
--   oeis = filter (containsL . (oeisIx @61493)) [1..3999] where
--      containsL x = d == 4 || x > 0 && containsL x' where
--                    (x',d) = divMod x 10

-- instance OEIS 82766 where
--   oeisIx n = (oeis @82766) !! (n - 1)
--   oeis = concat $ transpose [oeis, tail (oeis @1333)]

-- instance OEIS 82784 where
--   oeisIx = (oeisIx @7) . (`mod` 7)
--   oeis = cycle [1,0,0,0,0,0,0]

-- instance OEIS 82792 where
--   oeisIx n = until ((== 3) . (oeisIx @30)) (+ n) n

-- instance OEIS 82794 where
--   oeisIx n = until ((== 4) . (oeisIx @30)) (+ n) n

-- instance OEIS 82795 where
--   oeisIx n = until ((== 5) . (oeisIx @30)) (+ n) n

-- instance OEIS 82796 where
--   oeisIx n = until ((== 6) . (oeisIx @30)) (+ n) n

-- instance OEIS 82797 where
--   oeisIx n = until ((== 7) . (oeisIx @30)) (+ n) n

-- instance OEIS 82798 where
--   oeisIx n = until ((== 8) . (oeisIx @30)) (+ n) n

-- instance OEIS 82811 where
--   oeisIx n = until ((== 2) . (oeisIx @30)) (+ n) n

-- instance OEIS 82870 where
--   oeis = tablList @82870
-- instance Table 82870 where
--   rowCol n k = (tabf @82870) !! n !! k
--   rowT n = (tabf @82870) !! n
--   tabf = map (takeWhile (> 0)) (tabl @82601)

-- instance OEIS 82949 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @82949) !! (n - 1)
--   oeis = f $ singleton (2 ^ 3 * 3 ^ 2, 2, 3) where
--      f s = y : f (if p' < q then insert (p' ^ q * q ^ p', p', q) s'' else s'')
--            where s'' = insert (p ^ q' * q' ^ p, p, q') s'
--                  p' = (oeisIx @151800) p; q' = (oeisIx @151800) q
--                  ((y, p, q), s') = deleteFindMin s

-- instance OEIS 82977 where
--   oeis = [0, 1, 3, 5, 6, 8, 10] ++ map (+ 12) (oeis @82977)

-- instance OEIS 83025 where
--   oeisIx 1 = 0
--   oeisIx n = genericLength [x | x <- (rowT @27746) n, mod x 4 == 1]

-- instance OEIS 83093 where
--   oeis = tablList @83093
-- instance Table 83093 where
--   rowT n = (tabl @83093) !! n
--   tabl = iterate
--      (\ws -> zipWith (\u v -> mod (u + v) 3) ([0] ++ ws) (ws ++ [0])) [1]

-- instance OEIS 83207 where
--   oeis = filter (z 0 0 . (rowT @27750)) $ [1..] where
--      z u v []     = u == v
--      z u v (p:ps) = z (u + p) v ps || z u (v + p) ps

-- instance OEIS 83278 where
--   import Data.Set (empty, findMin, deleteMin, deleteMin, insert)
--   import qualified Data.Set as Set (null)
--   oeisIx n = (oeis @83278) !! (n - 1)
--   oeis = 1 : f empty (drop 2 (oeis @2275)) where
--      f rups rus'@ (ru:rus)
--        | Set.null rups || m > ru = f (insert (ru,ru) rups) rus
--        | otherwise = m : f (insert (m*m',m') (deleteMin rups)) rus'
--        where (m,m') = findMin rups

instance OEIS 83329 where
  oeis = 1 : iterate ((+ 1) . (* 2)) 2

-- instance OEIS 83337 where
--   oeis =
--      0 : 3 : map (* 2) (zipWith (+) (oeis @83337) (tail (oeis @83337)))

-- instance OEIS 83347 where
--   oeis = filter ((< 0) . (oeisIx @168036)) [1..]

-- instance OEIS 83348 where
--   oeis = filter ((> 0) . (oeisIx @168036)) [1..]

-- instance OEIS 83368 where
--   oeis = concat $ h $ drop 2 (oeis @71) where
--      h (a:fs@ (a':_)) = (map (oeisIx . (a' -)) [a .. a' - 1]) : h fs

-- instance OEIS 83382 where
--   oeisIx n = f n n (oeis @10051) where
--      f m 0 _     = m
--      f m k chips = f (min m $ sum chin) (k - 1) chips' where
--        (chin,chips') = splitAt n chips

-- instance OEIS 83383 where
--   oeis = 1 : f 0 [2..] (tail (oeis @83382)) where
--      f m (x:xs) (y:ys) | y <= m    = f m xs ys
--                        | otherwise = x : f y xs ys

-- instance OEIS 83399 where
--   oeisIx = (+ 1) . (oeisIx @1221)

-- instance OEIS 83414 where
--   oeisIx n = minimum $ map c $ filter ((== 1) . (gcd n)) [1..n] where
--      c k = sum $ map (oeisIx @10051) $ enumFromThenTo k (k + n) (n ^ 2)

-- instance OEIS 83415 where
--   oeis = tablList @83415
-- instance Table 83415 where
--   rowCol n k = (rowT @83415) n !! (k-1)
--   rowT n = f n (oeis @10051) where
--      f 0 _     = []
--      f k chips = (sum chin) : f (k - 1) chips' where
--        (chin,chips') = splitAt n chips
--   tabl = map (rowT @83415) [1..]

-- instance OEIS 83416 where
--   oeis = 1 : f 2 1 where
--      f x y = z : f (x+1) z where z = (1 + x `mod` 2) * y + 1 - x `mod` 2

instance OEIS 83420 where
  oeisIx = subtract 1 . (* 2) . (4 ^)

-- instance OEIS 83479 where
--   oeis = m [0..] (oeis @33638) where
--      m xs'@ (x:xs) ys'@ (y:ys) | x <= y    = x : m xs ys'
--                              | otherwise = y : m xs' ys

-- instance OEIS 83533 where
--   oeis = zipWith (-) (tail (oeis @2202)) (oeis @2202)

-- instance OEIS 83534 where
--   oeis = zipWith (-) (tail (oeis @7617)) (oeis @7617)

-- instance OEIS 83542 where
--   oeisIx n = (oeisIx @10) n * (oeisIx @10) (n + 1)
--   oeis = zipWith (*) (tail (oeis @10)) (oeis @10)

instance OEIS 83652 where
  oeis = scanl1 (+) (oeis @70939)

-- instance OEIS 83752 where
--   oeisIx n = head [k | k <- [n+1..], (oeisIx @10052) (12* (k+n)^2 + k*n) == 1]

-- instance OEIS 83866 where
--   oeis = filter ((== 0) . (oeisIx @4718)) [0..]

-- instance OEIS 83910 where
--   oeisIx = sum . map (oeisIx . (oeisIx @10879)) . (rowT @27750)

-- instance OEIS 83920 where
--   oeis = scanl1 (+) $ map (1 -) (oeis @10054)

-- instance OEIS 84110 where
--   oeisIx = foldl (/*) 1 . (rowT @27750) where
--      x /* y = if m == 0 then x' else x*y where (x',m) = divMod x y

-- instance OEIS 84111 where
--   oeis = [x | x <- [1..], (oeisIx @84110) x == x]

-- instance OEIS 84112 where
--   oeis = filter ((== 0) . (oeisIx @10051)') (oeis @84111)

-- instance OEIS 84113 where
--   oeisIx = f 0 1 . (rowT @27750) where
--      f c _ []     = c
--      f c x (d:ds) = if r == 0 then f c x' ds else f (c + 1) (x * d) ds
--                     where (x', r) = divMod x d

-- instance OEIS 84114 where
--   oeisIx = g 0 1 . tail . (rowT @27750) where
--      g c _ []     = c
--      g c x (d:ds) = if r > 0 then g c (x * d) ds else g (c + 1) x' ds
--                     where (x', r) = divMod x d

-- instance OEIS 84115 where
--   oeisIx n = (oeisIx @84113) n - (oeisIx @84114) n

-- instance OEIS 84116 where
--   oeis = filter ((== 1) . (oeisIx @84115)) [1..]

-- instance OEIS 84126 where
--   oeisIx = (oeisIx @20639) . (oeisIx @1358)

-- instance OEIS 84127 where
--   oeisIx = (oeisIx @6530) . (oeisIx @1358)

-- instance OEIS 84188 where
--   oeis = scanl1 (\u v -> 2 * u + v) (oeis @4539)

-- instance OEIS 84190 where
--   oeisIx 1 = 1
--   oeisIx n = foldl1 lcm $ map (subtract 1) $ tail $ (rowT @27750)' n

-- instance OEIS 84196 where
--   oeis = f [] (oeis @40) where
--      f ps' (p:ps) = length [q | q <- ps', mod (p + 1) (q + 1) == 0] :
--                     f (p : ps') ps where

-- instance OEIS 84198 where
--   oeis = map (oeisIx @40) $ filter ((== 1) . (oeisIx @84196)) [1..]

-- instance OEIS 84214 where
--   oeis = 1 : xs where
--      xs = 1 : 4 : zipWith (+) (map (* 2) xs) (tail xs)

instance OEIS 84228 where
  oeis = 1 : 2 : f 3 where
     f x = y : f (x + y) where y = (oeisIx @7953) x

-- instance OEIS 84338 where
--   oeis = [1,2,3] ++ zipWith (+) (oeis @84338) (tail (oeis @84338))
--   oeisIx n = (oeis @84338) !! (n - 1)

-- instance OEIS 84345 where
--   oeis = filter ((== 0) . (oeisIx @10051)' . (oeisIx @120)) [0..]

-- instance OEIS 84349 where
--   oeis = 1 : filter (\x -> all (== 0) $ map (oeisIx . (x -)) $
--                              takeWhile (<= x) (oeis @290)) (oeis @5117)

-- instance OEIS 84385 where
--   oeisIx n = (oeis @84385) !! (n - 1)
--   oeis = 1 : f [2..] 1 where
--      f xs s = g xs where
--        g (y:ys) = if gcd s y == 1 then y : f (delete y xs) (s + y) else g ys

-- instance OEIS 84471 where
--   oeisIx 1 = 1
--   oeisIx x = 2 * (2 - d) * (oeisIx @84471) x' + d  where (x',d) = divMod x 2

-- instance OEIS 84473 where
--   oeisIx 1 = 1
--   oeisIx x = 2 * (if b == 1 then 1 else 8) * (oeisIx @84473) x' + b
--               where (x', b) = divMod x 2

-- instance OEIS 84558 where
--   oeisIx n = (oeisIx @90529) (n + 1) - 1

-- instance OEIS 84600 where
--   oeis = concat $ iterate ([1,1,2] *) [1]
--   instance Num a => Num [a] where
--      fromInteger k = [fromInteger k]
--      (p:ps) + (q:qs) = p + q : ps + qs
--      ps + qs         = ps ++ qs
--      (p:ps) * qs'@ (q:qs) = p * q : ps * qs' + [p] * qs
--      _ * _               = []

-- instance OEIS 84608 where
--   oeis = concat $ iterate ([1,2,3] *) [1]
--   instance Num a => Num [a] where
--      fromInteger k = [fromInteger k]
--      (p:ps) + (q:qs) = p + q : ps + qs
--      ps + qs         = ps ++ qs
--      (p:ps) * qs'@ (q:qs) = p * q : ps * qs' + [p] * qs
--      _ * _               = []

instance OEIS 84640 where
  oeis = 0 : 1 : (map (+ 4) $
     zipWith (+) (map (* 2) (oeis @84640)) (tail (oeis @84640)))

instance OEIS 84662 where
  oeis = 4 : zipWith (+) (oeis @84662) (zipWith gcd (oeis @84662) [2..])

instance OEIS 84663 where
  oeis = 8 : zipWith (+) (oeis @84663) (zipWith gcd (oeis @84663) [2..])

-- instance OEIS 84888 where
--   oeisIx = (oeisIx @25426) . (oeisIx @578)

instance OEIS 84920 where
  oeisIx n = (p - 1) * (p + 1) where p = (oeisIx @40) n

instance OEIS 84921 where
  oeisIx n = lcm (p - 1) (p + 1)  where p = (oeisIx @40) n

-- instance OEIS 84933 where
--   oeisIx n = (fromJust $ elemIndex n (oeis @84937)) + 1

-- instance OEIS 84937 where
--   oeisIx n = (oeis @84937) !! (n - 1)
--   oeis = 1 : 2 : f 2 1 [3..] where
--      f x y zs = g zs where
--         g (u:us) | gcd y u > 1 || gcd x u > 1 = g us
--                  | otherwise = u : f u x (delete u zs)

-- instance OEIS 84964 where
--   oeisIx n = (oeis @84964) !! n
--   oeis = concat $ transpose [[2..], [0..]]

instance OEIS 84984 where
  oeis = filter (not . any (`elem` "2357") . show . fi) [0..]

instance OEIS 85059 where
  oeis = 1 : f 1 1 where
     f v w = y : f (v + 1) y where
       y = if w > v then w - v else w + v

-- instance OEIS 85079 where
--   oeisIx n = product $ zipWith (^) (oeisIx_row n) (sort $ (rowT @124010) n)

instance OEIS 85084 where
  oeis = 1 : f 1 (oeis @2808) where
     f x cs = y : f y (delete y cs) where
              y = fromJust $ find ((== 1) . (gcd x)) cs

instance OEIS 85104 where
  oeis = filter ((> 1) . (oeisIx @88323 . subtract 2)) (oeis @40)

instance OEIS 85144 where
  oeis = 0 : concat
     (transpose [map negate (oeis @85144), map (+ 1) $ tail (oeis @85144)])

-- instance OEIS 85238 where
--   oeisIx n = e (mod x 2 + 2) x where
--      x = (oeisIx @6899) n
--      e b p = if p == 1 then 0 else 1 + e b (p `div` b)

-- instance OEIS 85239 where
--   oeisIx 1 = 1
--   oeisIx n = (oeisIx @6899) n `mod` 2 + 2

-- instance OEIS 85392 where
--   oeisIx = (oeisIx @6530) . (oeisIx @32742)

-- instance OEIS 85423 where
--   oeisIx = (oeisIx @523) . (oeisIx @8585)

-- instance OEIS 85478 where
--   oeis = tablList @85478
-- instance Table 85478 where
--   rowT n = (tabl @85478) !! n
--   tabl = zipWith (zipWith (oeisIx @7318)) (tabl @51162) (tabl @25581)

-- instance OEIS 85513 where
--   import Data.Text (Text); import qualified Data.Text as T (unpack))
--   import Text.Numeral.Grammar.Reified (defaultInflection)
--   import qualified Text.Numeral.Language.EN as EN
--   oeisIx = genericLength . filter (== 'e') . T.unpack . numeral where
--      numeral :: Integer -> Text
--      numeral = fromJust . EN.gb_cardinal defaultInflection

-- instance OEIS 85604 where
--   oeis = tablList @85604
-- instance Table 85604 where
--   rowCol = rowCol_off @85604 @2 @1
--   rowT 1 = [0]
--   rowT n = (rowT @115627) n ++ (take $ (oeisIx @62298) $ fi n) [0,0..]
--   tabl = map (rowT @85604) [1..]

-- instance OEIS 85612 where
--   oeis = tablList @85612
-- instance Table 85612 where
--   rowCol n k = (rowT @85612) n !! (k-1)
--   rowT n = (tabf @85612) !! (n - 1)
--   tabf = f 0 $ zip [1..] (oeis @46523) where
--      f x zs'@ (z:zs) = (map fst ys) : f (x + 1) (zs' \\ ys) where
--        ys = z : take x (filter ((== snd z) . snd) zs)
--   oeis = concat (tabf @85612)

-- instance OEIS 85713 where
--   import Data.List.Ordered (insertBag)
--   oeisIx n = (oeis @85713) !! (n - 1)
--   oeis = 1 : r yx3ss where
--      r (ps:pss) | (oeisIx @10051)' cd == 1 &&
--                   map (flip div cd) ps == [3, 4, 6] = cd : r pss
--                 | otherwise = r pss  where cd = foldl1 gcd ps
--      yx3ss = filter ((== 3) . length) $
--          map (map snd) $ groupBy ((==) `on` fst) $
--          f [1..] (oeis @2110) []
--          where f is'@ (i:is) ps'@ (p:ps) yxs
--                 | i < p = f is ps' $ insertBag (oeisIx' i, i) yxs
--                 | otherwise = yxs' ++ f is' ps yxs''
--                 where (yxs', yxs'') = span ((<= (oeisIx @10)' i) . fst) yxs

-- instance OEIS 85721 where
--   oeis = [p*q | (p,q) <- zip (oeis @84126) (oeis @84127),
--                         oeisIx p == (oeisIx @70939) q]

-- instance OEIS 85730 where
--   oeisIx 1 = 1
--   oeisIx n = (p - 1) * p ^ (e - 1)
--      where p =  (oeisIx @25473) n; e =  (oeisIx @25474) n

-- instance OEIS 85731 where
--   oeisIx n = gcd n $ (oeisIx @3415) n

-- instance OEIS 85732 where
--   oeisIx n = (oeis @85732) !! (n - 2)
--   oeis = map f $ drop 2 $ inits $ concatMap show (oeis @796)
--      where f xs = minimum $ init $ tail $
--                   zipWith (on (+) read) (inits xs) (tails xs)

-- instance OEIS 85787 where
--   oeis = scanl (+) 0 (oeis @80512)

-- instance OEIS 85809 where

-- instance OEIS 85974 where
--   oeisIx = count0 0 . (oeisIx @40) where
--      count0 c x | d == 0    = if x < 10 then c + 1 else count0 (c + 1) x'
--                 | otherwise = if x < 10 then c else count0 c x'
--                 where (x', d) = divMod x 10

-- instance OEIS 85975 where
--   oeisIx = count1 0 . (oeisIx @40) where
--      count1 c x | d == 1    = if x < 10 then c + 1 else count1 (c + 1) x'
--                 | otherwise = if x < 10 then c else count1 c x'
--                 where (x', d) = divMod x 10

-- instance OEIS 85976 where
--   oeisIx = count2 0 . (oeisIx @40) where
--      count2 c x | d == 2    = if x < 10 then c + 1 else count2 (c + 1) x'
--                 | otherwise = if x < 10 then c else count2 c x'
--                 where (x', d) = divMod x 10

-- instance OEIS 85977 where
--   oeisIx = count3 0 . (oeisIx @40) where
--      count3 c x | d == 3    = if x < 10 then c + 1 else count3 (c + 1) x'
--                 | otherwise = if x < 10 then c else count3 c x'
--                 where (x', d) = divMod x 10

-- instance OEIS 85978 where
--   oeisIx = count4 0 . (oeisIx @40) where
--      count4 c x | d == 4    = if x < 10 then c + 1 else count4 (c + 1) x'
--                 | otherwise = if x < 10 then c else count4 c x'
--                 where (x', d) = divMod x 10

-- instance OEIS 85979 where
--   oeisIx = count5 0 . (oeisIx @40) where
--      count5 c x | d == 5    = if x < 10 then c + 1 else count5 (c + 1) x'
--                 | otherwise = if x < 10 then c else count5 c x'
--                 where (x', d) = divMod x 10

-- instance OEIS 85980 where
--   oeisIx = count6 0 . (oeisIx @40) where
--      count6 c x | d == 6    = if x < 10 then c + 1 else count6 (c + 1) x'
--                 | otherwise = if x < 10 then c else count6 c x'
--                 where (x', d) = divMod x 10

-- instance OEIS 85981 where
--   oeisIx = count7 0 . (oeisIx @40) where
--      count7 c x | d == 7    = if x < 10 then c + 1 else count7 (c + 1) x'
--                 | otherwise = if x < 10 then c else count7 c x'
--                 where (x', d) = divMod x 10

-- instance OEIS 85982 where
--   oeisIx = count8 0 . (oeisIx @40) where
--      count8 c x | d == 8    = if x < 10 then c + 1 else count8 (c + 1) x'
--                 | otherwise = if x < 10 then c else count8 c x'
--                 where (x', d) = divMod x 10

-- instance OEIS 85983 where
--   oeisIx = count9 0 . (oeisIx @40) where
--      count9 c x | d == 9    = if x < 10 then c + 1 else count9 (c + 1) x'
--                 | otherwise = if x < 10 then c else count9 c x'
--                 where (x', d) = divMod x 10

-- instance OEIS 86005 where
--   oeis = filter
--      (\x -> (oeisIx @64911) (x - 1) == 1 && (oeisIx @64911) (x + 1) == 1) (oeis @100484)

-- instance OEIS 86006 where
--   oeisIx = flip div 2 . (oeisIx @86005)

instance OEIS 86099 where
  oeisIx (fi->n) = fi do foldl1 (.|.) $ zipWith (.&.) [0..] $ reverse [0..n] :: Integer

-- instance OEIS 86283 where
--   oeisIx n = x086283_list !! (n - 1)
--   oeis = 1 : 1 : f 1 0 [1..] where
--      f x y (z:zs) = u : f u (abs $ x - u) zs where
--        u = minimum [if v < x then x - v else x + v |
--                     v <- if y < z then [y + z] else [y + z, y - z]]

-- instance OEIS 86299 where
--   oeisIx = fromEnum . (<= 7) . (oeisIx @6530)

-- instance OEIS 86417 where
--   oeisIx n = (2 ^ (oeisIx n + 1) - 1) * (3 ^ (oeisIx n + 1) - 1) `div` 2

-- instance OEIS 86457 where
--   oeis = filter (\x -> (oeisIx @30) x == (oeisIx @30) (x^2) &&
--                                oeisIx x == (oeisIx @10879) (x^2)) [0..]

-- instance OEIS 86500 where
--   oeis = scanl1 (+) $ tail (oeis @181900)

-- instance OEIS 86517 where
--   oeisIx n = (oeis @86517) !! (n - 1)
--   oeis = 1 : f 1 [3, 5 ..] where
--      f x zs = g zs where
--        g (y:ys) = if (oeisIx @10051)' ((x + y) `div` 2) == 1
--                      then y : f y (delete y zs) else g ys

-- instance OEIS 86518 where
--   oeis = zipWith ((flip div 2 .) . (+))
--                          (oeis @86517) $ tail (oeis @86517)

-- instance OEIS 86754 where
--   oeis = concat $ concat $ iterate ([[1,1],[1,1]] *) [1]
--   instance Num a => Num [a] where
--      fromInteger k = [fromInteger k]
--      (p:ps) + (q:qs) = p + q : ps + qs
--      ps + qs         = ps ++ qs
--      (p:ps) * qs'@ (q:qs) = p * q : ps * qs' + [p] * qs
--      _ * _               = []

-- instance OEIS 86793 where
--   oeisIx = f 0 where
--      f y x = if x == 15 then y else f (y + 1) (oeisIx x)

-- instance OEIS 86799 where
--   oeisIx n | even n    = (oeisIx $ div n 2) * 2 + 1
--             | otherwise = n

instance OEIS 86849 where
  oeis = scanl1 (+) (oeis @37)

-- instance OEIS 86862 where
--   oeis = zipWith (-) (tail (oeis @2113)) (oeis @2113)

-- instance OEIS 86892 where
--   oeis = tail $ zipWith gcd (oeis @225) (oeis @3462)

-- instance OEIS 86901 where
--   oeis = 1 : 1 : zipWith (+)
--                  (map (* 3) (oeis @86901)) (map (* 4) $ tail (oeis @86901))

-- instance OEIS 86971 where
--   oeisIx = sum . map (oeisIx @64911) . (rowT @27750)

-- instance OEIS 87039 where
--   oeisIx n | null ps   = 1
--             | otherwise = head ps
--             where ps = tail $ reverse $ (rowT @27746) n

-- instance OEIS 87057 where
--   oeis = f [2..] where
--      f (x:xs) = x : f (us ++ vs) where (us, _ : vs) = splitAt (x - 1) xs

-- instance OEIS 87069 where
--   oeisIx =
--      sum . unfoldr (\x -> if x == 0 then Nothing else Just (x, x `div` 4))

-- instance OEIS 87112 where
--   oeis = tablList @87112
-- instance Table 87112 where
--   rowCol = rowCol_off @87112 @1 @1
--   rowT n = map (* last ps) ps where ps = take n (oeis @40)
--   tabl = map (rowT @87112) [1..]

-- instance OEIS 87116 where
--   oeisIx 0 = 1
--   oeisIx n = f 0 n where
--      f y 0 = y
--      f y x = if r == 0 then g x' else f y x'
--              where (x', r) = divMod x 2
--                    g z = if r == 0 then g z' else f (y + 1) z'
--                          where (z', r) = divMod z 2

-- instance OEIS 87117 where
--   oeisIx 0       = 1
--   oeisIx n
--     | null $ zs n = 0
--     | otherwise   = maximum $ map length $ zs n where
--     zs = filter ((== 0) . head) . group .
--          unfoldr (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2)

instance OEIS 87153 where
  oeisIx = p (oeis @37) where
     p _          0 = 1
     p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

instance OEIS 87154 where
  oeisIx = p (oeis @37) where
     p _      0 = 1
     p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

instance OEIS 87172 where
  oeisIx = head . (rowT @35516) . succ

-- instance OEIS 87188 where
--   oeisIx = p (oeis @5117) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 87207 where
--   oeisIx = sum . map ((2 ^) . (subtract 1) . (oeisIx @49084)) . (rowT @27748)

-- instance OEIS 87226 where
--   oeisIx = foldl1 lcm . (rowT @70165)

-- instance OEIS 87279 where
--   oeis = 0 : 2 : f (drop 2 (oeis @290))
--      where f (x:xs) = x-1 : x+1 : f xs

-- instance OEIS 87349 where
--   oeisIx n = (oeisIx @20639) (n + 1) + n

-- instance OEIS 87370 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . subtract 1 . (* 3)) [0..]

-- instance OEIS 87401 where
--   oeis = tablList @87401
-- instance Table 87401 where
--   rowT n = (tabl @87401) !! n
--   tabl = iterate f [0] where
--      f row = row' ++ [last row'] where row' = zipWith (+) row [0..]

-- instance OEIS 87624 where
--   oeisIx n = if (oeisIx @10051) n == 1 then 0 else (oeisIx @1221) n

-- instance OEIS 87686 where
--   oeisIx n = (oeis @87686) !! (n - 1)
--   oeis = map succ $ findIndices (> 1) (oeis @51135)

-- instance OEIS 87695 where
--   oeis = filter
--      (\x -> (oeisIx @10051)' (x - 3) == 1 && (oeisIx @10051)' (x + 3) == 1) [2, 4 ..]

-- instance OEIS 87712 where
--   oeisIx 1 = 1
--   oeisIx n = read $ concatMap (show . (oeisIx @49084)) $ (rowT @27746) n :: Integer

-- instance OEIS 87713 where
--   oeisIx = (oeisIx @6530) . (oeisIx @84920)

-- instance OEIS 87808 where
--   oeisIx n = (oeis @87808) !! n
--   oeis = 0 : concat
--      (transpose [map (+ 1) (oeis @87808), map (* 2) $ tail (oeis @87808)])

instance OEIS 87811 where
  oeisIx (succ->n) = (n + n `mod` 2) * (n + 2 - n `mod` 2) `div` 4

-- instance OEIS 87875 where
--   oeisIx n = genericIndex (oeis @87875) (n - 1)
--   oeis = 1 : 1 : zipWith (+)
--      (map (oeisIx @87875) $ zipWith (-) [3..] (oeis @87875))
--      (map (oeisIx @720) $ zipWith (-) [3..] $ tail (oeis @720))

-- instance OEIS 87897 where
--   oeisIx = p [3,5..] where
--      p [] _ = 0
--      p _  0 = 1
--      p ks'@ (k:ks) m | m < k     = 0
--                     | otherwise = p ks' (m - k) + p ks m

-- instance OEIS 87960 where
--   oeisIx n = (-1) ^ (n * (n + 1) `div` 2)
--   oeis = cycle [1,-1,-1,1]

-- instance OEIS 87980 where
--   oeisIx n = (oeis @87980) !! (n - 1)
--   oeis = 1 : filter f [2..] where
--      f x = isPrefixOf ps (oeis @40) && all (< 0) (zipWith (-) (tail es) es)
--            where ps = (rowT @27748) x; es = (rowT @124010) x

instance OEIS 88157 where
  oeisIx n = mod (div (n ^ n) (60 ^ n)) 60

-- instance OEIS 88208 where
--   oeis = tablList @88208
-- instance Table 88208 where
--   rowCol n k = (tabf @88208) !! (n - 1) !! (k-1)
--   rowT n = (tabf @88208) !! (n - 1)
--   tabf = iterate f [1] where
--      f vs = (map (subtract 1) ws) ++ reverse ws where ws = map (* 2) vs

-- instance OEIS 88209 where
--   oeis = zipWith (+) (oeis @45) $ tail (oeis @45925)

-- instance OEIS 88226 where
--   oeis = 0 : 0 : 1 : zipWith3 (\u v w -> abs (w - v - u))
--                  (oeis @88226) (tail (oeis @88226)) (drop 2 (oeis @88226))

-- instance OEIS 88230 where
--   oeis = 0 : f [1..] [0] where
--      f (x:xs) ys@ (y:_)
--       | x <= y && (length $ filter (== z) ys) <= 1 = z : f xs (z : ys)
--       | otherwise = (x + y) : f xs ((x + y) : ys)  where z = y - x

-- instance OEIS 88314 where
--   oeisIx = sum . concat . ps 1 where
--      ps _ 0 = [[]]
--      ps i j = [t:ts | t <- [i..j], ts <- ps t (j - t)]

instance OEIS 88323 where
  oeisIx ((+2)->n) = sum $ map (f n) [2 .. n - 1] where
     f x b = if x == 0 then 1 else if d /= 1 then 0 else f x' b
                                   where (x',d) = divMod x b

-- instance OEIS 88359 where
--   oeisIx n = (oeis @88359) !! (n - 1)
--   oeis = map succ $ elemIndices 1 (oeis @51135)

-- instance OEIS 88380 where
--   oeisIx n = (oeis @88382) !! (n - 1)
--   oeis = [x | x <- [1..], x <= (oeisIx @20639) x ^ 3]

-- instance OEIS 88381 where
--   oeis = filter f [1..] where
--                         f x = p ^ 2 < div x p  where p = (oeisIx @20639) x

-- instance OEIS 88382 where
--   oeis = [x | x <- [1..], x <= (oeisIx @20639) x ^ 4]

-- instance OEIS 88383 where
--   oeis = [x | x <- [1..], x  (oeisIx @20639) x ^ 4]

-- instance OEIS 88442 where
--   oeisIx = (+ 1) . (oeisIx @4514)

-- instance OEIS 88517 where
--   oeisIx n = (oeisIx @1462) (n + 1) - (oeisIx @1462) n
--   oeis = zipWith (-) (tail (oeis @1462)) (oeis @1462)

-- instance OEIS 88534 where
--   oeisIx n = length
--      [ (x,y) | y <- [0..oeisIx n], x <- [0..y], x^2 + x*y + y^2 == n]
--   oeis = map (oeisIx @88534) [0..]

-- instance OEIS 88567 where
--   oeisIx n = (oeis @88567) !! n
--   oeis = 1 : tail xs where
--      xs = 0 : 1 : zipWith (+) xs (tail $ concat $ transpose [xs, tail xs])

-- instance OEIS 88580 where
--   oeisIx = (+ 1) . (oeisIx @203)

-- instance OEIS 88631 where
--   oeisIx n = (oeisIx @60265) n - n

-- instance OEIS 88643 where
--   oeisIx_tabl = map (rowT @88643) [1..]
--   oeisIx n k = (rowT @88643) n !! (k-1)
--   oeisIx_row n = n : f n [n - 1, n-2 .. 1] where
--      f u vs = g vs where
--        g []                            = []
--        g (x:xs) | (oeisIx @10051) (x + u) == 1 = x : f x (delete x vs)
--                 | otherwise            = g xs

-- instance OEIS 88670 where
--   oeisIx = p $ tail (oeis @10785) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 88696 where
--   oeis = f [1] where
--      f (x:xs) = x : f (xs ++ [x + 1 - x `mod` 2, x + x `mod` 2])

instance OEIS 88705 where
  oeis = 0 : zipWith (-) (tail (oeis @120)) (oeis @120)

-- instance OEIS 88707 where
--   oeisIx = (+ 1) . (oeisIx @1358)

-- instance OEIS 88723 where
--   oeis = filter f [2..] where
--      f x = 1 `elem` (zipWith (-) (tail divs) divs)
--            where divs = tail $ (rowT @27750) x

-- instance OEIS 88732 where
--   oeisIx n = head [q | q <- [2 * n + 1, 3 * n + 2 ..], (oeisIx @10051)' q == 1]

-- instance OEIS 88733 where
--   oeisIx n = last $ take n $
--               [q | q <- [2 * n + 1, 3 * n + 2 ..], (oeisIx @10051)' q == 1]

-- instance OEIS 88763 where
--   oeisIx = flip div 2 . (oeisIx @87695)

-- instance OEIS 88864 where
--   oeisIx 1 = 0
--   oeisIx n = maximum $ zipWith ((*) `on` foldr (\d v -> v * 2 + d) 0)
--               (init $ tail $ inits bs) (init $ tail $ tails bs)
--               where bs = (rowT @30308) n

-- instance OEIS 88878 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . subtract 2 . (* 3)) (oeis @40)

-- instance OEIS 88956 where
--   oeis = tablList @88956
-- instance Table 88956 where
--   rowCol n k =  (oeisIx @95890) (n + 1) (k + 1) * (oeisIx @7318)' n k `div` (n - k + 1)
--   rowT n = map (oeisIx n) [0..n]
--   tabl = map (rowT @88956) [0..]

-- instance OEIS 88957 where
--   oeisIx = sum . (rowT @88956)

-- instance OEIS 88961 where
--   oeis = concat $ concat $ map f [1..] where
--      f x = take x $ g (take x (1 : [0,0..])) where
--        g us = (take x $ g' us) : g (0 : init us)
--        g' vs = last $ take (2 * x + 1) $
--                       map snd $ iterate h (0, vs ++ reverse vs)
--      h (p,ws) = (1 - p, drop p $ zipWith (+) ([0] ++ ws) (ws ++ [0]))

-- instance OEIS 89072 where
--   oeisIx = flip (^)
--   oeisIx_row n = map (oeisIx n) [1..n]
--   oeisIx_tabl = map (rowT @89072) [1..]

-- instance OEIS 89088 where
--   oeisIx n = (oeis @89088) !! n
--   oeis = 1 : 2 : f [3..] [1,2] where
--     f xs ys = y : f (delete y xs) (y : ys) where
--       y = head $ filter (\z -> any (> 1) $ map (gcd z) ys) xs

instance OEIS 89128 where
  oeisIx = gcd 6

-- instance OEIS 89189 where
--   oeisIx n = (oeis @97375) !! (n - 1)
--   oeis = filter ((== 1) . (oeisIx @212793) . (subtract 1)) (oeis @40)

-- instance OEIS 89194 where
--   oeis = filter ((== 1) . (oeisIx @212793) . (+ 1)) (oeis @97375)

-- instance OEIS 89224 where
--   oeisIx = (oeisIx @23416) . (oeisIx @23416)

-- instance OEIS 89229 where
--   oeis = f (oeis @18252) $ tail (oeis @290) where
--      f (u:us) vs'@ (v:vs) = if u < v then u : f us vs' else f us vs

-- instance OEIS 89233 where
--   oeisIx n = sum $ [oeisIx $ gcd u v | let ds = tail $ (rowT @27750) n,
--                                          u <- ds, v <- dropWhile (<= u) ds]

-- instance OEIS 89237 where
--   oeis = merge (oeis @40) (oeis @290) where
--      merge xs'@ (x:xs) ys'@ (y:ys) =
--            if x < y then x : merge xs ys' else y : merge xs' ys

-- instance OEIS 89247 where
--   oeisIx n = product $ zipWith (^)
--                         (oeisIx_row n) (reverse $ sort $ (rowT @124010) n)

-- instance OEIS 89341 where
--   oeis = filter (\x -> (oeisIx @6530) x < 2 * (oeisIx @20639) x) (oeis @24619)

-- instance OEIS 89589 where
--   import Data.Text (Text); import qualified Data.Text as T (all)
--   import Text.Numeral.Grammar.Reified (defaultInflection)
--   import qualified Text.Numeral.Language.EN as EN
--   oeisIx n = (oeis @89589) !! (n - 1)
--   oeis = filter (T.all (/= 'i') . numeral) [0..] where
--      numeral :: Integer -> Text
--      numeral = fromJust . EN.gb_cardinal defaultInflection

-- instance OEIS 89590 where
--   import Data.Text (Text); import qualified Data.Text as T (all)
--   import Text.Numeral.Grammar.Reified (defaultInflection)
--   import qualified Text.Numeral.Language.EN as EN
--   oeisIx n = (oeis @89590) !! (n - 1)
--   oeis = filter (T.all (/= 'u') . numeral) [0..] where
--      numeral :: Integer -> Text
--      numeral = fromJust . EN.gb_cardinal defaultInflection

-- instance OEIS 89610 where
--   oeisIx n = sum $ map (oeisIx @10051)' [n^2 .. n* (n+1)]

-- instance OEIS 89625 where
--   oeisIx n = f n 0 (oeis @40) where
--      f 0 y _      = y
--      f x y (p:ps) = f x' (y + p * r) ps where (x',r) = divMod x 2

instance OEIS 89633 where
  oeis = [2 ^ t - 2 ^ k - 1 | t <- [1..], k <- [t - 1,t - 2..0]]

-- instance OEIS 89648 where
--   oeis = filter ((<= 1) . abs . (oeisIx @37861)) [0..]

-- instance OEIS 89781 where
--   oeisIx n = (oeis @89781) !! (n - 1)
--   oeis = 1 : f [1..] 1 where
--      f xs y = g xs where
--        g (z:zs) = if gcd y z == 1 then y' : f (delete z xs) y' else g zs
--                   where y' = y + z

-- instance OEIS 89898 where
--   oeisIx n = if n < 10 then n + 1 else (d + 1) * (oeisIx @89898) n'
--               where (n', d) = divMod n 10

-- instance OEIS 89911 where
--   oeis = 0 : 1 : zipWith (\u v -> (u + v) `mod` 12)
--                          (tail (oeis @89911)) (oeis @89911)

-- instance OEIS 89951 where
--   oeis = [x | x <- [0..], (oeisIx @30) x == (oeisIx @30) (x ^ 2)]

-- instance OEIS 89999 where
--   oeisIx = (oeisIx @217) . (oeisIx @211201)

-- instance OEIS 90050 where
--   oeis = [x | x <- [1..], (oeisIx @87117) x == (oeisIx @38374) x]

-- instance OEIS 90076 where
--   oeis = zipWith (*) (oeis @40) $ drop 2 (oeis @40)

-- instance OEIS 90079 where
--   oeisIx = foldr (\b v -> 2 * v + b) 0 . map head . group . (rowT @30308)

-- instance OEIS 90127 where
--   oeis = f (oeis @10) [] where
--     f (x:xs) phis | x `elem` phis = f xs phis
--                   | otherwise     = x : f xs (x : phis)

-- instance OEIS 90390 where
--   oeis = 1 : 1 : 9 : zipWith (-) (map (* 5) $
--      tail $ zipWith (+) (tail (oeis @90390)) (oeis @90390)) (oeis @90390)

-- instance OEIS 90418 where
--   oeisIx n = (oeis @90418) !! (n - 1)
--   oeis = 0 : f 2 where
--      f x = (sum $ map g bpss) : f (x + 1) where
--        g ps | suffix == Nothing = 0
--             | suffix' == []     = 1
--             | last suffix' == 0 = 0
--             | otherwise         = (oeisIx @90418) $ fromBits suffix'
--             where suffix' = fromJust suffix
--                   suffix = stripPrefix ps $ toBits x
--        bpss = take (fromInteger $ (oeisIx @720) x) $
--                     map (toBits . fromInteger) (oeis @40)
--      toBits = unfoldr
--               (\u -> if u == 0 then Nothing else Just (mod u 2, div u 2))
--      fromBits = foldr (\b v -> 2 * v + b) 0

-- instance OEIS 90419 where
--   oeis = filter ((== 0) . (oeisIx @90418)) [1..]

-- instance OEIS 90420 where
--   oeis = filter ((== 1) . (oeisIx @90418)) [1..]

-- instance OEIS 90421 where
--   oeis = filter ((> 0) . (oeisIx @90418)) [1..]

-- instance OEIS 90422 where
--   oeis = filter ((== 1) . (oeisIx @90418) . fromInteger) (oeis @40)

-- instance OEIS 90423 where
--   oeis = filter ((> 1 ) . (oeisIx @90418) . fromInteger) (oeis @40)

-- instance OEIS 90424 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @90418))

-- instance OEIS 90425 where
--   oeisIx n = snd $ until ((== 1) . fst)
--                           (\ (u, v) -> (oeisIx u, v + 1)) (oeisIx n, 1)

-- instance OEIS 90431 where
--   oeisIx n = (oeisIx @7953) n - (oeisIx @7605) n

-- instance OEIS 90503 where
--   oeis = f [1..] where
--      f (x:xs) = g $ tail (oeis @961) where
--        g (q:pps) = h 0 $ map ((`div` (q - 1)) . subtract 1) $
--                              iterate (* q) (q ^ 3) where
--          h i (qy:ppys) | qy > x    = if i == 0 then f xs else g pps
--                        | qy < x    = h 1 ppys
--                        | otherwise = x : f xs

-- instance OEIS 90529 where
--   oeis = f 1 1 0 where
--     f w v u = if u <= w then v : f w v (u+1) else v' : f (w*v') v' (u+1)
--               where v' = v + 1

-- instance OEIS 90582 where
--   oeis = tablList @90582
-- instance Table 90582 where
--   rowCol = rowCol_off @90582 @1 @1
--   rowT   = rowT_off   @90582 @1
--   tabl = map reverse (tabl @19538)

-- instance OEIS 90597 where
--   oeis = [0,1,1,3,3,8,12] ++ zipWith (-)
--      (drop 4 $ zipWith (-) (map (* 5) zs) (drop 2 (oeis @90597)))
--      (zipWith (+) (drop 2 $ map (* 2) zs) (map (* 8) zs))
--      where zs = zipWith (+) (oeis @90597) $ tail (oeis @90597)

-- instance OEIS 90633 where
--   oeisIx n = numerator z where
--      [z] = (until ((== 1) . length) avg) $ map (1 %) [1..n]
--      avg xs = zipWith (\x x' -> (x + x') / 2) (tail xs) xs

-- instance OEIS 90634 where
--   oeisIx n = denominator z where
--      [z] = (until ((== 1) . length) avg) $ map (1 %) [1..n]
--      avg xs = zipWith (\x x' -> (x + x') / 2) (tail xs) xs

-- instance OEIS 90636 where
--   oeis = iterate (oeisIx @3415) 15

-- instance OEIS 90771 where
--   oeis = 1 : 9 : map (+ 10) (oeis @90771)

-- instance OEIS 90794 where
--   oeisIx = genericLength . filter odd . map (length . group) . ps 1 where
--      ps x 0 = [[]]
--      ps x y = [t:ts | t <- [x..y], ts <- ps t (y - t)]

-- instance OEIS 90824 where
--   oeis = tablList @90824
-- instance Table 90824 where
--   rowT n = (tabl @90824) !! n
--   tabl = zipWith (zipWith p)
--      (map (\x -> map (`enumFromTo` x) [1..x+1]) [0..]) (tabl @7318)
--      where p _          0 = 1
--            p []         _ = 0
--            p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 90826 where
--   oeisIx n = (oeis @90826) !! n
--   oeis = map (sum . zipWith (*) (oeis @45) . reverse) $
--                      tail $ inits (oeis @108)

-- instance OEIS 90895 where
--   oeis = 1 : f 2 1 where
--      f x y = z : f (x + 1) z where
--           z = if m == 0 then y' else x + y; (y',m) = divMod y 2

-- instance OEIS 91050 where
--   oeisIx = sum . map (oeisIx @75802) . (rowT @27750)

-- instance OEIS 91067 where
--   oeisIx n = (oeis @91067) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 1 (oeis @14707)

-- instance OEIS 91072 where
--   oeisIx n = (oeis @91072) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @14707)

instance OEIS 91090 where
  oeis = 1 : f [1,1] where f (x:y:xs) = y : f (x:xs ++ [x,x+y])

-- instance OEIS 91191 where
--   oeis = filter f [1..] where
--      f x = sum pdivs > x && all (<= 0) (map (\d -> (oeisIx @203) d - 2 * d) pdivs)
--            where pdivs = (rowT @27751) x

-- instance OEIS 91376 where
--   oeis = [x | x <- (oeis @2808), (oeisIx @1222) x == (oeisIx @20639) x]

-- instance OEIS 91441 where
--   oeis = tablList @91441
-- instance Table 91441 where
--   rowCol = rowCol_off @91441 @1 @1
--   rowT   = rowT_off   @91441 @1
--   tabl = iterate f [1] where
--      f xs = zipWith (+)
--        (zipWith (*) ([0] ++ xs) ks) (zipWith (*) (xs ++ [0]) (reverse ks))
--        where ks = [1 .. 1 + genericLength xs]

-- instance OEIS 91491 where
--   oeis = tablList @91491
-- instance Table 91491 where
--   rowT n = (tabl @91491) !! n
--   tabl = iterate (\row -> 1 : scanr1 (+) row) [1]

-- instance OEIS 91633 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @136333)

-- instance OEIS 91856 where
--   oeis = 1 : f 1 1 [2..] where
--      f s z xs = g xs where
--        g (u:us) = if gcd u z - s /= 1 then u : f (1 - s) u us else g us

-- instance OEIS 91857 where
--   oeisIx n = (oeis @91857) !! (n - 1)
--   oeis = 1 : f 1 1 [2..] where
--      f 1 z xs = g xs where
--        g (u:us) = if gcd u z == 1 then u : f 0 u (delete u xs) else g us
--      f 0 z xs = h xs where
--        h (v:vs) = if gcd v z /= 1 then v : f 1 v (delete v xs) else h vs

-- instance OEIS 91871 where
--   oeis = f [1..] (oeis @40) where
--      f (i:is) (p:ps) = if (null $ show p `intersect` "024568")
--                           then i : f is ps else f is ps

-- instance OEIS 91998 where
--   oeis = 1 : 11 : map (+ 12) (oeis @91998)

-- instance OEIS 91999 where
--   oeis = 2 : 10 : map (+ 12) (oeis @91999)

-- instance OEIS 92038 where
--   oeis = 1 : zipWith (\u v -> v + (v `mod` 2) ^ (u `mod` v))
--                              [2..] (oeis @92038)

-- instance OEIS 92206 where
--   oeis = filter ((== 0) . (oeisIx @214295)) [1..]

-- instance OEIS 92246 where
--   oeis = filter odd (oeis @69)

-- instance OEIS 92306 where
--   oeisIx = genericLength . filter even . map (length . group) . ps 1 where
--      ps x 0 = [[]]
--      ps x y = [t:ts | t <- [x..y], ts <- ps t (y - t)]

instance OEIS 92338 where
  oeisIx (succ->n) = genericLength $ filter (<= 1) $ map (mod n) [1..n]

-- instance OEIS 92392 where
--   oeis = tablList @92392
-- instance Table 92392 where
--   rowCol = rowCol_off @92392 @1 @1
--   rowT   = rowT_off   @92392 @1
--   tabl = map reverse (tabl @46899)

-- instance OEIS 92401 where
--   oeisIx n = (oeis @92401) !! (n - 1)
--   oeis = f [1..] where
--      f (x:xs) = x : x' : f (delete x' xs) where x' = 3*x

instance OEIS 92410 where
  oeis = zipWith (+) (oeis @8683) $ tail (oeis @8683)

-- instance OEIS 92495 where
--   oeisIx n = fromJust $ find ((== 0) . (`mod` n)) $ (oeis @142)

-- instance OEIS 92525 where
--   oeisIx n = f n n where
--      f x y = if m == 0 then f x' (2 * y + 1) else y
--              where (x', m) = divMod x 2

-- instance OEIS 92539 where
--   oeis = scanl1 (\v d -> 2 * v + d) $ map toInteger (oeis @51023)

-- instance OEIS 92620 where
--   oeisIx n = (oeis @92620) !! (n - 1)
--   oeis = elemIndices 1 (oeis @193238)

-- instance OEIS 92624 where
--   oeisIx n = (oeis @92624) !! (n - 1)
--   oeis = elemIndices 2 (oeis @193238)

-- instance OEIS 92625 where
--   oeisIx n = (oeis @92625) !! (n - 1)
--   oeis = elemIndices 3 (oeis @193238)

-- instance OEIS 92693 where
--   oeisIx 1 = 0
--   oeisIx n = (+ 1) $ sum $ takeWhile (/= 1) $ iterate (oeisIx @10) $ (oeisIx @10) n

-- instance OEIS 92694 where
--   oeisIx n = snd $ until ((== 1) . fst) f (oeisIx n, 1) where
--      f (x, p) = (oeisIx x, p * x)

-- instance OEIS 92695 where
--   oeis = scanl (+) 0 $
--                  map (fromEnum . (> 7)) (8 : tail (oeis @20639))

-- instance OEIS 92754 where
--   oeisIx n = if n < 2 then n else 2 * (oeisIx @92754) n' + m + 1
--               where (n',m) = divMod n 2
--   oeis = map (oeisIx @92754) [1..]

-- instance OEIS 92892 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @6666))

-- instance OEIS 92953 where
--   oeisIx n = sum $
--      zipWith (\u v -> (oeisIx @10051)' u * (oeisIx @10051)' v) [1 .. n - 1] [n + 1 ..]

-- instance OEIS 92954 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @92953))

-- instance OEIS 93017 where
--   oeisIx n = if n == 0 then 0 else (oeisIx @93017) n' + (oeisIx @7953) (2 * t) + d
--               where (n', td) = divMod n 100; (t, d) = divMod td 10

-- instance OEIS 93018 where
--   oeis = filter ((== 1) . (oeisIx @249832)) [0..]

-- instance OEIS 93019 where
--   oeisIx = flip mod 10 . (oeisIx @93018)

-- instance OEIS 93020 where
--   oeis = filter ((== 0) . (oeisIx @93019)) [0..]

-- instance OEIS 93021 where
--   oeis = filter ((== 1) . (oeisIx @93019)) [0..]

-- instance OEIS 93022 where
--   oeis = filter ((== 2) . (oeisIx @93019)) [0..]

-- instance OEIS 93023 where
--   oeis = filter ((== 3) . (oeisIx @93019)) [0..]

-- instance OEIS 93024 where
--   oeis = filter ((== 4) . (oeisIx @93019)) [0..]

-- instance OEIS 93025 where
--   oeis = filter ((== 5) . (oeisIx @93019)) [0..]

-- instance OEIS 93026 where
--   oeis = filter ((== 6) . (oeisIx @93019)) [0..]

-- instance OEIS 93027 where
--   oeis = filter ((== 7) . (oeisIx @93019)) [0..]

-- instance OEIS 93028 where
--   oeis = filter ((== 8) . (oeisIx @93019)) [0..]

-- instance OEIS 93029 where
--   oeis = filter ((== 9) . (oeisIx @93019)) [0..]

-- instance OEIS 93074 where
--   oeisIx 1 = 2
--   oeisIx n = maximum $ map (oeisIx @6530) [n - 1..n+1]

-- instance OEIS 93094 where
--   oeis = f [2,2] where
--      f (u : vs@ (v : _)) = u : f (vs ++
--        if w < 10 then [w] else uncurry ((. return) . (:)) $ divMod w 10)
--           where w = u * v

-- instance OEIS 93095 where
--   oeis = f [2,3] where
--      f (u : vs@ (v : _)) = u : f (vs ++
--        if w < 10 then [w] else uncurry ((. return) . (:)) $ divMod w 10)
--           where w = u * v

-- instance OEIS 93096 where
--   oeis = f [3,3] where
--      f (u : vs@ (v : _)) = u : f (vs ++
--        if w < 10 then [w] else uncurry ((. return) . (:)) $ divMod w 10)
--           where w = u * v

instance OEIS 93391 where
  oeisIx n = sum $ map ((flip div 16) . (+ n)) [0..3]

-- instance OEIS 93445 where
--   oeis = tablList @93445
-- instance Table 93445 where
--   rowCol n k = (rowT @93445) n !! (k-1)
--   rowT n = f [n, n - 1 .. 1] [1 ..] where
--      f [] _      = []
--      f (x:xs) ys = sum us : f xs vs where (us,vs) = splitAt x ys
--   tabl = map (rowT @93445) [1 ..]

-- instance OEIS 93446 where
--   oeisIx = maximum . (rowT @93445)

-- instance OEIS 93483 where
--   oeis = f ([2..7] ++ [8,14..]) [] where
--      f (x:xs) ys = if all (== 1) $ map (oeisIx . (+ x)) ys
--                       then x : f xs ((x+1):ys) else f xs ys

instance OEIS 93485 where
  oeisIx n = (9 * n * (3 * n + 1) + 2) `div` 2

-- instance OEIS 93506 where
--   oeis = 1 : 2 : f 1 [1] [3,5..] [4,6..]
--      where f 0 (z:zs) odds evens = orun ++ f 1 (zs ++ orun) odds' evens
--              where (orun, odds') = splitAt z odds
--            f 1 (z:zs) odds evens = erun ++ f 0 (zs ++ erun) odds evens'
--              where (erun, evens') = splitAt z evens

-- instance OEIS 93560 where
--   oeis = tablList @93560
-- instance Table 93560 where
--   rowT n = (tabl @93560) !! n
--   tabl = [1] : iterate
--                  (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [3, 1]

-- instance OEIS 93561 where
--   oeis = tablList @93561
-- instance Table 93561 where
--   rowT n = (tabl @93561) !! n
--   tabl = [1] : iterate
--                  (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [4, 1]

-- instance OEIS 93562 where
--   oeis = tablList @93562
-- instance Table 93562 where
--   rowT n = (tabl @93562) !! n
--   tabl = [1] : iterate
--                  (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [5, 1]

-- instance OEIS 93563 where
--   oeis = tablList @93563
-- instance Table 93563 where
--   rowT n = (tabl @93563) !! n
--   tabl = [1] : iterate
--                  (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [6, 1]

-- instance OEIS 93564 where
--   oeis = tablList @93564
-- instance Table 93564 where
--   rowT n = (tabl @93564) !! n
--   tabl = [1] : iterate
--                  (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [7, 1]

-- instance OEIS 93565 where
--   oeis = tablList @93565
-- instance Table 93565 where
--   rowT n = (tabl @93565) !! n
--   tabl = [1] : iterate
--                  (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [8, 1]

-- instance OEIS 93573 where
--   oeis = tablList @93573
-- instance Table 93573 where
--   rowCol n k = (rowT @93573) n !! (k-1)
--   rowT n = take n $ elemIndices n (oeis @20986)
--   tabl = map (rowT @93573) [1..]

-- instance OEIS 93640 where
--   oeisIx n  = genericLength [d | d <- [1..n], mod n d == 0,
--                            show (oeisIx d) `isInfixOf` show (oeisIx n)]

-- instance OEIS 93641 where
--   oeis = filter ((<= 2) . (oeisIx @1227)) [1..]

-- instance OEIS 93642 where
--   oeisIx n = (oeis @93642) !! (n - 1)
--   oeis = filter
--     (\x -> not $ all (`isInfixOf` b x) $ map b $ (rowT @27750) x) [1..] where
--     b = unfoldr (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2)

-- instance OEIS 93644 where
--   oeis = tablList @93644
-- instance Table 93644 where
--   rowT n = (tabl @93644) !! n
--   tabl = [1] : iterate
--                  (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [9, 1]

-- instance OEIS 93645 where
--   oeis = tablList @93645
-- instance Table 93645 where
--   rowT n = (tabl @93645) !! n
--   tabl = [1] : iterate
--                  (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [10, 1]

-- instance OEIS 93703 where
--   oeis = filter
--      ((`elem` map (oeisIx @61493) [1..3999]) . (oeisIx @4086) . (oeisIx @61493)) [1..]

-- instance OEIS 93771 where
--   oeis = [oeisIx x | x <- [2..], (oeisIx @10051) (oeisIx x) == 1]

-- instance OEIS 93783 where
--   oeisIx n = q 0 $ (oeisIx @61493) n where
--        q s 0 = s
--        q s x = q (s + [0,1,5,10,50,100,500,1000] !! d') x'
--                where  (x',d) = divMod x 10; d' = fromInteger d

-- instance OEIS 93785 where
--   oeis = filter p [1..3999] where
--      p v = q $ (oeisIx @61493) v where
--        q w = w == 0 || v `mod` ([0,1,5,10,50,100,500,1000] !! d') == 0 && q w'
--             where  (w',d) = divMod w 10; d' = fromInteger d

-- instance OEIS 93796 where
--   oeisIx n = (oeis @93796) !! n
--   oeis = concatMap (reverse . unfoldr r) $ map (oeisIx @61493) [1..3999]
--      where r 0 = Nothing
--            r x = Just ([0,1,5,10,50,100,500,1000] !! fromInteger d, x')
--                  where (x', d) = divMod x 10

-- instance OEIS 93820 where
--   oeis = 1 : f [2..] [1] where
--      f (x:xs) ys = y : f xs (y:ys) where y = sum $ map (gcd x) ys

-- instance OEIS 93873 where
--   {-# LANGUAGE ViewPatterns #-}
--   rat :: Rational -> (Integer,Integer)
--   rat r = (numerator r, denominator r)
--   data Harmony = Harmony Harmony Rational Harmony
--   rows :: Harmony -> [[Rational]]
--   rows (Harmony hL r hR) = [r] : zipWith (++) (rows hL) (rows hR)
--   kepler :: Rational -> Harmony
--   kepler r = Harmony (kepler (i% (i+j))) r (kepler (j% (i+j)))
--   .......... where (rat -> (i,j)) = r
--   k = rows $ kepler 1 :: [[Rational]] -- as list of lists
--   h = concat k :: [Rational] -- flattened
--   oeisIx n = numerator $ h !! (n - 1)
--   oeisIx n = denominator $ h !! (n - 1)
--   oeisIx n = numerator $ (map sum k) !! n -- denominator == 1
--   -- length (k !! n) == 2^n
--   -- numerator $ (map last k) !! n == fibonacci (n + 1)
--   -- denominator $ (map last k) !! n == fibonacci (n + 2)
--   -- numerator $ (map maximum k) !! n == n
--   -- denominator $ (map maximum k) !! n == n + 1
--   -- eop.

-- instance OEIS 93903 where
--   oeisIx n = (oeis @93903) !! (n - 1)
--   oeis = 1 : f [1] (oeis @40) where
--      f xs@ (x:_) ps = g ps where
--        g (q:qs) | x <= q         = h ps
--                 | y `notElem` xs = y : f (y:xs) (delete q ps)
--                 | otherwise      = g qs where
--          y = x - q
--          h (r:rs) | z `notElem` xs = z : f (z:xs) (delete r ps)
--                   | otherwise      = h rs where
--            z = x + r

-- instance OEIS 93995 where
--   oeis = tablList @93995
--   rowCol = rowCol_off @93995 @1 @1
--   rowT   = rowT_off   @93995 @1
--   tabl = zipWith replicate [1..] $ tail (oeis @290)
--   oeis = concat (tabl @93995)

-- instance OEIS 94015 where
--   oeisIx = sum . (rowT @152842)

-- instance OEIS 94048 where
--   oeisIx n = head [m | m <- map (oeisIx . subtract 1 . (* (oeisIx @2144) n))
--                                  (tail (oeis @290)), m > 0]

-- instance OEIS 94178 where
--   oeisIx n = (oeis @94178) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @125203)

-- instance OEIS 94189 where
--   oeisIx n = sum $ map (oeisIx @10051)' [n* (n - 1) .. n^2]

-- instance OEIS 94305 where
--   oeis = tablList @94305
-- instance Table 94305 where
--   rowT n = (tabl @94305) !! n
--   tabl = zipWith (map . (*)) (tail (oeis @217)) (tabl @7318)

-- instance OEIS 94328 where
--   oeis = iterate (oeisIx @6369) 4

-- instance OEIS 94329 where
--   oeis = iterate (oeisIx @6369) 16

-- instance OEIS 94379 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @66955))

-- instance OEIS 94407 where
--   oeis = filter ((== 1) . (oeisIx @10051)) [1,17..]

-- instance OEIS 94501 where
--   oeisIx = (+ 2) . fromJust . (`elemIndex` (oeis @86793))

instance OEIS 94510 where
  oeis = f 1 [1..] where
     f x zs = g zs where
       g (y:ys) = if y /= x && (oeisIx @120) y == wt
                     then y : f (x + 1) (delete y zs) else g ys
       wt = (oeisIx @120) x

instance OEIS 94511 where
  oeis = f 1 [1..] where
     f x zs = g zs where
       g (y:ys) = if y /= x && (oeisIx @120) y <= wt
                     then y : f (x + 1) (delete y zs) else g ys
       wt = (oeisIx @120) x

instance OEIS 94512 where
  oeisIx = fi . (+ 1) . fromJust . (`elemIndex` oeis @94511) . succ

instance OEIS 94513 where
  oeisIx = oeisIx @94511 . pred . oeisIx @94511

instance OEIS 94514 where
  oeisIx = oeisIx @94512 . pred . oeisIx @94512

-- instance OEIS 94524 where
--   oeisIx = (+ 2) . (* 3) . (oeisIx @23208)

instance OEIS 94535 where
  oeis = map (fi . (+ 1) . fromJust . (`elemIndex` (oeis @39995))) [0..]

-- instance OEIS 94587 where
--   oeis = tablList @94587
-- instance Table 94587 where
--   rowT n = (tabl @94587) !! n
--   tabl = map fst $ iterate f ([1], 1)
--      where f (row, i) = (map (* i) row ++ [1], i + 1)

-- instance OEIS 94588 where
--   oeis = 0 : zipWith (+) (tail (oeis @45))
--                                  (zipWith (*) [1..] (oeis @45))

-- instance OEIS 94638 where
--   oeis = tablList @94638
-- instance Table 94638 where
--   rowCol = rowCol_off @94638 @1 @1
--   rowT   = rowT_off   @94638 @1
--   tabl = map reverse (tabl @130534)

instance OEIS 94677 where
  oeis = filter ((== 0) . flip mod 10 . (oeisIx @7953)) [1..]

-- instance OEIS 94727 where
--   oeis = tablList @94727
-- instance Table 94727 where
--   rowCol n k = n + k
--   rowT   = rowT_off   @94727 @1
--   tabl = iterate (\row@ (h:_) -> (h + 1) : map (+ 2) row) [1]

-- instance OEIS 94784 where
--   oeis = [x | x <- [0..], (oeisIx @10052) x == 0, (oeisIx @10057) x == 0]

-- instance OEIS 94912 where
--   oeisIx n = a 2 n where
--      a s 0 = 0 ^ s
--      a s x = a (t s b) x' where (x',b) = divMod x 2
--      t 2 0 = 2; t 2 1 = 1; t 1 0 = 0; t 1 1 = 2; t 0 0 = 2; t 0 1 = 0
--

-- instance OEIS 95048 where
--   oeisIx = genericLength . group . sort . concatMap show . (rowT @27750)

-- instance OEIS 95050 where
--   oeisIx n = (oeis @95050) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 10 $ map (oeisIx @95048) [1..]

-- instance OEIS 95072 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . fi) (oeis @31444)

-- instance OEIS 95114 where
--   oeis = 1 : f [1] 1 where
--      f xs@ (x:_) k = y : f (y:xs) (k+1) where
--        y = x + length [z | z <- xs, z <= k]

-- instance OEIS 95116 where
--   oeisIx n = (oeisIx @40) n + toInteger n - 1

-- instance OEIS 95117 where
--   oeisIx n = (oeisIx @720) n + toInteger n

-- instance OEIS 95180 where
--   oeis =filter ((== 1) . (oeisIx @10051)) (oeis @4087)

-- instance OEIS 95195 where
--   oeis = tablList @95195
-- instance Table 95195 where
--   rowCol = rowCol_off @95195 @1 @1
--   rowT   = rowT_off   @95195 @1
--   tabl = f (oeis @40) [] where
--      f (p:ps) xs = ys : f ps ys where ys = scanl (-) p xs

-- instance OEIS 95258 where
--   oeisIx n = (oeis @95258) !! (n - 1)
--   oeis = 1 : f [2..] 1 where
--      f xs z = g xs where
--        g (y:ys) = if mod z' y > 0 then g ys else y : f (delete y xs) (z + y)
--        z' = z + 2

-- instance OEIS 95259 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @95258))

-- instance OEIS 95344 where
--   oeis = tail xs where
--      xs = 1 : 1 : 1 : zipWith (-) (map (* 5) $ zipWith (+) (tail xs) xs) xs

-- instance OEIS 95381 where
--   oeis = map (+ 1) $ elemIndices 1 $ map (oeisIx @209229) (oeis @25586)

-- instance OEIS 95660 where
--   oeis = tablList @95660
-- instance Table 95660 where
--   rowT n = (tabl @95660) !! n
--   tabl = [3] : iterate
--      (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [1,3]

-- instance OEIS 95666 where
--   oeis = tablList @95666
-- instance Table 95666 where
--   rowT n = (tabl @95666) !! n
--   tabl = [4] : iterate
--      (\row -> zipWith (+) ([0] ++ row) (row ++ [0])) [1,4]

-- instance OEIS 95774 where
--   oeisIx n = 2 * (oeisIx @3160) n - n

-- instance OEIS 95775 where
--   oeis = map (`div` 2) $ filter ((== 0) . (oeisIx @95774)) [1..]

-- instance OEIS 95815 where
--   oeisIx n = n + fi (oeisIx n)

-- instance OEIS 95840 where
--   oeisIx = (oeisIx @71330) . (oeisIx @961)

-- instance OEIS 95841 where
--   oeis = filter ((== 1) . (oeisIx @71330)) (oeis @961)

-- instance OEIS 95842 where
--   oeis = filter ((== 0) . (oeisIx @71330)) (oeis @961)

-- instance OEIS 95874 where
--   oeisIx n | y == n    = length xs + 1
--             | otherwise = 0
--             where (xs, y:ys) = span (< n) (oeis @961)

-- instance OEIS 95890 where
--   oeis = tablList @95890
-- instance Table 95890 where
--   rowCol n k = (n - k + 1) ^ (n - k)
--   rowT n = map (oeisIx n) [1..n]
--   tabl = map (rowT @95890) [1..]

-- instance OEIS 95916 where
--   oeis = zipWith (-) (tail (oeis @796)) (oeis @796)

-- instance OEIS 95958 where
--   oeis = f $ map show (oeis @77800) :: [Integer] where
--      f (t:t':ts) = read (t ++ t') : f ts

-- instance OEIS 95960 where
--   oeisIx n = genericLength [x | x <- (rowT @27750) n, x < (oeisIx @7947) n]

-- instance OEIS 96008 where
--   oeis = tablList @96008
-- instance Table 96008 where
--   rowCol n k = (tabf @96008) !! (n - 1) !! (k-1)
--   rowT n = (tabf @96008) !! (n - 1)
--   tabf = [0] : map (0 :) (tabf @46071)

-- instance OEIS 96095 where
--   oeisIx n = (oeis @96095) !! n
--   oeis = 1 : 1 : zipWith dadd (oeis @96095) (tail (oeis @96095)) where
--      dadd x y = foldl (\v d -> (if d < 10 then 10 else 100)*v + d)
--                       0 $ reverse $ unfoldr f (x,y) where
--           f (x,y) | x + y == 0 = Nothing
--                   | otherwise  = Just (xd + yd, (x',y'))
--                   where (x',xd) = divMod x 10; (y',yd) = divMod y 10

-- instance OEIS 96138 where
--   oeis = 1 : g 2 1 where
--      g x y = z : g (x + 1) z where z = (oeisIx @4086) (x * y)

-- instance OEIS 96139 where
--   oeisIx n = sum (map (oeisIx @10051) gs') + fromEnum (1 `elem` gs')
--      where gs' = map (2 * n -) $ takeWhile (< 2 * n) (oeis @8578)

-- instance OEIS 96145 where
--   oeis = tablList @96145
-- instance Table 96145 where
--   rowT n = (tabl @96145) !! n
--   tabl = map (map (oeisIx @7953)) (tabl @7318)

-- instance OEIS 96165 where
--   oeis = filter ((== 1) . (oeisIx @10055) . (oeisIx @1222)) $ tail (oeis @961)

-- instance OEIS 96258 where
--   oeisIx = p (oeis @18252) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 96268 where
--   oeisIx = (subtract 1) . (oeisIx @56832) . (+ 1)

-- instance OEIS 96274 where
--   oeisIx n = (oeis @96274) !! (n - 1)
--   oeis = elemIndices 0 (oeis @96535)

-- instance OEIS 96363 where
--   oeisIx = (oeisIx @1175) . (10 ^)

-- instance OEIS 96460 where
--   oeis = 1 : iterate (\x -> x + (oeisIx @8472) x) 2

-- instance OEIS 96461 where
--   oeis = 1 : iterate (oeisIx @75254) 2

-- instance OEIS 96465 where
--   oeis = tablList @96465
-- instance Table 96465 where
--   rowT n = (tabl @96465) !! n
--   tabl = map reverse (tabl @91491)

-- instance OEIS 96494 where
--   oeisIx = (* 2) . (oeisIx @6)

-- instance OEIS 96535 where
--   oeis = 1 : 1 : f 2 1 1 where
--      f n x x' = y : f (n+1) y x where y = mod (x + x') n

-- instance OEIS 96777 where
--   oeis = 1 : zipWith (+) (oeis @96777)
--                                  (scanl1 (+) (map (`mod` 2) (oeis @96777)))

-- instance OEIS 96780 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @75383))

-- instance OEIS 96781 where
--   oeisIx = a . a where a = (oeis `genericIndex`) . subtract 1

-- instance OEIS 96796 where
--   oeis = 0 : 1 : zipWith (-)
--      (map (* 2) $ tail (oeis @96796)) (map (oeisIx @96796) $ tail (oeis @83920))

-- instance OEIS 96824 where
--   oeis = 0 : 1 : 2 : zipWith (-)
--      (map (* 2) $ drop 2 (oeis @96824)) (map (oeisIx @96824) $ tail (oeis @122797))

-- instance OEIS 96916 where
--   oeisIx = (oeisIx @20639) . (oeisIx @6881)

-- instance OEIS 96981 where
--   oeisIx = p $ tail (oeis @47273) where
--      p _  0         = 1
--      p ks'@ (k:ks) m = if k > m then 0 else p ks' (m - k) + p ks m

-- instance OEIS 97054 where
--   import Data.Map (singleton, findMin, deleteMin, insert)
--   oeisIx n = (oeis @97054) !! (n - 1)
--   oeis = f 9 (3, 2) (singleton 4 (2, 2)) where
--      f zz (bz, be) m
--       | xx < zz && even be =
--                   f zz (bz, be+1) (insert (bx*xx) (bx, be+1) $ deleteMin m)
--       | xx < zz = xx :
--                   f zz (bz, be+1) (insert (bx*xx) (bx, be+1) $ deleteMin m)
--       | xx > zz = f (zz+2*bz+1) (bz+1, 2) (insert (bz*zz) (bz, 3) m)
--       | otherwise = f (zz + 2 * bz + 1) (bz + 1, 2) m
--       where (xx, (bx, be)) = findMin m

-- instance OEIS 97062 where
--   oeisIx n = (oeis @97062) !! n
--   oeis = concat $ transpose [oeis, (-1) : (oeis @5408)]

-- instance OEIS 97065 where
--   oeisIx n = n' - 2 * m where (n', m) = divMod (n + 2) 2
--   oeis = concat $ transpose [[1 ..], [-1 ..]]

instance OEIS 97080 where
  oeisIx (succ->n) = 2 * n * (n - 1) + 3

-- instance OEIS 97133 where
--   oeis = 1 : 2 : 4 : zipWith (+)
--                  (map (* 2) $ tail (oeis @97133)) (oeis @97133)

-- instance OEIS 97140 where
--   oeisIx n = (oeis @97140) !! n
--   oeis = concat $ transpose [oeis, map (1 -) (oeis @1477)]

-- instance OEIS 97207 where
--   oeis = tablList @97207
-- instance Table 97207 where
--   rowT n = (tabl @97207) !! n
--   tabl = map init $ tail (tabl @29635)

-- instance OEIS 97256 where
--   oeis = map (* 9) (oeis @7088)

-- instance OEIS 97343 where
--   oeis = tablList @97343
-- instance Table 97343 where
--   rowCol n k = (tabf @97343) !! (n - 2) !! (k-1)
--   rowT n = (tabf @97343) !! (n - 2)
--   tabf =
--      map (\p -> map (flip legendreSymbol p) [1..p]) $ tail (oeis @40)
--   legendreSymbol a p = if a' == 0 then 0 else twoSymbol * oddSymbol where
--      a' = a `mod` p
--      (s,q) = a' `splitWith` 2
--      twoSymbol = if (p `mod` 8) `elem` [1,7] || even s then 1 else -1
--      oddSymbol = if q == 1 then 1 else qrMultiplier * legendreSymbol p q
--      qrMultiplier = if p `mod` 4 == 3 && q `mod` 4 == 3 then -1 else 1
--      splitWith n p = spw 0 n where
--         spw s t = if m > 0 then (s, t) else spw (s + 1) t'
--                   where (t', m) = divMod t p

-- instance OEIS 97356 where
--   oeisIx n = p [1..oeisIx n] n where
--      p [] _ = 0
--      p _  0 = 1
--      p ks'@ (k:ks) m | m < k     = 0
--                     | otherwise = p ks' (m - k) + p ks m

-- instance OEIS 97364 where
--   oeis = tablList @97364
-- instance Table 97364 where
--   rowCol n k = length [qs | qs <- pss !! n, last qs - head qs == k] where
--      pss = [] : map parts [1..] where
--            parts x = [x] : [i : ps | i <- [1..x],
--                                      ps <- pss !! (x - i), i <= head ps]
--   rowT n = map (oeisIx n) [0..n - 1]
--   tabl = map (rowT @97364) [1..]

-- instance OEIS 97451 where
--   oeisIx n = p (oeis @47228) n where
--      p _  0         = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 97557 where
--   oeis = 1 : f 1 0 where
--      f x z = y : f y z' where
--        y = x + z'; z' = z + 1 - fi (oeisIx' x)

-- instance OEIS 97602 where
--   oeis = 1 : f 1 1 where
--      f x c = y : f y (c + (oeisIx @10052) y) where y = x + c

-- instance OEIS 97613 where
--   oeisIx n = (oeisIx @209561) (2 * n - 1) n

instance OEIS 97764 where
  oeis = f 0 (S.singleton (4, 2, 2)) $
                   tail $ zip (oeis @51674) (oeis @40) where
     f m s ppps'@ ((pp, p) : ppps)
       | pp < qq   = f m (S.insert (pp, p, 2) s) ppps
       | qq == m   = f m (S.insert ((k * q) ^ q, q, k + 1) s') ppps'
       | otherwise = qq : f qq (S.insert ((k * q) ^ q, q, k + 1) s') ppps'
       where ((qq, q, k), s') = S.deleteFindMin s

-- instance OEIS 97796 where
--   oeisIx = p (oeis @396) where
--      p _ 0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 97807 where
--   oeis = tablList @97807
-- instance Table 97807 where
--   rowT n = (tabl @97807) !! n
--   tabl = iterate (\xs@ (x:_) -> - x : xs) [1]

-- instance OEIS 97889 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @97889) !! (n - 1)
--   oeis = f $ singleton (6, 2, 3) where
--      f s = y : f (insert (w, p, q') $ insert (w `div` p, (oeisIx @151800) p, q') s')
--            where w = y * q'; q' = (oeisIx @151800) q
--                  ((y, p, q), s') = deleteFindMin s

-- instance OEIS 97893 where
--   oeis = scanl1 (+) (oeis @2426)

-- instance OEIS 97933 where
--   oeis = [x | x <- (oeis @91998), (oeisIx @10051) x == 1]

-- instance OEIS 97944 where
--   oeisIx = (oeisIx @55642) . (oeisIx @40)

-- instance OEIS 97974 where
--   oeisIx n = sum [p | p <- (rowT @27748) n, p ^ 2 <= n]

-- instance OEIS 97977 where
--   oeisIx n = head [p | p <- dropWhile (<= n) (oeis @40),
--   oeisIx (p + n) == n]

-- instance OEIS 98006 where
--   oeisIx n = (oeisIx @5097) (n - 1) - (oeisIx @10) (oeisIx n)

-- instance OEIS 98012 where
--   oeis = tablList @98012
-- instance Table 98012 where
--   rowCol = rowCol_off @98012 @1 @1
--   rowT   = rowT_off   @98012 @1
--   tabl = map (scanl1 (*)) (tabl @104887)

-- instance OEIS 98096 where
--   oeisIx n = (oeisIx @1248) n * (oeisIx @34785) n

-- instance OEIS 98237 where
--   oeis = filter ((== 0) . (oeisIx @109925)) (oeis @71904)

-- instance OEIS 98282 where
--   oeisIx n = f [n] where
--      f xs = if y `elem` xs then length xs else f (y:xs) where
--        y = genericIndex (map (oeisIx @87712) [1..]) (head xs - 1)

-- instance OEIS 98294 where
--   oeisIx 0  = 0
--   oeisIx n  = fromJust (oeisIx n `elemIndex` (rowT @227048) n) + 1

-- instance OEIS 98311 where
--   oeisIx n = (oeis @98311) !! (n - 1)
--   oeis = 1 : ys where
--      ys = 2 : f ys [3..] where
--           f (v:vs) ws = us ++ f vs (ws \\ us) where
--             us = take 2 $ filter ((== 1) . (gcd v)) ws

-- instance OEIS 98312 where
--   oeisIx = (oeisIx @98311) . (oeisIx @98311)

-- instance OEIS 98313 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @98311))

-- instance OEIS 98314 where
--   oeisIx = (oeisIx @98313) . (oeisIx @98313)

-- instance OEIS 98424 where
--   oeisIx n = genericLength [ (p,q,r) | p <- takeWhile (<= n) (oeis @40),
--               let r = p + 6, (oeisIx @10051) r == 1, q <- [p+1..r-1], (oeisIx @10051) q == 1]

-- instance OEIS 98430 where
--   oeisIx n = (oeisIx @302) n * (oeisIx @984) n

-- instance OEIS 98548 where
--   oeis = 1 : 2 : 3 : f 2 3 [4..] where
--      f u v (w:ws) = if gcd u w > 1 && gcd v w == 1
--                        then w : f v w ws else f u v ws

-- instance OEIS 98549 where
--   oeisIx = (oeisIx @98548) . (oeisIx @98548)

-- instance OEIS 98550 where
--   oeisIx n = (oeis @98550) !! (n - 1)
--   oeis = 1 : 2 : 3 : f 2 3 [4..] where
--      f u v ws = g ws where
--        g (x:xs) = if gcd x u > 1 && gcd x v == 1
--                      then x : f v x (delete x ws) else g xs

-- instance OEIS 98551 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @98550))

-- instance OEIS 98552 where
--   oeisIx = (oeisIx @98550) . (oeisIx @98550)

-- instance OEIS 98553 where
--   oeisIx = (oeisIx @98551) . (oeisIx @98551)

-- instance OEIS 98565 where
--   oeisIx n = (oeis @98565) !! (n - 1)
--   oeis = map (+ 2 ) $ elemIndices 3 (oeis @59233)

-- instance OEIS 98700 where
--   oeis = filter
--      (\z -> all (/= z) $ map (oeisIx @3415) [1 .. (oeisIx @2620) z]) [2..]

-- instance OEIS 98743 where
--   oeisIx n = p [nd | nd <- [1..n], mod n nd /= 0] n where
--      p _  0 = 1
--      p [] _ = 0
--      p ks'@ (k:ks) m | m < k = 0 | otherwise = p ks' (m - k) + p ks m
--   import Data.MemoCombinators (memo3, integral)
--   oeisIx n = (oeis @98743) !! n
--   oeis = map (\x -> pMemo x 1 x) [0..] where
--      pMemo = memo3 integral integral integral p
--      p _ _ 0 = 1
--      p x k m | m < k        = 0
--              | mod x k == 0 = pMemo x (k + 1) m
--              | otherwise    = pMemo x k (m - k) + pMemo x (k + 1) m

-- instance OEIS 98825 where
--   oeis = tablList @98825
-- instance Table 98825 where
--   rowT n = (tabl @98825) !! n
--   tabl = map (zipWith (*) (oeis @166)) (tabl @7318)

-- instance OEIS 98842 where
--   oeis = map length $ group (oeis @60384)

-- instance OEIS 98859 where
--   oeisIx = p 0 [] 1 where
--      p m ms _      0 = if m `elem` ms then 0 else 1
--      p m ms k x
--        | x < k       = 0
--        | m == 0      = p 1 ms k (x - k) + p 0 ms (k + 1) x
--        | m `elem` ms = p (m + 1) ms k (x - k)
--        | otherwise   = p (m + 1) ms k (x - k) + p 0 (m : ms) (k + 1) x

-- instance OEIS 98884 where
--   oeisIx = p (oeis @7310) where
--      p _  0     = 1
--      p (k:ks) m = if k > m then 0 else p ks (m - k) + p ks m

-- instance OEIS 98962 where
--   oeisIx n = (oeis @98962) !! (n - 1)
--   oeis = 1 : f [2..] (tail (oeis @175944)) where
--      f xs'@ (x:xs) ps'@ (p:ps)
--        | (oeisIx @10051) x == 1    = x : f xs (delete x ps')
--        | u == q && v == q' = x : f xs' zs
--        | otherwise         = f xs ps'
--        where q = (oeisIx @20639) x; q' = div x q
--              (us, u:us') = span (< q) ps'
--              (vs, v:vs') = span (< q') us'
--              zs@ (z:_) = us ++ vs ++ vs'
--              xs' = if z == p then xs else filter ((> 0) . (`mod` p)) xs

-- instance OEIS 98983 where
--   oeisIx n = sum $ map (oeisIx . (n -)) $ takeWhile (< n) (oeis @40)

-- instance OEIS 99009 where
--   oeis = [x | x <- [0..], (oeisIx @151949) x == x]

-- instance OEIS 99036 where
--   oeis = zipWith (-) (oeis @79) (oeis @45)

-- instance OEIS 99047 where
--   oeis = [m | m <- [1..],
--                       (oeisIx @10051)' (m - 1) == 0 && (oeisIx @10051)' (m + 1) == 0]

-- instance OEIS 99054 where
--   oeisIx n = (oeis @99054) !! n
--   oeis = 1 : concatMap fromJust (zipWith stripPrefix ass $ tail ass)
--      where ass = iterate f [1]
--            f xs = concat $ concat $ transpose [map g $ e xs, map h $ o xs]
--            g 1 = [1,2,3]; g 2 = [2,3,1]; g 3 = [3,1,2]
--            h 1 = [3,2,1]; h 2 = [1,3,2]; h 3 = [2,1,3]
--            e [] = []; e [x] = [x]; e (x:_:xs) = x : e xs
--            o [] = []; o [x] = []; o (_:x:xs) = x : o xs

-- instance OEIS 99188 where
--   oeisIx = (* 2) . (oeisIx @49474)

-- instance OEIS 99244 where
--   oeisIx n = gcd (oeisIx n) (oeisIx n)

-- instance OEIS 99245 where
--   oeisIx n = numerator $ (oeisIx n) % (oeisIx n)

-- instance OEIS 99246 where
--   oeisIx n = denominator $ (oeisIx n) % (oeisIx n)

-- instance OEIS 99247 where
--   oeis = filter ((== 1) . (oeisIx @99244)) [1..]

-- instance OEIS 99248 where
--   oeis = filter ((> 1) . (oeisIx @99244)) [1..]

-- instance OEIS 99249 where
--   oeis = scanl1 (+) $ map ((0 ^) . (subtract 1)) (oeis @99244)

-- instance OEIS 99267 where
--   oeis = f 1 [1..] 0 where
--      f k xs y = ys' ++ f (k+1) (ys ++ xs') g where
--        ys' = dropWhile (< y) ys
--        (ys,_:xs') = span (< g) xs
--        g = xs !! (h - 1)
--        h = xs !! (k - 1)

-- instance OEIS 99302 where
--   oeisIx n = genericLength $ filter (== n) $ map (oeisIx @3415) [1 .. (oeisIx @2620) n]

-- instance OEIS 99304 where
--   oeisIx n = succ $ fromJust $ elemIndex 0 $
--      zipWith (-) (drop (fromInteger n + 1) (oeis @3415))
--                  (map (+ n') $ tail (oeis @3415))
--      where n' = (oeisIx @3415) n

-- instance OEIS 99305 where
--   oeis = f 1 $ h 1 empty where
--      f x ad = y : f (x + 1) (h (3 * x + 1) ad)  where
--               y = length [ () | k <- [1 .. 2 * x],
--                                let x' = ad ! x, ad ! (x + k) == x' + ad ! k]
--      h z = insert z (oeisIx z) .
--             insert (z+1) (oeisIx (z+1)) . insert (z+2) (oeisIx (z+2))

-- instance OEIS 99375 where
--   oeis = tablList @99375
--   rowCol n k = (rowT @99375) n !! k
--   rowT n = (tabl @99375) !! n
--   tabl = iterate (\xs -> (head xs + 2) : xs) [1]

-- instance OEIS 99425 where
--   oeisIx = sum . (rowT @102413)

-- instance OEIS 99427 where
--   oeis = 1 : map (+ 1) (zipWith gcd [2..] (oeis @99427))

-- instance OEIS 99542 where
--   oeisIx n = (oeis @99542) !! (n - 1)
--   oeis = filter (rhonda 10) [1..]
--   rhonda b x = (oeisIx @1414) x * b == product (unfoldr
--          (\z -> if z == 0 then Nothing else Just $ swap $ divMod z b) x)

-- instance OEIS 99543 where
--   oeisIx = (oeisIx @1414) . (oeisIx @99542)

-- instance OEIS 99619 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @98962)) . (oeisIx @40)

-- instance OEIS 99620 where
--   oeisIx n = f (p - 1) $ drop (oeisIx n) (oeis @98962) where
--      f c (x:xs) | c == 1 = if m == 0 then x else f 1 xs
--                 | m /= 0 = f c xs
--                 | m == 0 = f (c - if x' == p then 2 else 1) xs
--                 where (x',m) = divMod x p
--      p = (oeisIx @40) n

-- instance OEIS 99627 where
--   oeis = tablList @99627
-- instance Table 99627 where
--   rowT n = (tabl @99627) !! n
--   tabl = iterate (\xs@ (x:_) -> (2 * x) : map ((+ 1) . (* 2)) xs) [1]

-- instance OEIS 99645 where
--   oeisIx = genericLength . takeWhile (`notElem` (oeis @39943)) . iterate (oeisIx @3132)
--   oeis = map (oeisIx @99645) [1..]

-- instance OEIS 99751 where
--   oeisIx n = product $ zipWith f (oeisIx_row n) (oeisIx_row n)
--      where f 2 e = e - 1; f 3 e = 1; f _ e = e + 1

-- instance OEIS 99773 where
--   oeisIx = p (oeis @65091) where
--      p _      0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 99774 where
--   oeisIx = (oeisIx @5) . (oeisIx @5408)

-- instance OEIS 99848 where
--   oeis = concat $ zipWith replicate (oeis @8480) [1..]

-- instance OEIS 99849 where
--   oeis = scanl1 (+) (oeis @8480)

-- instance OEIS 99909 where
--   oeis = map (flip div 2) $ tail $ zipWith (+)
--      (zipWith (*) (oeis @40) $ map (subtract 1) $ tail (oeis @40))
--      (zipWith (*) (map (subtract 1) (oeis @40)) $ tail (oeis @40))

-- instance OEIS 99920 where
--   oeis = zipWith (*) [1..] (oeis @45)

-- instance OEIS 99959 where
--   oeis = tablList @99959
-- instance Table 99959 where
--   rowT n = (tabl @99959) !! n
--   tabl = map snd $ iterate f (False,[1]) where
--      f (s,xs) = (not s, if s then zs ++ [last zs] else zs)
--        where zs = scanl1 (+) (reverse xs)

-- instance OEIS 99961 where
--   oeis = tablList @99961
-- instance Table 99961 where
--   rowT n = (tabl @99961) !! n
--   tabl = map snd $ iterate f (0,[1]) where
--      f (s,xs) = (s+1, if s `mod` 3 == 1 then zs ++ [last zs] else zs)
--        where zs = scanl1 (+) (reverse xs)

-- instance OEIS 99964 where
--   oeis = tablList @99964
-- instance Table 99964 where
--   rowCol n k = (tabf @99964) !! n !! k
--   rowT n = (tabf @99964) !! n
--   tabf = scanl f [1] $ tail (oeis @10054) where
--      f row t = if t == 1 then row' ++ [last row'] else row'
--              where row' = scanl1 (+) $ reverse row

-- instance OEIS 99965 where
--   oeisIx = flip (oeisIx @99964) 0
--   oeis = map head (tabf @99964)

-- instance OEIS 99966 where
--   oeis = map (last . init) $ tail (tabf @99964)

-- instance OEIS 99968 where
--   oeisIx = flip (oeisIx @99964) 1

instance OEIS 99996 where
  oeisIx = foldl lcm 1 . enumFromTo 2 . (* 2)

-- instance OEIS 100100 where
--   oeis = tablList @100100
--   rowCol n k = (tabl @100100) !! n !! n
--   rowT n = (tabl @100100) !! n
--   tabl = [1] : f (tabl @92392) where
--      f (us : wss'@ (vs : wss)) = (vs !! 1 : us) : f wss'

-- instance OEIS 100104 where
--   oeisIx (succ->n) = n * (3 * n + 1)

-- instance OEIS 100208 where
--   import Data.Set (singleton, notMember, insert)
--   oeisIx n = (oeis @100208) !! (n - 1)
--   oeis = 1 : (f 1 [1..] $ singleton 1) where
--      f x (w:ws) s
--        | w `notMember` s &&
--          (oeisIx @10051) (x*x + w*w) == 1 = w : (f w [1..] $ insert w s)
--        | otherwise                = f x ws s where

-- instance OEIS 100320 where
--   oeisIx n = (oeisIx @124927) (2 * n) n

-- instance OEIS 100326 where
--   oeis = tablList @100326
-- instance Table 100326 where
--   rowT n = (tabl @100326) !! n
--   tabl = [1] : f [[1]] where
--   f xss@ (xs:_) = ys : f (ys : xss) where
--   ys = y : map (sum . zipWith (*) (zs ++ [y])) (map reverse zss)
--   y = sum $ zipWith (*) [1..] xs
--   zss@ ((_:zs):_) = transpose $ reverse xss

-- instance OEIS 100368 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @100368) !! (n - 1)
--   oeis = f (singleton 6) (tail (oeis @65091)) where
--   f s ps'@ (p:ps) | mod m 4 > 0 = m : f (insert (2*p) $ insert (2*m) s') ps
--   | otherwise = m : f (insert (2*m) s') ps'
--   where (m,s') = deleteFindMin s

-- instance OEIS 100428 where
--   oeis = f (oeis @2) where f (u:_:us) = u : f us

-- instance OEIS 100429 where
--   oeis = g (oeis @2) where g (_:v:vs) = v : g vs

-- instance OEIS 100440 where
--   oeisIx = genericLength . (rowT @200741)

-- instance OEIS 100471 where
--   oeisIx n = p 0 (n + 1) 1 n where
--      p m m' k x | x == 0    = if m < m' || m == 0 then 1 else 0
--                 | x < k     = 0
--                 | m == 0    = p 1 m' k (x - k) + p 0 m' (k + 1) x
--                 | otherwise = p (m + 1) m' k (x - k) +
--                               if m < m' then p 0 m (k + 1) x else 0

-- instance OEIS 100484 where
--   oeis = map (* 2) (oeis @40)

-- instance OEIS 100587 where
--   oeisIx = (subtract 1) . (2 ^) . (oeisIx @5)'

instance OEIS 100613 where
  oeisIx (succ->n) = genericLength [ ()| x <- [1..n], y <- [1..n], gcd x y > 1]

-- instance OEIS 100617 where
--   oeisIx = f 2 where
--      f k x = if x' == 0 then x else f (k + 1) (x - x') where x' = div x k

-- instance OEIS 100618 where
--   oeisIx n = f 2 n where
--      f k n | n' == 0   = n
--            | otherwise = f (k+1) (n-n') where n' = div n (k^2)

-- instance OEIS 100678 where
--   oeisIx = genericLength . (rowT @247765)

-- instance OEIS 100695 where
--   oeisIx = last . (rowT @247765)

-- instance OEIS 100707 where
--   import qualified Data.Set as Set (insert)
--   import Data.Set (singleton, member)
--   oeisIx n = (oeis @100707) !! (n - 1)
--   oeis = 1 : f 1 (singleton 1) [1..] where
--      f y st ds = g ds where
--        g (k:ks) | v <= 0      = h ds
--                 | member v st = g ks
--                 | otherwise   = v : f v (Set.insert v st) (delete k ds)
--                 where v = y - k
--        h (k:ks) | member w st = h ks
--                 | otherwise   = w : f w (Set.insert w st) (delete k ds)
--                 where w = y + k

-- instance OEIS 100708 where
--   oeis = map abs $ zipWith (-) (tail (oeis @100707)) (oeis @100707)

-- instance OEIS 100716 where
--   oeis = filter (\x -> or $
--      zipWith (<=) (oeisIx_row x) (map toInteger $ (rowT @124010) x)) [1..]

-- instance OEIS 100717 where
--   oeis = filter ((== 0) . (oeisIx @203908)) [1..]

-- instance OEIS 100732 where
--   oeisIx = (oeisIx @142) . (oeisIx @8585)

-- instance OEIS 100795 where
--   oeis = f 0 (oeis @2024) where
--      f x ws = v : f v (us ++ vs) where (us, v:vs) = span (== x) ws

instance OEIS 100830 where
  oeisIx (succ->n)  = n + 9 * (-1) ^ ((n - 1) `div` 9)

-- instance OEIS 100861 where
--   oeis = tablList @100861
-- instance Table 100861 where
--   rowCol n k = (tabf @100861) !! n !! k
--   rowT n = (tabf @100861) !! n
--   tabf = zipWith take (oeis @8619) (tabl @144299)

-- instance OEIS 100881 where
--   oeisIx = p 0 0 1 where
--      p m m' k x | x == 0    = if m > m' || m == 0 then 1 else 0
--                 | x < k     = 0
--                 | m == 0    = p 1 m' k (x - k) + p 0 m' (k + 1) x
--                 | otherwise = p (m + 1) m' k (x - k) +
--                               if m > m' then p 0 m (k + 1) x else 0

-- instance OEIS 100892 where
--   oeisIx n = (2 * n - 1) `xor` (2 * n + 1)
--   oeis = zipWith xor (tail (oeis @5408)) (oeis @5408)

-- instance OEIS 100949 where
--   oeisIx n = sum $ map (oeisIx . (n -)) $ takeWhile (< n) (oeis @1358)

-- instance OEIS 100962 where
--   oeis = filter ((== 0) . (oeisIx @64911)) (oeis @14092)

-- instance OEIS 100968 where
--   oeis = filter (rhonda 4) (oeis @23705)

-- instance OEIS 100969 where
--   oeis = filter (rhonda 6) (oeis @248910)

-- instance OEIS 100970 where
--   oeis = filter (rhonda 8) (oeis @255805)

-- instance OEIS 100971 where
--   oeis = filter (rhonda 12) $ iterate z 1 where
--      z x = 1 + if r < 11 then x else 12 * z x' where (x', r) = divMod x 12

-- instance OEIS 100972 where
--   oeis = filter (rhonda 14) $ iterate z 1 where
--      z x = 1 + if r < 13 then x else 14 * z x' where (x', r) = divMod x 14

-- instance OEIS 100973 where
--   oeis = filter (rhonda 9) (oeis @255808)

-- instance OEIS 100974 where
--   oeis = filter (rhonda 15) $ iterate z 1 where
--      z x = 1 + if r < 14 then x else 15 * z x' where (x', r) = divMod x 15

-- instance OEIS 100975 where
--   oeis = filter (rhonda 16) $ iterate z 1 where
--      z x = 1 + if r < 15 then x else 16 * z x' where (x', r) = divMod x 16

-- instance OEIS 100995 where
--   oeisIx n = f 0 n where
--      f e 1 = e
--      f e x = if r > 0 then 0 else f (e + 1) x'
--              where (x', r) = divMod x p
--      p = (oeisIx @20639) n

-- instance OEIS 101035 where
--   oeisIx n = product $ zipWith f (oeisIx_row n) (oeisIx_row n) where
--      f p 1 = 1 - 2 * p
--      f p e = (p - 1) ^ 2

-- instance OEIS 101048 where
--   oeisIx = p (oeis @1358) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 101082 where
--   oeis = filter ((> 0) . (oeisIx @49502)) [0..]

-- instance OEIS 101164 where
--   oeis = tablList @101164
-- instance Table 101164 where
--   rowT n = (tabl @101164) !! n
--   tabl = zipWith (zipWith (-)) (tabl @8288) (tabl @7318)

-- instance OEIS 101203 where
--   oeis = scanl (+) 0 $ zipWith (*) [1..] $ map (1 -) (oeis @10051)

-- instance OEIS 101211 where
--   oeis = tablList @101211
-- instance Table 101211 where
--   rowCol n k = (tabf @101211) !! (n - 1) !! (k-1)
--   rowT n = (tabf @101211) !! (n - 1)
--   tabf = map (reverse . map length . group) $ tail (tabf @30308)

-- instance OEIS 101265 where
--   oeis = 1 : 2 : 6 : zipWith (+) (oeis @101265)
--       (map (* 5) $ tail $ zipWith (-) (tail (oeis @101265)) (oeis @101265))

-- instance OEIS 101300 where
--   oeisIx = (oeisIx @151800) . (oeisIx @151800)

-- instance OEIS 101301 where
--   oeis = scanl1 (+) (oeis @6093)

-- instance OEIS 101312 where
--   oeisIx n = f 1 {- January -} where
--      f 13                = 0
--      f m | h n m 13 == 6 = (f $ succ m) + 1
--          | otherwise     = f $ succ m
--      h year month day
--        | month <= 2 = h  (year - 1)  (month + 12)  day
--        | otherwise  = (day + 26 * (month + 1) `div` 10 + y + y `div` 4
--                       + century `div` 4 - 2 * century) `mod` 7
--          where (century, y) = divMod year 100

-- instance OEIS 101369 where
--   oeisIx n = (oeis @101369) !! (n - 1)
--   oeis = f [1..] where
--      f (x:xs) = x : y : f (delete y xs) where y = xs !! (x - 1)

-- instance OEIS 101402 where
--   oeisIx = genericIndex (oeis @101402)
--   oeis = 0 : 1 : zipWith ((+) `on` (oeisIx @101402))
--                          (tail (oeis @53644)) (oeis @53645)

-- instance OEIS 101403 where
--   oeisIx n = (oeis @101403) !! n
--   oeis = map length $ group (oeis @101402)

-- instance OEIS 101404 where
--   oeisIx n = (oeisIx @101403) n * n

-- instance OEIS 101438 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @101369))

-- instance OEIS 101461 where
--   oeisIx = maximum . (rowT @53121)

-- instance OEIS 101594 where
--   oeis = filter ((== 2) . (oeisIx @43537)) (oeis @52382)

-- instance OEIS 101624 where
--   oeisIx = sum . zipWith (*) (oeis @79) . map (flip mod 2) . (rowT @11973)

-- instance OEIS 101881 where
--   oeisIx n = (oeis @101881) !! n
--   oeis = scanl1 (+) $ intersperse 1 [1..]

instance OEIS 101986 where
  oeisIx n = sum $ zipWith (*) [1,3..] (reverse [2..n+1])

-- instance OEIS 102251 where
--   oeis = 1 : (map (* 2) $
--                  concatMap (map (read . return) . show) (oeis @102251))

-- instance OEIS 102364 where
--   oeisIx 0 = 0
--   oeisIx n = genericLength $ filter (== 0) $ (rowT @213676) n

-- instance OEIS 102370 where
--   oeis = 0 : map (oeisIx . toInteger) (oeis @62289)

-- instance OEIS 102371 where
--   oeis = map (oeisIx . toInteger) $ tail (oeis @225)

-- instance OEIS 102376 where
--   oeisIx = (4 ^) . (oeisIx @120)

-- instance OEIS 102413 where
--   oeis = tablList @102413
-- instance Table 102413 where
--   rowT n = (tabl @102413) !! n
--   tabl = [1] : [1,1] : f [2] [1,1] where
--      f us vs = ws : f vs ws where
--                ws = zipWith3 (((+) .) . (+))
--                     ([0] ++ us ++ [0]) ([0] ++ vs) (vs ++ [0])

-- instance OEIS 102466 where
--   oeis = [x | x <- [1..], (oeisIx @5) x == (oeisIx @1221) x + (oeisIx @1222) x]

-- instance OEIS 102467 where
--   oeis = [x | x <- [1..], (oeisIx @5) x /= (oeisIx @1221) x + (oeisIx @1222) x]

-- instance OEIS 102472 where
--   oeis = tablList @102472
-- instance Table 102472 where
--   rowCol = rowCol_off @102472 @1 @1
--   rowT   = rowT_off   @102472 @1
--   tabl = map reverse (tabl @102473)

-- instance OEIS 102473 where
--   oeis = tablList @102473
-- instance Table 102473 where
--   rowCol = rowCol_off @102473 @1 @1
--   rowT   = rowT_off   @102473 @1
--   tabl = [1] : [1, 1] : f [1] [1, 1] 2 where
--      f us vs x = ws : f vs ws (x + 1) where
--                  ws = 1 : zipWith (+) ([0] ++ us) (map (* x) vs)

-- instance OEIS 102478 where
--   oeisIx = flip div 2 . (oeisIx @68700)

-- instance OEIS 102487 where
--   oeisIx n = (oeis @102487) !! (n - 1)
--   oeis = filter (all (< 10) . unfoldr (\x ->
--      if x == 0 then Nothing else Just $ swap $ divMod x 12)) [0..]

-- instance OEIS 102488 where
--   oeisIx n = (oeis @102488) !! (n - 1)
--   oeis = filter (any (> 9) . unfoldr (\x ->
--      if x == 0 then Nothing else Just $ swap $ divMod x 12)) [1..]

-- instance OEIS 102489 where
--   oeisIx n = (oeis @102489) !! (n - 1)
--   oeis = mapMaybe dhex [0..] where
--      dhex 0                         = Just 0
--      dhex x | d > 9 || y == Nothing = Nothing
--             | otherwise             = Just $ 16 * fromJust y + d
--             where (x', d) = divMod x 16; y = dhex x'

-- instance OEIS 102490 where
--   oeisIx n = (oeis @102490) !! (n - 1)
--   oeis = filter (any (> 9) . unfoldr
--      (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 16)) [0..]

-- instance OEIS 102491 where
--   oeisIx n = (oeis @102491) !! (n - 1)
--   oeis = filter (all (<= 9) . unfoldr
--      (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 20)) [0..]

-- instance OEIS 102492 where
--   oeisIx n = (oeis @102492) !! (n - 1)
--   oeis = filter (any (> 9) . unfoldr
--      (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 20)) [0..]

-- instance OEIS 102493 where
--   oeisIx n = (oeis @102493) !! (n - 1)
--   oeis = filter (all (<= 9) . unfoldr
--      (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 60)) [0..]

-- instance OEIS 102494 where
--   oeisIx n = (oeis @102494) !! (n - 1)
--   oeis = filter (any (> 9) . unfoldr
--      (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 60)) [0..]

-- instance OEIS 102661 where
--   oeis = tablList @102661
-- instance Table 102661 where
--   rowCol = rowCol_off @102661 @1 @1
--   rowT   = rowT_off   @102661 @1
--   tabl = map (scanl1 (+) . tail) $ tail (tabl @48993)

-- instance OEIS 102662 where
--   oeis = tablList @102662
-- instance Table 102662 where
--   rowT n = (tabl @102662) !! n
--   tabl = [1] : [1,3] : f [1] [1,3] where
--      f xs ys = zs : f ys zs where
--        zs = zipWith (+) ([0] ++ xs ++ [0]) $
--                         zipWith (+) ([0] ++ ys) (ys ++ [0])

instance OEIS 102683 where
  oeisIx =  genericLength . filter (== '9') . show . fi

-- instance OEIS 102696 where
--   oeisIx n = genericLength $ nub
--      [p + q | p <- take n (oeis @65091), q <- takeWhile (<= p) (oeis @65091)]

-- instance OEIS 102820 where
--   oeis =  map (sum . (map (oeisIx @10051))) $
--      zipWith enumFromTo (oeis @100484) (tail (oeis @100484))

-- instance OEIS 102900 where
--   oeis = 1 : 1 : zipWith (+)
--                  (map (* 4) (oeis @102900)) (map (* 3) $ tail (oeis @102900))

instance OEIS 103127 where
  oeis = [x | x <- [1..], x `mod` 16 `elem` [1,3,5,15]]

-- instance OEIS 103128 where
--   oeisIx = (oeisIx @196) . (subtract 1) . (* 2)

-- instance OEIS 103147 where
--   oeisIx = (+ 2) . fromJust . (`elemIndex` (oeis @47160))

-- instance OEIS 103181 where
--   oeis = map (oeisIx @103181) [0..]
--   oeisIx n = foldl f 0 $ reverse $ unfoldr g n where
--      f v d = 10 * v + mod d 2
--      g x = if x == 0 then Nothing else Just $ swap $ divMod x 10

-- instance OEIS 103192 where
--   oeis = iterate (fromInteger . (oeisIx @102370)) 1

-- instance OEIS 103215 where
--   oeis = [1,2,5,10,13,17] ++ map (+ 24) (oeis @103215)

-- instance OEIS 103284 where
--   oeis = tablList @103284
-- instance Table 103284 where
--   rowT n = (tabl @103284) !! n
--   tabl = iterate (\xs -> sort $ zipWith (+) (xs++[0]) ([0]++xs)) [1]

-- instance OEIS 103285 where
--   oeisIx = last . (rowT @103284)

-- instance OEIS 103339 where
--   oeisIx = numerator . uhm where uhm n = (n * (oeisIx @34444) n) % (oeisIx n)

-- instance OEIS 103340 where
--   oeisIx = denominator . uhm where uhm n = (n * (oeisIx @34444) n) % (oeisIx n)

-- instance OEIS 103369 where
--   oeisIx = until (`elem` (oeis @39943)) (oeisIx @3132)
--   oeis = map (oeisIx @103369) [1..]

-- instance OEIS 103371 where
--   oeis = tablList @103371
-- instance Table 103371 where
--   rowT n = (tabl @103371) !! n
--   tabl = map reverse (tabl @132813)

-- instance OEIS 103391 where
--   oeisIx n = (oeis @103391) !! (n - 1)
--   oeis = 1 : ks where
--      ks = concat $ transpose [[2..], ks]

instance OEIS 103586 where
  oeisIx n = (oeisIx @70939) (n + (oeisIx @70939) n)
  oeis = 1 : concat
     (zipWith (replicate . fromInteger) (tail (oeis @225)) [2..])

-- instance OEIS 103631 where
--   oeis = tablList @103631
-- instance Table 103631 where
--   rowT n = (tabl @103631) !! n
--   tabl = [1] : [0,1] : f [1] [0,1] where
--      f xs ys = zs : f ys zs where
--        zs = zipWith (+)  ([0,0] ++ xs)  (ys ++ [0])

-- instance OEIS 103689 where
--   oeisIx n = min (oeisIx n) (oeisIx n)

-- instance OEIS 103747 where
--   oeis = iterate (fromInteger . (oeisIx @102370)) 2

-- instance OEIS 103889 where
--   oeisIx n = n - 1 + 2 * mod n 2
--   oeis = concat $ transpose [tail (oeis @5843), (oeis @5408)]

-- instance OEIS 103960 where
--   oeisIx n = sum [oeisIx' $ p * q - 2 |
--                    let p = (oeisIx @40) n, q <- takeWhile (<= p) (oeis @40)]

-- instance OEIS 104035 where
--   oeis = tablList @104035
-- instance Table 104035 where
--   rowT n = (tabl @104035) !! n
--   tabl = iterate f [1] where
--      f xs = zipWith (+)
--        (zipWith (*) [1..] (tail xs) ++ [0,0]) ([0] ++ zipWith (*) [1..] xs)

-- instance OEIS 104125 where
--   oeisIx = (^ 2) . (oeisIx @64413)

-- instance OEIS 104126 where
--   oeisIx n = p ^ (p + 1) where p = (oeisIx @40) n

-- instance OEIS 104235 where
--   oeis = [x | x <- [0..], (oeisIx @102370) x == toInteger x]

instance OEIS 104249 where
  oeisIx n = n* (3*n+1) `div` 2 + 1

-- instance OEIS 104278 where
--   oeis = [m | m <- [1..],
--                       (oeisIx @10051)' (2 * m - 1) == 0 && (oeisIx @10051)' (2 * m + 1) == 0]

-- instance OEIS 104315 where
--   oeis = filter (\x -> (oeisIx @168046) x == 0 && (oeisIx @168046) (x ^ 2) == 1) [1..]

-- instance OEIS 104324 where
--   oeisIx = genericLength . map length . group . (rowT @213676)

-- instance OEIS 104350 where
--   oeis = scanl1 (*) (oeis @6530)

-- instance OEIS 104499 where
--   oeisIx n = (oeis @104499) !! (n - 1)
--   oeis = findIndices ((== 1) . (oeisIx @10051)) (oeis @1945)

-- instance OEIS 104684 where
--   oeis = tablList @104684
-- instance Table 104684 where
--   rowT n = (tabl @104684) !! n
--   tabl = map (map abs) $
--                  zipWith (zipWith (*)) (tabl @130595) (tabl @92392)

-- instance OEIS 104698 where
--   oeis = tablList @104698
-- instance Table 104698 where
--   rowCol = rowCol_off @104698 @1 @1
--   rowT   = rowT_off   @104698 @1
--   tabl = [1] : [2,1] : f [1] [2,1] where
--      f us vs = ws : f vs ws where
--        ws = zipWith (+) ([0] ++ us ++ [0]) $
--             zipWith (+) ([1] ++ vs) (vs ++ [0])

-- instance OEIS 104763 where
--   oeis = tablList @104763
-- instance Table 104763 where
--   rowCol = rowCol_off @104763 @1 @1
--   rowT   = rowT_off   @104763 @1
--   tabl = map (flip take $ tail (oeis @45)) [1..]

-- instance OEIS 104777 where
--   oeisIx = (^ 2) . (oeisIx @7310)

-- instance OEIS 104887 where
--   oeis = tablList @104887
-- instance Table 104887 where
--   rowCol = rowCol_off @104887 @1 @1
--   rowT   = rowT_off   @104887 @1
--   tabl = map reverse $ tail $ inits (oeis @40)

-- instance OEIS 104895 where
--   oeisIx n = (oeis @104895) !! n
--   oeis = 0 : concat (transpose [map (negate . (+ 1)) zs, tail zs])
--                  where zs = map (* 2) (oeis @104895)

-- instance OEIS 105025 where
--   oeisIx n = foldl (.|.) 0 $ zipWith (.&.)
--                     (oeis @79) $ reverse $ enumFromTo n (n - 1 + (oeisIx @70939) n)
--
-- instance OEIS 105027 where
--   oeisIx n = foldl (.|.) 0 $ zipWith (.&.)
--                     (oeis @79) $ enumFromTo (n + 1 - (oeisIx @70939) n) n

-- instance OEIS 105029 where
--   oeisIx n = foldl (.|.) 0 $ zipWith (.&.) (oeis @79) $
--      map (\x -> (len + 1 - (oeisIx @70939) x) * x)
--          (reverse $ enumFromTo n (n - 1 + len))  where len = (oeisIx @103586) n

-- instance OEIS 105047 where
--   oeisIx 1 = 1
--   oeisIx n = genericLength $ (rowT @260580) (n - 1)

-- instance OEIS 105082 where
--   oeis = scanl (+) 5 $ tail (oeis @48696)

-- instance OEIS 105153 where
--   oeisIx n = t [n] where
--      t xs@ (x:_) | y `elem` xs = length xs
--                 | otherwise   = t (y : xs) where y = (oeisIx @105025) x

-- instance OEIS 105154 where
--   oeisIx n = t [n] where
--      t xs@ (x:_) | y `elem` xs = length xs
--                 | otherwise   = t (y : xs) where y = (oeisIx @105027) x

-- instance OEIS 105179 where
--   oeis = 1 : filter (\x -> (oeisIx @10879) (oeisIx x) == (oeisIx @10879) x) [2..]

-- instance OEIS 105186 where
--   oeisIx 0 = 0
--   oeisIx n = 9 * (oeisIx @105186) n' + mod t 3
--               where (n', t) = divMod n 9

-- instance OEIS 105210 where
--   oeis = 393 : map
--         (\x -> x + 1 + sum (takeWhile (< x) $ (rowT @27748) x)) (oeis @105210)

-- instance OEIS 105211 where
--   oeis = 412 : map
--         (\x -> x + 1 + sum (takeWhile (< x) $ (rowT @27748) x)) (oeis @105211)

-- instance OEIS 105212 where
--   oeis = 668 : map
--         (\x -> x + 1 + sum (takeWhile (< x) $ (rowT @27748) x)) (oeis @105212)

-- instance OEIS 105213 where
--   oeis = 932 : map
--         (\x -> x + 1 + sum (takeWhile (< x) $ (rowT @27748) x)) (oeis @105213)

-- instance OEIS 105221 where
--   oeisIx n = (oeisIx @8472) n - n * fi (oeisIx n)

-- instance OEIS 105271 where
--   oeis = [x | x <- [0..], (oeisIx @105025) x == x]

-- instance OEIS 105278 where
--   oeis = tablList @105278
-- instance Table 105278 where
--   rowCol = rowCol_off @105278 @1 @1
--   rowT   = rowT_off   @105278 @1
--   tabl = [1] : f [1] 2 where
--      f xs i = ys : f ys (i + 1) where
--        ys = zipWith (+) ([0] ++ xs) (zipWith (*) [i, i + 1 ..] (xs ++ [0]))

instance OEIS 105279 where
  oeis = iterate ((* 10) . (+ 1)) 0

instance OEIS 105317 where
  oeis = 0 : 1 : h 1 (drop 4 (oeis @45)) (S.singleton (2, 2)) where
    h y xs'@ (x:xs) s
      | x < ff    = h y xs (S.insert (x, x) s)
      | ff == y   = h y xs' s'
      | otherwise = ff : h ff xs' (S.insert (f * ff, f) s')
      where ((ff, f), s') = S.deleteFindMin s

-- instance OEIS 105321 where
--   oeisIx n = if n == 0 then 1 else (oeisIx @1316) n + (oeisIx @1316) (n - 1)

-- instance OEIS 105417 where
--   oeisIx n = (oeis @105417) !! (n - 1)
--   oeis = filter ((== "1234567") . sort . nub . show . (oeisIx @61493)) [1..3999]

-- instance OEIS 105441 where
--   oeis = filter ((> 2) . (oeisIx @1227)) [1..]

-- instance OEIS 105471 where
--   oeis = 0 : 1 :
--      zipWith ((flip mod 100 .) . (+)) (oeis @105471) (tail (oeis @105471))

-- instance OEIS 105571 where
--   oeis = [x | x <- [3..], (oeisIx @64911) (x - 2) == 1, (oeisIx @64911) (x + 2) == 1]

-- instance OEIS 105612 where
--   oeisIx = (subtract 1) . (oeisIx @224)

-- instance OEIS 105728 where
--   oeis = tablList @105728
-- instance Table 105728 where
--   rowCol = rowCol_off @105728 @1 @1
--   rowT   = rowT_off   @105728 @1
--   tabl = iterate (\row -> zipWith (+) ([0] ++ tail row ++ [1]) $
--                                   zipWith (+) ([0] ++ row) (row ++ [0])) [1]

-- instance OEIS 105801 where
--   oeis = 1 : 2 : fc 2 1 where
--      fc x x' = y : fc y x where y = (oeisIx @6370) (x + x')

-- instance OEIS 105809 where
--   oeis = tablList @105809
-- instance Table 105809 where
--   rowT n = (tabl @105809) !! n
--   tabl = map fst $ iterate
--      (\ (u:_, vs) -> (vs, zipWith (+) ([u] ++ vs) (vs ++ [0]))) ([1], [1,1])

-- instance OEIS 105870 where
--   oeis = 1 : 1 : zipWith (\u v -> (u + v) `mod` 7)
--                                  (tail (oeis @105870)) (oeis @105870)

-- instance OEIS 106001 where
--   oeisIx n = (oeis @250310) !! (n - 1)
--   oeis = [1..9] ++ [11] ++ f ([0..9] ++ [1,1]) 11 (10 : [12..])
--       where f ss i zs = g zs where
--           g (x:xs) = if ss !! i /= mod x 10
--               then g xs
--               else x : f (ss ++ map (read . return) (show x))
--                   (i + 1) (delete x zs)

-- instance OEIS 106039 where
--   oeis = filter belge0 [0..] where
--      belge0 n = n == (head $ dropWhile (< n) $
--                       scanl (+) 0 $ cycle ((map (read . return) . show) n))

-- instance OEIS 106108 where
--   oeis =
--      7 : zipWith (+) (oeis @106108) (zipWith gcd (oeis @106108) [2..])

-- instance OEIS 106146 where
--   oeisIx = flip mod 10 . (oeisIx @1358)

-- instance OEIS 106151 where
--   oeisIx = foldr (\b v -> 2 * v + b) 0 . concatMap
--      (\bs'@ (b:bs) -> if b == 0 then bs else bs') . group . (rowT @30308)

-- instance OEIS 106195 where
--   oeis = tablList @106195
-- instance Table 106195 where
--   rowT n = (tabl @106195) !! n
--   tabl = [1] : [2, 1] : f [1] [2, 1] where
--      f us vs = ws : f vs ws where
--        ws = zipWith (-) (zipWith (+) ([0] ++ vs) (map (* 2) vs ++ [0]))
--                         ([0] ++ us ++ [0])

-- instance OEIS 106244 where
--   import Data.MemoCombinators (memo2, integral)
--   oeisIx n = (oeis @106244) !! n
--   oeis = map (p' 1) [0..] where
--      p' = memo2 integral integral p
--      p _ 0 = 1
--      p k m = if m < pp then 0 else p' (k + 1) (m - pp) + p' (k + 1) m
--              where pp = (oeisIx @961) k

-- instance OEIS 106315 where
--   oeisIx n = n * (oeisIx @5) n `mod` (oeisIx @203) n

instance OEIS 106318 where
  oeisIx = (* 2) . (^ 6) . succ

-- instance OEIS 106328 where
--   oeis = 0 : 3 : zipWith (-) (map (* 6) (tail (oeis @106328))) (oeis @106328)

-- instance OEIS 106370 where
--   oeisIx n = f 2 n where
--      f b x = g x where
--        g 0 = b
--        g z = if r == 0 then f (b + 1) n else g z'
--              where (z', r) = divMod z b

-- instance OEIS 106371 where
--   oeis = map fromJust $ takeWhile (/= Nothing) $ map f [1..] where
--      f n = g 2 n where
--        g b x = h x 0 where
--          h 0 y = if b <= 10 then Just (oeisIx y) else Nothing
--          h z y = if r == 0 then g (b + 1) n else h z' (10 * y + r)
--                  where (z', r) = divMod z b

-- instance OEIS 106372 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @106370))

-- instance OEIS 106400 where
--   oeisIx n = (oeis @106400) !! n
--   oeis =  1 : concat
--      (transpose [map negate (oeis @106400), tail (oeis @106400)])

-- instance OEIS 106404 where
--   oeisIx n = genericLength [d | d <- takeWhile (<= n) (oeis @100484), mod n d == 0]

-- instance OEIS 106432 where
--   oeisIx n = (oeis @106432) !! n
--   oeis = zipWith (levenshtein `on` show)
--                          (oeis @79) $ tail (oeis @79) where
--      levenshtein us vs = last $ foldl transform [0..length us] vs where
--         transform xs@ (x:xs') c = scanl compute (x+1) (zip3 us xs xs') where
--            compute z (c', x, y) = minimum [y+1, z+1, x + fromEnum (c' /= c)]

-- instance OEIS 106435 where
--   oeis = 0 : 3 : map (* 3) (zipWith (+) (oeis @106435) (tail
--   oeis))

-- instance OEIS 106439 where
--   oeis = filter belge1 [1..] where
--      belge1 x = x == (head $ dropWhile (< x) $
--                       scanl (+) 1 $ cycle (map (read . return) $ show x))

-- instance OEIS 106518 where
--   oeis = filter belge2 [2..] where
--      belge2 x = x == (head $ dropWhile (< x) $
--                       scanl (+) 2 $ cycle (map (read . return) $ show x))

instance OEIS 106530 where
  oeisIx = foldr lcm 1 . (rowT @35516) . succ

-- instance OEIS 106579 where
--   oeis = tablList @106579
-- instance Table 106579 where
--   rowT n = (tabl @106579) !! n
--   tabl = [1] : iterate
--      (\row -> scanl1 (+) $ zipWith (+) ([0] ++ row) (row ++ [0])) [0,1]

-- instance OEIS 106596 where
--   oeis = filter belge3 [3..] where
--      belge3 x = x == (head $ dropWhile (< x) $
--                       scanl (+) 3 $ cycle (map (read . return) $ show x))

-- instance OEIS 106631 where
--   oeis = filter belge4 [4..] where
--      belge4 x = x == (head $ dropWhile (< x) $
--                       scanl (+) 4 $ cycle (map (read . return) $ show x))

-- instance OEIS 106708 where
--   oeisIx 1           = 0
--   oeisIx n
--      | (oeisIx @10051) n == 1 = 0
--      | otherwise = read $ concat $ (map show) $ init $ tail $ (rowT @27750) n

-- instance OEIS 106747 where
--   oeisIx n = if n == 0 then 0 else 10 * (oeisIx n') + div d 2
--               where (n', d) = divMod n 10

-- instance OEIS 106792 where
--   oeis = filter belge5 [5..] where
--      belge5 x = x == (head $ dropWhile (< x) $
--                       scanl (+) 5 $ cycle ((map (read . return) . show) x))

-- instance OEIS 106799 where
--   oeisIx = (oeisIx @1222) . (oeisIx @65330)

-- instance OEIS 106828 where
--   oeis = tablList @106828
-- instance Table 106828 where
--   rowCol n k = (tabf @106828) !! n !! k
--   rowT n = (tabf @106828) !! n
--   tabf = map (fst . fst) $ iterate f (([1], [0]), 1) where
--      f ((us, vs), x) =
--        ((vs, map (* x) $ zipWith (+) ([0] ++ us) (vs ++ [0])), x + 1)

-- instance OEIS 106831 where
--   oeis = tablList @106831
-- instance Table 106831 where
--   rowCol n k = (tabf @106831) !! n !! n
--   rowT n = (tabf @106831) !! n
--   tabf = map (map (\ (_, _, left, right) -> left * right)) $
--      iterate (concatMap (\ (x, f, left, right) -> let f' = f * x in
--      [ (x + 1, f', f', right), (3, 2, 2, left * right)])) [ (3, 2, 2, 1)]

-- instance OEIS 107014 where
--   oeis = filter belge6 [6..] where
--      belge6 x = x == (head $ dropWhile (< x) $
--                       scanl (+) 6 $ cycle (map (read . return) $ show x))

instance OEIS 107015 where
  oeisIx = genericLength . filter even . (rowT @35516) . succ

instance OEIS 107016 where
  oeisIx = genericLength . filter odd . (rowT @35516) . succ

-- instance OEIS 107018 where
--   oeis = filter belge7 [7..] where
--      belge7 x = x == (head $ dropWhile (< x) $
--                        scanl (+) 7 $ cycle (map (read . return) $ show x))

-- instance OEIS 107032 where
--   oeis = filter belge8 [8..] where
--      belge8 x = x == (head $ dropWhile (< x) $
--                       scanl (+) 8 $ cycle (map (read . return) $ show x))

-- instance OEIS 107043 where
--   oeis = filter belge9 [9..] where
--      belge9 x = x == (head $ dropWhile (< x) $
--                       scanl (+) 9 $ cycle (map (read . return) $ show x))

-- instance OEIS 107128 where
--   oeisIx n = if n == 0 then 0 else 10 * (oeisIx @107128 n') + m * d + (1 - m) * d'
--               where (d', m) = divMod d 2
--                     (n', d) = divMod n 10

instance OEIS 107227 where
  oeis = filter ((all even) . (rowT @35516)) [1..]

instance OEIS 107228 where
  oeis = filter ((all odd) . (rowT @35516)) [1..]

-- instance OEIS 107345 where
--   oeisIx n = (oeisIx @7318)' (oeisIx n) (oeisIx n)

-- instance OEIS 107354 where
--   oeisIx n = head $ snd $ until ((== 1) . fst)
--                                  f (2^n, replicate (2^n) 1) where
--      f (len, xs) = (len', scanl1 (+) $ drop len' xs) where
--         len' = len `div` 2

-- instance OEIS 107430 where
--   oeis = tablList @107430
-- instance Table 107430 where
--   rowT n = (tabl @107430) !! n
--   tabl = map sort (tabl @7318)

-- instance OEIS 107458 where
--   oeis = 1 : 0 : 0 : 0 : zipWith (+) (oeis @107458)
--      (zipWith (+) (tail (oeis @107458)) (drop 2 (oeis @107458)))

-- instance OEIS 107711 where
--   oeis = tablList @107711
-- instance Table 107711 where
--   rowT n = (tabl @107711) !! n
--   tabl = [1] : zipWith (map . flip div) [1..]
--                  (tail $ zipWith (zipWith (*)) (tabl @7318) (tabl @109004))

-- instance OEIS 107715 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @7090)

-- instance OEIS 107740 where
--   oeisIx n = genericLength [ () | let p = (oeisIx @40) n,
--                            m <- [max 0 (p - 9 * (oeisIx @55642) p) .. p - 1],
--                            oeisIx m == p]

-- instance OEIS 107741 where
--   oeisIx n = if null ms then 0 else head ms  where
--      ms = [m | let p = (oeisIx @40) n,
--                m <- [max 0 (p - 9 * (oeisIx @55642) p) .. p - 1], (oeisIx @62028) m == p]

-- instance OEIS 107743 where
--   oeis = filter ((== 0) . (oeisIx @10051)' . (oeisIx @62028)) [1..]

-- instance OEIS 107750 where
--   oeis = 0 : f 0 where
--      f x = y : f y where
--        y = head [z | z <- [x + 1 ..], (oeisIx @23416) z /= (oeisIx @23416) x]

-- instance OEIS 107782 where
--   oeisIx n = (oeisIx @23416) n - (oeisIx @87116) n

-- instance OEIS 107788 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @107788) !! (n - 1)
--   oeis = f $ singleton (1,0,0) where
--      f s = y : f (insert (8 * y, i + 1, j) $ insert (11 * y, i, j + 1) s')
--            where ((y, i, j), s') = deleteFindMin s

-- instance OEIS 107801 where
--   oeisIx n = (oeis @107801) !! (n - 1)
--   oeis = 2 : f 2 (tail (oeis @40)) where
--      f x ps = g ps where
--        g (q:qs) | null (show x `intersect` show q) = g qs
--                 | otherwise                        = q : f q (delete q ps)

instance OEIS 107846 where
  oeisIx = genericLength . concatMap tail . group . sort . show . fi

-- instance OEIS 107988 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @107988) !! (n - 1)
--   oeis = f $ singleton (1,0,0) where
--      f s = y : f (insert (4 * y, i + 1, j) $ insert (11 * y, i, j + 1) s')
--            where ((y, i, j), s') = deleteFindMin s

-- instance OEIS 108018 where
--   oeisIx = sum . map (oeisIx @10051)' . nub . map sum .
--             tail . subsequences . flip take (oeis @40)

-- instance OEIS 108035 where
--   oeis = tablList @108035
-- instance Table 108035 where
--   rowCol = rowCol_off @108035 @1 @1
--   rowT   = rowT_off   @108035 @1
--   tabl = zipWith replicate [1..] $ drop 2 (oeis @45)

-- instance OEIS 108037 where
--   oeis = tablList @108037
-- instance Table 108037 where
--   rowT n = (tabl @108037) !! n
--   tabl = zipWith replicate [1..] (oeis @45)

-- instance OEIS 108040 where
--   oeis = tablList @108040
-- instance Table 108040 where
--   rowT n = (tabl @108040) !! k
--   tabl = ox False (tabl @8281) where
--     ox turn (xs:xss) = (if turn then reverse xs else xs) : ox (not turn) xss

-- instance OEIS 108044 where
--   oeis = tablList @108044
-- instance Table 108044 where
--   rowT n = (tabl @108044) !! n
--   tabl = zipWith drop [0..] $ map (intersperse 0) (tabl @7318)

-- instance OEIS 108090 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @108090) !! (n - 1)
--   oeis = f $ singleton (1,0,0) where
--      f s = y : f (insert (11 * y, i + 1, j) $ insert (13 * y, i, j + 1) s')
--            where ((y, i, j), s') = deleteFindMin s

-- instance OEIS 108218 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @108218) !! (n - 1)
--   oeis = f $ singleton (1,0,0) where
--      f s = y : f (insert (11 * y, i + 1, j) $ insert (12 * y, i, j + 1) s')
--            where ((y, i, j), s') = deleteFindMin s

-- instance OEIS 108299 where
--   oeis = tablList @108299
-- instance Table 108299 where
--   rowT n = (tabl @108299) !! n
--   tabl = [1] : iterate (\row ->
--      zipWith (+) (zipWith (*) ([0] ++ row) (oeis @33999))
--                  (zipWith (*) (row ++ [0]) (oeis @59841))) [1,-1]

-- instance OEIS 108309 where
--   oeisIx = sum . (map (oeisIx @10051)) . (rowT @176271)

-- instance OEIS 108348 where
--   oeis = 1 : f [2..] where
--      f (x:xs) = g (oeis @40) where
--        g (p:ps) = h 0 $ map ((`div` (p - 1)) . subtract 1) $
--                             iterate (* p) (p ^ 2) where
--          h i (pp:pps) | pp > x    = if i == 0 then f xs else g ps
--                       | pp < x    = h 1 pps
--                       | otherwise = x : f xs

-- instance OEIS 108396 where
--   oeis = tablList @108396
-- instance Table 108396 where
--   rowT n = (tabl @108396) !! n
--   tabl = zipWith (\v ws -> map (flip div 2 . (* v) . (+ 1)) ws)
--                          [0..] (tabl @79901)

-- instance OEIS 108397 where
--   oeisIx 0 = 0
--   oeisIx 1 = 2
--   oeisIx n = n * (n^ (n+1) + n^2 - 2) `div` (2 * (n - 1))

instance OEIS 108398 where
  oeisIx n = n * (1 + n ^ n) `div` 2

instance OEIS 108411 where
  oeisIx = (3 ^) . flip div 2

-- instance OEIS 108546 where
--   oeisIx n = (oeis @108546) !! (n - 1)
--   oeis =  2 : concat
--      (transpose [oeis, (oeis @2144)])

-- instance OEIS 108561 where
--   oeis = tablList @108561
-- instance Table 108561 where
--   rowT n = (tabl @108561) !! n
--   tabl = map reverse (tabl @112465)

-- instance OEIS 108617 where
--   oeis = tablList @108617
-- instance Table 108617 where
--   rowT n = (tabl @108617) !! n
--   tabl = [0] : iterate f [1,1] where
--      f row@ (u:v:_) = zipWith (+) ([v - u] ++ row) (row ++ [v - u])

-- instance OEIS 108647 where
--   oeisIx = flip (oeisIx @103371) 3 . (+ 3)

-- instance OEIS 108655 where
--   oeis = filter f (oeis @40) where
--      f p = any (> 0) $ map (oeisIx . (oeisIx @37213) . (p -)) $
--                            takeWhile (< p) (oeis @74985)

-- instance OEIS 108687 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @108687) !! (n - 1)
--   oeis = f $ singleton (1,0,0) where
--      f s = y : f (insert (9 * y, i + 1, j) $ insert (11 * y, i, j + 1) s')
--            where ((y, i, j), s') = deleteFindMin s

-- instance OEIS 108696 where
--   oeis = 1 : sieve' 2 [2..] where
--      sieve' n (x:xs) = x : (sieve' (n+1) $ sieving xs) where
--         sieving xs = (take (n - 1) xs) ++ (sieving $ drop n xs)

-- instance OEIS 108698 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @108698) !! (n - 1)
--   oeis = f $ singleton (1,0,0) where
--      f s = y : f (insert (6 * y, i + 1, j) $ insert (11 * y, i, j + 1) s')
--            where ((y, i, j), s') = deleteFindMin s

-- instance OEIS 108730 where
--   oeis = tablList @108730
-- instance Table 108730 where
--   rowCol n k = (tabf @108730) !! (n - 1) !! (k-1)
--   rowT = f . group . reverse . unfoldr
--      (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2) where
--      f [] = []
--      f [os] = replicate (length os) 0
--      f (os:zs:dss) = replicate (length os - 1) 0 ++ [length zs] ++ f dss
--   tabf = map (rowT @108730) [1..]
--   oeis = concat (tabf @108730)

-- instance OEIS 108731 where
--   oeis = tablList @108731
-- instance Table 108731 where
--   rowCol n k = (rowT @108731) n !! k
--   rowT 0 = [0]
--   rowT n = t n $ reverse $ takeWhile (<= n) $ tail (oeis @142)
--      where t 0 []     = []
--            t x (b:bs) = x' : t m bs where (x',m) = divMod x b
--   tabf = map (rowT @108731) [0..]

-- instance OEIS 108761 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @108761) !! (n - 1)
--   oeis = f $ singleton (1,0,0) where
--      f s = y : f (insert (10 * y, i + 1, j) $ insert (13 * y, i, j + 1) s')
--            where ((y, i, j), s') = deleteFindMin s

-- instance OEIS 108775 where
--   oeisIx n = div (oeisIx n) n

-- instance OEIS 108779 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @108779) !! (n - 1)
--   oeis = f $ singleton (1,0,0) where
--      f s = y : f (insert (10 * y, i + 1, j) $ insert (11 * y, i, j + 1) s')
--            where ((y, i, j), s') = deleteFindMin s

-- instance OEIS 108804 where
--   oeis = f [head (oeis @10060)] $ tail (oeis @10060) where
--      f xs (z:zs) = (sum $ zipWith (*) xs (reverse xs)) : f (z : xs) zs

-- instance OEIS 108839 where
--   oeis = 1 : f 2 [1] where
--      f x zs = z : f (x + 1) (z : zs) where
--        z = toInteger $ sum $ map (oeisIx . (+ x)) zs

-- instance OEIS 108872 where
--   oeis = tablList @108872
-- instance Table 108872 where
--   rowCol = rowCol_off @108872 @1 @1
--   rowT   = rowT_off   @108872 @1
--   tabl = map (\x -> [x + 1 .. 2 * x]) [1..]

-- instance OEIS 108898 where
--   oeis = -1 : 1 : 3 :
--      zipWith (-) (map (* 3) $ drop 2 (oeis @108898)) (map (* 2) (oeis @108898))

-- instance OEIS 108906 where
--   oeis = zipWith (-) (tail (oeis @6899)) (oeis @6899)

-- instance OEIS 109008 where
--   oeisIx = gcd 4
--   oeis = cycle [4,1,2,1]

-- instance OEIS 109043 where
--   oeisIx = (lcm 2)
--   oeis = zipWith (*) [0..] (oeis @34)

instance OEIS 109045 where
  oeisIx = lcm 4

-- instance OEIS 109128 where
--   oeis = tablList @109128
-- instance Table 109128 where
--   rowT n = (tabl @109128) !! n
--   tabl = iterate (\row -> zipWith (+)
--      ([0] ++ row) (1 : (map (+ 1) $ tail row) ++ [0])) [1]

-- instance OEIS 109129 where
--   oeisIx n = genericIndex (oeis @109129) (n - 1)
--   oeis = 0 : 1 : g 3 where
--      g x = y : g (x + 1) where
--        y = if t > 0 then (oeisIx @109129) t else (oeisIx @109129) r + (oeisIx @109129) s
--            where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 109303 where
--   oeis = filter ((> 0) . (oeisIx @107846)) [0..]

-- instance OEIS 109373 where
--   oeis = filter ((== 1) . (oeisIx @64911)) (oeis @88707)

-- instance OEIS 109400 where
--   oeis = concat $ zipWith (++) (tabl @2260) (tabl @37126)

instance OEIS 109449 where
  oeis = tablList @109449
instance Table 109449 where
  rowT n = zipWith (*) (rowT @7318 n) (reverse $ genericTake (n + 1) (oeis @111))
  tabl = map (rowT @109449) [0..]

-- instance OEIS 109465 where
--   oeisIx n = (oeis @109465) !! (n - 1)
--   oeis = f 1 [1..] where
--      f o xs = g xs where
--        g (z:zs) = if o' == o then g zs else z : f o' (delete z xs)
--                   where o' = (oeisIx @1221) z

-- instance OEIS 109613 where
--   oeisIx = (+ 1) . (* 2) . (`div` 2)
--   oeis = 1 : 1 : map (+ 2) (oeis @109613)

instance OEIS 109614 where
  oeis = concat $ transpose [tail (oeis @578), (oeis @27), tail (oeis @290)]

-- instance OEIS 109671 where
--   oeisIx n = (oeis @109671) !! (n - 1)
--   oeis = concat (transpose [1 : f 1 (oeis @109671), (oeis @109671)])
--      where f u (v:vs) = y : f y vs where
--              y = if u > v then u - v else u + v

-- instance OEIS 109681 where
--   oeis = map (foldr (\d v -> 3 * v + d) 0) $ f (tabf @30341) where
--      f vss = (g 0 vss) : f (tail vss)
--      g k (ws:wss) = if k < length ws then ws !! k : g (k + 1) wss else []

-- instance OEIS 109682 where
--   oeisIx n = (oeis @109682) !! (n - 1)
--   oeis = compl (oeis @109681) [0..] where
--      compl us'@ (u:us) vs'@ (v:vs)
--          | u == v    = compl us vs
--          | u > 3 * v = v : compl us (delete u vs)
--          | otherwise = compl us (delete u vs')

-- instance OEIS 109683 where
--   oeisIx = (oeisIx @7089) . (oeisIx @109681)

-- instance OEIS 109735 where
--   oeis = scanl1 (+) (oeis @109890)

-- instance OEIS 109736 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @109890))

-- instance OEIS 109761 where
--   oeis = filter ((== 1) . (oeisIx @210455)) (oeis @91999)

-- instance OEIS 109812 where
--   oeisIx n = (oeis @109812) !! (n - 1)
--   oeis = f 0 [1..] :: [Int] where
--      f v ws = g ws where
--        g (x:xs) = if v .&. x == 0 then x : f x (delete x ws) else g xs

-- instance OEIS 109890 where
--   oeisIx n = (oeis @109890) !! (n - 1)
--   oeis = 1 : 2 : 3 : f (4, []) 6 where
--      f (m,ys) z = g $ dropWhile (< m) $ (rowT @27750)' z where
--        g (d:ds) | elem d ys = g ds
--                 | otherwise = d : f (ins [m, m + 1 ..] (insert d ys)) (z + d)
--        ins (u:us) vs'@ (v:vs) = if u < v then (u, vs') else ins us vs

-- instance OEIS 109906 where
--   oeis = tablList @109906
-- instance Table 109906 where
--   rowT n = (tabl @109906) !! n
--   tabl = zipWith (zipWith (*)) (tabl @58071) (tabl @7318)

-- instance OEIS 109925 where
--   oeisIx n = sum $ map (oeisIx' . (n -)) $ takeWhile (< n)  (oeis @79)

-- instance OEIS 109981 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @55642)) (oeis @46704)

-- instance OEIS 109983 where
--   oeis = tablList @109983
-- instance Table 109983 where
--   rowCol n k = (tabf @109983) !! n !! k
--   rowT n = (tabf @109983) !! n
--   tabf = zipWith (++) (map (flip take (repeat 0)) [0..]) (tabl @63007)

-- instance OEIS 109984 where
--   oeisIx = sum . zipWith (*) [0..] . (rowT @109983)

-- instance OEIS 110080 where
--   import Data.Set (singleton, member, insert)
--   oeisIx n = (oeis @110080) !! (n - 1)
--   oeis = 1 : f 1 (oeis @40) (singleton 1) where
--      f x (p:ps) m = y : f y ps (insert y m) where
--        y = g x p
--        g 0 _ = h x p
--        g u 0 = u
--        g u v = g (u - 1) (if member (u - 1) m then v else v - 1)
--        h u 0 = u
--        h u v = h (u + 1) (if member (u + 1) m then v else v - 1)

-- instance OEIS 110085 where
--   oeis = filter (\x -> (oeisIx @51612) x < (oeisIx @110088) x) [1..]

-- instance OEIS 110086 where
--   oeis = filter (\x -> (oeisIx @51612) x <= (oeisIx @110088) x) [1..]

-- instance OEIS 110087 where
--   oeis = filter (\x -> (oeisIx @51612) x > (oeisIx @110088) x) [1..]

-- instance OEIS 110088 where
--   oeisIx n = (oeisIx @5) n ^ (oeisIx @1221) n

-- instance OEIS 110157 where
--   oeisIx n = genericIndex (oeis @110157) (n - 1)
--   oeis = 0 : map ((+ 1) . (oeisIx @110157) . (+ 1)) (oeis @75423)

-- instance OEIS 110170 where
--   oeisIx 0 = 1
--   oeisIx n = (oeisIx @128966) (2 * n) n

-- instance OEIS 110240 where
--   oeisIx = foldl (\v d -> 2 * v + d) 0 . map toInteger . (rowT @70950)

-- instance OEIS 110267 where
--   oeis = scanl1 (+) (oeis @70952)

-- instance OEIS 110353 where
--   oeisIx n = (+ 1) $ fromJust $
--      findIndex ((== 0) . (`mod` t)) $ dropWhile (<= t) (oeis @217)
--      where t = (oeisIx @217) n

-- instance OEIS 110380 where
--   oeisIx = drop 1 fn
--             where fn    = 0 : 1 : concat (fn' 2)
--                   fn' n = (map (+ones) (drop nv $ take (n + nv) fn)) : (fn' (n+1))
--                           where ones = div (10^n -1) 9
--                                 nv   = div ((n - 1)* (n-2)) 2

-- instance OEIS 110440 where
--   oeis = tablList @110440
-- instance Table 110440 where
--   rowT n = (tabl @110440) !! n
--   tabl = iterate (\xs ->
--      zipWith (+) ([0] ++ xs) $
--      zipWith (+) (map (* 3) (xs ++ [0]))
--                  (map (* 2) (tail xs ++ [0,0]))) [1]

-- instance OEIS 110475 where
--   oeisIx 1 = 0
--   oeisIx n = genericLength us - 1 + 2 * length vs where
--               (us, vs) = span (== 1) $ (rowT @118914) n

-- instance OEIS 110591 where
--   oeisIx 0 = 1
--   oeisIx n = genericLength $
--      unfoldr (\x -> if x == 0 then Nothing else Just (x, x `div` 4)) n

-- instance OEIS 110654 where
--   oeisIx = (`div` 2) . (+ 1)
--   oeis = tail (oeis @4526)

-- instance OEIS 110745 where
--   oeisIx n = read (concat $ transpose [ns, reverse ns]) :: Integer
--               where ns = show n

-- instance OEIS 110765 where
--   oeisIx = product . zipWith (^) (oeis @40) .  reverse . (rowT @30308)

-- instance OEIS 110766 where
--   oeisIx n = (oeis @110766) !! (n - 1)
--   oeis = concat $ transpose [oeis, (oeis @110766)]

-- instance OEIS 110910 where
--   {- program for verification of periodic cases. The non-periodic cases listed here evolve into a periodic kernel plus gliders whose paths ahead do not intersect each other or the kernel (gliders marching in single file are not counted as intersecting). Replace leading dots with spaces before running! -}
--   import Data.Set
--   main = print [if n `elem` known then 0 else a n | n<-[0..105]]
--   known = [56,71,72,75,78,82,85,86,87,88,91,92,93,94,96,98,100,102,103,105]
--   a n = count empty (iterate evolve (fromList [ (x,0) | x<-[1..n]]))
--   neighbors (x,y) = fromList
--   ................. [ (x+u,y+v) | u<-[ -1,0,1], v<-[ -1,0,1], (u,v)/= (0,0)]
--   evolve life =
--   . let fil f = Data.Set.filter
--   ............. (\x-> f (size (life `intersection` neighbors x)))
--   . in (life `difference` fil (\k-> k<2 || k>3) life) `union` fil (== 3)
--   .... (unions (Prelude.map neighbors (elems life)) `difference` life)
--   count o (x:xs) | x `member` o = 0
--   .............. | otherwise = 1 + count (o `union` singleton x) xs

-- instance OEIS 111006 where
--   oeis = tablList @111006
-- instance Table 111006 where
--   rowT n = (tabl @111006) !! n
--   tabl =  map fst $ iterate (\ (us, vs) ->
--      (vs, zipWith (+) (zipWith (+) ([0] ++ us ++ [0]) ([0,0] ++ us))
--                       ([0] ++ vs))) ([1], [0,1])

-- instance OEIS 111046 where
--   oeisIx = (* 2) . (oeisIx @54735)

-- instance OEIS 111060 where
--   oeisIx 1 = 0
--   oeisIx n = sum $ (rowT @265668) n

-- instance OEIS 111063 where
--   oeis = 1 : zipWith (+) [1..] (zipWith (*) [0..] (oeis @111063))

-- instance OEIS 111133 where
--   oeisIx = subtract 1 . (oeisIx @9)

-- instance OEIS 111178 where
--   oeisIx = p $ tail (oeis @5563) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 111192 where
--   oeis = f (oeis @40) where
--      f (p:ps@ (q:r:_)) | q - p == 6 = (p*q) : f ps
--                       | r - p == 6 = (p*r) : f ps
--                       | otherwise  = f ps

-- instance OEIS 111208 where
--   oeisIx n = genericLength $ takeWhile (<= (oeisIx @217) n) (oeis @40)

-- instance OEIS 111227 where
--   oeis = filter (\x -> (oeisIx @19294) x > x) [1..]

-- instance OEIS 111244 where
--   oeis = scanl1 (+) (oeis @84385)

-- instance OEIS 111282 where
--   oeis = 1 : (oeis @25169)

-- instance OEIS 111418 where
--   oeis = tablList @111418
-- instance Table 111418 where
--   rowT n = (tabl @111418) !! n
--   tabl = map reverse (tabl @122366)

-- instance OEIS 111546 where
--   oeis = 1 : f 2 [1] where
--      f v ws@ (w:_) = y : f (v + 1) (y : ws) where
--                     y = v * w + (sum $ zipWith (*) ws $ reverse ws)

-- instance OEIS 111650 where
--   oeis = tablList @111650
--   rowCol = rowCol_off @111650 @1 @1
--   rowT   = rowT_off   @111650 @1
--   tabl = iterate (\xs@ (x:_) -> map (+ 2) (x:xs)) [2]
--   oeis = concat (tabl @111650)

-- instance OEIS 111708 where
--   oeisIx 0 = 9
--   oeisIx n = f [] n where
--      f ys 0 = foldl (\v d -> 10 * v + d) 0 $ ys ++ map (9 -) ys
--      f ys x = f (d : ys) x' where (x', d) = divMod x 10

-- instance OEIS 111711 where
--   oeis = 1 : zipWith (+) (oeis @111711) (oeis @80512)

-- instance OEIS 111712 where
--   oeis = scanl (+) 1 (oeis @195013)

-- instance OEIS 111721 where
--   oeis = 1 : 1 :
--      map (+ 5) (zipWith (+) (oeis @111721) (tail (oeis @111721)))

-- instance OEIS 112310 where
--   oeis = concat fss where
--      fss = [0] : [1] : (map (map (+ 1))) (zipWith (++) fss $ tail fss)

-- instance OEIS 112373 where
--   oeis = 1 : 1 : zipWith (\u v -> (u^3 + u^2) `div` v)
--                                  (tail (oeis @112373)) (oeis @112373)

-- instance OEIS 112465 where
--   oeis = tablList @112465
-- instance Table 112465 where
--   rowT n = (tabl @112465) !! n
--   tabl = iterate f [1] where
--      f xs'@ (x:xs) = zipWith (+) ([-x] ++ xs ++ [0]) ([0] ++ xs')

-- instance OEIS 112468 where
--   oeis = tablList @112468
-- instance Table 112468 where
--   rowT n = (tabl @112468) !! n
--   tabl = iterate (\xs -> zipWith (-) ([2] ++ xs) (xs ++ [0])) [1]

instance OEIS 112526 where
  oeisIx 0 = 1
  oeisIx n = fi . fromEnum $ (> 1) $ minimum $ (rowT @124010 . succ) n

-- instance OEIS 112632 where
--   oeis = scanl1 (+) $ map negate (oeis @134323)

-- instance OEIS 112765 where
--   oeisIx n = fives n 0 where
--      fives n e | r > 0     = e
--                | otherwise = fives n' (e + 1) where (n',r) = divMod n 5

-- instance OEIS 112798 where
--   oeis = tablList @112798
-- instance Table 112798 where
--   rowCol n k = (tabf @112798) !! (n - 2) !! (n-1)
--   rowT n = (tabf @112798) !! (n - 2)
--   tabf = map (map (oeisIx @49084)) $ tail (tabf @27746)

instance OEIS 112963 where
  oeisIx (succ->n) = sum $ zipWith (*)
     (oeis @8683) $ reverse $ genericTake (n - 1) (oeis @5)

instance OEIS 112966 where
  oeisIx (succ->n) = sum $ zipWith (*)
     (oeis @8683) $ reverse $ genericTake (n - 1) (oeis @1221)

instance OEIS 112968 where
  oeisIx (succ->n) = sum $ zipWith (*)
     (oeis @8683) $ reverse $ genericTake (n - 1) (oeis @1222)

-- instance OEIS 112988 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @89088)) . (oeisIx @40)

-- instance OEIS 112990 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @89088))

-- instance OEIS 113215 where
--   oeis = concat $ zipWith take
--                           [1, 3 ..] $ map (repeat . (oeisIx @6218)) [0 ..]

-- instance OEIS 113232 where
--   oeisIx = (oeisIx @109812) . (oeisIx @109812)

-- instance OEIS 113233 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @109812))

-- instance OEIS 113234 where
--   oeisIx = (oeisIx @113233) . (oeisIx @113233)

instance OEIS 113630 where
  oeisIx n = sum $ zipWith (*) [1..9] $ iterate (* n) 1

-- instance OEIS 113646 where
--   oeisIx n = if n < 3 then 4 else (oeisIx @14683) n

-- instance OEIS 113801 where
--   oeis = 1 : 13 : map (+ 14) (oeis @113801)

-- instance OEIS 113963 where
--   oeisIx n = (oeis @113963) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f z xs = g xs where
--        g (y:ys) = if (y + z) `mod` abs (y - z) > 0
--                      then y : f y (delete y xs) else g ys

-- instance OEIS 113966 where
--   oeisIx n = (oeis @113966) !! (n - 1)
--   oeis = 1 : f [2..] [1] where
--      f xs ys'@ (y:ys) = y' : f (delete y' xs) (y':ys') where
--        y' = head [z | z <- xs, y `mod` abs (z - y) > 0]

-- instance OEIS 114102 where
--   oeisIx n = genericLength $ filter (== 1) $
--               map (length . nub . (map (oeisIx @10888))) $ ps 1 n
--      where ps x 0 = [[]]
--            ps x y = [t:ts | t <- [x..y], ts <- ps t (y - t)]

-- instance OEIS 114180 where
--   oeis = filter ((== 0) . (oeisIx @261890)) [1..]

-- instance OEIS 114183 where
--   oeis = 1 : f [1] where
--      f xs@ (x:_) = y : f (y : xs) where
--        y = if z `notElem` xs then z else 2 * x where z = (oeisIx @196) x

-- instance OEIS 114227 where
--   oeisIx n = head [p | p <- tail (oeis @40),
--                         (oeisIx @10051)' (2 * p + (oeisIx @40) n) == 1]

-- instance OEIS 114228 where
--   oeisIx n = head [m | m <- [1..],
--                         (oeisIx @10051) (oeisIx n + 2 * (oeisIx @40) m) == 1]

-- instance OEIS 114229 where
--   oeisIx = (+ 2) . fromJust . (`elemIndex` (map (oeisIx @114228) [2..]))

-- instance OEIS 114230 where
--   oeisIx n = head [p | let q = (oeisIx @40) n,
--                         p <- reverse $ takeWhile (< q) (oeis @40),
--                         (oeisIx @10051) (q + 2 * p) == 1]

-- instance OEIS 114231 where
--   oeisIx n = head [m | m <- [1..],
--                         (oeisIx @10051) (oeisIx n + 2 * (oeisIx @40) (n - m)) == 1]

-- instance OEIS 114233 where
--   oeisIx n = head [m | m <- [1 .. n],
--                         (oeisIx @10051)' (2 * (oeisIx @40) n + (oeisIx @40) m) == 1]

-- instance OEIS 114235 where
--   oeisIx n = head [p | let q = (oeisIx @40) n,
--                         p <- reverse $ takeWhile (< q) (oeis @40),
--                         (oeisIx @10051) (2 * q + p) == 1]

-- instance OEIS 114236 where
--   oeisIx n = head [m | m <- [1..],
--                         (oeisIx @10051) (2 * (oeisIx @40) n + (oeisIx @40) (n - m)) == 1]

-- instance OEIS 114262 where
--   oeisIx n = head [q | let (p:ps) = drop (n - 1) (oeis @40),
--                         q <- ps, (oeisIx @10051) (p + 2 * q) == 1]

-- instance OEIS 114263 where
--   oeisIx n = head [m | m <- [1..n],
--                         (oeisIx @10051) (oeisIx n + 2 * (oeisIx @40) (n + m)) == 1]

-- instance OEIS 114265 where
--   oeisIx n = head [p | let (q:qs) = drop (n - 1) (oeis @40), p <- qs,
--                         (oeisIx @10051) (2 * q + p) == 1]

-- instance OEIS 114266 where
--   oeisIx n = head [m | m <- [1..],
--                         (oeisIx @10051) (2 * (oeisIx @40) n + (oeisIx @40) (n + m)) == 1]

-- instance OEIS 114283 where
--   oeis = tablList @114283
-- instance Table 114283 where
--   rowT n = (tabl @114283) !! n
--   tabl = iterate
--      (\row -> (sum $ zipWith (+) row $ reverse row) : row) [1]

-- instance OEIS 114327 where
--   oeis = tablList @114327
-- instance Table 114327 where
--   rowT n = (tabl @114327) !! n
--   tabl = zipWith (zipWith (-)) (tabl @25581) (tabl @2262)

-- instance OEIS 114334 where
--   oeis = (rowT @27750) (6 ^ 6)

-- instance OEIS 114374 where
--   oeisIx = p (oeis @13929) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 114851 where
--   oeisIx = open where
--     open n = if n<2 then 0 else
--              1 + open (n - 2) + sum [open i * open (n-2-i) | i <- [0..n-2]]

-- instance OEIS 114897 where
--   oeis = 1 : f 1 [1] where
--      f x zs = z : f (x + 1) (z : zs) where
--        z = toInteger $ sum $ map (oeisIx . (+ x)) zs

-- instance OEIS 115068 where
--   oeis = tablList @115068
-- instance Table 115068 where
--   rowCol = rowCol_off @115068 @1 @1
--   rowT   = rowT_off   @115068 @1
--   tabl = iterate (\row -> zipWith (+) (row ++ [1]) $
--                                   zipWith (+) (row ++ [0]) ([0] ++ row)) [1]

-- instance OEIS 115300 where
--   oeisIx n = (oeisIx @54054) n * (oeisIx @54055) n

-- instance OEIS 115339 where
--   oeis = [1, 1, 2, 3] ++
--                  zipWith (+) (oeis @115339) (drop 2 (oeis @115339))

-- instance OEIS 115390 where
--   oeis = 0 : 0 : 1 : map (* 2) (zipWith (-) (oeis @115390)
--      (tail $ map (* 2) $ zipWith (-) (oeis @115390) (tail (oeis @115390))))

-- instance OEIS 115408 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @115409))

-- instance OEIS 115409 where
--   oeis = tablList @115409
--   rowCol = rowCol_off @115409 @1 @1
--   rowT   = rowT_off   @115409 @1
--   tabl = map f $ drop 2 $ inits (oeis @24431) where
--      f xs = reverse $ map (z -) zs where (z:zs) = reverse xs
--   oeis = concat (tabl @115409)

-- instance OEIS 115627 where
--   oeis = tablList @115627
-- instance Table 115627 where
--   rowCol n k = (tabf @115627) !! (n - 2) !! (k-1)
--   rowT = map (oeisIx @100995) . (rowT @141809) . (oeisIx @142)
--   tabf = map (rowT @115627) [2..]

-- instance OEIS 115671 where
--   oeisIx = p [x | x <- [0..], (mod x 32) `notElem` [0,2,12,14,16,18,20,30]]
--      where p _          0 = 1
--            p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 115944 where
--   oeisIx = p (tail (oeis @142)) where
--      p _      0             = 1
--      p (f:fs) m | m < f     = 0
--                 | otherwise = p fs (m - f) + p fs m

-- instance OEIS 115945 where
--   oeisIx n = (oeis @115945) !! (n - 1)
--   oeis = elemIndices 0 $ map (oeisIx @115944) [0..]

-- instance OEIS 116371 where
--   oeisIx n = p (oeis @17173) n where
--      p _  0 = 1
--      p [] _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

instance OEIS 116385 where
  oeisIx n = (rowCol @51631) (n+1) $ (n+1) `div` 2

instance OEIS 116470 where
  oeis = 0 : 1 : 2 : concat (transpose [drop 4 (oeis @45), drop 3 (oeis @32)])

instance OEIS 116472 where
  oeisIx = (oeisIx @149) . (* 2)

instance OEIS 116478 where
  oeis = 1 : f [2..] [1] where
     f (x:xs) ys = y : f xs (y:ys) where y = sum $ map (div x) ys

instance OEIS 116520 where
  oeis = 0 : zs where
     zs = 1 : (concat $ transpose
                        [zipWith (+) vs zs, zipWith (+) vs $ tail zs])
        where vs = map (* 4) zs

-- instance OEIS 116536 where
--   oeisIx n = (oeis @116536) !! (n - 1)
--   oeis = catMaybes $ zipWith div' (oeis @2110) (oeis @7504) where
--      div' x y | m == 0    = Just x'
--               | otherwise = Nothing where (x',m) = divMod x y

-- instance OEIS 116549 where
--   oeisIx = genericIndex (oeis @116549)
--   oeis = 1 : zipWith ((+) `on` (oeisIx @116549)) (oeis @523) (oeis @53645)

-- instance OEIS 116590 where
--   oeis = 1 : zipWith (+) (oeis @5185) (drop 2 (oeis @5185))

-- instance OEIS 116619 where
--   oeisIx = (+ 1) . (oeisIx @71681)

-- instance OEIS 116666 where
--   oeis = tablList @116666
-- instance Table 116666 where
--   rowCol = rowCol_off @116666 @1 @1
--   rowT   = rowT_off   @116666 @1
--   tabl = zipWith (zipWith (*)) (tabl @7318) (tabl @158405)

-- instance OEIS 116697 where
--   oeis = [1,1,-2,2]
--                  ++ (zipWith (-) (oeis @116697)
--                                  $ zipWith (+) (tail (oeis @116697))
--                                                (drop 3 (oeis @116697)))
--   oeis = 0 : (map negate $ map (oeisIx @116697) [0,2..])
--   oeis = 1 : map (oeisIx @116697) [1,3..]
--   oeis = zipWith (-) (tail (oeis @116697)) (oeis @116697)
--   oeis = map (oeisIx @186679) [0,2..]
--   oeis = 0 : (map negate $ map (oeisIx @186679) [1,3..])
--   oeis = 1 : -3 : (zipWith (+) (oeis @186679) $ drop 2 (oeis @186679))

-- instance OEIS 116700 where
--   oeisIx n = (oeis @116700) !! (n - 1)
--   oeis = filter early [1 ..] where
--      early z = not (reverse (show (z - 1)) `isPrefixOf` fst bird) where
--         bird = fromJust $ find ((show z `isPrefixOf`) . snd) xys
--      xys = iterate (\ (us, v : vs) -> (v : us, vs))
--                    ([], concatMap show [0 ..])

-- instance OEIS 116853 where
--   oeis = tablList @116853
-- instance Table 116853 where
--   rowCol = rowCol_off @116853 @1 @1
--   rowT   = rowT_off   @116853 @1
--   tabl = map reverse $ f (tail (oeis @142)) [] where
--      f (u:us) vs = ws : f us ws where ws = scanl (-) u vs

-- instance OEIS 116854 where
--   oeis = tablList @116854
-- instance Table 116854 where
--   rowCol = rowCol_off @116854 @1 @1
--   rowT   = rowT_off   @116854 @1
--   tabl = [1] : zipWith (:) (tail $ map head tss) tss
--                  where tss = (tabl @116853)

-- instance OEIS 116933 where
--   oeisIx n = head [k | k <- [1..], (oeisIx @10051)' (n + k * (oeisIx @79578) n) == 1]

-- instance OEIS 116934 where
--   oeisIx n = head [q | k <- [1..], let q = n + k * (oeisIx @79578) n,
--                         (oeisIx @10051)' q == 1]

-- instance OEIS 116939 where
--   oeis = 0 : f [0] where
--      f xs@ (x : _) = ys ++ f ys where
--        ys = if odd x then (x + 1 : x : map (+ 1) xs) else map (+ 1) xs

-- instance OEIS 116940 where
--   oeisIx n = last $ elemIndices n $ takeWhile (<= n + 1) (oeis @116939)

-- instance OEIS 116941 where
--   oeis = f 0 1 (zip (oeis @116939) [0..]) [] where
--      f u v xis'@ ((x,i):xis) ws
--        | x == u    = i : f u v xis ws
--        | x == v    = f u v xis (i : ws)
--        | otherwise = reverse ws ++ f v x xis' []

-- instance OEIS 116942 where
--   oeisIx = fromJust . (`elemIndex` (oeis @116941))

-- instance OEIS 116966 where
--   oeis = zipWith (+) [0..] $ drop 2 (oeis @140081)

-- instance OEIS 117047 where
--   oeis = [x | k <- [0..], let x = 60 * k + 11, (oeisIx @10051)' x == 1]

-- instance OEIS 117070 where
--   oeisIx n = (oeis @117070) !! (n - 1)
--   oeis = tSegments !! 0
--   tSegments = transpose $ unfoldr (Just . splitAt 3) $ tail (oeis @78783)

-- instance OEIS 117071 where
--   oeis = tSegments !! 1

-- instance OEIS 117072 where
--   oeis = tSegments !! 2

-- instance OEIS 117073 where

-- instance OEIS 117128 where
--   import Data.Set (singleton, notMember, insert)
--   oeisIx n = (oeis @117128) !! n
--   oeis = 1 : f 1 (oeis @40) (singleton 1) where
--      f x (p:ps) s | x' > 0 && x' `notMember` s = x' : f x' ps (insert x' s)
--                   | otherwise                  = xp : f xp ps (insert xp s)
--                   where x' = x - p; xp = x + p

-- instance OEIS 117140 where
--   oeis = 5 : 7 : ulam 2 7 (oeis @117140)

-- instance OEIS 117214 where
--   oeisIx n = product $
--      filter ((> 0) . (mod m)) $ takeWhile (< (oeisIx @6530) m) (oeis @40)
--      where m = (oeisIx @5117) n

-- instance OEIS 117317 where
--   oeis = tablList @117317
-- instance Table 117317 where
--   rowT n = (tabl @117317) !! n
--   tabl = map reverse (tabl @56242)

-- instance OEIS 117366 where
--   oeisIx = (oeisIx @151800) . (oeisIx @6530)

-- instance OEIS 117499 where
--   oeisIx 1 = sum $ map (oeisIx @10051) [1, 2, 0 + 1, 0 + 2, 1 + 2, 0 + 1 + 2]
--   oeisIx n = sum $ map (oeisIx @10051) [n - 1, n, n + 1, 2 * n - 1, 2 * n + 1]

-- instance OEIS 117546 where
--   oeisIx = p $ drop 3 (oeis @73) where
--      p _  0     = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 117591 where
--   oeis = zipWith (+) (oeis @79) (oeis @45)

-- instance OEIS 117671 where
--   oeisIx n = (oeisIx @258993) (2 * n + 1) n

-- instance OEIS 117704 where
--   oeis = 1 : zipWith (-) (tail (oeis @5214)) (oeis @5214)

-- instance OEIS 117767 where
--   oeisIx = (+ 1) . (* 2) . (oeisIx @6)

-- instance OEIS 117818 where
--   oeisIx n = if (oeisIx @10051) n == 1 then n else (oeisIx @32742) n

-- instance OEIS 117872 where
--   oeisIx = flip mod 2 . (oeisIx @7501)

-- instance OEIS 117890 where
--   oeis = [x | x <- [1..], let z = (oeisIx @23416) x, z > 0, mod x z == 0]

-- instance OEIS 117922 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @55265))

-- instance OEIS 117930 where
--   oeisIx n = p (tail (oeis @142)) $ 2*n where
--      p _          0             = 1
--      p ks'@ (k:ks) m | m < k     = 0
--                     | otherwise = p ks' (m - k) + p ks m

-- instance OEIS 117989 where
--   oeis = tail $ zipWith (-)
--                         (map (* 2) (oeis @41)) $ tail (oeis @41)

-- instance OEIS 118013 where
--   oeis = tablList @118013
-- instance Table 118013 where
--   rowCol = rowCol_off @118013 @1 @1
--   rowT n = map (div (n^2)) [1..n]
--   tabl = map (rowT @118013) [1..]

-- instance OEIS 118139 where
--   oeis = filter ((> 1) . (oeisIx @52343)) [0..]

-- instance OEIS 118372 where
--   oeis = sPerfect 1 [] where
--      sPerfect x ss | v > x = sPerfect (x + 1) ss
--                    | v < x = sPerfect (x + 1) (x : ss)
--                    | otherwise = x : sPerfect (x + 1) (x : ss)
--                    where v = sum (filter ((== 0) . mod x) ss)

-- instance OEIS 118416 where
--   oeis = tablList @118416
-- instance Table 118416 where
--   rowCol = rowCol_off @118416 @1 @1
--   rowT 1 = [1]
--   rowT n = (map (* 2) $ (rowT @118416) (n - 1)) ++ [oeisIx (n-1)]
--   tabl = map (rowT @118416) [1..]

-- instance OEIS 118478 where
--   oeisIx n = (+ 1) . fromJust $ elemIndex 0 $
--               map (flip mod (oeisIx n)) $ tail (oeis @2378)

-- instance OEIS 118532 where
--   oeis = iterate ((+ 15) . (oeisIx @4086)) 1

-- instance OEIS 118628 where
--   oeisIx n = (oeis @118628) !! (n - 1)
--   oeis = 3 : f [3] :: [Integer] where
--      f xs = (read $ concatMap show ys) : f (ys) where
--             ys = concat $ transpose [map length zss, map head zss]
--             zss = group $ sort xs

-- instance OEIS 118668 where
--   oeisIx = (oeisIx @43537) . (oeisIx @217)
--   oeis = map (oeisIx @43537) (oeis @217)

-- instance OEIS 118882 where
--   oeisIx n = (oeis @118882) !! (n - 1)
--   oeis = findIndices (> 1) (oeis @161)

-- instance OEIS 118886 where
--   oeis = filter ((> 1) . (oeisIx @88534)) (oeis @3136)

-- instance OEIS 118914 where
--   oeis = tablList @118914
-- instance Table 118914 where
--   rowCol n k = (tabf @118914) !! (n - 2) !! (k-1)
--   rowT n = (tabf @118914) !! (n - 2)
--   tabf = map sort $ tail (tabf @124010)

instance OEIS 118950 where
  oeis = filter (any (`elem` "2357") . show . fi) [0..]

-- instance OEIS 118954 where
--   oeis = filter f [1..] where
--      f x = all (== 0) $ map (oeisIx . (x -)) $ takeWhile (< x) (oeis @79)

-- instance OEIS 118955 where
--   oeis = filter f [1..] where
--      f x = any (== 1) $ map (oeisIx . (x -)) $ takeWhile (< x) (oeis @79)

-- instance OEIS 118959 where
--   oeis = filter
--      (\x -> let x' = (oeisIx @4086) x in x' /= x && x `mod` x' == 0) [1..]

-- instance OEIS 118965 where
--   oeisIx = sum . map (0 ^) . (rowT @128924)

-- instance OEIS 119246 where
--   oeis =
--       filter (\x -> (oeisIx @10888) x `elem` (rowT @31298) (fromInteger x)) [0..]

-- instance OEIS 119258 where
--   oeis = tablList @119258
-- instance Table 119258 where
--   rowT n = (tabl @119258) !! n
--   oeis = concat (tabl @119258)
--   tabl = iterate (\row -> zipWith (+)
--      ([0] ++ init row ++ [0]) $ zipWith (+) ([0] ++ row) (row ++ [0])) [1]

-- instance OEIS 119259 where
--   oeisIx n = (oeisIx @119258) (2 * n) n

-- instance OEIS 119345 where
--   oeis = filter ((== 1) . (oeisIx @52343)) [0..]

-- instance OEIS 119347 where
--   oeisIx = genericLength . nub . map sum . tail . subsequences . (rowT @27750)'

-- instance OEIS 119352 where
--   oeisIx n = f 2 n where
--      f b x = g x where
--        g 0 = b
--        g z = if r == b - 1 then f (b + 1) n else g z'
--              where (z', r) = divMod z b

-- instance OEIS 119354 where
--   oeisIx = fromJust . (`elemIndex` (oeis @119352))

-- instance OEIS 119387 where
--   oeisIx n = genericLength $ takeWhile (< (oeisIx @70940) n) [1..n]

-- instance OEIS 119393 where
--   oeisIx n = (oeis @119393) !! (n - 1)
--   oeis = filter
--      (\x -> not $ null $ show x `intersect` (show $ (oeisIx @40) x)) [1..]

-- instance OEIS 119416 where
--   oeisIx n = n * (oeisIx $ (oeisIx @6530) n)

-- instance OEIS 119467 where
--   oeis = tablList @119467
-- instance Table 119467 where
--   rowT n = (tabl @119467) !! n
--   tabl = map (map (flip div 2)) $
--                  zipWith (zipWith (+)) (tabl @7318) (tabl @130595)

-- instance OEIS 119629 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @14631))

-- instance OEIS 119709 where
--   oeis = tablList @119709
-- instance Table 119709 where
--   rowCol n k = (tabf @119709) !! n !! k
--   rowT n = map (foldr (\d v -> v * 2 + toInteger d) 0) $
--      filter (`isInfixOf` (oeisIx_row n)) $ take (n + 1) (tabf @30308)
--   tabf = map (rowT @119709) [0..]

-- instance OEIS 119797 where
--   oeis = f [0..] (oeis @43537) where
--      f (u:us) (v:vs@ (v':_)) | v /= v'   = f us vs
--                             | otherwise = u : f us vs

-- instance OEIS 119798 where
--   oeis = f [0..] (oeis @43537) (oeis @43537) where
--      f (z:zs) (u:us) (v:_:vs) | u /= v   = f zs us vs
--                               | otherwise = z : f zs us vs

-- instance OEIS 119799 where
--   oeis = i (oeis @119797) (oeis @119798) where
--      i xs'@ (x:xs) ys'@ (y:ys) | x < y     = i xs ys'
--                              | x > y     = i xs' ys
--                              | otherwise = x : i xs ys

-- instance OEIS 119999 where
--   oeisIx n = p (filter ((`isInfixOf` show n) . show) [1..n]) n where
--      p _  0 = 1
--      p [] _ = 0
--      p ks'@ (k:ks) m | m < k     = 0
--                     | otherwise = p ks' (m - k) + p ks m

instance OEIS 120004 where
  oeisIx n = fi . sum $ map (fromEnum . (`isInfixOf` show do fi n) . show . fi) [0..n]

-- instance OEIS 120005 where
--   oeisIx = fromJust . (`elemIndex` (oeis @120004))

-- instance OEIS 120007 where
--   oeisIx 1 = 0
--   oeisIx n | until ((> 0) . (`mod` spf)) (`div` spf) n == 1 = spf
--             | otherwise = 0
--             where spf = (oeisIx @20639) n

-- instance OEIS 120444 where
--   oeis = zipWith (-) (tail (oeis @4125)) (oeis @4125)

-- instance OEIS 120486 where
--   oeis = scanl1 (+) (oeis @188)

-- instance OEIS 120511 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (tail (oeis @6949)))

-- instance OEIS 120739 where
--   oeisIx n = if n < 2 then 0 else sum $ (rowT @166454) n

-- instance OEIS 120880 where
--   oeisIx n = sum $ map (oeisIx . (n -)) $ takeWhile (<= n) (oeis @5836)

-- instance OEIS 120944 where
--   oeis = filter ((== 1) . (oeisIx @8966)) (oeis @2808)

-- instance OEIS 120960 where
--   oeisIx n = (oeis @120960) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 1 (oeis @24362)

instance OEIS 121022 where
  oeis = filter (('2' `elem`) . show . fi) [0, 2 ..]

-- instance OEIS 121032 where
--   oeisIx n = (oeis @121032) !! (n - 1)
--   oeis = filter ((isInfixOf "12") . show) (oeis @8594)

-- instance OEIS 121041 where
--   oeisIx n = genericLength $ filter (\d -> n `mod` d == 0
--                                      && show d `isInfixOf` show n) [1..n]

-- instance OEIS 121065 where
--   oeisIx = fromJust . (`elemIndex` (oeis @85513))

-- instance OEIS 121173 where
--   oeis = f 1 [] where
--      f x ys = y : f (x + 1) (y : ys) where
--        y = if x `elem` ys then sum ys else x + 1

-- instance OEIS 121216 where
--   oeisIx n = (oeis @121216) !! (n - 1)
--   oeis = 1 : 2 : f 1 2 [3..] where
--   f x y zs = g zs where
--     g (u:us) = if gcd x u == 1 then h $ delete u zs else g us where
--      h (v:vs) = if gcd y v == 1 then u : v : f u v (zs \\ [u,v]) else h vs

-- instance OEIS 121217 where
--   oeis = 1 : 2 : 3 : f 2 3 [4..] where
--      f u v xs = g xs where
--        g (w:ws) = if gcd w u > 1 then w : f v w (delete w xs) else g ws

-- instance OEIS 121262 where
--   oeisIx = (0 ^) . flip mod 4
--   oeis = cycle [1,0,0,0]

-- instance OEIS 121281 where
--   oeis = tablList @121281
-- instance Table 121281 where
--   rowT n = (tabl @121281) !! n
--   tabl = [1] : f [1] (oeis @40) where
--      f xs@ (x:_) (p:ps) = ys : f ys ps where ys = (map (* p) xs) ++ [x]

-- instance OEIS 121369 where
--   oeisIx n = (oeis @121369) !! (n - 1)
--   oeis = 1 : 1 : zipWith ((+) `on` (oeisIx @7947))
--                          (oeis @121369) (tail (oeis @121369))

instance OEIS 121384 where
  oeisIx = ceiling . (* exp 1) . fi

-- instance OEIS 121539 where
--   oeisIx n = (oeis @121539) !! (n - 1)
--   oeis = elemIndices 1 (oeis @35263)

-- instance OEIS 121573 where
--   oeis = scanl1 (+) $ map (oeisIx @36263) [1, 3 ..]

-- instance OEIS 121757 where
--   oeis = tablList @121757
-- instance Table 121757 where
--   rowT n = (tabl @121757) !! n
--   tabl = iterate
--      (\xs -> zipWith (+) (xs ++ [0]) (zipWith (*) [1..] ([0] ++ xs))) [1]

-- instance OEIS 121758 where
--   oeisIx = foldl (\v d -> 10 * v + d) 0 . reverse . unfoldr f where
--      f 0 = Nothing
--      f x | odd d     = Just (- d, x')
--          | otherwise = Just (d, x') where (x', d) = divMod x 10

-- instance OEIS 121759 where
--   oeisIx = foldl f 0 . reverse . unfoldr d where
--      d 0 = Nothing
--      d x = Just $ swap $ divMod x 10
--      f v d | even d = 10 * v - d
--            | odd  d = 10 * v + d

-- instance OEIS 121924 where
--   oeisIx (fi->n) = fi $ (oeisIx @7318) b 3 + (n - (oeisIx @7318) b 2) * (b* (b+3) - 2* (n+1)) `div` 4
--               where b = round $ sqrt $ 2 * fi n + 1/4

-- instance OEIS 121993 where
--   oeis = filter (\x -> (oeisIx @45918) x < x) [0..]

-- instance OEIS 122132 where
--   oeis = filter ((== 1) . (oeisIx @8966) . (oeisIx @265)) [1..]

instance OEIS 122196 where
  oeis = concatMap (\x -> enumFromThenTo x (x - 2) 1) [1..]

-- instance OEIS 122197 where
--   oeis = tablList @122197
-- instance Table 122197 where
--   rowCol n k = genericIndex (oeisIx_row n) (k - 1)
--   rowT n = genericIndex (tabf @122197) (n - 1)
--   tabf = concat $ transpose [oeisIx_tabl, (tabl @2260)]
--   oeis = concat (tabf @122197)

-- instance OEIS 122366 where
--   oeis = tablList @122366
-- instance Table 122366 where
--   rowT n = (tabl @122366) !! n
--   tabl = f 1 (tabl @7318) where
--      f x (_:bs:pss) = (take x bs) : f (x + 1) pss

-- instance OEIS 122425 where
--   import import Data.List (maximumBy); Data.Ord (comparing)
--   oeisIx = maximumBy (comparing show) . (rowT @27750)

-- instance OEIS 122426 where
--   oeis = [x | x <- [1..], (oeisIx @122425) x < x]

-- instance OEIS 122427 where
--   oeisIx n = (oeis @122426) !! (n - 1)
--   oeis = [x | x <- [1..], (oeisIx @122425) x == x]

-- instance OEIS 122428 where
--   oeis = [x | x <- [1..], (oeisIx @122425) x == (oeisIx @6530) x]

-- instance OEIS 122494 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @122494) !! (n - 1)
--   oeis = f (singleton (4, 2)) 27 [3..] where
--      f s uu us@ (u:us'@ (u':_))
--        | vv > uu = uu : f (insert (uu * u, u) s) (u' ^ u') us'
--        | vv < uu = vv : f (insert (vv * v, v) s') uu us
--        | otherwise = vv : f (insert (vv * v, v) s') (u' ^ u') us'
--        where ((vv, v), s') = deleteFindMin s

-- instance OEIS 122516 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @46992)

-- instance OEIS 122535 where
--   oeisIx = (oeisIx @40) . (oeisIx @64113)

-- instance OEIS 122542 where
--   oeis = tablList @122542
-- instance Table 122542 where
--   rowT n = (tabl @122542) !! n
--   tabl = map fst $ iterate
--      (\ (us, vs) -> (vs, zipWith (+) ([0] ++ us ++ [0]) $
--                         zipWith (+) ([0] ++ vs) (vs ++ [0]))) ([1], [0, 1])

-- instance OEIS 122631 where
--   oeis =
--      1 : 2 : map (oeisIx @6530) (zipWith (+) (map ((2 *) . (oeisIx @40)) (oeis @122631))
--                                       (map (oeisIx @40) (tail (oeis @122631))))

-- instance OEIS 122768 where
--   oeis = 0 : f (tail (oeis @41)) [1] where
--      f (p:ps) rs = (sum $ zipWith (*) rs $ tail (oeis @41)) : f ps (p : rs)

-- instance OEIS 122797 where
--   oeis  = 1 : zipWith (+) (oeis @122797) (map ((1 -) . (oeisIx @10054)) [1..])

-- instance OEIS 122840 where
--   oeisIx n = if n < 10 then 0 ^ n else 0 ^ d * (oeisIx n' + 1)
--               where (n', d) = divMod n 10

-- instance OEIS 122841 where
--   oeisIx = f 0 where
--      f y x = if r > 0 then y else f (y + 1) x'
--              where (x', r) = divMod x 6

-- instance OEIS 122953 where
--   oeisIx = genericLength . (rowT @165416)

-- instance OEIS 122972 where
--   oeis = 1 : 2 : zipWith (+)
--      (zipWith (*) [2..] (oeis @122972)) (zipWith (*) [1..] $ tail (oeis @122972))

instance OEIS 123010 where
  oeis = 1 : 0 : 4 : 16 : f 0 4 16
    where f a b c = let x = 5*c + b - 5*a in x : f b c x

-- instance OEIS 123087 where
--   oeis = scanl (+) 0 (oeis @96268)

-- instance OEIS 123125 where
--   oeis = tablList @123125
-- instance Table 123125 where
--   rowT n = (tabl @123125) !! n
--   tabl = [1] : zipWith (:) [0, 0 ..] (tabl @8292)

-- instance OEIS 123270 where
--   oeis = 1 : 1 : zipWith (-) (map (* 5) $
--      zipWith (+) (tail (oeis @123270)) (oeis @123270)) (oeis @123270)

-- instance OEIS 123345 where
--   oeisIx n = (oeis @123345) !! (n - 1)
--   oeis = filter
--     (\x -> all (`isInfixOf` b x) $ map b $ (rowT @27750) x) [1..] where
--     b = unfoldr (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2)

-- instance OEIS 123346 where
--   oeis = tablList @123346
-- instance Table 123346 where
--   rowT n = (tabl @123346) !! n
--   tabl = map reverse (tabl @11971)

-- instance OEIS 123581 where
--   oeis = iterate (oeisIx @70229) 3

instance OEIS 123684 where
  oeis = concat $ transpose [oeis @16777, (oeis @27)]

instance OEIS 123866 where
  oeisIx = (subtract 1) . (^ 6) . (+1)

-- instance OEIS 123921 where
--   oeis = filter ((== 1) . (oeisIx @10051)) $
--      map (flip (-) 2) $ zipWith (*) (oeis @40) (tail (oeis @40))

-- instance OEIS 123976 where
--   oeisIx n = (oeis @123976) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 $ zipWith mod (oeis @45) [1..]

instance OEIS 124010 where
  oeis = tablList @124010
instance Table 124010 where
  rowCol = rowCol_off @124010 @1 @1
  rowT 1 = [0]
  rowT n = f n primes where
   f 1 _      = []
   f u (p:ps) = h u 0 where
     h v e
      | (v',m) <- divMod v p
      , m == 0 = h v' (e + 1)
      | e  > 0 = e : f v ps
      | let    = f v ps
  tabf = map (rowT @124010) [1..]

-- instance OEIS 124056 where
--   oeisIx n = (oeis @124056) !! (n - 1)
--   oeis = 1 : f [1] where
--      f xs@ (x:_) = y : f (y : xs) where
--        y = length $ filter (flip elem $ (rowT @27750) x) xs

-- instance OEIS 124108 where
--   oeisIx 0 = 0
--   oeisIx x = 2 * (b + 1) * (oeisIx @124108) x' + (b * 2)
--               where (x', b) = divMod x 2

-- instance OEIS 124134 where
--   oeis = filter ((> 0) . (oeisIx @161) . (oeisIx @45)) [1..]

-- instance OEIS 124240 where
--   oeis = filter
--      (\x -> all (== 0) $ map ((mod x) . pred) $ (rowT @27748) x) [1..]

-- instance OEIS 124665 where
--   oeis = filter
--      (\x -> all (== 0) $ map (oeisIx . (10*x +)) [1..9]) (oeis @65502)

-- instance OEIS 124837 where
--   oeisIx n = (oeisIx @213998) (n + 2) (n - 1)

-- instance OEIS 124838 where
--   oeisIx n = (oeisIx @213999) (n + 2) (n - 1)

-- instance OEIS 124844 where
--   oeis = tablList @124844
-- instance Table 124844 where
--   rowT n = (tabl @124844) !! n
--   tabl = zipWith (zipWith (*))
--                          (tabl @7318) $ tail $ inits (oeis @61084)

-- instance OEIS 124927 where
--   oeis = tablList @124927
-- instance Table 124927 where
--   rowT n = (tabl @124927) !! n
--   tabl = iterate
--      (\row -> zipWith (+) ([0] ++ reverse row) (row ++ [1])) [1]

-- instance OEIS 124934 where
--   oeisIx n = (oeis @124934) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (> 0) (oeis @125203)

-- instance OEIS 124978 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (tail (oeis @2635)))

-- instance OEIS 125002 where
--   oeisIx n = sum $ map (oeisIx' . read) $
--                     tail $ concatMap (f pds) [0 .. length pds - 1] where
--      pds = show $ (oeisIx @40) n
--      f ws k = [us ++ [y] ++ vs |
--               let (us, v:vs) = splitAt k ws, y <- delete v "0123456789"]

-- instance OEIS 125022 where
--   oeisIx n = (oeis @125022) !! (n - 1)
--   oeis = elemIndices 1 (oeis @161)

-- instance OEIS 125053 where
--   oeis = tablList @125053
-- instance Table 125053 where
--   rowCol n k = (tabf @125053) !! n !! k
--   rowT n = (tabf @125053) !! n
--   tabf = iterate f [1] where
--   f zs = zs' ++ reverse (init zs') where
--   zs' = (sum zs) : g (map (* 2) zs) (sum zs)
--   g [x] y = [x + y]
--   g xs y = y' : g (tail $ init xs) y' where y' = sum xs + y

-- instance OEIS 125086 where
--   oeis = f [0, 2 ..] (oeis @36990) where
--      f (u:us) vs'@ (v:vs) = if u == v then f us vs else u : f us vs'

-- instance OEIS 125145 where
--   oeis =
--      1 : 4 : map (* 3) (zipWith (+) (oeis @125145) (tail (oeis @125145)))

-- instance OEIS 125203 where
--   oeisIx n = genericLength [ () | x <- [1 .. (n + 1) `div` 3],
--                            let (y,m) = divMod (x + n) (4 * x - 1),
--                            x <= y, m == 0]

-- instance OEIS 125217 where
--   oeisIx n = (oeis @125217) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 1 (oeis @125203)

-- instance OEIS 125218 where
--   oeisIx n = (oeis @125218) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (> 1) (oeis @125203)

-- instance OEIS 125290 where
--   oeis = filter ((> 1) . (oeisIx @43537)) (oeis @52382)

-- instance OEIS 125308 where
--   oeisIx n = (oeis @125308) !! (n - 1)
--   oeis = 3 : h [1,3] where
--      h (u:us) | null (show v `intersect` "245679") &&
--                 (oeisIx @10051)' v == 1 = v : h (us ++ [v])
--               | otherwise       = h (us ++ [v])
--               where v = u + 10

-- instance OEIS 125605 where
--   oeis = tablList @125605
-- instance Table 125605 where
--   rowT n = (tabl @125605) !! n
--   tabl = iterate f [1] where
--      f xs = zipWith (\v w -> (v + w) `div` gcd v w) ([0] ++ xs) (xs ++ [0])

-- instance OEIS 125639 where
--   oeis = filter f [1..] where
--      f x = sx > x && (oeisIx @1065) sx > sx where sx = (oeisIx @1065) x

-- instance OEIS 125640 where
--   oeisIx n = (oeis @125640) !! (n - 1)
--   oeis = f (oeis @125639) [] where
--      f (x:xs) ys = if null (oeisIx_row' x `intersect` ys)
--                       then x : f xs (x : ys) else f xs ys

-- instance OEIS 125717 where
--   import Data.IntMap (singleton, member, (!), insert)
--   oeisIx n = (oeis @125717) !! n
--   oeis =  0 : f [1..] 0 (singleton 0 0) where
--      f (v:vs) w m = g (reverse[w-v,w-2*v..1] ++ [w+v,w+2*v..]) where
--        g (x:xs) = if x `member` m then g xs else x : f vs x (insert x v m)

-- instance OEIS 125855 where
--   oeis = map (pred . head) $ filter (all (== 1) . map (oeisIx @10051)') $
--      iterate (zipWith (+) [1, 1, 1, 1]) [1, 3, 7, 9]

-- instance OEIS 125886 where
--   oeisIx n = (oeis @125886) !! (n - 1)
--   oeis = 1 : f 1 [10..] where
--      f u vs = g vs where
--        g (w:ws) = if (oeisIx @10879) w == iu then w : f w (delete w vs) else g ws
--        iu = (oeisIx @30) u

-- instance OEIS 125887 where
--   oeis = 1 : f '1' (filter ((> 0) . (`mod` 10)) [11..]) where
--      f d zs = y : f (last $ show y) (xs ++ ys) where
--          (xs, y:ys) = span ((/= d) . head . show) zs

-- instance OEIS 126024 where
--   oeisIx = genericLength . filter ((== 1) . (oeisIx @10052) . sum) .
--                             subsequences . enumFromTo 1

-- instance OEIS 126025 where
--   oeisIx n = h n1s 0 where
--      h us c = if us == nns then c + 1 else h (succ us) (c + g) where
--        g = if and [f x `gcd` f y == f (x `gcd` y) |
--                    x <- [1 .. n - 1], y <- [x + 1 .. n]] then 1 else 0
--        f = (us !!) . subtract 1
--      succ (z:zs) = if z < n then (z + 1) : zs else 1 : succ zs
--      n1s = take n [1, 1 ..]; nns = take n [n, n ..]

-- instance OEIS 126027 where
--   oeisIx = genericLength . (rowT @30717)

-- instance OEIS 126064 where
--   oeis = tablList @126064
-- instance Table 126064 where
--   rowT n = (tabl @126064) !! n
--   tabl =  zipWith (zipWith (*)) (tabl @94587) (tabl @59268)

-- instance OEIS 126256 where
--   -- import Data.List.Ordered (insertSet)
--   oeisIx n = (oeis @126256) !! n
--   oeis = f (tabl @7318) [] where
--      f (xs:xss) zs = g xs zs where
--        g []     ys = length ys : f xss ys
--        g (x:xs) ys = g xs (insertSet x ys)

-- instance OEIS 126257 where
--   import Data.List.Ordered (minus, union)
--   oeisIx n = (oeis @126257) !! n
--   oeis = f [] (tabf @34868) where
--      f zs (xs:xss) = (length ys) : f (ys `union` zs) xss
--                      where ys = xs `minus` zs

-- instance OEIS 126428 where
--   oeisIx n = (oeis @126428) !! (n - 1)
--   oeis =  magics 1 [] [] where
--      magics :: Integer -> [Integer] -> [Integer] -> [Integer]
--      magics n ms tests
--         | tests `intersect` nMinus == [] && tests `intersect` nPlus == []
--         = n : magics (n+1) (n:ms) (nMinus ++ nPlus ++ tests)
--         | otherwise
--         = magics (n+1) ms tests
--         where nMinus = map (n -) ms
--               nPlus  = map (n +) ms

-- instance OEIS 126596 where
--   oeisIx n = (oeisIx @5810) n * (oeisIx @5408) n `div` (oeisIx @16777) n

-- instance OEIS 126646 where
--   oeisIx = (subtract 1) . (2 ^) . (+ 1)
--   oeis = iterate ((+ 1) . (* 2)) 1

-- instance OEIS 126684 where
--   oeis = tail $ m (oeis @695) $ map (* 2) (oeis @695) where
--      m xs'@ (x:xs) ys'@ (y:ys) | x < y     = x : m xs ys'
--                              | otherwise = y : m xs' ys

-- instance OEIS 126759 where
--   oeis = 1 : f 1 where
--      f n = (case mod n 6 of 1 -> 2 * div n 6 + 2
--                             5 -> 2 * div n 6 + 3
--                             3 -> (oeisIx @126759) $ div n 3
--                             _ -> (oeisIx @126759) $ div n 2) : f (n + 1)

-- instance OEIS 126768 where
--   oeisIx n = (oeis @126768) !! n
--   oeis = map length $ group (oeis @117872)

-- instance OEIS 126796 where
--   import Data.MemoCombinators (memo3, integral, Memo)
--   oeisIx n = (oeis @126796) !! n
--   oeis = map (pMemo 1 1) [0..] where
--      pMemo = memo3 integral integral integral p
--      p _ _ 0 = 1
--      p s k m
--        | k > min m s = 0
--        | otherwise   = pMemo (s + k) k (m - k) + pMemo s (k + 1) m

-- instance OEIS 126869 where
--   oeisIx n = (rowT @204293) (2*n) !! n

-- instance OEIS 126890 where
--   oeis = tablList @126890
-- instance Table 126890 where
--   rowT n = (tabl @126890) !! n
--   tabl = map fst $ iterate
--      (\ (xs@ (x:_), i) -> (zipWith (+) ((x-i):xs) [2*i+1 ..], i+1)) ([0], 0)

-- instance OEIS 126949 where
--   oeis = filter h [1..] where
--      h m = not $ null [ (x, e) | x <- [2 .. m - 2], gcd x m == 1,
--                                 e <- [2 .. (oeisIx @10) m `div` 2],
--                                 x ^ e `mod` m == m - 1]

-- instance OEIS 126988 where
--   oeis = tablList @126988
-- instance Table 126988 where
--   rowCol = rowCol_off @126988 @1 @1
--   rowT   = rowT_off   @126988 @1
--   tabl = zipWith (zipWith (*)) (tabl @10766) (tabl @51731)

-- instance OEIS 127013 where
--   oeis = tablList @127013
-- instance Table 127013 where
--   rowCol = rowCol_off @127013 @1 @1
--   rowT   = rowT_off   @127013 @1
--   tabl = map reverse (tabl @126988)

-- instance OEIS 127057 where
--   oeis = tablList @127057
-- instance Table 127057 where
--   rowCol = rowCol_off @127057 @1 @1
--   rowT   = rowT_off   @127057 @1
--   tabl = map (scanr1 (+)) (tabl @126988)

-- instance OEIS 127093 where
--   oeis = tablList @127093
-- instance Table 127093 where
--   rowCol n k = (rowT @127093) n !! (k-1)
--   rowT n = zipWith (*) [1..n] $ map ((0 ^) . (mod n)) [1..n]
--   tabl = map (rowT @127093) [1..]

-- instance OEIS 127118 where
--   oeisIx n = (oeisIx @40) n * (oeisIx @18252) n

-- instance OEIS 127324 where
--   oeisIx n = (oeis @127324) !! n
--   oeis = concatMap (concatMap concat .
--                  inits . inits . enumFromTo 0) $ enumFrom 0

-- instance OEIS 127330 where
--   oeis = tablList @127330
-- instance Table 127330 where
--   rowT n = (tabl @127330) !! n
--   tabl = step 0 1 where
--      step s k = [s .. s + k - 1] : step (2 * s + 2) (k + 1)

-- instance OEIS 127354 where
--   oeisIx = (oeisIx @47842) . (oeisIx @40)

-- instance OEIS 127355 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @47842)) (oeis @40)

-- instance OEIS 127366 where
--   oeisIx n | even n'   = n'
--             | otherwise = 2*n - n'
--             where n' = n + (oeisIx @196) n

-- instance OEIS 127367 where
--   oeisIx n | even n    = n - m + 1
--             | otherwise = n + m
--             where m = length $ takeWhile (<= n) (oeis @2378)

-- instance OEIS 127423 where
--   oeis = 1 : map read (zipWith (++) (tail iss) iss) :: [Integer]
--                      where iss = map show [1..]

-- instance OEIS 127446 where
--   oeis = tablList @127446
-- instance Table 127446 where
--   rowCol = rowCol_off @127446 @1 @1
--   rowT   = rowT_off   @127446 @1
--   tabl = zipWith (\v ws -> map (* v) ws) [1..] (tabl @51731)

-- instance OEIS 127542 where
--   oeisIx = genericLength . filter ((== 1) . (oeisIx @10051) . sum) .
--                             subsequences . enumFromTo 1

-- instance OEIS 127626 where
--   oeis = tablList @127626
-- instance Table 127626 where
--   rowCol = rowCol_off @127626 @1 @1
--   rowT   = rowT_off   @127626 @1
--   tabl = map
--      (map (\x -> if x == 0 then 0 else (oeisIx @18804) x)) (tabl @127093)

-- instance OEIS 127648 where
--   oeis = tablList @127648
-- instance Table 127648 where
--   rowT n = (tabl @127648) !! n
--   tabl = map reverse $ iterate (\ (x:xs) -> x + 1 : 0 : xs) [1]
--   oeis = concat (tabl @127648)

-- instance OEIS 127739 where
--   oeis = tablList @127739
-- instance Table 127739 where
--   rowCol = rowCol_off @127739 @1 @1
--   rowT   = rowT_off   @127739 @1
--   tabl = zipWith ($) (map replicate [1..]) $ tail (oeis @217)

-- instance OEIS 127812 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @72594))

-- instance OEIS 127824 where
--   oeis = tablList @127824
-- instance Table 127824 where
--   rowCol n k = (tabf @127824) !! n !! k
--   rowT n = (tabf @127824) !! n
--   tabf = iterate f [1] where
--      f row = sort $ map (* 2) row `union`
--                     [x' | x <- row, let x' = (x - 1) `div` 3,
--                           x' * 3 == x - 1, odd x', x' > 1]

-- instance OEIS 127899 where
--   oeis = tablList @127899
-- instance Table 127899 where
--   rowCol = rowCol_off @127899 @1 @1
--   rowT   = rowT_off   @127899 @1
--   tabl = map reverse ([1] : xss) where
--      xss = iterate (\ (u : v : ws) -> u + 1 : v - 1 : ws ++ [0]) [2, -2]

-- instance OEIS 127936 where
--   oeisIx n = (oeis @127936) !! (n - 1)
--   oeis = findIndices ((== 1) . (oeisIx @10051)'') (oeis @7583)

-- instance OEIS 128014 where
--   oeisIx = (oeisIx @984) . flip div 2

-- instance OEIS 128059 where
--   oeisIx 0 = 1
--   oeisIx n = f n n where
--      f 1 _ = 1
--      f x q = if (oeisIx @10051)' q' == 1 then q' else f x' q'
--              where x' = x - 1; q' = q + x'

-- instance OEIS 128174 where
--   oeis = tablList @128174
-- instance Table 128174 where
--   rowCol = rowCol_off @128174 @1 @1
--   rowT   = rowT_off   @128174 @1
--   tabl = iterate (\xs@ (x:_) -> (1 - x) : xs) [1]

-- instance OEIS 128217 where
--   oeis = filter f [0..] where
--      f x = 4 * abs (root - fi (round root)) < 1
--            where root = sqrt $ fi x

-- instance OEIS 128218 where
--   oeis = zipWith (-) (tail (oeis @128217)) (oeis @128217)

-- instance OEIS 128543 where
--   oeisIx = sum . (rowT @134239) . subtract 1

-- instance OEIS 128588 where
--   oeis = 1 : cows where
--                      cows = 2 : 4 : zipWith (+) cows (tail cows)

-- instance OEIS 128630 where
--   oeis = map (minimum . map (sum . map (gpfs !!))) $ tail pss where
--      pss = [] : map parts [1..] :: [[[Int]]] where
--            parts u = [u] : [v : ps | v <- [1..u],
--                                      ps <- pss !! (u - v), v < head ps]
--      gpfs = map fromInteger (0 : map (oeisIx @6530) [1..])

-- instance OEIS 128783 where
--   oeis = filter (f . show . (^ 2)) [1..] where
--      f zs = g (init $ tail $ inits zs) (tail $ init $ tails zs)
--      g (xs:xss) (ys:yss)
--        | (oeisIx @10052) (read xs) == 1 = (oeisIx @10052) (read ys) == 1 || f ys || g xss yss
--        | otherwise              = g xss yss
--      g _ _ = False

instance OEIS 128918 where
  oeisIx n = (n + m - 1) * n' + m * n - m + 1  where (n', m) = divMod n 2

-- instance OEIS 128924 where
--   oeis = tablList @128924
-- instance Table 128924 where
--   rowCol = rowCol_off @128924 @1 @1
--   tabl = map (rowT @128924) [1..]
--   rowT 1 = [1]
--   rowT n = f [0..n - 1] $ group $ sort $ g 1 ps where
--      f []     _                            = []
--      f (v:vs) wss'@ (ws:wss) | head ws == v = length ws : f vs wss
--                             | otherwise    = 0 : f vs wss'
--      g 0 (1 : xs) = []
--      g _ (x : xs) = x : g x xs
--      ps = 1 : 1 : zipWith (\u v -> (u + v) `mod` n) (tail ps) ps

-- instance OEIS 128966 where
--   oeis = tablList @128966
-- instance Table 128966 where
--   rowT n = (tabl @128966) !! n
--   tabl = map fst $ iterate
--      (\ (us, vs) -> (vs, zipWith (+) ([0] ++ us ++ [0]) $
--                         zipWith (+) ([0] ++ vs) (vs ++ [0]))) ([0], [1, 1])

-- instance OEIS 129117 where
--   oeisIx n = (oeis @129117) !! (n - 1)
--   oeis = elemIndices 5 (oeisIx @101403)M_list

-- instance OEIS 129150 where
--   oeis = iterate (oeisIx @3415) 8

-- instance OEIS 129151 where
--   oeis = iterate (oeisIx @3415) 81

-- instance OEIS 129152 where
--   oeis = iterate (oeisIx @3415) 15625

-- instance OEIS 129283 where
--   oeisIx n = (oeisIx @3415) n + n

-- instance OEIS 129284 where
--   oeisIx 0 = 2
--   oeisIx n = (oeisIx @129151) n `div` 27

-- instance OEIS 129286 where
--   oeis = iterate (oeisIx @129283) 5

instance OEIS 129296 where
  oeisIx (succ->n) = genericLength [d | d <- [1..n], (n ^ 2 - 1) `mod` d == 0]

-- instance OEIS 129299 where
--   oeis = 1 : f [1] 2 where
--      f xs@ (x:_) k = y : f (y:xs) (k+1) where
--        y = x + sum [z | z <- xs, z <= k]

-- instance OEIS 129300 where
--   oeis = 1 : f [1] 1 where
--      f xs@ (x:_) k = y : f (y:xs) (k+1) where
--        y = x + sum [z | z <- xs, z <= k]

-- instance OEIS 129363 where
--   oeisIx n = sum $ map (oeisIx . (2*n -)) $ takeWhile (<= n) (oeis @1097)

-- instance OEIS 129505 where
--   oeisIx n = abs $ (oeisIx @8275) (2 * n - 1) n

-- instance OEIS 129511 where
--   import Data.List.Ordered (isect, union)
--   oeisIx n = (oeis @129511) !! (n - 1)
--   oeis = filter (f [] . (rowT @27750)') [1..] where
--      f _ [_] = True
--      f zs (d:ds) = null (dds `isect` zs) && f (dds `union` zs) ds
--                    where dds = map (subtract d) ds

-- instance OEIS 129512 where
--   import Data.List.Ordered (minus)
--   oeisIx n = (oeis @129512) !! (n - 1)
--   oeis = minus [1..] (oeis @129511)

-- instance OEIS 129521 where
--   oeisIx n = p * (2 * p - 1) where p = (oeisIx @5382) n

-- instance OEIS 129713 where
--   oeis = tablList @129713
-- instance Table 129713 where
--   rowT n = (tabl @129713) !! n
--   tabl = [1] : [1, 1] : f [1] [1, 1] where
--      f us vs = ws : f vs ws where
--                ws = zipWith (+) (init us ++ [0, 0, 0]) (vs ++ [1])

-- instance OEIS 129800 where
--   oeis = filter ((== 1) . length . f) (oeis @40) where
--     f x = filter (\ (us, vs) ->
--                  (oeisIx @10051)' (read us :: Integer) == 1 &&
--                  (oeisIx @10051)' (read vs :: Integer) == 1) $
--                  map (flip splitAt $ show x) [1 .. length (show x) - 1]

-- instance OEIS 129805 where
--   oeis = [x | x <- (oeis @56020), (oeisIx @10051) x == 1]

-- instance OEIS 129845 where
--   oeis =
--      filter (\x -> not $ null (show (2*x) `intersect` show x)) [1..]

-- instance OEIS 129871 where
--   oeis = 1 : (oeis @58)

-- instance OEIS 129893 where
--   oeis = 1 : zipWith div (tail fs) fs where
--      fs = map (oeisIx @142) (oeis @124)

-- instance OEIS 130130 where
--   oeisIx = min 2
--   oeis = 0 : 1 : repeat 2

-- instance OEIS 130321 where
--   oeis = tablList @130321
-- instance Table 130321 where
--   rowT n = (tabl @130321) !! n
--   tabl = iterate (\row -> (2 * head row) : row) [1]

-- instance OEIS 130330 where
--   oeis = tablList @130330
-- instance Table 130330 where
--   rowCol n k = (rowT @130330) n !! (k-1)
--   rowT   = rowT_off   @130330 @1
--   tabl = iterate (\xs -> (2 * head xs + 1) : xs) [1]

-- instance OEIS 130517 where
--   oeis = tablList @130517
-- instance Table 130517 where
--   rowCol = rowCol_off @130517 @1 @1
--   rowT   = rowT_off   @130517 @1
--   tabl = iterate (\row -> (head row + 1) : reverse row) [1]

-- instance OEIS 130534 where
--   oeis = tablList @130534
-- instance Table 130534 where
--   rowT n = (tabl @130534) !! n
--   tabl = map (map abs) (tabl @8275)

-- instance OEIS 130578 where
--   oeis = 0 : 0 : 1 : 3 : zipWith (+)
--      (map (* 2) $ drop 3 (oeis @130578))
--      (zipWith (-) (map (+ 1) (oeis @130578)) (drop 2 (oeis @130578)))

-- instance OEIS 130595 where
--   oeis = concat $ iterate ([-1,1] *) [1]
--   instance Num a => Num [a] where
--      fromInteger k = [fromInteger k]
--      (p:ps) + (q:qs) = p + q : ps + qs
--      ps + qs         = ps ++ qs
--      (p:ps) * qs'@ (q:qs) = p * q : ps * qs' + [p] * qs
--      _ * _               = []

-- instance OEIS 130658 where
--   oeisIx = (+ 1) . (`div` 2) . (`mod` 4)
--   oeis = cycle [1,1,2,2]

-- instance OEIS 130665 where
--   oeisIx = sum . map (3 ^) . (`take` (oeis @120)) . (+ 1)

-- instance OEIS 130667 where
--   oeisIx n = (oeis @130667) !! (n - 1)
--   oeis = 1 : (concat $ transpose
--      [zipWith (+) vs (oeis @130667), zipWith (+) vs $ tail (oeis @130667)])
--      where vs = map (* 5) (oeis @130667)

-- instance OEIS 130720 where
--   oeisIx n = fromJust $ find ((show n `isInfixOf`) . show) $
--                               tail $ scanl1 (+) [n..]

-- instance OEIS 130883 where
--   oeisIx = (oeisIx @128918) . (* 2)

-- instance OEIS 130887 where
--   oeisIx = sum . map (oeisIx @225) . (rowT @27750)

-- instance OEIS 130897 where
--   oeis = filter
--      (any (== 0) . map (oeisIx . fi) . (rowT @124010)) [1..]

-- instance OEIS 131073 where
--   oeis = 2 : f 2 1 where
--      f x c = y : f y (c + (oeisIx @10051) y) where y = x + c

-- instance OEIS 131094 where
--   oeis = tablList @131094
-- instance Table 131094 where
--   rowCol = rowCol_off @131094 @1 @1
--   rowT   = rowT_off   @131094 @1
--   tabl = [2] : f 2 [2] where
--      f v ws = ys : f (v + 1) ys where
--               ys = take v $ nub $ sort $ concatMap h ws
--      h z = [2 * z, 4 * z + 1, 4 * z' + b] where (z', b) = divMod z 2

-- instance OEIS 131095 where
--   oeis = tablList @131095
-- instance Table 131095 where
--   rowCol = rowCol_off @131095 @1 @1
--   rowT   = rowT_off   @131095 @1
--   tabl = [2] : [4, 9] : [17, 18, 20] : f 4 [17, 18, 20] where
--      f v ws = ys : f (v + 1) ys where
--        ys = take v $ dropWhile (<= last ws) $ nub $ sort $ concatMap h ws
--      h z = [2 * z, 4 * z + 1, 4 * z' + b] where (z', b) = divMod z 2

-- instance OEIS 131134 where
--   oeis = 1 : zipWith (\v w -> (v+w) `div` gcd v w) [2..] (oeis @131134)

instance OEIS 131179 where
  oeisIx n = (n + 1 - m) * n' + m  where (n', m) = divMod n 2

-- instance OEIS 131205 where
--   oeis = scanl1 (+) (oeis @123)

-- instance OEIS 131293 where
--   oeisIx n = (oeis @131293) !! n
--   oeis = 0 : 1 : map read
--                  (zipWith ((++) `on` show) (oeis @131293) $ tail (oeis @131293))

-- instance OEIS 131361 where
--   oeisIx n = p [r | r <- tail (oeis @10785), head (show r) `elem` show n] n
--      where p _          0 = 1
--            p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 131364 where
--   oeisIx n = p [r | r <- tail (oeis @10785), head (show r) `elem` show n] n
--      where p _      0 = 1
--            p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 131365 where
--   oeisIx n = (oeis @131365) !! (n - 1)
--   oeis = elemIndices 0 (oeis @131364)

-- instance OEIS 131366 where
--   oeisIx n = (oeis @131366) !! (n - 1)
--   oeis = tail $ findIndices (> 0) (oeis @131364)

-- instance OEIS 131410 where
--   oeis = tablList @131410
-- instance Table 131410 where
--   rowCol = rowCol_off @131410 @1 @1
--   rowT   = rowT_off   @131410 @1
--   tabl = zipWith replicate [1..] $ tail (oeis @45)

-- instance OEIS 131507 where
--   oeis = tablList @131507
-- instance Table 131507 where
--   rowT n = (tabl @131507) !! n
--   tabl = zipWith ($) (map replicate [1..]) [1, 3 ..]
--   oeis = concat (tabl @131507)

instance OEIS 131524 where
  oeis = concat $ transpose [tail (oeis @71), tail (oeis @71)]

-- instance OEIS 131577 where
--   oeisIx = (`div` 2) . (oeisIx @79)
--   oeis = 0 : (oeis @79)

-- instance OEIS 131644 where
--   import Math.NumberTheory.Moduli (powerMod)
--   oeisIx n = (oeis @131644) !! (n - 1)
--   oeis = map fst $ iterate f (0, 2) where
--      f (v, w) = (powerMod 2 v w, w + 1)

-- instance OEIS 131813 where
--   oeisIx n = (oeis @131813) !! n
--   oeis = 0 : f [[0]] where
--      f xss = y : f (bin y : xss) where
--        y = sum $ map (fromEnum . (flip isInfixOf $ head xss)) xss
--      bin n = if n == 0 then [] else b : bin n' where (n',b) = divMod n 2

-- instance OEIS 131816 where
--   oeis = tablList @131816
-- instance Table 131816 where
--   rowT n = (tabl @131816) !! n
--   tabl = map (map (subtract 1)) $
--      zipWith (zipWith (+)) (tabl @130321) (tabl @59268)

-- instance OEIS 131835 where
--   oeis = concat $
--                  iterate (concatMap (\x -> map (+ 10 * x) [0..9])) [1]

-- instance OEIS 132011 where
--   oeisIx = p [1..] where
--      p _  0 = 1
--      p (k:ks) m = if m < k then 0 else p [3 * k ..] (m - k) + p ks m

-- instance OEIS 132080 where
--   oeisIx n = (oeis @132080) !! (n - 1)
--   oeis = [x | x <- [2..], all null $
--                       map (show x `intersect`) $ map show $ (rowT @27751) x]

-- instance OEIS 132090 where
--   oeisIx = (oeisIx @720) . (oeisIx @720)

-- instance OEIS 132140 where
--   oeis = filter f [1..] where
--      f x = x < 3 && x == 1 || t > 0 && f x' where (x', t) = divMod x 3

instance OEIS 132141 where
  oeis = filter ((== 1) . until (< 3) (flip div 3)) [1..]

-- instance OEIS 132157 where
--   oeisIx n = (oeis @132157) !! (n - 1)
--   oeis = (map length) (group (oeis @63882))

-- instance OEIS 132159 where
--   oeis = tablList @132159
-- instance Table 132159 where
--   rowT n = (tabl @132159) !! n
--   tabl = map reverse (tabl @121757)

-- instance OEIS 132163 where
--   oeisIx_tabl = map (rowT @132163) [1..]
--   oeisIx n k = (rowT @132163) n !! (k-1)
--   oeisIx_row n = 1 : f 1 [n, n - 1 .. 2] where
--      f u vs = g vs where
--        g []                            = []
--        g (x:xs) | (oeisIx @10051) (x + u) == 1 = x : f x (delete x vs)
--                 | otherwise            = g xs

-- instance OEIS 132171 where
--   oeisIx n = genericIndex (oeis @132171) n
--   oeis = 1 : zs where
--      zs = 3 : 3 : 3 : (map (* 3) $ concat $ transpose [zs, zs, zs])

-- instance OEIS 132188 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @132345) n + (oeisIx $ fromInteger n)

-- instance OEIS 132199 where
--   oeis = zipWith (-) (tail (oeis @106108)) (oeis @106108)

-- instance OEIS 132213 where
--   oeisIx n = sum $ map (oeisIx @10051)' $
--               nub $ genericTake n $ map (`mod` n) $ tail (oeis @290)

-- instance OEIS 132223 where
--   oeisIx n = (oeis @132223) !! (n - 1)
--   oeis = f 1 [1] where
--      f k xs = ys ++ f (2 * k) ys where
--               ys = concat $ transpose [xs, reverse $ take k [k+1 ..]]

-- instance OEIS 132231 where
--   oeis = [x | k <- [0..], let x = 30 * k + 7, (oeisIx @10051)' x == 1]

-- instance OEIS 132240 where
--   oeis = [x | x <- (oeis @175887), (oeisIx @10051) x == 1]

-- instance OEIS 132273 where
--   oeisIx n = sum $ zipWith (!!) coprimess (reverse [0..n - 1]) where
--      coprimess = map (\x -> filter ((== 1) . (gcd x)) [1..]) [1..]

-- instance OEIS 132345 where
--   oeisIx n = sum $ zipWith (*)
--      (tail (oeis @10)) (map ((div n) . (^ 2)) [2..oeisIx n])

-- instance OEIS 132350 where
--   oeisIx 1 = 1
--   oeisIx n = 1 - (oeisIx @75802) n

-- instance OEIS 132393 where
--   oeis = tablList @132393
-- instance Table 132393 where
--   rowT n = (tabl @132393) !! n
--   tabl = map (map abs) (tabl @48994)

-- instance OEIS 132429 where
--   oeisIx = (3 -) . (* 2) . (`mod` 4)
--   oeis = cycle [3, 1, -1, -3]

-- instance OEIS 132431 where
--   oeisIx n = (oeisIx @60226) n - (oeisIx @62119) n + (oeisIx @2378) (n - 1)

-- instance OEIS 132442 where
--   oeis = tablList @132442
-- instance Table 132442 where
--   rowCol = rowCol_off @132442 @1 @1
--   rowT   = rowT_off   @132442 @1
--   tabl = map (map (oeisIx @203)) (tabl @50873)

-- instance OEIS 132666 where
--   oeisIx n = (oeis @132666) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f z xs  = y : f y (delete y xs) where
--        y | head xs > z = 2 * z
--          | otherwise   = z - 1

-- instance OEIS 132678 where
--   oeisIx n = (oeis @132678) !! (n - 1)
--   oeis = elemIndices 1 (oeis @96535)

-- instance OEIS 132679 where
--   import Data.Set (fromList, insert, deleteFindMin)
--   oeisIx n = (oeis @132679) !! (n - 1)
--   oeis = f $ fromList [1,2] where
--      f s = m : f (insert (4*m) $ insert (4*m+3) s') where
--          (m,s') = deleteFindMin s

-- instance OEIS 132739 where
--   oeisIx n | r > 0     = n
--             | otherwise = (oeisIx @132739) n' where (n',r) = divMod n 5

-- instance OEIS 132741 where
--   oeisIx = f 2 1 where
--      f p y x | r == 0    = f p (y * p) x'
--              | otherwise = if p == 2 then f 5 y x else y
--              where (x', r) = divMod x p

-- instance OEIS 132813 where
--   oeis = tablList @132813
-- instance Table 132813 where
--   rowT n = (tabl @132813) !! n
--   tabl = zipWith (zipWith (*)) (tabl @7318) $ tail (tabl @7318)

-- instance OEIS 132995 where
--   oeis = tail $ f (oeis @40) 0 1 where
--      f (p:ps) u v = (gcd u v) : f ps (p + u) (p * v)

-- instance OEIS 133008 where
--   oeisIx n = genericLength [x | x <- takeWhile (< n) (oeis @28),
--                       n `mod` x == 0, let y = n `div` x, x < y,
--                       y `elem` takeWhile (<= n) (oeis @28)]

-- instance OEIS 133042 where
--   oeisIx = (^ 3) . (oeisIx @41)

-- instance OEIS 133048 where
--   oeisIx 0 = 0
--   oeisIx n = train $ dropWhile (== 0) $ (rowT @31298) n where
--      train []       = 1
--      train [x]      = x
--      train (u:v:ws) = u ^ v * (train ws)

-- instance OEIS 133280 where
--   oeis = tablList @133280
-- instance Table 133280 where
--   tabl = f 0 1 [0..] where
--      f m j xs = (filter ((== m) . (`mod` 2)) ys) : f (1 - m) (j + 2) xs'
--        where (ys,xs') = splitAt j xs

-- instance OEIS 133457 where
--   oeis = tablList @133457
-- instance Table 133457 where
--   rowCol n k = (tabf @133457) !! (n - 1) !! n
--   rowT n = (tabf @133457) !! (n - 1)
--   tabf = map (fst . unzip . filter ((> 0) . snd) . zip [0..]) $
--                      tail (tabf @30308)

-- instance OEIS 133466 where
--   oeis = map (+ 1) $ elemIndices 1 (oeis @57918)

-- instance OEIS 133500 where
--   oeisIx = train . reverse . (rowT @31298) where
--      train []       = 1
--      train [x]      = x
--      train (u:v:ws) = u ^ v * (train ws)

-- instance OEIS 133610 where
--   oeis = scanl1 (+) (oeis @53616)

-- instance OEIS 133622 where
--   oeisIx n = (1 - m) * n' + 1 where (n', m) = divMod n 2
--   oeis = concat $ transpose [[1, 1 ..], [2 ..]]

-- instance OEIS 133808 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @133808) !! (n - 1)
--   oeis = 1 : f (singleton (2, 2, 1)) where
--      f s = y : f (insert (y * p, p, e + 1) $ insert (y * q^e, q, e) s')
--                where q = (oeisIx @151800) p
--                      ((y, p, e), s') = deleteFindMin s

-- instance OEIS 133809 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @133809) !! (n - 1)
--   oeis = 1 : f (singleton (2, 2, 1)) where
--      f s = y : f (insert (y*p, p, e+1) $ insert (y*q^ (e+1), q, e+1) s')
--                where q = (oeisIx @151800) p
--                      ((y, p, e), s') = deleteFindMin s

-- instance OEIS 133810 where
--   oeis = 1 : filter f [2..] where
--      f x = (and $ zipWith (<=) eps $ tail eps) &&
--            (all (== 1) $ zipWith (-) (tail ips) ips)
--        where ips = map (oeisIx @49084) $ (rowT @27748) x
--              eps = (rowT @124010) x

-- instance OEIS 133811 where
--   oeis = 1 : filter f [2..] where
--      f x = (and $ zipWith (<) eps $ tail eps) &&
--            (all (== 1) $ zipWith (-) (tail ips) ips)
--        where ips = map (oeisIx @49084) $ (rowT @27748) x
--              eps = (rowT @124010) x

-- instance OEIS 133813 where
--   oeisIx n = (oeis @133813) !! (n - 1)
--   oeis = 1 : filter f [2..] where
--      f x = isPrefixOf ps (dropWhile (< (oeisIx @20639) x) (oeis @40)) &&
--              all (< 0) (zipWith (-) (tail es) es)
--            where ps = (rowT @27748) x; es = (rowT @124010) x

-- instance OEIS 133819 where
--   oeis = tablList @133819
-- instance Table 133819 where
--   rowCol = rowCol_off @133819 @1 @1
--   rowT   = rowT_off   @133819 @1
--   tabl = map (`take` (tail (oeis @290))) [1..]

-- instance OEIS 133820 where
--   oeis = tablList @133820
-- instance Table 133820 where
--   rowCol = rowCol_off @133820 @1 @1
--   rowT   = rowT_off   @133820 @1
--   tabl = map (`take` (tail (oeis @578))) [1..]

-- instance OEIS 133821 where
--   oeis = tablList @133821
-- instance Table 133821 where
--   rowCol = rowCol_off @133821 @1 @1
--   rowT   = rowT_off   @133821 @1
--   tabl = map (`take` (tail (oeis @583))) [1..]

-- instance OEIS 133870 where
--   oeis = filter ((== 1) . (oeisIx @10051)) [1,33..]

-- instance OEIS 133942 where
--   oeis = zipWith (*) (oeis @142) $ cycle [1, -1]

-- instance OEIS 134204 where
--   oeisIx n = (oeis @134204) !! n
--   oeis = 2 : f 1 2 (tail (oeis @40)) where
--      f x q ps = p' : f (x + 1) p' (delete p' ps) where
--        p' = head [p | p <- ps, mod (p + q) x == 0]

-- instance OEIS 134239 where
--   oeis = tablList @134239
-- instance Table 134239 where
--   rowT n = (tabl @134239) !! n
--   tabl = [1] : zipWith (map . (*))
--                  [2..] (map reverse $ tail (tabl @29635))

-- instance OEIS 134287 where
--   oeisIx = flip (oeisIx @103371) 4 . (+ 4)

-- instance OEIS 134323 where
--   oeisIx n = (1 - 0 ^ m) * (-1) ^ (m + 1) where m = (oeisIx @40) n `mod` 3

-- instance OEIS 134451 where
--   oeisIx = until (< 3) (oeisIx @53735)

-- instance OEIS 134636 where
--   oeis = tablList @134636
-- instance Table 134636 where
--   rowT n = (tabl @134636) !! n
--   tabl = iterate (\row -> zipWith (+) ([2] ++ row) (row ++ [2])) [1]

-- instance OEIS 134640 where
--   oeis = tablList @134640
-- instance Table 134640 where
--   rowCol n k = (tabf @134640) !! (n - 1) !! (k-1)
--   rowT n = sort $
--      map (foldr (\dig val -> val * n + dig) 0) $ permutations [0 .. n - 1]
--   tabf = map (rowT @134640) [1..]
--   oeis = concat (tabf @134640)

instance OEIS 134734 where
  oeis = zipWith (-) (tail (oeis @84662)) (oeis @84662)

instance OEIS 134735 where
  oeis = concat $ transpose [oeis @40, oeis @1223]

instance OEIS 134736 where
  oeis = 5 : zipWith (+) (oeis @134736) (zipWith gcd (oeis @134736) [2..])

instance OEIS 134743 where
  oeis = zipWith (-) (tail (oeis @134736)) (oeis @134736)

instance OEIS 134744 where
  oeis = zipWith (-) (tail (oeis @84663)) (oeis @84663)

-- instance OEIS 134941 where
--   oeisIx n = (oeis @134941) !! (n - 1)
--   oeis = elemIndices 1 (oeis @178333)

-- instance OEIS 134948 where
--   oeisIx n = (oeis @134948) !! (n - 1)
--   oeis = filter h [0..] where
--      h x = all (`isInfixOf` xs)
--                (map (fss !!) $ map (read . return) $ sort $ nub xs)
--            where xs = show x
--      fss = map show $ take 10 (oeis @142)

-- instance OEIS 135093 where
--   oeisIx 0 = 4
--   oeisIx n = (+ 1) $ fromJust $ (`elemIndex` (oeis @46665)) $ (oeisIx @30173) n

-- instance OEIS 135141 where
--   oeisIx n = genericIndex (oeis @135141) (n - 1)
--   oeis = 1 : map f [2..] where
--      f x | iprime == 0 = 2 * (oeisIx $ (oeisIx @66246) x) + 1
--          | otherwise   = 2 * (oeisIx iprime)
--          where iprime = (oeisIx @49084) x

-- instance OEIS 135282 where
--   oeisIx = (oeisIx @7814) . head . filter ((== 1) . (oeisIx @209229)) . (rowT @70165)

-- instance OEIS 135287 where
--   oeis = 1 : f 1 1 where
--      f x y = z : f (x + 1) z where
--           z = if m == 0 then y' else x + y; (y',m) = divMod y 2

-- instance OEIS 135414 where
--   oeis = 1 : 1 : zipWith (-) [3..] (map (oeisIx @135414) (oeis @135414))

-- instance OEIS 135440 where
--   oeis = zipWith (-) (tail (oeis @14551)) (oeis @14551)

-- instance OEIS 135499 where
--   oeis = filter ((== 0) . (oeisIx @225693)) [1..]

-- instance OEIS 135504 where
--   oeis = 1 : zipWith (+)
--                      (oeis @135504) (zipWith lcm (oeis @135504) [2..])

-- instance OEIS 135507 where
--   oeis = 1 : zipWith (+)
--      (map (* 2) $ (oeis @135507)) (zipWith lcm (oeis @135507) [2..])

-- instance OEIS 135528 where
--   oeis = concat $ iterate ([1,0] *) [1]
--   instance Num a => Num [a] where
--   fromInteger k = [fromInteger k]
--      (p:ps) + (q:qs) = p + q : ps + qs
--      ps + qs         = ps ++ qs
--      (0:ps) * qs         = 0 : ps * qs
--      (p:ps) * qs'@ (q:qs) = p * q : ps * qs' + [p] * qs
--      _ * _               = []

-- instance OEIS 135581 where
--   oeisIx n = [d | d <- [1..], (oeisIx @137488) n `mod` d == 0] !! 4

-- instance OEIS 135643 where
--   oeis = filter f [100..] where
--      f x = all (== 0) ws where
--            ws = zipWith (-) (tail vs) vs
--            vs = zipWith (-) (tail us) us
--            us = map (read . return) $ show x

-- instance OEIS 135837 where
--   oeis = tablList @135837
-- instance Table 135837 where
--   rowCol = rowCol_off @135837 @1 @1
--   rowT   = rowT_off   @135837 @1
--   tabl = [1] : [1, 2] : f [1] [1, 2] where
--      f xs ys = ys' : f ys ys' where
--        ys' = zipWith3 (\u v w -> 2 * u - v + 2 * w)
--                       (ys ++ [0]) (xs ++ [0, 0]) ([0, 0] ++ xs)

-- instance OEIS 135851 where
--   oeis = -1 : 0 : 1 : zipWith (+) (oeis @135851) (drop 2 (oeis @135851))

-- instance OEIS 136119 where
--   oeisIx n = (oeis @136119) !! (n - 1)
--   oeis = f [1..] where
--      f zs@ (y:xs) = y : f (delete (zs !! y) xs)

-- instance OEIS 136183 where
--   oeisIx n = sum $ zipWith lcm ps $ tail ps where ps = (rowT @27750) n

-- instance OEIS 136333 where
--   oeisIx n = (oeis @136333) !! (n - 1)
--   oeis = filter (null . intersect "024568" . show) [1..]

instance OEIS 136392 where
  oeisIx (succ->n) = 2 * n * (3*n - 5) + 5

instance OEIS 136399 where
  oeis = filter (any (> '1') . show . fi) [0..]

-- instance OEIS 136400 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @136400) n' * 10 + min 1 d where (n',d) = divMod n 10

instance OEIS 136409 where
  oeisIx = floor . (* logBase 3 2) . fi

instance OEIS 136412 where
  oeisIx = (`div` 3) . (+ 1) . (* 5) . (4 ^)

-- instance OEIS 136414 where
--   oeis = zipWith (+) (tail (oeis @7376)) $ map (10 *) (oeis @7376)

-- instance OEIS 136431 where
--   oeis = tablList @136431
-- instance Table 136431 where
--   rowT n = (tabl @136431) !! n
--   tabl = map fst $ iterate h ([0], 1) where
--      h (row, fib) = (zipWith (+) ([0] ++ row) (row ++ [fib]), last row)

-- instance OEIS 136446 where
--   oeis = map (+ 1) $ findIndices (> 1) (oeis @211111)

-- instance OEIS 136447 where
--   oeis = filter ((== 0) . (oeisIx @210455)) [1..]

-- instance OEIS 136480 where
--   oeisIx 0 = 1
--   oeisIx n = (oeisIx @7814) $ n + mod n 2

-- instance OEIS 136495 where
--   oeisIx n = (fromJust $ n `elemIndex` tail (oeis @5374)) + 1

-- instance OEIS 136522 where
--   oeisIx n = fromEnum $ n == (oeisIx @4086) n

-- instance OEIS 136572 where
--   oeis = tablList @136572
-- instance Table 136572 where
--   rowT n = (tabl @136572) !! n
--   tabl = map fst $ iterate f ([1], 1) where
--      f (row, i) = (0 : map (* i) row, i + 1)

-- instance OEIS 136655 where
--   oeisIx = product . (rowT @182469)

-- instance OEIS 136798 where
--   oeisIx n = (oeis @136798) !! (n - 1)
--   oeis = tail $ map (+ 1) $ elemIndices 1 $
--      zipWith (*) (0 : (oeis @10051)) $ map (1 -) $ tail (oeis @10051)

-- instance OEIS 137291 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @49001)) [1..]

-- instance OEIS 137409 where
--   oeisIx n = (oeis @137409) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @24362)

-- instance OEIS 137488 where
--   oeis = m (map (^ 24) (oeis @40)) (map (^ 4) (oeis @6881)) where
--      m xs'@ (x:xs) ys'@ (y:ys) | x < y = x : m xs ys'
--                              | otherwise = y : m xs' ys

-- instance OEIS 137564 where
--   oeisIx = f (-1) where
--      f _ 0 = 0
--      f r x = if d == r then f r x' else 10 * f d x' + d
--              where (x', d) = divMod x 10

-- instance OEIS 137580 where
--   oeisIx = genericLength . nub . show . (oeisIx @142)

-- instance OEIS 137581 where
--   oeisIx = (oeisIx @55641) . (oeisIx @4154)

-- instance OEIS 137613 where
--   oeis =  filter (> 1) (oeis @132199)

instance OEIS 137688 where
  oeis = concat $ zipWith ($) (map replicate [1..]) (map (2^) [0..])

-- instance OEIS 137921 where
--   oeisIx n = genericLength $ filter (> 0) $
--      map ((mod n) . (+ 1)) [d | d <- [1..n], mod n d == 0]

-- instance OEIS 137948 where
--   oeis = tablList @137948
-- instance Table 137948 where
--   rowT n = (tabl @137948) !! n
--   tabl = zipWith (zipWith div) (tabl @245334) (tabl @7318)

-- instance OEIS 138109 where
--   oeis = filter f [1..] where
--      f x = p ^ 2 < x && x < p ^ 3 where p = (oeisIx @20639) x

-- instance OEIS 138166 where
--   oeisIx n = (oeis @138166) !! (n - 1)
--   oeis = filter (\x -> show (oeisIx x) `isInfixOf` show x) [0..]

-- instance OEIS 138290 where
--   oeisIx n = (oeis @138290) !! (n - 1)
--   oeis = map (+ 1) $ tail $ elemIndices 0 (oeis @208083)

-- instance OEIS 138353 where
--   oeis = filter ((== 1) . (oeisIx @10051)') $ map (+ 9) (oeis @290)

-- instance OEIS 138510 where
--   oeisIx n = genericIndex (oeis @138510) (n - 1)
--   oeis = mapMaybe f [1..] where
--     f x | (oeisIx @10051)' q == 0 = Nothing
--         | q == p          = Just 1
--         | otherwise       = Just $
--           head [b | b <- [2..], length (d b p) == length (d b q)]
--         where q = div x p; p = (oeisIx @20639) x
--     d b = unfoldr (\z -> if z == 0 then Nothing else Just $ swap $ divMod z b)

-- instance OEIS 138511 where
--   oeis = filter f [1..] where
--                         f x = p ^ 2 < q && (oeisIx @10051)' q == 1
--                               where q = div x p; p = (oeisIx @20639) x

-- instance OEIS 138530 where
--   oeis = tablList @138530
-- instance Table 138530 where
--   rowCol = rowCol_off @138530 @1 @1
--   rowT   = rowT_off   @138530 @1
--   tabl = zipWith (map . flip q) [1..] (tabl @2260) where
--      q 1 n = n
--      q b n = if n < b then n else q b n' + d where (n', d) = divMod n b

-- instance OEIS 138666 where
--   oeis = map (head . tail) $
--      filter (all (== 0) . map (oeisIx @10051) . tail) $ drop 2 (tabl @87401)

instance OEIS 138791 where
  oeisIx n = (fi . fromJust $ elemIndex n (oeis @70635)) + 1

-- instance OEIS 139080 where
--   oeisIx n = (oeis @139080) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--   f x zs = g zs where
--   g (y:ys) = if x < y && y `div` x == 2 || x `div` y == 2
--   then y : f y (delete y zs) else g ys

-- instance OEIS 139127 where
--   oeisIx 1 = 1
--   oeisIx n = head [y | let z = (oeisIx @5244) n + 1,
--               y <- reverse $ takeWhile (<= z `div` (oeisIx @20639) z) (oeis @5244),
--               z `mod` y == 0]

-- instance OEIS 139337 where
--   oeisIx n = read $ concatMap show $ mapMaybe (flip lookup ls) ds :: Int
--      where ls = zip (map head zss) (map length zss)
--            zss = group $ sort ds
--            ds = map (read . return) $ show n :: [Int]

-- instance OEIS 139351 where
--   oeisIx = sum . map (`mod` 2) .
--      unfoldr (\x -> if x == 0 then Nothing else Just (x, x `div` 4)

-- instance OEIS 139352 where
--   oeisIx = sum . map ((`div` 2) . (`mod` 4)) .
--      unfoldr (\x -> if x == 0 then Nothing else Just (x, x `div` 4))

-- instance OEIS 139366 where
--   oeisIx 1 1               = 0
--   oeisIx n k | gcd n k > 1 = 0
--               | otherwise   = head [r | r <- [1..], k ^ r `mod` n == 1]
--   oeisIx_row n = map (oeisIx n) [1..n]
--   oeisIx_tabl = map (rowT @139366) [1..]

-- instance OEIS 139399 where
--   oeisIx = f 0 where
--      f k x = if x `elem` [1,2,4] then k else f (k + 1) (oeisIx x)

-- instance OEIS 139532 where
--   oeis = [x | x <- [0..], (oeisIx @10051)' (24 * x + 19) == 1]

-- instance OEIS 139544 where
--   oeis = 1 : 2 : 4 : tail (oeis @16825)

-- instance OEIS 139555 where
--   oeisIx = sum . map (oeisIx @10055) . (rowT @38566)

-- instance OEIS 139764 where
--   oeisIx = head . (rowT @35517)

-- instance OEIS 140081 where
--   oeisIx n = div (mod n 4 + mod n 2) 2
--   oeis = cycle [0, 1, 1, 2]

-- instance OEIS 140119 where
--   oeisIx = sum . (rowT @95195)

-- instance OEIS 140253 where
--   oeisIx n = (oeis @140253) !! n
--   oeis = -1 : concat
--                       (transpose [oeis, map (* 2) (oeis @83420)])

-- instance OEIS 140434 where
--   oeis = 1 : zipWith (-) (tail (oeis @18805)) (oeis @18805)

-- instance OEIS 140436 where
--   oeisIx n = (oeis @140436) !! (n - 1)
--   oeis = map (maximum . map length . group . sort . map product) $
--                      tail pss where
--      pss = [] : map p [1..]
--      p u = [u] : [v : ps | v <- [1..u], ps <- pss !! (u - v), v <= head ps]

-- instance OEIS 140470 where
--   oeis = filter
--      (\x -> all (== 0) $ map ((mod x) . (+ 1)) $ (rowT @27748) x) [1..]

-- instance OEIS 140472 where
--   oeis = 0 : 1 : h 2 1 where
--     h x y = z : h (x + 1) z where z = (oeisIx @140472) (x - y) + (oeisIx @140472) (x `div` 2)

-- instance OEIS 140480 where
--   oeis = filter
--       ((== 1) . (oeisIx @10052) . (\x -> (oeisIx @1157) x `div` (oeisIx @5) x)) (oeis @20486)

-- instance OEIS 140513 where
--   oeis = tablList @140513
--   rowCol = rowCol_off @140513 @1 @1
--   rowT   = rowT_off   @140513 @1
--   tabl = iterate (\xs@ (x:_) -> map (* 2) (x:xs)) [2]
--   oeis = concat (tabl @140513)

-- instance OEIS 140690 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @140690) !! (n - 1)
--   oeis = f $ singleton (1, 1, 2) where
--      f s | k == 1 = m : f (insert (2*b-1, 1, 2*b) $ insert (b*m, k+1, b) s')
--          | even k    = m : f (insert (b*m+b-1, k+1, b) s')
--          | otherwise = m : f (insert (b*m, k+1, b) s')
--          where ((m, k, b), s') = deleteFindMin s

-- instance OEIS 140750 where
--   oeis = tablList @140750
-- instance Table 140750 where
--   rowCol n k = (tabf @140750) !! (n - 1) !! (k-1)
--   rowT n = (tabf @140750) !! (n - 1)
--   tabf = [1] : [1,1,1] : f [1] [1,1,1] where
--      f ws vs = vs' : f vs vs' where
--        vs' = zipWith3 (\r s x -> r + s + x)
--              (vs ++ [0,0]) ([0,0] ++ ws ++ [0,0]) ([0,0] ++ vs)

-- instance OEIS 140978 where
--   oeis = tablList @140978
-- instance Table 140978 where
--   rowCol = rowCol_off @140978 @1 @1
--   rowT   = rowT_off   @140978 @1
--   tabl = map snd $ iterate
--                  (\ (i, xs@ (x:_)) -> (i + 2, map (+ i) (x:xs))) (5, [4])

-- instance OEIS 141036 where
--   oeis = 2 : 1 : 1 : zipWith3 (((+) .) . (+))
--      (oeis @141036) (tail (oeis @141036)) (drop 2 (oeis @141036))

instance OEIS 141046 where
  oeisIx = (* 4) . (^ 4)

-- instance OEIS 141092 where
--   oeisIx n = (oeis @141092) !! (n - 1)
--   oeis = catMaybes $ zipWith div' (oeis @36691) (oeis @53767) where
--      div' x y | m == 0    = Just x'
--               | otherwise = Nothing where (x',m) = divMod x y

-- instance OEIS 141164 where
--   oeisIx n = (oeis @141164) !! (n - 1)
--   oeis = map succ $ elemIndices 1 $ map (oeisIx @188172) [1..]

-- instance OEIS 141169 where
--   oeis = tablList @141169
-- instance Table 141169 where
--   rowT n = (tabl @141169) !! n
--   tabl = tail $ inits (oeis @45)
--   oeis = concat $ (tabl @141169)

-- instance OEIS 141197 where
--   oeisIx = sum . map (oeisIx . (+ 1)) . (rowT @27750)

-- instance OEIS 141258 where
--   oeisIx = sum . map (oeisIx @2322) . (rowT @27750)

-- instance OEIS 141418 where
--   oeis = tablList @141418
-- instance Table 141418 where
--   rowCol n k = k * (2 * n - k - 1) `div` 2
--   rowT   = rowT_off   @141418 @1
--   tabl = map (scanl1 (+)) (tabl @25581)

-- instance OEIS 141419 where
--   oeis = tablList @141419
-- instance Table 141419 where
--   rowCol n k =  k * (2 * n - k + 1) `div` 2
--   rowT   = rowT_off   @141419 @1
--   tabl = map (scanl1 (+)) (tabl @4736)

-- instance OEIS 141468 where
--   oeis = 0 : (oeis @18252)

-- instance OEIS 141686 where
--   oeis = tablList @141686
-- instance Table 141686 where
--   rowCol = rowCol_off @141686 @1 @1
--   rowT   = rowT_off   @141686 @1
--   tabl = zipWith (zipWith (*)) (tabl @7318) (tabl @8292)

-- instance OEIS 141707 where
--   oeisIx n = head [k | k <- [1, 3 ..], (oeisIx @178225) (k * (2 * n - 1)) == 1]

-- instance OEIS 141708 where
--   oeisIx n = (oeisIx @141707) n * (2 * n - 1)

-- instance OEIS 141709 where
--   oeisIx n = until ((== 1) . (oeisIx @178225) . (oeisIx @265)) (+ n) n

-- instance OEIS 141755 where
--   oeis = filter f (oeis @1358) where
--      f x = (oeisIx @10052)' (spf + x `div` spf) == 1 where spf = (oeisIx @20639) x

-- instance OEIS 141766 where
--   oeis = filter f [1..] where
--      f x = all (== 0) $ map (mod x) $ (map pred ps) ++ (map succ ps)
--            where ps = (rowT @27748) x

-- instance OEIS 141767 where
--   oeis = filter f [1..] where
--      f x = all (== 0) $
--            map (mod x) $ zipWith (*) (map pred ps) (map succ ps)
--            where ps = (rowT @27748) x

-- instance OEIS 141809 where
--   oeis = tablList @141809
-- instance Table 141809 where
--   rowCol n k = (rowT @141809) n !! (k-1)
--   rowT 1 = [1]
--   rowT n = zipWith (^) (oeisIx_row n) (oeisIx_row n)
--   tabf = map (rowT @141809) [1..]

-- instance OEIS 142149 where
--   oeisIx :: Integer -> Integer
--   oeisIx = foldl xor 0 . zipWith (.|.) [0..] . reverse . enumFromTo 1

-- instance OEIS 142150 where
--   oeisIx = uncurry (*) . (`divMod` 2) . (+ 1)
--   oeis = scanl (+) 0 (oeis @1057)

-- instance OEIS 142151 where
--   oeisIx :: Integer -> Integer
--   oeisIx = foldl (.|.) 0 . zipWith xor [0..] . reverse . enumFromTo 1

-- instance OEIS 142925 where
--   oeis = filter ((== 1) . (oeisIx @10051)) [1,65..]

-- instance OEIS 142978 where
--   oeis = tablList @142978
-- instance Table 142978 where
--   rowCol = rowCol_off @142978 @1 @1
--   rowT   = rowT_off   @142978 @1
--   tabl = map reverse (tabl @104698)

-- instance OEIS 142983 where
--   oeis = 1 : 2 : zipWith (+)
--                          (map (* 2) $ tail (oeis @142983))
--                          (zipWith (*) (drop 2 (oeis @2378)) (oeis @142983))

-- instance OEIS 142984 where
--   oeis = 1 : 4 : zipWith (+)
--                          (map (* 4) $ tail (oeis @142984))
--                          (zipWith (*) (drop 2 (oeis @2378)) (oeis @142984))

-- instance OEIS 142985 where
--   oeis = 1 : 6 : zipWith (+)
--                          (map (* 6) $ tail (oeis @142985))
--                          (zipWith (*) (drop 2 (oeis @2378)) (oeis @142985))

-- instance OEIS 142986 where
--   oeis = 1 : 8 : zipWith (+)
--                          (map (* 8) $ tail (oeis @142986))
--                          (zipWith (*) (drop 2 (oeis @2378)) (oeis @142986))

-- instance OEIS 142987 where
--   oeis = 1 : 10 : zipWith (+)
--                           (map (* 10) $ tail (oeis @142987))
--                           (zipWith (*) (drop 2 (oeis @2378)) (oeis @142987))

-- instance OEIS 143070 where
--   oeis = filter ((== 1) . (oeisIx @209229) . (oeisIx @23416)) [1..]

-- instance OEIS 143071 where
--   oeis = filter ((== 1) . (oeisIx @209229) . (oeisIx @120)) [1..]

-- instance OEIS 143072 where
--   oeis = filter ((== 1) . (oeisIx @209229) . (oeisIx @23416)) (oeis @143071)

-- instance OEIS 143127 where
--   oeis = scanl1 (+) (oeis @38040)

-- instance OEIS 143158 where
--   oeis = tablList @143158
-- instance Table 143158 where
--   rowCol = rowCol_off @143158 @1 @1
--   rowT   = rowT_off   @143158 @1
--   tabl = map (map sum . init . tails) (tabl @54527)

instance OEIS 143164 where
  oeis = filter ((== 13) . (oeisIx @7953)) [0..]

-- instance OEIS 143201 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map (+ 1) $ zipWith (-) (tail pfs) pfs
--      where pfs = (rowT @27748) n

-- instance OEIS 143202 where
--   oeis = filter (\x -> (oeisIx @6530) x - (oeisIx @20639) x == 2) [1,3..]

-- instance OEIS 143203 where
--   oeis = filter f [1,3..] where
--      f x = length pfs == 2 && last pfs - head pfs == 4 where
--          pfs = (rowT @27748) x

-- instance OEIS 143205 where
--   oeis = filter f [1,3..] where
--      f x = length pfs == 2 && last pfs - head pfs == 6 where
--          pfs = (rowT @27748) x

-- instance OEIS 143206 where
--   oeis = (3*7) : f (oeis @40) where
--      f (p:ps@ (p':_)) | p'-p == 4 = (p*p') : f ps
--                      | otherwise = f ps

-- instance OEIS 143207 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @143207) !! (n - 1)
--   oeis = f (singleton (2*3*5)) where
--      f s = m : f (insert (2*m) $ insert (3*m) $ insert (5*m) s') where
--        (m,s') = deleteFindMin s

-- instance OEIS 143215 where
--   oeisIx n = (oeisIx @40) n * (oeisIx @7504) n

-- instance OEIS 143333 where
--   oeis = tablList @143333
-- instance Table 143333 where
--   rowCol = rowCol_off @143333 @1 @1
--   rowT   = rowT_off   @143333 @1
--   tabl = zipWith (zipWith (*)) (tabl @7318) (tabl @47999)

-- instance OEIS 143344 where
--   oeisIx n = (oeis @143344) !! (n - 1)
--   oeis = zipWith (-) (tail (oeis @22941)) (oeis @22941)

-- instance OEIS 143473 where
--   oeisIx n = foldl (\v d -> 10 * v + d) 0 $ (10 - z) : zs where
--      (z:zs) = map (read . return) $ show n

-- instance OEIS 143520 where
--   oeisIx n = product $ zipWith (\p e -> (e + 2 * mod p 2 - 1) * p ^ e)
--                                 (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 143536 where
--   oeis = tablList @143536
-- instance Table 143536 where
--   rowCol = rowCol_off @143536 @1 @1
--   rowT   = rowT_off   @143536 @1
--   tabl = zipWith take [1..] $ map repeat (oeis @10051)

-- instance OEIS 143667 where
--   oeis = f (oeis @3849) where
--      f (0:0:ws) = 0 : f ws; f (0:1:ws) = 1 : f ws; f (1:0:ws) = 2 : f ws

-- instance OEIS 143683 where
--   oeis = tablList @143683
-- instance Table 143683 where
--   rowT n = (tabl @143683) !! n
--   tabl = map fst $ iterate
--      (\ (us, vs) -> (vs, zipWith (+) (map (* 8) ([0] ++ us ++ [0])) $
--                         zipWith (+) ([0] ++ vs) (vs ++ [0]))) ([1], [1, 1])

instance OEIS 143689 where
  oeisIx n = n* (3*n - 1) `div` 2 + 1

-- instance OEIS 143691 where
--   oeisIx n = (oeis @143691) !! (n - 1)
--   oeis = f 1 [1..] where
--      f m xs = g xs where
--        g (z:zs) = if m + m' /= 1 then g zs else z : f m' (delete z xs)
--                   where m' = (oeisIx @1222) z `mod` 2

-- instance OEIS 143692 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @143691))

-- instance OEIS 143792 where
--   oeisIx n = genericLength $ (rowT @225243) n `intersect` (rowT @27748) (fi n)

-- instance OEIS 143967 where
--   oeisIx = f 0 . (+ 1) where
--      f y 1 = (oeisIx @4086) y
--      f y x = f (10 * y + 3 + 4 * r) x' where (x', r) = divMod x 2

-- instance OEIS 144100 where
--   oeis = filter (\x -> (oeisIx @144907) x < x) [1..]

-- instance OEIS 144299 where
--   oeis = tablList @144299
-- instance Table 144299 where
--   rowT n = (tabl @144299) !! n
--   tabl = [1] : [1, 0] : f 1 [1] [1, 0] where
--      f i us vs = ws : f (i + 1) vs ws where
--                  ws = (zipWith (+) (0 : map (i *) us) vs) ++ [0]

-- instance OEIS 144328 where
--   oeis = tablList @144328
-- instance Table 144328 where
--   rowCol = rowCol_off @144328 @1 @1
--   rowT   = rowT_off   @144328 @1
--   tabl = [1] : map (\xs@ (x:_) -> x : xs) (tabl @2260)

-- instance OEIS 144331 where
--   oeis = tablList @144331
-- instance Table 144331 where
--   rowCol n k = (tabf @144331) !! n !! k
--   rowT n = (tabf @144331) !! n
--   tabf = iterate (\xs ->
--     zipWith (+) ([0] ++ xs ++ [0]) $ zipWith (*) (0:[0..]) ([0,0] ++ xs)) [1]

-- instance OEIS 144394 where
--   oeis = tablList @144394
-- instance Table 144394 where
--   rowCol = rowCol_off @144394 @4 @0
--   rowT = rowT_off @144394 @4
--   tabl = map (drop 2 . reverse . drop 2) $ drop 4 (tabl @7318)

-- instance OEIS 144396 where
--   oeisIx = (+ 1) . (* 2)
--   oeis = [3, 5 ..]

-- instance OEIS 144582 where
--   oeis = [x | x <- [0..], (oeisIx @30) x == (oeisIx @30) (x ^ 3)]

-- instance OEIS 144623 where
--   oeisIx = (subtract 1) . (oeisIx @78822)

-- instance OEIS 144624 where
--   oeisIx n = (oeisIx @78823) n - fi n

-- instance OEIS 144757 where
--   oeisIx n = (oeisIx @108) (oeisIx n - 1) * (oeisIx @8480) n

-- instance OEIS 144907 where
--   oeisIx x | (oeisIx @10051) x == 1 = 1
--             | x `mod` 4 == 0 = 2 * rad
--             | otherwise      = rad  where rad = (oeisIx @7947) x

-- instance OEIS 144925 where
--   oeisIx = genericLength . (rowT @163870)

-- instance OEIS 144944 where
--   oeis = tablList @144944
-- instance Table 144944 where
--   rowT n = (tabl @144944) !! n
--   tabl = iterate f [1] where
--      f us = vs ++ [last vs] where
--        vs = scanl1 (+) $ zipWith (+) us $ [0] ++ us

-- instance OEIS 144968 where
--   oeis = zipWith (-) (tail (oeis @185549)) (oeis @185549)

-- instance OEIS 145011 where
--   oeis = zipWith (-) (tail (oeis @7775)) (oeis @7775)

-- instance OEIS 145037 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @145037) n' + 2*m - 1 where (n', m) = divMod n 2

-- instance OEIS 145071 where
--   oeisIx n = 2 ^ (n + 1) + n - 2
--   oeis = scanl1 (+) $ tail (oeis @51)

-- instance OEIS 145108 where
--   oeis = filter ((== 0) . (`mod` 4)) (oeis @133809)

-- instance OEIS 145204 where
--   oeis = 0 : map (+ 1) (findIndices even (oeis @51064))

-- instance OEIS 145292 where
--   oeis = filter ((== 0) . (oeisIx @10051)) (oeis @202018)

-- instance OEIS 145445 where
--   oeis = f (oeis @40) $ drop 2 (oeis @290) where
--      f ps'@ (p:ps) xs'@ (x:xs) = if p < x then x : f ps xs' else f ps' xs

-- instance OEIS 145513 where
--   import Data.MemoCombinators (memo2, list, integral)
--   oeisIx n = (oeis @145513) !! n
--   oeis = f [1] where
--      f xs = (p' xs $ last xs) : f (1 : map (* 10) xs)
--      p' = memo2 (list integral) integral p
--      p _ 0 = 1; p [] _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p' ks' (m - k) + p' ks m

-- instance OEIS 145654 where
--   oeis = scanl1 (+) $ tail (oeis @918)

-- instance OEIS 145768 where
--   oeisIx n = (oeis @145768) !! n
--   oeis = scanl1 xor (oeis @290)

-- instance OEIS 145784 where
--   oeis = filter ((== 0) . (oeisIx @10872) . (oeisIx @1222)) [1..]

-- instance OEIS 145799 where
--   oeisIx = maximum . map (foldr (\b v -> 2 * v + b) 0) .
--                       filter (\bs -> bs == reverse bs && head bs == 1) .
--                       substr . bin where
--      substr [] = []
--      substr us'@ (_:us) = sub us' ++ substr us where
--         sub [] = []; sub (v:vs) = [v] : [v : ws | ws <- sub vs ]
--      bin 0 = []; bin n = b : bin n' where (n', b) = divMod n 2

-- instance OEIS 145812 where
--   oeis = filter f [1, 3 ..] where
--      f v = v == 0 || even w && f w where w = v `div` 4

-- instance OEIS 145829 where
--   oeis = map (oeisIx @196) $ filter ((== 1) . (oeisIx @10052)) $ tail (oeis @145768)

-- instance OEIS 146288 where
--   oeisIx = (oeisIx @5) . (oeisIx @25487)

-- instance OEIS 146562 where
--   oeisIx n = (oeis @146562) !! (n - 1)
--   oeis = map (+ 1) $
--      findIndices (/= 0) $ zipWith (-) (oeis @64353) $ cycle [1, 3]

-- instance OEIS 147583 where
--   oeisIx = p [1..] where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p [5 * k ..] (m - k) + p ks m

-- instance OEIS 147812 where
--   oeisIx n = (oeis @147812) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ findIndices (< 0) (oeis @36263)

-- instance OEIS 147813 where
--   oeisIx n = (oeis @147813) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ findIndices (>= 0) (oeis @36263)

-- instance OEIS 147991 where
--   import Data.Set (singleton, insert, deleteFindMin)
--   oeisIx n = (oeis @147991) !! (n - 1)
--   oeis = f $ singleton 1 where
--      f s = m : (f $ insert (3*m - 1) $ insert (3*m + 1) s')
--            where (m, s') = deleteFindMin s

-- instance OEIS 151666 where
--   oeisIx n = fromEnum (n < 2 || m < 2 && (oeisIx @151666) n' == 1)
--      where (n', m) = divMod n 4

-- instance OEIS 151763 where
--   oeisIx n | even n         = 0
--             | (oeisIx @10051) n == 1 = 2 - n `mod` 4
--             | otherwise      = 0

-- instance OEIS 151764 where
--   oeisIx = (oeisIx @71786) . (oeisIx @71786)

-- instance OEIS 151765 where
--   oeisIx = (oeisIx @71786) . (oeisIx @4086)

-- instance OEIS 151799 where
--   oeisIx = (oeisIx @7917) . (subtract 1)

-- instance OEIS 151821 where
--   oeis = x : xs where (x : _ : xs) = (oeis @79)

-- instance OEIS 151910 where
--   oeis = zipWith (-) (tail (oeis @1682)) (oeis @1682)

-- instance OEIS 151945 where
--   oeis = 1 : 1 : f [2..] where
--      f (x:xs) = p (take x (oeis @151945)) x : f xs
--      p _ 0 = 1; p [] _ = 0
--      p ds'@ (d:ds) m = if m < d then 0 else p ds' (m - d) + p ds m

-- instance OEIS 151949 where
--   oeisIx n = (oeisIx @4186) n - (oeisIx @4185) n

-- instance OEIS 152223 where
--   oeis = 1 : -6 : zipWith (-)
--      (map (* 6) $ (oeis @152223)) (map (* 4) $ tail (oeis @152223))

-- instance OEIS 152271 where
--   oeisIx = (oeisIx @57979) . (+ 2)
--   oeis = concat $ transpose [repeat 1, [1..]]

-- instance OEIS 152458 where
--   oeis = [x | x <- [1..], (oeisIx @64413) x == x]

-- instance OEIS 152723 where
--   oeisIx n = min (oeisIx n) (oeisIx n)

-- instance OEIS 152724 where
--   oeisIx n = max (oeisIx n) (oeisIx n)

-- instance OEIS 152749 where
--   oeis = scanl1 (+) (oeis @109043)

-- instance OEIS 152815 where
--   oeis = tablList @152815
-- instance Table 152815 where
--   rowT n = (tabl @152815) !! n
--   tabl = [1] : [1,0] : t [1,0] where
--      t ys = zs : zs' : t zs' where
--        zs' = zs ++ [0]; zs = zipWith (+) ([0] ++ ys) (ys ++ [0])

-- instance OEIS 152842 where
--   oeis = tablList @152842
-- instance Table 152842 where
--   rowT n = (tabl @152842) !! n
--   tabl = map fst $ iterate f ([1], 3) where
--      f (xs, z) = (zipWith (+) ([0] ++ map (* z) xs) (xs ++ [0]), 4 - z)

instance OEIS 153158 where
  oeis = filter ((== 2) . foldl1 gcd . (rowT @124010)) [2..]

-- instance OEIS 153727 where
--   oeis = iterate (oeisIx @6370) 1

-- instance OEIS 153733 where
--   oeisIx n = if b == 0 then n else (oeisIx @153733) n'  where (n', b) = divMod n 2

-- instance OEIS 153860 where
--   oeis = tablList @153860
-- instance Table 153860 where
--   rowCol = rowCol_off @153860 @1 @1
--   rowT   = rowT_off   @153860 @1
--   tabl = [1] : [0, 1] : iterate (\ (x:xs) -> -x : 0 : xs) [1, 1, 1]

-- instance OEIS 154314 where
--   oeisIx n = (oeis @154314) !! (n - 1)
--   oeis = findIndices (/= 3) (oeis @212193)

-- instance OEIS 154530 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @248378)

-- instance OEIS 154691 where
--   oeis = 1 : zipWith (+)
--                      (oeis @154691) (drop 2 $ map (* 2) (oeis @45))

-- instance OEIS 154771 where
--   oeisIx = sum . (rowT @218978) :: Integer -> Integer

-- instance OEIS 154809 where
--   oeis = filter ((== 0) . (oeisIx @178225)) [0..]

-- instance OEIS 155038 where
--   oeis = tablList @155038
-- instance Table 155038 where
--   rowCol = rowCol_off @155038 @1 @1
--   rowT   = rowT_off   @155038 @1
--   tabl = iterate
--      (\row -> zipWith (+) (row ++ [0]) (init row ++ [0,1])) [1]

-- instance OEIS 155043 where
--   oeisIx n = genericIndex (oeis @155043) n
--   oeis = 0 : map ((+ 1) . (oeisIx @155043)) (oeis @49820)

-- instance OEIS 155046 where
--   oeisIx n = (oeis @155046) !! n
--   oeis = concat $ transpose [tail (oeis @1333), tail (oeis @129)]

-- instance OEIS 155161 where
--   oeis = tablList @155161
-- instance Table 155161 where
--   rowT n = (tabl @155161) !! n
--   tabl = [1] : [0,1] : f [0] [0,1] where
--      f us vs = ws : f vs ws where
--        ws = zipWith (+) (us ++ [0,0]) $ zipWith (+) ([0] ++ vs) (vs ++ [0])

-- instance OEIS 155587 where
--   oeis = scanl (+) 1 (oeis @108)

-- instance OEIS 156031 where
--   oeisIx n = (oeis @156031) !! n
--   oeis = tail $ concat (transpose [oeis, (oeis @143344)])

-- instance OEIS 156144 where
--   oeisIx n = p [x | x <- [1..n], (oeisIx @10888) x == (oeisIx @10888) n] n where
--      p _  0 = 1
--      p [] _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

instance OEIS 156301 where
  oeisIx = ceiling . (* logBase 3 2) . fi

-- instance OEIS 156596 where
--   oeisIx n = (oeis @143667) !! (n - 1)
--   oeis = f (oeis @3849) where
--      f (0:0:ws) = 0 : f ws; f (0:1:ws) = 1 : f ws; f (1:0:ws) = 2 : f ws

-- instance OEIS 156659 where
--   oeisIx n = fromEnum $ (oeisIx @10051) n == 1 && (oeisIx @10051) (n `div` 2) == 1

-- instance OEIS 156660 where
--   oeisIx n = fromEnum $ (oeisIx @10051) n == 1 && (oeisIx @10051) (2 * n + 1) == 1

-- instance OEIS 156678 where
--   oeis = f 1 1 where
--      f u v | v > uu `div` 2        = f (u + 1) (u + 2)
--            | gcd u v > 1 || w == 0 = f u (v + 2)
--            | otherwise             = v : f u (v + 2)
--            where uu = u ^ 2; w = (oeisIx @37213) (uu + v ^ 2)

-- instance OEIS 156679 where
--   oeis = f 1 1 where
--      f u v | v > uu `div` 2        = f (u + 1) (u + 2)
--            | gcd u v > 1 || w == 0 = f u (v + 2)
--            | otherwise             = w : f u (v + 2)
--            where uu = u ^ 2; w = (oeisIx @37213) (uu + v ^ 2)

-- instance OEIS 156685 where
--   oeis = scanl1 (+) (oeis @24362)

-- instance OEIS 156689 where
--   oeis = f 1 1 where
--      f u v | v > uu `div` 2        = f (u + 1) (u + 2)
--            | gcd u v > 1 || w == 0 = f u (v + 2)
--            | otherwise             = (u + v - w) `div` 2 : f u (v + 2)
--            where uu = u ^ 2; w = (oeisIx @37213) (uu + v ^ 2)

-- instance OEIS 157037 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @3415)) [1..]

-- instance OEIS 157104 where
--   oeisIx = (oeisIx @3415) . (oeisIx @4709)

-- instance OEIS 157454 where
--   oeis = tablList @157454
-- instance Table 157454 where
--   rowCol = rowCol_off @157454 @1 @1
--   rowT   = rowT_off   @157454 @1
--   tabl = concatMap h $ tail $ inits [1, 3 ..] where
--      h xs = [xs ++ tail xs', xs ++ xs'] where xs' = reverse xs

instance OEIS 157671 where
  oeis = filter ((== 2) . until (< 3) (flip div 3)) [1..]

-- instance OEIS 157725 where
--   oeisIx = (+ 2) . (oeisIx @45)
--   oeis = 2 : 3 : map (subtract 2)
--                          (zipWith (+) (oeis @157725) $ tail (oeis @157725))

-- instance OEIS 157726 where
--   oeisIx = (+ 3) . (oeisIx @45)
--   oeis = 3 : 4 : map (subtract 3)
--                          (zipWith (+) (oeis @157726) $ tail (oeis @157726))

-- instance OEIS 157727 where
--   oeisIx = (+ 4) . (oeisIx @45)
--   oeis = 4 : 5 : map (subtract 4)
--                          (zipWith (+) (oeis @157727) $ tail (oeis @157727))

-- instance OEIS 157728 where
--   oeisIx = subtract 4 . (oeisIx @45)

-- instance OEIS 157729 where
--   oeisIx = (+ 5) . (oeisIx @45)
--   oeis = 5 : 6 : map (subtract 5)
--                          (zipWith (+) (oeis @157729) $ tail (oeis @157729))

-- instance OEIS 157793 where
--   oeis = f [head (oeis @23416)] $ tail (oeis @23416) where
--      f zs (x:xs) = (sum $ zipWith (*) zs (oeis @120)) : f (x:zs) xs

-- instance OEIS 157931 where
--   oeis = filter ((== 1) . (oeisIx @64911)) (oeis @14091)

-- instance OEIS 157962 where
--   oeis = concat $ map (t 1 {- January -}) [0..] where
--      t 13 _                       = []
--      t m n | h (n+2000) m 13 == 6 = m : n : t (succ m) n
--            | otherwise            = t (succ m) n
--      h year month day
--           | month <= 2 = h  (year - 1)  (month + 12)  day
--           | otherwise  = (day + 26 * (month + 1) `div` 10 + y + y `div` 4
--                          + century `div` 4 - 2 * century) `mod` 7
--             where (century, y) = divMod year 100

-- instance OEIS 157996 where
--   oeis = map (+ 1) $ filter f (oeis @6093) where
--      f x = g $ takeWhile (< x) (oeis @65091) where
--        g []  = False
--        g [_] = False
--        g (p:ps@ (_:qs)) = (x - p) `elem` qs || g ps

-- instance OEIS 158034 where
--   oeis = [x | x <- [1..],
--                       (4^x - 2^x + 8*x^2 - 2) `mod` (2*x* (2*x + 1)) == 0]

-- instance OEIS 158036 where
--   oeisIx = (\x -> (4^x - 2^x + 8*x^2 - 2) `div` (2*x* (2*x + 1))) . (oeisIx @158034)

-- instance OEIS 158294 where
--   oeisIx n = (oeisIx $ (oeisIx @20486) n) `div` (oeisIx $ (oeisIx @20486) n)

-- instance OEIS 158405 where
--   oeis = tablList @158405
-- instance Table 158405 where
--   rowCol n k = (rowT @158405) n !! (k-1)
--   rowT   = rowT_off   @158405 @1
--   tabl = map reverse (tabl @99375)

-- instance OEIS 158459 where
--   oeisIx = (`mod` 4) . negate
--   oeis = cycle [0,3,2,1]

-- instance OEIS 158478 where
--   oeisIx n = if n < 4 then n else 2 + mod n 2
--   oeis = [0..3] ++ cycle [2,3]

-- instance OEIS 158582 where
--   oeis = [x | x <- [0..], (oeisIx @23416) x > 1]

-- instance OEIS 159051 where
--   oeisIx n = (oeis @159051) !! (n - 1)
--   oeis = map (+ 2) $ elemIndices 0 $ zipWith mod (oeis @45) [2..]

-- instance OEIS 159477 where
--   oeis = 1 : concat
--      (zipWith (\p q -> replicate (fromInteger $ (q - p)) q)
--               (oeis @8578) $ tail (oeis @8578))

-- instance OEIS 159611 where
--   oeisIx n = (oeis @159611) !! (n - 1)
--   oeis = map (+ 2) $ elemIndices 0 (oeis @98006)

-- instance OEIS 159684 where
--   oeis = 0 : concat (iterate (concatMap s) [1])
--      where s 0 = [0,1]; s 1 = [0,1,0]

-- instance OEIS 159693 where
--   oeis = scanl1 (+) (oeis @463)

-- instance OEIS 159700 where
--   oeisIx n = genericLength $ filter (\ (p, q) -> p < q - 2 && (oeisIx @164292) q == 1) $
--                               zip ps (map (2 * n -) ps)
--                        where ps = filter ((== 1) . (oeisIx @164292)) [1..n]

-- instance OEIS 159765 where
--   oeis = (rowT @27750) 1000000

-- instance OEIS 159780 where
--   oeisIx n = sum $ zipWith (*) bs $ reverse bs
--      where bs = (rowT @30308) n

-- instance OEIS 159781 where
--   oeisIx n = (oeis @159781) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 4 (oeis @24362)

-- instance OEIS 159918 where
--   oeisIx = (oeisIx @120) . (oeisIx @290)

-- instance OEIS 159999 where
--   oeisIx n = genericLength $ takeWhile (<= n) $ sort $ (rowT @70165) n

-- instance OEIS 160000 where
--   oeisIx n = p (takeWhile (<= n) $ sort $ (rowT @70165) n) n where
--      p _          0 = 1
--      p []         _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 160001 where
--   oeisIx n = p (takeWhile (<= n) $ sort $ (rowT @70165) n) n where
--      p _      0 = 1
--      p []     _ = 0
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 160113 where
--   oeisIx = (oeisIx @60431) . (2 ^)

-- instance OEIS 160180 where
--   oeisIx = (oeisIx @32742) . (oeisIx @2808)

-- instance OEIS 160239 where
--   oeisIx n = (oeis @160239) !! n
--   oeis = 1 : (concat $
--      transpose [oeisIx, hs, zipWith (+) (map (* 2) hs) (oeisIx @8), tail (oeis @160239)])
--      where (oeisIx @8) = map (* 8) (oeis @160239);
--            hs = h (oeis @160239); h (_:x:xs) = x : h xs

-- instance OEIS 160256 where
--   oeisIx n = (oeis @160256) !! (n - 1)
--   oeis = 1 : 2 : f 1 2 [3..] where
--      f u v ws = g ws where
--        g (x:xs) | mod (x * v) u == 0 = x : f v x (delete x ws)
--                 | otherwise          = g xs

-- instance OEIS 160380 where
--   oeisIx = sum . map ((0 ^ ) . (`mod` 4)) .
--      unfoldr (\x -> if x == 0 then Nothing else Just (x, x `div` 4))

-- instance OEIS 160385 where
--   oeisIx = sum . map (signum . (`mod` 4)) .
--   unfoldr (\x -> if x == 0 then Nothing else Just (x, x `div` 4))

-- instance OEIS 160516 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @75075))

-- instance OEIS 160588 where
--   oeis = concat $ transpose [oeis @53645, oeis @27]

-- instance OEIS 160638 where
--   import Data.Word (Word8)
--   oeisIx :: Word8 -> Word8
--   oeisIx n = rev 0 0 where
--      rev 8 y = y
--      rev i y = rev (i + 1) (if testBit n i then setBit y (7 - i) else y)

-- instance OEIS 160676 where
--   oeis = filter (\x -> (oeisIx @6968) x == (oeisIx @6968) (2 * x)) [1..]

-- instance OEIS 160700 where
--   oeisIx n = (oeis @160700) !! n
--   oeis = [0..15] ++ map f [16..] where
--      f x = (oeisIx @160700) x' `xor` m :: Int where (x', m) = divMod x 16

-- instance OEIS 160855 where
--   oeisIx n = (oeis @160855) !! (n - 1)
--   oeis = 1 : f 2 1 [2..] where
--      f x sum zs = g zs where
--        g (y:ys) = if binSub x (sum + y)
--                      then y : f (x + 1) (sum + y) (delete y zs) else g ys
--      binSub u = sub where
--         sub w = mod w m == u || w > u && sub (div w 2)
--         m = (oeisIx @62383) u

-- instance OEIS 160967 where
--   oeis = m (oeis @79) (oeis @2450) where
--      m xs'@ (x:xs) ys'@ (y:ys) | x < y     = x : m xs ys'
--                              | x == y    = x : m xs ys
--                              | otherwise = y : m xs' ys

-- instance OEIS 161187 where
--   oeis = tail $ findIndices ((== 1) . (oeisIx @10052)) (oeis @89237)

-- instance OEIS 161188 where
--   oeis = map (+ 1) $ findIndices ((== 1) . (oeisIx @10051)) $ tail (oeis @89237)

instance OEIS 161382 where
  oeis = concatMap (\x -> genericReplicate (x ^ 2) (1 - mod x 2)) [1..]

-- instance OEIS 161385 where
--   oeisIx = (+ 1) . (oeisIx @161382)

-- instance OEIS 161390 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @161390) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [0, 5, 4, 2, 9, 8, 6, 7, 3, 1]

-- instance OEIS 161466 where
--   oeis = (rowT @27750) $ (oeisIx @142) 10

-- instance OEIS 161597 where
--   oeis = filter (\x -> (oeisIx @161594) x == x) [1..]

-- instance OEIS 161598 where
--   oeis = filter (\x -> (oeisIx @161594) x /= x) [1..]

-- instance OEIS 161600 where
--   oeis = filter ((== 0) . (oeisIx @10051)) (oeis @161597)

-- instance OEIS 161764 where
--   oeisIx n = n - (oeisIx @199238) n

-- instance OEIS 161896 where
--   oeis = [x | x <- [1..],
--                       (9^x - 3*3^x - 4*x) `mod` (2*x* (2*x + 1)) == 0]

-- instance OEIS 161906 where
--   oeis = tablList @161906
-- instance Table 161906 where
--   rowCol n k = (tabf @161906) !! (n - 1) !! (k-1)
--   rowT n = (tabf @161906) !! (n - 1)
--   tabf = zipWith (\m ds -> takeWhile ((<= m) . (^ 2)) ds)
--                          [1..] (oeisIx @27750)_tabf'

-- instance OEIS 161908 where
--   oeis = tablList @161908
-- instance Table 161908 where
--   rowCol n k = (tabf @161908) !! (n - 1) !! (k-1)
--   rowT n = (tabf @161908) !! (n - 1)
--   tabf = zipWith
--                  (\x ds -> reverse $ map (div x) ds) [1..] (tabf @161906)

-- instance OEIS 162247 where
--   import Data.Ord (comparing)
--   oeisIx n k = (tabl @162247) !! (n - 1) !! (k-1)
--   oeisIx_row n = (tabl @162247) !! (n - 1)
--   oeisIx_tabl = map (concat . sortBy (comparing length)) $ tail fss where
--      fss = [] : map fact [1..] where
--            fact x = [x] : [d : fs | d <- [2..x], let (x',r) = divMod x d,
--                                     r == 0, fs <- fss !! x', d <= head fs]

-- instance OEIS 162551 where
--   oeisIx n = (oeisIx @51601) (2 * n) n

-- instance OEIS 162608 where
--   oeis = tablList @162608
-- instance Table 162608 where
--   rowT n = (tabl @162608) !! n
--   tabl = map fst $ iterate f ([1], 1) where
--      f (row, n) = (row' ++ [head row' + last row'], n + 1) where
--        row' = map (* n) row

-- instance OEIS 162610 where
--   oeis = tablList @162610
-- instance Table 162610 where
--   rowCol n k = k * n - k + n
--   rowT n = map (oeisIx n) [1..n]
--   tabl = map (rowT @162610) [1..]

-- instance OEIS 162643 where
--   oeis = filter ((== 0) . (oeisIx @209229) . (oeisIx @5)) [1..]

-- instance OEIS 162711 where
--   oeis = tablList @162711
-- instance Table 162711 where
--   rowCol = rowCol_off @162711 @1 @1
--   rowT   = rowT_off   @162711 @1
--   tabl = map (map (read . concatMap show) . tail . inits) $
--                  zipWith take [1..] $ tails (oeis @7376) :: [[Integer]]

-- instance OEIS 162741 where
--   oeis = tablList @162741
-- instance Table 162741 where
--   rowCol n k = (tabf @162741) !! (n - 1) !! (k-1)
--   rowT n = (tabf @162741) !! (n - 1)
--   tabf = iterate
--      (\row -> zipWith (+) ([0] ++ row ++ [0]) (row ++ [0,1])) [1]

-- instance OEIS 162909 where
--   import Ratio
--   bird :: [Rational]
--   bird = branch (recip . succ) (succ . recip) 1
--   branch f g a = a : branch f g (f a) \/ branch f g (g a)
--   (a : as) \/ bs = a : (bs \/ as)
--   oeisIx = map numerator bird
--   oeisIx = map denominator bird

-- instance OEIS 162910 where
--   import Ratio; bird :: [Rational]; bird = branch (recip . succ) (succ . recip) 1; branch f g a = a : branch f g (f a) \/ branch f g (g a); (a : as) \/ bs = a : (bs \/ as); (oeisIx @162909) = map numerator bird; (oeisIx @162910) = map denominator bird

-- instance OEIS 162995 where
--   oeis = tablList @162995
-- instance Table 162995 where
--   rowCol = rowCol_off @162995 @1 @1
--   rowT   = rowT_off   @162995 @1
--   tabl = map fst $ iterate f ([1], 3)
--      where f (row, i) = (map (* i) row ++ [1], i + 1)

-- instance OEIS 163271 where
--   oeisIx = sum . (rowT @128966) . (subtract 1)

-- instance OEIS 163575 where
--   oeisIx n = f n' where
--      f 0 = 0
--      f x = if b == parity then f x' else x  where (x', b) = divMod x 2
--      (n', parity) = divMod n 2

instance OEIS 163617 where
  oeisIx (fi->n) = fi do n .|. shiftL n 1 :: Integer

-- instance OEIS 163753 where
--   oeis = filter ((> 0) . (oeisIx @39997)) [0..]

instance OEIS 163866 where
  oeis = scanl1 (+) $ concat (tabl @7318)

-- instance OEIS 163870 where
--   oeis = tablList @163870
-- instance Table 163870 where
--   rowCol n k = (tabf @163870) !! (n - 1) !! (k-1)
--   rowT n = (tabf @163870) !! (n - 1)
--   tabf = filter (not . null) $ map tail (tabf @27751)

-- instance OEIS 163925 where
--   oeis = tablList @163925
-- instance Table 163925 where
--   rowCol n k = (tabf @163925) !! (n - 1) !! (k-1)
--   tabf = map (rowT @163925) [1..]
--   rowT n = [k | k <- takeWhile (<= n ^ 2) (oeis @18252),
--                        let k' = k * n, let divs = (rowT @27750) k',
--                        last (takeWhile ((<= k') . (^ 2)) divs) == n]

-- instance OEIS 163926 where
--   oeisIx = genericLength . (rowT @163925)

-- instance OEIS 163974 where
--   oeisIx n = f (oeis @40) 1 nn 0 where
--      f (p:ps) l nl xx
--        | yy > nl   = 0
--        | yy < nl   = f ps (l + 1) (nl + nn) yy + f ps l nl xx
--        | otherwise = if w == n then 1 else 0
--        where w = if r == 0 then (oeisIx @196) m else 0
--              (m, r) = divMod yy l
--              yy = xx + p * p
--      nn = n ^ 2

-- instance OEIS 164055 where
--   oeis = 1 : 10 : 325 : zipWith (+) (oeis @164055)
--      (map (* 35) $ tail $ zipWith (-) (tail (oeis @164055)) (oeis @164055))

-- instance OEIS 164283 where
--   oeisIx n = f [1..] 1 nn 0 where
--      f (k:ks) l nl xx
--        | yy > nl  = 0
--        | yy < nl  = f ks (l + 1) (nl + nn) yy + f ks l nl xx
--        | otherwise = if w == n then 1 else 0
--        where w = if r == 0 then (oeisIx @196) m else 0
--              (m, r) = divMod yy l
--              yy = xx + k * k
--      nn = n ^ 2

-- instance OEIS 164292 where
--   oeisIx 1 = 0
--   oeisIx 2 = 0
--   oeisIx n = signum (oeisIx' n * (oeisIx' (n - 2) + (oeisIx @10051)' (n + 2)))

-- instance OEIS 164296 where
--   oeisIx n = genericLength [m | let ts = (rowT @38566) n, m <- ts,
--                           all ((== 1) . gcd m) (ts \\ [m])]

-- instance OEIS 164297 where
--   oeisIx n = genericLength [m | let ts = (rowT @38566) n, m <- ts,
--                           any ((> 1) . gcd m) (ts \\ [m])]

-- instance OEIS 164338 where
--   oeis = iterate (oeisIx @36839) 12334444

-- instance OEIS 164349 where
--   oeisIx n = if n == 0 then 0 else until (<= 1) (oeisIx . subtract 1) n

instance OEIS 164514 where
  oeis = 1 : (oeis @37)

-- instance OEIS 164555 where
--   oeis = 1 : map (numerator . sum) (zipWith (zipWith (%))
--      (zipWith (map . (*)) (tail (oeis @142)) (tabf @242179)) (oeisIx @106831)_tabf)

instance OEIS 164632 where
  oeis = 1 : concatMap (\x -> genericReplicate (2^ (2*x - 1)) (2^x)) [1..]

-- instance OEIS 164652 where
--   oeis = tablList @164652
-- instance Table 164652 where
--   rowT n = (tabl @164652) !! n
--   tabl = [0] : tail (zipWith (zipWith (*)) (tabl @128174) $
--      zipWith (map . flip div) (tail (oeis @217)) (map init $ tail (tabl @130534)))

-- instance OEIS 164861 where
--   oeis = filter ((== 0) . (oeisIx @178225)) (oeis @5408)

-- instance OEIS 164874 where
--   oeis = tablList @164874
-- instance Table 164874 where
--   rowCol = rowCol_off @164874 @1 @1
--   rowT   = rowT_off   @164874 @1
--   tabl = map reverse $ iterate f [2] where
--      f xs@ (x:_) = (2 * x + 2) : map ((+ 1) . (* 2)) xs

-- instance OEIS 165153 where
--   oeisIx = product . (rowT @165416)

-- instance OEIS 165157 where
--   oeis = scanl (+) 0 (oeis @133622)

-- instance OEIS 165413 where
--   oeisIx = genericLength . nub . map length . group . (rowT @30308)

-- instance OEIS 165416 where
--   oeis = tablList @165416
-- instance Table 165416 where
--   rowCol n k = (tabf @165416) !! (n - 1) !! (k-1)
--   rowT n = (tabf @165416) !! (n - 1)
--   tabf = map (dropWhile (== 0)) $ tail (tabf @119709)

-- instance OEIS 165430 where
--   oeis = tablList @165430
-- instance Table 165430 where
--   rowCol n k = last (oeisIx_row n `intersect` (rowT @77610) k)
--   rowT n = map (oeisIx n) [1..n]
--   tabl = map (rowT @165430) [1..]

-- instance OEIS 165476 where
--   oeisIx = flip legendreSymbol 131071

-- instance OEIS 165560 where
--   oeisIx = flip mod 2 . (oeisIx @3415)

-- instance OEIS 165634 where
--   oeis = concatMap (\x ->
--      if (oeisIx @10051) x == 1 then [oeisIx x, x] else [x]) [1..]

-- instance OEIS 165712 where
--   oeisIx n = head [x | x <- [n + 1 ..], (oeisIx @1222) x == (oeisIx @1222) n]

-- instance OEIS 165713 where
--   oeisIx n = head [x | x <- [n + 1 ..], (oeisIx @1221) x == (oeisIx @1221) n]

instance OEIS 165900 where
  oeisIx n = n * (n - 1) - 1

-- instance OEIS 165909 where
--   oeisIx n = sum $ nub $ map (`mod` n) $
--                           take (fromInteger n) $ tail (oeis @290)

-- instance OEIS 165930 where
--   oeis = 1 : zipWith (-) (tail (oeis @64491)) (oeis @64491)

instance OEIS 166060 where
  oeis = map fst $ iterate (\ (u, v) -> (3 * (u + v), 2 * v)) (1, 1)

-- instance OEIS 166133 where
--   oeisIx n = (oeis @166133) !! (n - 1)
--   oeis = 1 : 2 : 4 : f (3:[5..]) 4 where
--      f zs x = y : f (delete y zs) y where
--               y = head $ isect (oeisIx_row' (x ^ 2 - 1)) zs

-- instance OEIS 166234 where
--   oeisIx = product . map (oeisIx . fi) . (rowT @124010)

-- instance OEIS 166238 where
--   oeisIx = a' 0 where a' n = n : takeWhile (< (n - 2)) (oeisIx @166238) ++ a' (n + 1)

-- instance OEIS 166251 where
--   oeis = concat $ (filter ((== 1) . length)) $
--      map (filter ((== 1) . (oeisIx @10051))) $
--      zipWith enumFromTo (oeis @100484) (tail (oeis @100484))

-- instance OEIS 166350 where
--   oeis = tablList @166350
-- instance Table 166350 where
--   rowCol = rowCol_off @166350 @1 @1
--   rowT   = rowT_off   @166350 @1
--   tabl = tail $ inits $ tail (oeis @142)

-- instance OEIS 166360 where
--   oeis = tablList @166360
-- instance Table 166360 where
--   rowCol = rowCol_off @166360 @1 @1
--   rowT   = rowT_off   @166360 @1
--   tabl = map (map (flip mod 2)) (tabl @1263)

instance OEIS 166370 where
  oeis = filter ((== 17) . (oeisIx @7953)) [0..]

instance OEIS 166459 where
  oeis = filter ((== 19) . (oeisIx @7953)) [0..]

-- instance OEIS 166474 where
--   oeis = 1 : 2 : zipWith (+)
--      (tail (oeis @166474)) (zipWith (*) (oeis @166474) $ drop 2 (oeis @217))

-- instance OEIS 166573 where
--   oeisIx n = (oeis @166573) !! (n - 1)
--   oeis = filter (("13" `isInfixOf`) . show) (oeis @40)

-- instance OEIS 166863 where
--   oeis = 1 : zipWith (+) (oeis @166863) (drop 3 $ map (* 2) (oeis @45))

-- instance OEIS 166920 where
--   oeis = scanl (+) 0 (oeis @14551)

-- instance OEIS 167008 where
--   oeisIx = sum . (rowT @219206)

-- instance OEIS 167151 where
--   oeisIx n = (oeis @167151) !! n
--   oeis = 0 : concat (transpose [oeis, (oeis @30124)])

-- instance OEIS 167376 where
--   import Data.List.Ordered (minus)
--   oeisIx n = (oeis @167376) !! n
--   oeis = minus [0..] (oeis @41)

-- instance OEIS 167377 where
--   import Data.List.Ordered (minus)
--   oeisIx n = (oeis @167377) !! n
--   oeis = minus [0..] (oeis @9)

-- instance OEIS 167392 where
--   import Data.List.Ordered (member)
--   oeisIx = fromEnum . flip member (oeis @41)

-- instance OEIS 167393 where
--   import Data.List.Ordered (member)
--   oeisIx = fromEnum . flip member (oeis @9)

-- instance OEIS 167489 where
--   oeisIx = product . map length . group . (rowT @30308)

-- instance OEIS 167535 where
--   oeis = filter ((> 0) . (oeisIx @193095)) (oeis @40)

-- instance OEIS 167700 where
--   oeisIx = p (oeis @16754) where
--      p _  0 = 1
--      p (q:qs) m = if m < q then 0 else p qs (m - q) + p qs m

-- instance OEIS 167772 where
--   oeis = tablList @167772
-- instance Table 167772 where
--   rowCol n k = genericIndex (oeisIx_row n) k
--   rowT n = genericIndex (tabl @167772) n
--   tabl = [1] : [0, 1] :
--                  map (\xs@ (_:x:_) -> x : xs) (tail (tabl @65602))

-- instance OEIS 167831 where
--   oeisIx n = head [x | let ds = (rowT @31298) n, x <- [n, n - 1 ..],
--                         all (< 10) $ zipWith (+) ds (oeisIx_row x)]

-- instance OEIS 167832 where
--   b167832 n = (oeisIx @167831) n + n

-- instance OEIS 167877 where
--   oeisIx n = head [x | let ts = (rowT @30341) n, x <- [n, n - 1 ..],
--                         all (< 3) $ zipWith (+) ts (oeisIx_row x)]

-- instance OEIS 167878 where
--   oeisIx n = (oeisIx @167877) n + n

-- instance OEIS 167939 where
--   a :: [Integer]
--   a = scanl1 (+) . (!! 1) . transpose . fix $ map ((1:) . zipWith (*) (scanl1 (*) l) . zipWith poly (scanl1 (+) l)) . scanl (flip (:)) [] . zipWith (zipWith (*)) pascal where l = iterate (2*) 1
--   pascal :: [[Integer]]
--   pascal = iterate (\l -> zipWith (+) (0: l) l) (1: repeat 0)
--   -- evaluate a polynomial at a given value
--   poly :: (Num a) => a -> [a] -> a
--   poly t = foldr (\e i -> e + t*i) 0

-- instance OEIS 168036 where
--   oeisIx n = (oeisIx @3415) n - n

instance OEIS 168046 where
  oeisIx = fi . fromEnum . ch0 where
     ch0 x = x > 0 && (x < 10 || d > 0 && ch0 x') where (x', d) = divMod x 10

-- instance OEIS 168183 where
--   oeis = [1..8] ++ map (+ 9) (oeis @168183)

-- instance OEIS 168184 where
--   oeisIx = (1 -) . (0 ^) . (`mod` 10)
--   oeis = cycle [0,1,1,1,1,1,1,1,1,1]

-- instance OEIS 168223 where
--   oeisIx n = (oeisIx @6369) n - (oeisIx @6368) n

-- instance OEIS 168396 where
--   oeis = tablList @168396
-- instance Table 168396 where
--   rowCol = rowCol_off @168396 @1 @1
--   rowT   = rowT_off   @168396 @1
--   tabl = [1] : f [[1]] where
--      f xss = ys : f (ys : xss) where
--        ys = (map sum $ zipWith take [2..] xss) ++ [1]

-- instance OEIS 168559 where
--   oeis = scanl (+) 0 $ drop 2 (oeis @290)

-- instance OEIS 169611 where
--   oeisIx = (oeisIx @1222) . (oeisIx @65331)

-- instance OEIS 169630 where
--   oeisIx n = (oeisIx @7598) n * n

-- instance OEIS 169669 where
--   oeisIx n = (oeisIx @30) n * mod n 10

-- instance OEIS 169718 where
--   oeisIx = p [1,5,10,25,50,100] where
--      p _          0 = 1
--      p []         _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

instance OEIS 169810 where
  oeisIx (fi->n) = fi do n ^ 2 `xor` n :: Integer

-- instance OEIS 169834 where
--   oeis = f (oeis @51950) [0..] where
--      f (0:0:ws) (x:y:zs) = y : f (0:ws) (y:zs)
--      f (_:v:ws) (_:y:zs) = f (v:ws) (y:zs)

-- instance OEIS 169835 where
--   oeis = f [] (tail (oeis @217)) (tail (oeis @290)) where
--      f ts us'@ (u:us) vs'@ (v:vs)
--        | u <= v = f (u : ts) us vs'
--        | any p $ map (divMod v) ts = v : f ts us' vs
--        | otherwise = f ts us' vs
--        where p (q, r) = r == 0 && (oeisIx @10054) q == 1

-- instance OEIS 169837 where
--   oeisIx n = (oeis @169837) !! (n - 1)
--   oeis = 3 : ekg 3 (2 : [4..]) where
--      ekg x zs = f zs where
--          f (y:ys) = if gcd x y > 1 then y : ekg y (delete y zs) else f ys

-- instance OEIS 169849 where
--   oeisIx n = (oeis @169849) !! (n - 1)
--   oeis = 9 : ekg 9 (delete 9 [2..]) where
--      ekg x zs = f zs where
--          f (y:ys) = if gcd x y > 1 then y : ekg y (delete y zs) else f ys

-- instance OEIS 169936 where
--   import Data.Map (empty, insertWith, elems)
--   import Data.Text (unpack); import Data.Maybe (fromJust)
--   import Text.Numeral.Grammar.Reified (defaultInflection)
--   import qualified Text.Numeral.Language.EN as EN
--   oeisIx n = (oeis @169936) !! (n - 1)
--   oeis = sort $ concat $ filter ((> 1) . length) $
--      elems $ fill [1..999] empty where
--         fill [] m = m
--         fill (z:zs) m = fill zs $ insertWith (++) (sort $ engl z) [z] m
--         engl :: Integer -> String
--         engl = unpack . fromJust . EN.us_cardinal defaultInflection

-- instance OEIS 169964 where
--   oeis = map (* 5) (oeis @7088)

-- instance OEIS 169965 where
--   oeis = map (* 2) (oeis @7088)

-- instance OEIS 169966 where
--   oeis = map (* 3) (oeis @7088)

-- instance OEIS 169967 where
--   oeis = map (* 4) (oeis @7088)

-- instance OEIS 170803 where
--   oeis = scanl1 (+) (oeis @6899)

-- instance OEIS 170942 where
--   oeis = tablList @170942
-- instance Table 170942 where
--   rowCol n k = (tabf @170942) !! (n - 1) (k-1)
--   rowT n = map fps $ sort $ permutations [1..n] where
--      fps perm = sum $ map fromEnum $ zipWith (==) perm [1..n]
--   tabf = map (rowT @170942) [1..]

-- instance OEIS 170949 where
--   oeis = tablList @170949
-- instance Table 170949 where
--   rowCol n k = (tabf @170949) !! (n - 1) !! (k-1)
--   rowT n = (tabf @170949) !! (n - 1)
--   tabf = [1] : (map fst $ iterate f ([3,2,4], 3)) where
--     f (xs@ (x:_), i) = ([x + i + 2] ++ (map (+ i) xs) ++ [x + i + 3], i + 2)
--   oeis = concat (tabf @170949)

-- instance OEIS 171135 where
--   oeisIx n = head [p | p <- (oeis @40), let x = p + 2 * n,
--                         oeisIx x == 1 || (oeisIx @10051)' x == 1]

-- instance OEIS 171137 where
--   oeisIx n = head [m | m <- [1..], (oeisIx @171135) m == (oeisIx @40) n]

-- instance OEIS 171462 where
--   oeisIx n = div n p * (p - 1) where p = (oeisIx @6530) n

-- instance OEIS 171492 where
--   oeisIx n = (oeis @171492) !! (n - 1)
--   oeis = filter f [1..] where
--      f x = any ((> 0) . mod x) ds where
--        ds = map digitToInt (if c == '0' then cs else cs')
--        cs'@ (c:cs) = nub $ sort $ show x

-- instance OEIS 171637 where
--   oeis = tablList @171637
-- instance Table 171637 where
--   rowCol n k = (tabf @171637) !! (n - 2) !! (k-1)
--   tabf = map (rowT @171637) [2..]
--   rowT n = reverse $ filter ((== 1) . (oeisIx @10051)) $
--      map (2 * n -) $ takeWhile (<= 2 * n) (oeis @40)

-- instance OEIS 171746 where
--   oeisIx = (+ 1) . length . takeWhile (== 0) .
--                              map (oeisIx @10052) . tail . iterate (oeisIx @28392)

-- instance OEIS 171797 where
--   oeisIx n = read $ concatMap (show . ($ n))
--                      [oeisIx, (oeisIx @196563), (oeisIx @196564)] :: Integer

-- instance OEIS 171798 where
--   oeisIx n = read $ concatMap (show . ($ n))
--                      [oeisIx, (oeisIx @23416), (oeisIx @120)] :: Integer

-- instance OEIS 171862 where
--   oeisIx n = 1 + fromJust (elemIndex n (oeis @181391))

-- instance OEIS 171865 where
--   oeisIx n = (oeis @171865) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @181391)

-- instance OEIS 171874 where
--   oeisIx n = (oeis @171874) !! n
--   oeis = [0, 0, 0, 1, 1] ++ zipWith5 (\z y x w v -> z + x*y + w^v)
--      (drop 4 (oeis @171874)) (drop 3 (oeis @171874))
--      (drop 2 (oeis @171874)) (tail (oeis @171874)) (oeis @171874)

-- instance OEIS 171886 where
--   oeisIx n = (oeis @171886) !! (n - 1)
--   oeis = elemIndices 1 $ map (oeisIx @209229) $ concat (tabl @8949)

-- instance OEIS 171901 where
--   oeisIx n = (oeis @171901) !! n
--   oeis = elemIndices 0 (oeis @196368)

-- instance OEIS 171903 where
--   oeisIx n = (oeis @171903) !! (n - 1)
--   oeis = elemIndices 0 $
--                  zipWith (+) (oeis @196368) $ tail (oeis @196368)

-- instance OEIS 171904 where
--   oeisIx n = head [m | m <- (oeis @171901), (oeisIx @196368) (m + n) == 0]

-- instance OEIS 171942 where
--   oeisIx 1 = 0
--   oeisIx n = head [m | m <- [1..], (oeisIx @120) (m + n - 1) == (oeisIx @120) (n - 1)]

-- instance OEIS 171946 where
--   oeisIx n = (oeis @171946) !! (n - 1)
--   oeis = 0 : f [2..] where
--      f (w:ws) = w : f (delete (2 * w - 1) ws)

-- instance OEIS 171947 where
--   oeisIx n = (oeis @171947) !! (n - 1)
--   oeis = 1 : f [2..] where
--      f (w:ws) = y : f (delete y ws) where y = 2 * w - 1

-- instance OEIS 171971 where
--   oeisIx = floor . (/ 4) . (* sqrt 3) . fromInteger . (oeisIx @290)

-- instance OEIS 171972 where
--   oeisIx = floor . (* sqrt 3) . fromInteger . (oeisIx @290)

-- instance OEIS 171973 where
--   oeisIx = floor . (/ 12) . (* sqrt 2) . fromInteger . (oeisIx @578)

instance OEIS 171974 where
  oeisIx = floor . (/ 3) . (* sqrt 6) . fi . succ

instance OEIS 171975 where
  oeisIx = floor . (/ 4) . (* sqrt 6) . fi . succ

-- instance OEIS 171978 where
--   oeisIx n = q (fromInteger n) $ zipWith (%) [1..n] [2..] where
--      q 0 _         = 1
--      q _ []        = 0
--      q x ks'@ (k:ks)
--        | x < k     = fromEnum (x == 0)
--        | otherwise = q (x - k) ks' + q x ks

-- instance OEIS 172287 where
--   oeis = filter
--      (\p -> (oeisIx @10051)' (2 * p - 3) + (oeisIx @10051)' (3 * p - 2) == 1) (oeis @40)

-- instance OEIS 172471 where
--   oeisIx = (oeisIx @196) . (* 2)

-- instance OEIS 173018 where
--   oeis = tablList @173018
-- instance Table 173018 where
--   rowT n = (tabl @173018) !! n
--   tabl = map reverse (tabl @123125)

-- instance OEIS 173019 where
--   oeisIx = foldr (\t v -> 3 * v + t) 0 . map toInteger . (rowT @83093)

-- instance OEIS 173333 where
--   oeis = tablList @173333
-- instance Table 173333 where
--   rowCol = rowCol_off @173333 @1 @1
--   rowT   = rowT_off   @173333 @1
--   tabl = map fst $ iterate f ([1], 2)
--      where f (row, i) = (map (* i) row ++ [1], i + 1)

-- instance OEIS 173517 where
--   oeisIx n = (1 - (oeisIx @10052) n) * (oeisIx @28391) n

-- instance OEIS 173525 where
--   oeisIx = (+ 1) . (oeisIx @53824) . (subtract 1)

-- instance OEIS 173540 where
--   oeis = tablList @173540
-- instance Table 173540 where
--   rowCol n k = (rowT @173540) n !! (k-1)
--   rowT n = (tabf @173540) !! (n - 1)
--   tabf = [0] : [0] : map
--                  (\v -> [w | w <- [2 .. v - 1], mod v w > 0]) [3..]

-- instance OEIS 173541 where
--   oeis = tablList @173541
-- instance Table 173541 where
--   rowCol = rowCol_off @173541 @1 @1
--   rowT   = rowT_off   @173541 @1
--   tabl = zipWith (zipWith (*))
--                          (tabl @2260) $ map (map (1 -)) (tabl @51731)

-- instance OEIS 173557 where
--   oeisIx 1 = 1
--   oeisIx n = product $ map (subtract 1) $ (rowT @27748) n

instance OEIS 173639 where
  oeis = filter (odd . (oeisIx @7953) . (* 11)) [0..]

-- instance OEIS 173694 where
--   oeis = filter ((== 1) . (oeisIx @10052) . (oeisIx @2322)) [1..]

-- instance OEIS 173732 where
--   oeis = f $ tail (oeis @25480) where f (x : _ : _ : xs) = x : f xs

-- instance OEIS 173927 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` map (+ 1) (oeis @185816))

-- instance OEIS 173964 where
--   oeis = concat $ [1] : f [[1]] where
--      f xss = yss ++ f yss where
--        yss = [y] : map (++ [y]) xss
--        y = head (head xss) + 1

-- instance OEIS 173990 where
--   :m Math.Operad
--   let a = corolla 1 [1,2]
--   let t1_23 = shuffleCompose 2 [1,2,3] a a
--   let t12_34 = shuffleCompose 1 [1,2,3,4] t1_23 a
--   let t13_24 = shuffleCompose 1 [1,3,2,4] t1_23 a
--   let t14_23 = shuffleCompose 1 [1,4,2,3] t1_23 a
--   let r1 = (oet t12_34) - (oet t13_24) :: OperadElement Integer Rational PathPerm
--   let r2 = (oet t14_23) - (oet t13_24) :: OperadElement Integer Rational PathPerm
--   let gens = [r1,r2]
--   let cors = [a]
--   let gb = operadicBuchberger gens
--   let lms = map leadingMonomial gb
--   let computeStep d = basisElements cors lms d
--   map (length . computeStep) [1..]

-- instance OEIS 174168 where
--   oeis = [1,2,5,17] ++ zipWith div (zipWith (+)
--      (zipWith (*) (tail (oeis @174168)) (drop 3 (oeis @174168)))
--                   (map ((* 3) . (^ 2)) (drop 2 (oeis @174168)))) (oeis @174168)

-- instance OEIS 174332 where
--   oeisIx = (oeisIx @208238) . (oeisIx @40)

-- instance OEIS 174375 where
--   oeisIx n = n ^ 2 - (oeisIx @169810) n

-- instance OEIS 174382 where
--   oeis = tablList @174382
-- instance Table 174382 where
--   rowCol n k = (tabf @174382) !! (n - 1) !! k
--   rowT n = (tabf @174382) !! (n - 1)
--   tabf = iterate f [0] where
--      f xs = g (xs ++ [0, 0 ..]) [0..] (map head zs) (map length zs)
--        where g _ _ _ [] = []
--              g (u:us) (k:ks) hs'@ (h:hs) vs'@ (v:vs)
--                | k == h = u + v : g us ks hs vs
--                | k /= h = u : g us ks hs' vs'
--              zs = group $ sort xs

-- instance OEIS 174429 where
--   oeisIx = (oeisIx @45) . (oeisIx @8908)

instance OEIS 174452 where
  oeisIx = (`mod` 1000) . (^ 2)

-- instance OEIS 174466 where
--   oeisIx n = sum $ zipWith3 (((*) .) . (*))
--                     divs (map (oeisIx @203) $ reverse divs) (map (oeisIx @5) divs)
--                     where divs = (rowT @27750) n

-- instance OEIS 174813 where
--   oeis = f [1] where
--      f ds = foldr (\d v -> 10 * v + d) 0 ds : f (s ds)
--      s [] = [1]; s (9:ds) = 1 : s ds; s (d:ds) = 3*d : ds

-- instance OEIS 174863 where
--   oeis = scanl1 (+) (oeis @76479)

-- instance OEIS 174903 where
--   oeisIx n = genericLength [d | let ds = (rowT @27750) n, d <- ds,
--                       not $ null [e | e <- [d+1 .. 2*d-1] `intersect` ds]]

-- instance OEIS 174904 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` map (oeisIx @174903) [1..])

-- instance OEIS 174905 where
--   oeis = filter ((== 0) . (oeisIx @174903)) [1..]

-- instance OEIS 174956 where
--   oeisIx n = (oeis @174956) !! (fromInteger n - 1)
--   oeis = unfoldr x (1, 1, (oeis @1358)) where
--      x (i, z, ps'@ (p:ps)) | i == p = Just (z, (i + 1, z + 1, ps))
--                           | i /= p = Just (0, (i + 1, z, ps'))

-- instance OEIS 174973 where
--   oeis = filter f [1..] where
--      f n = all (<= 0) $ zipWith (-) (tail divs) (map (* 2) divs)
--            where divs = (rowT @27750)' n

-- instance OEIS 175046 where
--   oeisIx = foldr (\b v -> 2 * v + b) 0 .
--             concatMap (\bs@ (b:_) -> b : bs) . group . (rowT @30308)

-- instance OEIS 175047 where
--   oeisIx = foldr (\b v -> 2 * v + b) 0 . concatMap
--      (\bs@ (b:_) -> if b == 0 then 0 : bs else bs) . group . (rowT @30308)

-- instance OEIS 175048 where
--   oeisIx = foldr (\b v -> 2 * v + b) 0 . concatMap
--      (\bs@ (b:_) -> if b == 1 then 1 : bs else bs) . group . (rowT @30308)

-- instance OEIS 175118 where
--   oeis = 2 : f 2 (oeis @40) where
--      f x ps = g $ dropWhile (<= x) ps where
--        g (q:qs) | (oeisIx @10051)' (q - x + 1) == 1 = g qs
--                 | otherwise                 = q : f q qs

-- instance OEIS 175119 where
--   oeis = map (+ 1) $ zipWith (-) (tail (oeis @175118)) (oeis @175118)

-- instance OEIS 175130 where
--   oeisIx n = (oeis @175130) !! (n - 1)
--   oeis = map (+ 1) $ findIndices ((== 0) . (oeisIx @212793)) $ tail (oeis @45)

-- instance OEIS 175332 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @175332) !! (n - 1)
--   oeis = f $ singleton 3 where
--     f s = x : f (if even x then insert z s' else insert z $ insert (z+1) s')
--           where z = 2*x; (x, s') = deleteFindMin s

-- instance OEIS 175498 where
--   oeisIx n = (oeis @175498) !! (n - 1)
--   oeis = 1 : f 1 [2..] [] where
--      f x zs ds = g zs where
--        g (y:ys) | diff `elem` ds = g ys
--                 | otherwise      = y : f y (delete y zs) (diff:ds)
--                 where diff = y - x

-- instance OEIS 175499 where
--   oeis = zipWith (-) (tail (oeis @175498)) (oeis @175498)

-- instance OEIS 175522 where
--   oeisIx n = (oeis @175522) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @192895)

-- instance OEIS 175524 where
--   oeisIx n = (oeis @175524) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (< 0) (oeis @192895)

-- instance OEIS 175526 where
--   oeisIx n = (oeis @175526) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (> 0) (oeis @192895)

-- instance OEIS 175592 where
--   oeis = filter (z 0 0 . (rowT @27746)) $ [1..] where
--      z u v []     = u == v
--      z u v (p:ps) = z (u + p) v ps || z u (v + p) ps

-- instance OEIS 175688 where
--   oeis = filter f [0..] where
--      f x = m == 0 && ("0123456789" !! avg) `elem` show x
--            where (avg, m) = divMod (oeisIx x) (oeisIx x)

-- instance OEIS 175755 where
--   oeis = m (map (^ 48) (oeis @40)) (map (^ 6) (oeis @6881)) where
--      m xs'@ (x:xs) ys'@ (y:ys) | x < y = x : m xs ys'
--                              | otherwise = y : m xs' ys

-- instance OEIS 175836 where
--   oeis = scanl1 (*) (oeis @1615)

-- instance OEIS 175840 where
--   oeis = tablList @175840
-- instance Table 175840 where
--   rowCol n k = (tabf @175840) !! n !! k
--   rowT n = (tabf @175840) !! n
--   tabf = iterate (\xs@ (x:_) -> x * 3 : map (* 2) xs) [1]

-- instance OEIS 175872 where
--   oeisIx = f . (rowT @30308) where
--      f xs | all (== 1) xs = length xs
--           | otherwise     = f $ map genericLength $ group xs

-- instance OEIS 175880 where
--   oeisIx n = (oeis @175880) !! (n - 1)
--   oeis = 1 : f [2..] [2..] where
--      f (x:xs) (y:ys) | x == y    = x : (f xs $ delete (2*x) ys)
--                      | otherwise = 0 : (f xs (y:ys))
--   for_bFile = take 10000 (oeis @175880)

-- instance OEIS 175885 where
--   oeis = 1 : 10 : map (+ 11) (oeis @175885)

-- instance OEIS 175886 where
--   oeis = 1 : 12 : map (+ 13) (oeis @175886)

-- instance OEIS 175887 where
--   oeis = 1 : 14 : map (+ 15) (oeis @175887)

-- instance OEIS 175899 where
--   oeis = 0 : 2 : 3 : 10 : zipWith (+) (map (* 2) (oeis @175899))
--      (zipWith (+) (tail (oeis @175899)) (drop 2 (oeis @175899)))

-- instance OEIS 175911 where
--   oeisIx n = foldl1 (\v d -> b * v + d) rls where
--      b = maximum rls + 1
--      rls = (rowT @101211) n

-- instance OEIS 175943 where
--   oeis = scanl1 (*) $ concat (tabf @27746)

-- instance OEIS 175944 where
--   oeis =
--      concat $ zipWith ($) (map replicate (oeis @18252)) (oeis @18252)

-- instance OEIS 175965 where
--   oeis = scanl (+) 1 (oeis @8578)

-- instance OEIS 175967 where
--   oeis = scanl (+) 1 (oeis @18252)

instance OEIS 176059 where
  oeisIx = (3 -) . (`mod` 2)

-- instance OEIS 176271 where
--   oeis = tablList @176271
-- instance Table 176271 where
--   rowCol = rowCol_off @176271 @1 @1
--   rowT   = rowT_off   @176271 @1
--   tabl = f 1 (oeis @5408) where
--      f x ws = us : f (x + 1) vs where (us, vs) = splitAt x ws

-- instance OEIS 176352 where
--   import Data.Set (singleton, insert, member)
--   oeisIx n = (oeis @176352) !! (n - 1)
--   oeis = 1 : f 1 (singleton 1) (concat $ drop 2 $
--      zipWith (zipWith (%)) (tabf @38566) $ map reverse (tabf @38566))
--      where f x ws qs = h qs
--              where h (r:rs) | denominator y /= 1 || v `member` ws = h rs
--                             | otherwise = v : f y (insert v ws) (delete r qs)
--                             where v = numerator y; y = x * r

-- instance OEIS 176892 where
--   oeisIx 0 = 2oeisIx n = foldl (\v d -> 10 * v + d + 2) 0 $
--      unfoldr (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2) n

-- instance OEIS 176995 where
--   oeis = filter ((> 0) . (oeisIx @230093)) [1..]

-- instance OEIS 177000 where
--   oeis = filter (all (\x -> even x || (oeisIx @10051)' x == 1) .
--                          (init . (rowT @70165))) (oeis @40)

-- instance OEIS 177047 where
--   toBinary 0 = []
--   toBinary n = toBinary (n `div` 2) ++ [odd n]
--   a = [2 + fromJust (findIndex (isPrefixOf (toBinary n)) [toBinary (n ^ k) | k <- [2..]]) | n <- [1..]]

-- instance OEIS 177048 where
--   toBinary 0 = []
--   toBinary n = toBinary (n `div` 2) ++ [odd n]
--   a = [1 + fromJust (findIndex (isPrefixOf (toBinary n)) [toBinary (k ^ n) | k <- [1..]]) | n <- [1..]]

-- instance OEIS 177062 where
--   toBinary 0 = []
--   toBinary n = toBinary (n `div` 2) ++ [odd n]
--   lcstr xs ys = maximum . concat $ [f xs' ys | xs' <- tails xs] ++ [f xs ys' | ys' <- drop 1 $ tails ys] where f xs ys = scanl g 0 $ zip xs ys; g z (x, y) = if x == y then z + 1 else 0
--   a = [lcstr (toBinary $ n) (toBinary $ n^2) | n <- [1..]]

-- instance OEIS 177729 where
--   oeisIx = head . (rowT @192719)

-- instance OEIS 177853 where
--   oeis = scanl1 (+) (oeis @18805)

-- instance OEIS 177869 where
--   base_weight b g n | n == 0 = 0 | otherwise = (base_weight b g (n `div` b)) + (g $ n `mod` b)
--   interesting b g = filter f [1..] where f n = n `mod` (base_weight b g n) == 0
--   bin_interesting g = interesting 2 g
--   weights l n | (n >=0) && ((length l) > fromInteger n) = l !! fromInteger n | otherwise = 0
--   cnst = weights [1, 1]
--   let sequence = bin_interesting cnst

-- instance OEIS 177904 where
--   oeis = 1 : 1 : 1 : (map (oeisIx @6530) $ zipWith (+)
--      (oeis @177904) (tail $ zipWith (+) (oeis @177904) $ tail (oeis @177904)))

-- instance OEIS 177994 where
--   oeis = tablList @177994
-- instance Table 177994 where
--   rowT n = (tabl @177994) !! n
--   tabl = [1] : [1,1] : map f (tabl @177994)
--                  where f xs@ (x:_) = (x + 1) : 1 : xs

-- instance OEIS 178063 where
--   oeis = scanl1 (+) (oeis @7464)

-- instance OEIS 178138 where
--   oeis = (iterate (scanl1 (+)) (oeis @40)) !! 4

-- instance OEIS 178156 where
--   oeisIx n = (oeis @178156) !! (n - 1)
--   oeis = insert 9 $ insert 8 (oeis @1751)

-- instance OEIS 178158 where
--   oeisIx n = (oeis @178158) !! (n - 1)
--   oeis = filter (\suff -> all ((== 0) . (mod suff))
--      (map read $ tail $ init $ tails $ show suff :: [Integer])) (oeis @67251)

-- instance OEIS 178212 where
--   oeis = filter f [1..] where
--      f x = length (oeisIx_row x) == 3 && any (> 1) (oeisIx_row x)

-- instance OEIS 178225 where
--   oeisIx n = fromEnum $ n == (oeisIx @30101) n

-- instance OEIS 178318 where
--   oeisIx n = (oeis @178318) !! (n - 1)
--   oeis = 2 : 5 : filter f (oeis @62332) where
--      f p = null (show p `intersect` "34679") && (oeisIx @10051)' (r 0 p) == 1
--      r y 0 = y
--      r y x = r (10 * y + genericIndex [0,1,5,0,0,2,0,0,8,0] d) x'
--                where (x', d) = divMod x 10

-- instance OEIS 178333 where
--   oeisIx n = fromEnum $
--      n `mod` 10 == 1 && (oeisIx @30) n == 1 && (oeisIx @196368) n == 1 && and down where
--         down = dropWhile (== False) $ zipWith (<) (tail $ show n) (show n)
--   oeis = map (oeisIx @178333) [0..]

-- instance OEIS 178358 where
--   oeisIx (fi->n) = fi do read $ show (oeisIx n) ++ show n :: Integer

-- instance OEIS 178361 where
--   oeis = [x | x <- [1..], (oeisIx @7953) x <= (oeisIx @55642) x]

-- instance OEIS 178384 where
--   oeis = [1, 1, 1, 3] ++
--      zipWith div (foldr1 (zipWith subtract) (map b [1..2])) (oeis @178384)
--      where b i = zipWith (*) (drop i (oeis @178384)) (drop (4-i) (oeis @178384))

-- instance OEIS 178609 where
--   oeisIx n = head [k | k <- [n - 1, n - 2 .. 0], let p2 = 2 * (oeisIx @40) n,
--                         (oeisIx @40) (n - k) + (oeisIx @40) (n + k) == p2]

-- instance OEIS 178649 where
--   oeisIx n = div (oeisIx n) (oeisIx n)

-- instance OEIS 178787 where
--   oeis = scanl1 (+) (oeis @178788)

instance OEIS 178788 where
  oeisIx (fi->n) = fi .fromEnum $ nub (show n) == show n

-- instance OEIS 178799 where
--   oeis = zipWith (-) (tail (oeis @25487)) (oeis @25487)

-- instance OEIS 178804 where
--   oeisIx n = (oeis @178804) !! (n - 1)
--   oeis = concat $ transpose [oeis, (oeis @27)]

-- instance OEIS 178830 where
--   oeisIx 1 = 0
--   oeisIx n = z [1..n] (n * (n + 1) `div` 2) 1 where
--      z []     s p             = fromEnum (s == p)
--      z (x:xs) s p | s > p     = z xs (s - x) (p * x) + z xs s p
--                   | otherwise = fromEnum (s == p)

-- instance OEIS 178910 where
--   oeisIx = foldl1 xor . (rowT @27750) :: Integer -> Integer

-- instance OEIS 178943 where
--   oeis = 2 : h (oeis @40) where
--      h (p:qs@ (q:r:ps)) = if 2 * q /= (p + r) then q : h qs else h qs

-- instance OEIS 178953 where
--   oeis = filter ((== 0) . (oeisIx @178609)) [1..]

-- instance OEIS 179051 where
--   oeisIx = p 1 where
--      p _ 0 = 1
--      p k m = if m < k then 0 else p k (m - k) + p (k * 10) m

instance OEIS 179070 where
  oeis = 1 : zs where zs = 1 : 1 : 3 : zipWith (+) zs (drop 2 zs)

-- instance OEIS 179242 where
--   oeisIx n = (oeis @179242) !! (n - 1)
--   oeis = concatMap h $ drop 3 $ inits $ drop 2 (oeis @45) where
--      h is = reverse $ map (+ f) fs where
--             (f:_:fs) = reverse is

-- instance OEIS 179243 where
--   oeis = filter ((== 3) . (oeisIx @7895)) [1..]

-- instance OEIS 179244 where
--   oeis = filter ((== 4) . (oeisIx @7895)) [1..]

-- instance OEIS 179245 where
--   oeis = filter ((== 5) . (oeisIx @7895)) [1..]

-- instance OEIS 179246 where
--   oeis = filter ((== 6) . (oeisIx @7895)) [1..]

-- instance OEIS 179247 where
--   oeis = filter ((== 7) . (oeisIx @7895)) [1..]

-- instance OEIS 179248 where
--   oeisIx n = (oeis @179249) !! (n - 1)
--   oeis = filter ((== 9) . (oeisIx @7895)) [1..]

-- instance OEIS 179249 where
--   oeis = filter ((== 9) . (oeisIx @7895)) [1..]

-- instance OEIS 179250 where
--   oeis = filter ((== 10) . (oeisIx @7895)) [1..]

-- instance OEIS 179251 where
--   oeis = filter ((== 11) . (oeisIx @7895)) [1..]

-- instance OEIS 179253 where
--   oeis = filter ((== 13) . (oeisIx @7895)) [1..]

-- instance OEIS 179336 where
--   oeis = filter (any (`elem` "2357") . show ) (oeis @40)

-- instance OEIS 179627 where
--   oeisIx = (+ 1) . (oeisIx @6666) . (oeisIx @40)

-- instance OEIS 179888 where
--   oeis = 2 : f (oeis @179888) where
--     f (x:xs) = x' : x'' : f (xs ++ [x',x'']) where x' = 4*x+1; x'' = x' + 1

-- instance OEIS 179909 where
--   oeisIx n = (oeis @179909) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 1 (oeis @79066)

-- instance OEIS 179910 where
--   oeisIx n = (oeis @179910) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 2 (oeis @79066)

-- instance OEIS 179911 where
--   oeisIx n = (oeis @179911) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 3 (oeis @79066)

-- instance OEIS 179912 where
--   oeisIx n = (oeis @179912) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 4 (oeis @79066)

-- instance OEIS 179913 where
--   oeisIx n = (oeis @179913) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 5 (oeis @79066)

-- instance OEIS 179914 where
--   oeisIx n = (oeis @179914) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 6 (oeis @79066)

-- instance OEIS 179915 where
--   oeisIx n = (oeis @179915) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 7 (oeis @79066)

-- instance OEIS 179916 where
--   oeisIx n = (oeis @179916) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 8 (oeis @79066)

-- instance OEIS 179917 where
--   oeisIx n = (oeis @179917) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 9 (oeis @79066)

-- instance OEIS 179918 where
--   oeisIx n = (oeis @179918) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 10 (oeis @79066)

-- instance OEIS 179919 where
--   oeisIx n = (oeis @179919) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 11 (oeis @79066)

-- instance OEIS 179922 where
--   oeisIx n = (oeis @179922) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ elemIndices 12 (oeis @79066)

-- instance OEIS 179924 where
--   oeisIx n = (oeis @179924) !! (n - 1)
--   oeis = map (oeisIx . (+ 1)) $ findIndices (> 0) (oeis @79066)

-- instance OEIS 180046 where
--   oeisIx n = (oeis @180046) !! (n - 1)
--   oeis = [1..4] ++ zipWith4 (((((+) .) . (+)) .) . (-))
--                             (drop 3 (oeis @180046)) (drop 2 (oeis @180046))
--                               (tail (oeis @180046)) (oeis @180046)

-- instance OEIS 180058 where
--   oeisIx = (+ 2) . fromJust . (`elemIndex` (oeis @59233))

-- instance OEIS 180076 where
--   oeisIx n = (oeis @180076) !! n
--   oeis :: [Integer]
--   oeis = 0 : f 0 [1..] where
--      f x zs = y : f y (delete y zs) where
--        y = if null ys then 3 * x + 1 else head ys
--        ys = [y | y <- takeWhile (< x) zs, binInfix y x]
--      binInfix u v = ib v where
--        ib w = w `mod` m == u || w > u && ib (w `div` 2)
--        m = (oeisIx @62383) u

-- instance OEIS 180077 where
--   oeisIx = fromJust . (`elemIndex` (oeis @180076))

-- instance OEIS 180094 where
--   oeisIx n = snd $ until ((< 2) . fst) (\ (x, c) -> (oeisIx x, c+1)) (n,0)

-- instance OEIS 180110 where
--   oeisIx n = (oeis @180110) !! (n - 1)
--   oeis = map (+ 2) $ elemIndices True $ zipWith (&&) zs (tail zs)
--      where zs = zipWith (<) (oeis @180076) (tail (oeis @180076))

-- instance OEIS 180149 where
--   oeis = filter ((== 2) . (oeisIx @2635)) [0..]

-- instance OEIS 180191 where
--   oeisIx n = if n == 1 then 0 else sum $ (rowT @116853) (n - 1)

-- instance OEIS 180197 where
--   oeisIx n = (oeis @180197) !! (n - 1)
--   oeis = f 1 where
--      f x = if length ps == 3 && nub ps == ps
--            then (2 ^ (ps!!0 * ps!!1) `mod` ps!!2) : f (x+2) else f (x+2)
--            where ps = (rowT @27746) x

-- instance OEIS 180304 where
--   oeisIx n = fi (oeisIx n) * n
--   oeis = map sum $ group (oeis @6)

instance OEIS 180410 where
  oeisIx = fi . read . sort . nub . show . fi . succ

-- instance OEIS 180477 where
--   oeis = filter (\x -> mod (x * (oeisIx @55642) x) (oeisIx x) == 0) [1..]

-- instance OEIS 180639 where
--   oeis = scanl1 (+) $ map ((1 -) . (oeisIx @264739)) [1..]

-- instance OEIS 180662 where
--   oeis = tablList @180662
-- instance Table 180662 where
--   rowT n = (tabl @180662) !! n
--   tabl = tail $ inits (oeis @1654)

-- instance OEIS 180663 where
--   oeis = tablList @180663
-- instance Table 180663 where
--   rowT n = (tabl @180663) !! n
--   tabl = map reverse (tabl @180662)

-- instance OEIS 180853 where
--   oeis = iterate (oeisIx @6368) 4

-- instance OEIS 180864 where
--   oeis = iterate (oeisIx @6368) 13

-- instance OEIS 181363 where
--   oeisIx n = (oeis @181363) !! (n - 1)
--   oeis = concat $ transpose [oeis, (oeis @181363)]

-- instance OEIS 181391 where
--   oeisIx n = (oeis @181391) !! (n - 1)
--   oeis = 0 : (unfoldr g [0]) where
--      g xs = Just (m, m : xs) where
--           m = 1 + fromMaybe (-1) (findIndex (== head xs) $ tail xs)

-- instance OEIS 181424 where
--   oeisIx = (oeisIx @40) . (+ 2) . (oeisIx @64113)

instance OEIS 181482 where
  oeis = scanl1 (+) $ zipWith (*) [1..] $ cycle [1, 1, -1]

-- instance OEIS 181511 where
--   oeis = tablList @181511
-- instance Table 181511 where
--   rowCol = rowCol_off @181511 @1 @0
--   rowT   = rowT_off   @181511 @1
--   tabl = tail $ map init (tabl @8279)

-- instance OEIS 181522 where
--   oeisIx = genericLength . filter ((== 1) . (oeisIx @64911) . sum) .
--                             subsequences . enumFromTo 1

-- instance OEIS 181717 where
--   oeis = 0 : 1 : fc 1 0 where
--      fc x x' = y : fc y x where y = (oeisIx @6370) (x + x')

-- instance OEIS 181741 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @81118)

-- instance OEIS 181753 where
--   oeis = concat $ iterate
--                  (map ((+ 1) . flip mod 8 . (+ 4))) [1,3,5,6,7,2,5]

instance OEIS 181765 where
  oeisIx (succ->n) = genericLength [xs | xs <- subsequences [-n..n], sum xs > 0]

-- instance OEIS 181819 where
--   oeisIx = product . map (oeisIx @40) . (rowT @124010) . succ

-- instance OEIS 181894 where
--   oeisIx 1 = 0
--   oeisIx n = sum $ (rowT @213925) n

-- instance OEIS 181900 where
--   oeisIx n = (oeisIx @22998) n * n

-- instance OEIS 181921 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @78350))

-- instance OEIS 181935 where
--   oeisIx 0 = 1
--   oeisIx n = curling $ unfoldr
--      (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2) n where
--      curling zs = maximum $ zipWith (\xs ys -> strip 1 xs ys)
--                             (tail $ inits zs) (tail $ tails zs) where
--         strip i us vs | vs' == Nothing = i
--                       | otherwise      = strip (i + 1) us $ fromJust vs'
--                       where vs' = stripPrefix us vs

-- instance OEIS 181971 where
--   oeis = tablList @181971
-- instance Table 181971 where
--   rowT n = (tabl @181971) !! n
--   tabl = map snd $ iterate f (1, [1]) where
--      f (i, row) = (1 - i, zipWith (+) ([0] ++ row) (row ++ [i])

-- instance OEIS 181983 where
--   oeisIx = negate . (oeisIx @38608)
--   oeis = [0, 1] ++ map negate
--      (zipWith (+) (oeis @181983) (map (* 2) $ tail (oeis @181983)))

-- instance OEIS 181988 where
--   interleave (hdx : tlx) y = hdx : interleave y tlx
--   oeis003602 = interleave [1..] oeis003602
--   oeis181988 = interleave [1..] (zipWith (+) oeis003602 oeis181988)

-- instance OEIS 182028 where
--   oeis = scanl1 (\v b -> 2 * v + b) (oeis @3849)

-- instance OEIS 182049 where
--   oeis = filter ((< 10) . (oeisIx @137580)) [0..]

-- instance OEIS 182061 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @61373))

-- instance OEIS 182086 where
--   oeisIx = p [1,2,5,10,50,100,200,500] where
--      p _ 0 = 1; p [] _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 182093 where
--   oeis = scanl1 (+) (oeis @5590)

-- instance OEIS 182126 where
--   oeis = zipWith3 (\p p' p'' -> mod (p * p') p'')
--                     (oeis @40) (tail (oeis @40)) (drop 2 (oeis @40))

-- instance OEIS 182134 where
--   oeisIx = genericLength . (rowT @244365)

-- instance OEIS 182140 where
--   oeis = [x | x <- [1..], (oeisIx @60968) x == (oeisIx @201629) x]

-- instance OEIS 182145 where
--   oeisIx n = (oeis @182145) !! (n - 1)
--   oeis = zipWith xor (oeis @1223) $ tail (oeis @1223) :: [Integer]

-- instance OEIS 182147 where
--   oeis = [w | w <- [1..] , sum (dropWhile (<= (oeisIx @196) w) $
--                                         (rowT @27751) $ fromInteger w) == w]

-- instance OEIS 182182 where
--   oeisIx n = (oeis @182182) !! n
--   oeis = 0 : 1 : zipWith xor [2..]
--                  (zipWith xor (oeis @182182) $ tail (oeis @182182)) :: [Integer]
--   _Reinhard Zumkeller_, Apr 23 2012

-- instance OEIS 182183 where
--   oeisIx n = (oeis @182183) !! (n - 1)
--   oeis = f (oeis @209933) [1] where
--      f (x:xs) ys =
--        if null (oeisIx_row x \\ ys) then x : f xs (x : ys) else f xs ys

-- instance OEIS 182205 where
--   oeis = iterate (oeisIx @6368) 40

-- instance OEIS 182210 where
--   oeis = tablList @182210
-- instance Table 182210 where
--   rowCol = rowCol_off @182210 @1 @1
--   tabl = [[k* (n+1) `div` (k+1) | k <- [1..n]] | n <- [1..]]

-- instance OEIS 182211 where
--   oddDigits 0 = True
--   oddDigits n = let (q,r) = quotRem n 10
--   ..............in (odd r) && oddDigits q
--   oddSet 0 = []
--   oddSet 1 = [1,3..9]
--   oddSet k = [n | i <- [1,3..9], x <- oddSet (k-1), let n = i*10^ (k-1) + x,
--   ...............oddDigits ((n^3) `mod` 10^k)]
--   main = putStrLn $ map (length . oddSet) [1..]

-- instance OEIS 182229 where
--   oeis = 2 : 3 : zipWith (+)
--                          (map (flip div 3) (oeis @182229)) (tail (oeis @182229))

-- instance OEIS 182230 where
--   oeis = 3 : 4 : zipWith (+)
--                          (map (flip div 4) (oeis @182230)) (tail (oeis @182230))

-- instance OEIS 182237 where
--   oeisIx n = (oeis @182237) !! (n - 1)
--   oeis = map (+ 2 ) $ elemIndices 2 (oeis @59233)

-- instance OEIS 182242 where
--   oeisIx n = (oeis @182242) !! n
--   oeis = map fst $ iterate f (0,1) where
--      f (y,x) = ((x + y) .&. x, x + 1) :: (Integer,Integer)

-- instance OEIS 182243 where
--   oeisIx n = (oeis @182243) !! n
--   oeis = map fst $ iterate f (0,1) where
--      f (y,x) = ((x .&. y) + x, x + 1) :: (Integer,Integer)

-- instance OEIS 182248 where
--   oeisIx n = (oeis @182248) !! n
--   oeis = map fst $ iterate f (0,1) where
--      f (y,x) = ((x .|. y) + x, x + 1) :: (Integer,Integer)

-- instance OEIS 182280 where
--   oeis = 3 : 4 : zipWith (+)
--                          (oeis @182280) (map (flip div 4) $ tail (oeis @182280))

-- instance OEIS 182281 where
--   oeis = 2 : 3 : zipWith (+)
--                          (oeis @182281) (map (flip div 3) $ tail (oeis @182281))

-- instance OEIS 182310 where
--   oeisIx n = (oeis @182310) !! n
--   oeis = 0 : map (+ 1)
--      (zipWith xor (oeis @182310) $ map (`div` 2) (oeis @182310)) :: [Integer]

instance OEIS 182323 where
  oeis = filter ((== 43) . (`mod` 97) . (^ 2)) [0..]

-- instance OEIS 182324 where
--   oeisIx n = n + (oeisIx @30) n [0]

-- instance OEIS 182388 where
--   oeisIx n = (oeis @182388) !! n
--   oeis = f 0 1 where
--      f x y = y' : f (x + 1) y' :: [Integer] where y' = (x `xor` y) + x

-- instance OEIS 182402 where
--   oeis = map (sum . map (oeisIx @55642)) $ t 1 [1..] where
--      t i xs = ys : t (i + 1) zs where
--        (ys, zs) = splitAt i xs

-- instance OEIS 182426 where
--   oeisIx n = (oeis @182426) !! (n - 1)
--   oeis = concatMap f $ group $ zipWith (-) (tail ips) ips where
--      f xs | head xs == 1 = reverse $ enumFromTo 2 $ length xs + 1
--           | otherwise    = take (length xs) $ repeat 1
--      ips = map (oeisIx @49084) (oeis @166251)

-- instance OEIS 182455 where
--   oeis = 1 : zipWith (*) (zipWith mod (oeis @182455) [3..]) [3..]

-- instance OEIS 182458 where
--   oeis = 1 : 2 : zipWith mod
--      (map (+ 1) $ zipWith (*) (oeis @182458) (tail (oeis @182458))) [2..]

instance OEIS 182469 where
  oeis = tablList @182469
instance Table 182469 where
  rowCol = rowCol_off @182469 @1 @1
  rowT = rowT @27750 . oeisIx @265
  tabf = map (rowT @182469) [0..]

-- instance OEIS 182472 where
--   oeisIx = fromJust . (`elemIndex` (oeis @182458))

-- instance OEIS 182560 where
--   oeisIx n = (oeis @182560) !! n
--   oeis = 0 : 1 : 2 : zipWith xor [3..]
--      (tail $ zipWith (.&.) (oeis @182560) $ tail (oeis @182560)) :: [Integer]

-- instance OEIS 182579 where
--   oeis = tablList @182579
-- instance Table 182579 where
--   rowT n = (tabl @182579) !! n
--   tabl = [1] : iterate (\row ->
--     zipWith (+) ([0] ++ row) (zipWith (*) (row ++ [0]) (oeis @59841))) [1,2]

-- instance OEIS 182584 where
--   oeisIx n = (oeisIx @182579) (2*n) n

-- instance OEIS 182834 where
--   oeisIx n = (oeisIx @196) (2 * n - 2) + n

-- instance OEIS 182850 where
--   oeisIx n = genericLength $ takeWhile (`notElem` [1,2]) $ iterate (oeisIx @181819) n

-- instance OEIS 182938 where
--   oeisIx n = product $ zipWith (oeisIx @7318)'
--      (oeisIx_row n) (map toInteger $ (rowT @124010) n)

-- instance OEIS 182972 where
--   oeis = map fst $ concatMap q [3..] where
--      q x = [ (num, den) | num <- [1 .. div x 2],
--                          let den = x - num, gcd num den == 1]

-- instance OEIS 182973 where
--   oeis = map snd $ concatMap q [3..] where
--      q x = [ (num, den) | num <- [1 .. div x 2],
--                          let den = x - num, gcd num den == 1]

-- instance OEIS 182991 where
--   oeis = filter f [1..] where
--      f x = all (== 1) $ zipWith (+) dps $ tail dps where
--            dps = map (flip mod 2) $ (rowT @27750)' x

-- instance OEIS 183063 where
--   oeisIx = sum . map (1 -) . (rowT @247795)

-- instance OEIS 183079 where
--   oeis = tablList @183079
-- instance Table 183079 where
--   rowCol n k = (tabf @183079) !! (n - 1) !! (k-1)
--   rowT n = (tabf @183079) !! n
--   tabf = [1] : iterate (\row -> concatMap f row) [2]
--      where f x = [oeisIx x, (oeisIx @14132) x]
--   oeis = concat (tabf @183079)

-- instance OEIS 183091 where
--   oeisIx = product . (rowT @210208)

-- instance OEIS 183168 where
--   oeisIx n = z (drop (fromInteger (mod n 2)) (oeis @40)) (n ^ 2) 3 where
--      z _      m 1 = if m <= 0 then 0 else (oeisIx @10051) m
--      z (p:ps) m c = if m <= 2*p then 0 else z ps (m - p) (c - 1) + z ps m c

-- instance OEIS 183209 where
--   oeis = tablList @183209
-- instance Table 183209 where
--   rowCol n k = (tabf @183209) !! (n - 1) !! (k-1)
--   rowT n = (tabf @183209) !! (n - 1)
--   tabf = [1] : iterate (\xs -> concat $
--      transpose [map (oeisIx @32766) xs, map (oeisIx . subtract 1) xs]) [2]
--   oeis = concat (tabf @183209)

-- instance OEIS 184162 where
--   oeisIx n = genericIndex (oeis @184162) (n - 1)
--   oeis = 1 : g 2 where
--      g x = y : g (x + 1) where
--        y = if t > 0 then 2 * (oeisIx @184162) t + 1 else (oeisIx @184162) r + (oeisIx @184162) s - 1
--            where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 184165 where
--   oeisIx n = (oeisIx @228731) n + (oeisIx @228732) n
--   oeisIx n = genericIndex (oeis @228731) (n - 1)
--   oeisIx n = genericIndex (oeis @228732) (n - 1)

-- instance OEIS 184389 where
--   oeisIx = (oeisIx @217) . (oeisIx @5)'

-- instance OEIS 184989 where
--   oeisIx n = read $ interleave (show n) (show (n - 1)) :: Integer where
--      interleave []     ys = ys
--      interleave (x:xs) ys = x : interleave ys xs

-- instance OEIS 184992 where
--   oeisIx n = (oeis @184992) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f u vs = v : f v (delete v vs)
--        where v : _ = filter (not . null . (intersect `on` show) u) vs

-- instance OEIS 185024 where
--   oeisIx n = (oeis @185024) !! (n - 1)
--   oeis = map (+ 2 ) $ elemIndices 1 (oeis @59233)

-- instance OEIS 185038 where
--   oeisIx n = (oeis @185038) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 1 (oeis @90895)

-- instance OEIS 185080 where
--   oeisIx (fi->n) = fi $ 6 * (oeisIx @7318) (2 * n) (n - 1) + (oeisIx @7318) (2 * n - 1) n

-- instance OEIS 185086 where
--   oeis = filter (\p -> any ((== 1) . (oeisIx @10052)) $
--                  map (p -) $ takeWhile (<= p) (oeis @1248)) (oeis @40)

-- instance OEIS 185137 where
--   oeis = 1 : 1 : 1 : 1 : 1 : 1 : f 7 1 1 where
--      f x u v = w : f (x + 1) v w where
--                w = (oeisIx . (oeisIx @185137) . (oeisIx @185137)) (x - 1) +
--                    (oeisIx @185137) (x - (oeisIx . (oeisIx @185137)) (x - 3))

-- instance OEIS 185154 where
--   oeisIx n = (oeis @185154) !! (n - 1)
--   oeis = catMaybes $ map f (oeis @6093) where
--      f x = g $ takeWhile (< x) (oeis @65091) where
--        g []  = Nothing
--        g [_] = Nothing
--        g (p:ps@ (_:qs)) | (x - p) `elem` qs = Just p
--                        | otherwise         = g ps

-- instance OEIS 185208 where
--   oeis =  filter ((== 1) . (oeisIx @141197)) [1..]

-- instance OEIS 185212 where
--   oeisIx = (+ 1) . (* 4) . (oeisIx @567)

-- instance OEIS 185242 where
--   oeis = iterate (oeisIx @203907) 3

-- instance OEIS 185359 where
--   oeis = [x | x <- [1..], or $ zipWith (<)
--                       (oeisIx_row x) (map toInteger $ (rowT @124010) x)]

instance OEIS 185549 where
  oeisIx = ceiling . (** (3 / 2)) . fi

-- instance OEIS 185550 where
--   import Data.List.Ordered (minus)
--   oeisIx n = (oeis @185550) !! (n - 1)
--   oeis = [0..] `minus` (oeis @185549)

-- instance OEIS 185589 where
--   oeis = iterate (oeisIx @6369) 144

-- instance OEIS 185590 where
--   oeis = iterate (oeisIx @6369) 44

-- instance OEIS 185635 where
--   oeis = filter (> 0) $
--      zipWith (\x y -> if x == y then y else 0) [1..] (oeis @75075)

instance OEIS 185670 where
  oeisIx (fi->succ->n) = genericLength [ (x,y) | x <- [1..n - 1], y <- [x+1..n], gcd x y > 1]

-- instance OEIS 185694 where
--   oeis = 1 : f [1] where
--      f xs = y : f (y : xs) where
--             y = sum $ zipWith (*) xs $ map negate (oeis @8683)

-- instance OEIS 185816 where
--   oeisIx n = if n == 1 then 0 else (oeisIx @185816) (oeisIx n) + 1

-- instance OEIS 185817 where
--   oeisIx n = pref101pow 0 1 where
--      pref101pow e pow101 = if isPrefixOf (show n) (show pow101)
--                               then e
--                               else pref101pow (e + 1) (101 * pow101)

-- instance OEIS 185869 where
--   oeis = scanl (+) 2 $ a' 1
--     where  a' n = 2 * n + 3 : replicate n 2 ++ a' (n + 1)

-- instance OEIS 185934 where
--   oeis = map (oeisIx . (+ 1)) $
--      elemIndices 1 $ zipWith (*) (oeis @39701) $ tail (oeis @39701)

instance OEIS 185950 where
  oeisIx n = (4 * n - 1) * n - 1

-- instance OEIS 186102 where
--   oeisIx n = f (oeis @40) where
--      f (q:qs) = if (q - n) `mod` (oeisIx n) == 0 then q else f qs

-- instance OEIS 186253 where
--   oeis = filter ((== 0) . (oeisIx @261301)) [1..]

-- instance OEIS 186336 where
--   oeisIx n = f $ takeWhile (<= n) (oeis @1358) where
--      f []       = 0
--      f (sp:sps) = g sp sps + f sps
--      g spSum []                    = fromEnum (spSum == n)
--      g spSum (sp:sps) | spSum < n  = g (sp + spSum) sps
--                       | spSum == n = 1
--                       | otherwise  = 0

-- instance OEIS 186421 where
--   oeis = interleave [0,2..] $ rep [1,3..] where
--      interleave (x:xs) ys = x : interleave ys xs
--      rep (x:xs) = x : x : rep xs

-- instance OEIS 186422 where
--   oeis = zipWith (-) (tail (oeis @186421)) (oeis @186421)

-- instance OEIS 186423 where
--   oeis = scanl1 (+) (oeis @186421)

-- instance OEIS 186424 where
--   oeis = filter odd (oeis @186423)

-- instance OEIS 186711 where
--   oeis = zipWith gcd (oeis @3586) $ tail (oeis @3586)

-- instance OEIS 186712 where
--   oeisIx n = (+ 1) $ fromJust $ findIndex (== (oeisIx @3586) n) (oeis @186711)

-- instance OEIS 186771 where
--   oeisIx n = (oeis @186771) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (== 1) (oeis @186711)

instance OEIS 186809 where
  oeis = cycle [0, 1, 2, 0, -2, -1]

-- instance OEIS 186826 where
--   oeis = tablList @186826
-- instance Table 186826 where
--   rowT n = (tabl @186826) !! n
--   tabl = map reverse (tabl @144944)

-- instance OEIS 187059 where
--   oeisIx = (oeisIx @7814) . (oeisIx @1142)

-- instance OEIS 187072 where
--   import Data.Set (Set, empty, member, insert)
--   oeisIx n = (oeis @187072) !! (n - 1)
--   oeis = goldbach 0 (oeis @65091) empty where
--     goldbach :: Integer -> [Integer] -> Set Integer -> [Integer]
--     goldbach q (p:ps) gbEven
--         | qp `member` gbEven = goldbach q ps gbEven
--         | otherwise          = p : goldbach p (oeis @65091) (insert qp gbEven)
--         where qp = q + p

-- instance OEIS 187085 where
--   oeisIx  n = (oeis @187085) !! (n - 1)
--   oeis = zipWith (+) (oeis @187072) $ tail (oeis @187072)

-- instance OEIS 187090 where
--   oeisIx n = until ((== 9) . (oeisIx @30)) (+ n) n

-- instance OEIS 187098 where
--   oeis = 1 : 2 : map (`div` 2) (oeis @187085)

-- instance OEIS 187099 where
--   oeisIx = fi . (+ 1) . fromJust . (`elemIndex` oeis) . fi

-- instance OEIS 187202 where
--   oeisIx = head . head . dropWhile ((> 1) . length) . iterate diff . divs
--      where divs n = filter ((== 0) . mod n) [1..n]
--            diff xs = zipWith (-) (tail xs) xs

-- instance OEIS 187203 where
--   oeisIx = head . head . dropWhile ((> 1) . length) . iterate diff . divs
--      where divs n = filter ((== 0) . mod n) [1..n]
--            diff xs = map abs $ zipWith (-) (tail xs) xs

-- instance OEIS 187204 where
--   oeisIx n = (oeis @187204) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 $ map (oeisIx @187202) [1..]

-- instance OEIS 187205 where
--   oeisIx n = (oeis @187205) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 $ map (oeisIx @187203) [1..]

-- instance OEIS 187208 where
--   oeisIx n = (oeis @187208) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 1 $ map (oeisIx @187203) [1..]

-- instance OEIS 187285 where
--   oeisIx n = until ((== 1) . (oeisIx @30)) (+ n) n

-- instance OEIS 187744 where
--   oeis = filter ((== 1) . (oeisIx @10054) . (oeisIx @7953)) [0..]

-- instance OEIS 187763 where
--   oeisIx n = (oeis @187763) !! (n - 1)
--   oeis = map length $
--                  zipWith intersect (tabf @70165) $ tail (tabf @70165)

-- instance OEIS 187769 where
--   import List (elemIndices)
--   oeisIx n k = (tabf @187769) !! n !! k
--   oeisIx_row n = (tabf @187769) !! n
--   oeisIx_tabf = [0] : [elemIndices (b, len - b) $
--      takeWhile ((<= len) . uncurry (+)) $ zip (oeis @120) (oeis @23416) |
--      len <- [1 ..], b <- [1 .. len]]
--   oeis = concat (tabf @187769)

-- instance OEIS 187786 where
--   import List (find)
--   import Maybe (fromJust)
--   oeisIx n k = (tabf @187786) !! n !! k
--   oeisIx_row n = fromJust $ find (elem n) (tabf @187769)
--   oeisIx_tabf = map (rowT @187786) [0..]

-- instance OEIS 187790 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @93506))

-- instance OEIS 187792 where
--   oeis = filter (\x -> (oeisIx @93506) x == x) [1..]

-- instance OEIS 187811 where
--   oeisIx n = (oeis @187811) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (> 0) (oeis @5091)

-- instance OEIS 187831 where
--   oeisIx 0 = 1
--   oeisIx n = head $ fromJust $
--           find (n `elem`) $ drop (fi n) (tabf @70165)

instance OEIS 187844 where
  oeisIx n = product $ map (negate . fi . digitToInt) $ show $ fi n

-- instance OEIS 187845 where
--   oeis = scanl1 (+) $ map (oeisIx @187844) [0..]

-- instance OEIS 187921 where
--   import Data.Set (Set, singleton, member, insert)
--   oeisIx n = (oeis @187921) !! (n - 1)
--   oeis = r (singleton 0) 1 0 where
--      r :: Set Integer -> Integer -> Integer -> [Integer]
--      r s n x | x <= n           = n : r (insert (x+n) s) (n+1) (x+n)
--              | (x-n) `member` s = r (insert (x+n) s) (n+1) (x+n)
--              | otherwise        = r (insert (x-n) s) (n+1) (x-n)

-- instance OEIS 187922 where
--   import Data.Set (Set, singleton, member, insert)
--   oeisIx n = (oeis @187922) !! (n - 1)
--   oeis = r (singleton 0) 1 0 where
--      r :: Set Integer -> Integer -> Integer -> [Integer]
--      r s n x | x <= n           = r (insert (x+n) s) (n+1) (x+n)
--              | (x-n) `member` s = n : r (insert (x+n) s) (n+1) (x+n)
--              | otherwise        = r (insert (x-n) s) (n+1) (x-n)

-- instance OEIS 188068 where
--   oeisIx = (subtract 2) . (oeisIx @7538)

-- instance OEIS 188069 where
--   oeis = filter ((== 2) . (oeisIx @7538)) [1..]

-- instance OEIS 188070 where
--   oeis = filter ((== 3) . (oeisIx @7538)) [1..]

-- instance OEIS 188145 where
--   oeisIx n = (oeis @188145) !! (n - 1)
--   oeis = elemIndices 0 $ zipWith3 (\x y z -> x - y - z)
--      (map (oeisIx @3415) (oeis @3415)) (oeis @3415) [0..]

-- instance OEIS 188163 where
--   oeisIx n = succ $ fromJust $ elemIndex n (oeis @4001)

instance OEIS 188172 where
  oeisIx (succ->fi->n) = genericLength $ filter ((== 0) . mod n) [7,15..n]

-- instance OEIS 188226 where
--   oeisIx n = (oeis @188226) !! n
--   oeis =
--      map (succ . fromJust . (`elemIndex` (map (oeisIx @188172) [1..]))) [0..]

-- instance OEIS 188264 where
--   oeisIx n = (oeis @188264) !! (n - 1)
--   oeis =
--      map (+ 1) $ elemIndices 0 $ zipWith mod [1..] $ map (oeisIx @66459) [1..]

-- instance OEIS 188386 where
--   oeisIx n = (oeis @188386) !! (n - 1)
--   oeis = map numerator $ zipWith (-) (drop 3 hs) hs
--      where hs = 0 : scanl1 (+) (map (1 %) [1..])

-- instance OEIS 188429 where
--   oeis = [1, 0, 2, 0, 0, 3, 4, 0, 0, 4, 5, 5, 6, 7] ++
--                  f [15 ..] (drop 15 (oeis @10054)) 0 4
--      where f (x:xs) (t:ts) r k | t == 1    = (k + 1) : f xs ts 1 (k + 1)
--                                | r < k - 1 = (k + 1) : f xs ts (r + 1) k
--                                | otherwise = (k + 2) : f xs ts (r + 1) k

-- instance OEIS 188430 where
--   oeis = [1, 0, 2, 0, 0, 3, 4, 0, 0, 4, 5, 6, 7, 7, 8, 6, 7, 8, 9] ++
--                  (drop 19 (oeis @8619))

-- instance OEIS 188431 where
--   import Data.MemoCombinators (memo2, integral, Memo)
--   oeisIx n = (oeis @188431) !! (n - 1)
--   oeis = map
--      (\x -> sum [fMemo x i | i <- [oeisIx x .. (oeisIx @188430) x]]) [1..] where
--      fMemo = memo2 integral integral f
--      f _ 1 = 1
--      f m i = sum [fMemo (m - i) j |
--                   j <- [oeisIx (m - i) .. min (oeisIx (m - i)) (i - 1)]]

-- instance OEIS 188528 where
--   oeisIx n = succ $ fromJust $
--     findIndex (\m -> h n m 13 == 6) [1..12] where
--       h year month day
--         | month <= 2 = h  (year - 1)  (month + 12)  day
--         | otherwise  = (day + 26 * (month + 1) `div` 10 + y + y `div` 4
--                        + century `div` 4 - 2 * century) `mod` 7
--           where (century, y) = divMod year 100
--   b188528 = bFileFun "A188528" (oeisIx @188528) 1991 3000
--   -- For statistics (see example) ...
--   ff13_perMonth ys m = length $ filter (== m) (map (oeisIx @188528) ys)
--   century20 = map (ff13_perMonth [1901..2000]) [1..12]
--   century21 = map (ff13_perMonth [2001..2100]) [1..12]

instance OEIS 188641 where
  oeisIx = (1 -) . signum . (oeisIx @70635)

instance OEIS 188642 where
  oeisIx n
     | (oeisIx @168046) n == 1 = 1 - signum (n `mod` (oeisIx @7954) n)
     | otherwise      = 0

instance OEIS 188643 where
  oeis = map (fi.succ) $ elemIndices 0 $ map (oeisIx @188642) [1..]

instance OEIS 188649 where
  oeisIx (succ->n) = foldl lcm 1 $ map (oeisIx @4086) $ filter ((== 0) . mod n) [1..n]

instance OEIS 188650 where
  oeis = map (fi.succ) $ elemIndices 0 $ zipWith (-) [1..] $ map (oeisIx @188649) [0..]

instance OEIS 188652 where
  oeis = zipWith (-) (tail (oeis @463)) (oeis @463)

instance OEIS 188653 where
  oeis = zipWith (-) (tail (oeis @188652)) (oeis @188652)

-- instance OEIS 188654 where
--   oeisIx n = (oeis @188654) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (/= 0) (oeis @225230)

-- instance OEIS 188666 where
--   oeisIx n = (oeis @188666) !! (n - 1)
--   oeis = g 1 (oeis @961) where
--      g n pps'@ (pp:pp':pps) | n < 2*pp  = pp  : g (n+1) pps'
--                            | otherwise = pp' : g (n+1) (pp':pps)
--   oeisIx' n = last $ elemIndices (f 1) $ map f [0..n] where
--      f from = foldl lcm 1 [from..n]

-- instance OEIS 188715 where
--   let ext (c,l) = [ (tails.filter (\b->a* (a-1)`mod` (b-a)==0)$r,a:l) | (a:r)<-c] in map (last.snd.head) . tail . iterate (>>= ext) $ [ (map reverse (inits[2..]),[])]
--   -- [m:[m-d|d<-divisors (m* (m-1)),d<m-1]|m<-[2..]], defining divisors appropriately.

-- instance OEIS 188915 where
--   import Data.List.Ordered (union)
--   oeisIx n = (oeis @188915) !! n
--   oeis = union (oeis @290) (oeis @79)

-- instance OEIS 188916 where
--   oeis = filter ((== 1) . (oeisIx @10052). (oeisIx @188915)) [0..]

-- instance OEIS 188917 where
--   oeis = filter ((== 1) . (oeisIx @209229). (oeisIx @188915)) [0..]

-- instance OEIS 188967 where
--   oeisIx n = (oeis @188967) !! (n - 1)
--   oeis = 0 : zipWith ($)
--                      (cycle [ (1 -) . (oeisIx @188967), (1 -) . (oeisIx @188967), (oeisIx @188967)])
--                      (concat $ transpose [[1, 3 ..], [2, 4 ..], [2 ..]])

-- instance OEIS 188968 where
--   oeis = filter ((== 0) . (oeisIx @188967)) [1..]

-- instance OEIS 188969 where
--   oeis = filter ((== 1) . (oeisIx @188967)) [1..]

-- instance OEIS 188999 where
--   oeisIx n = product $ zipWith f (oeisIx_row n) (oeisIx_row n) where
--      f p e = (p ^ (e + 1) - 1) `div` (p - 1) - (1 - m) * p ^ e' where
--              (e', m) = divMod e 2

-- instance OEIS 189056 where
--   oeis = 0 : filter (\x -> (oeisIx @258682) x /= x ^ 2) [1..]

instance OEIS 189144 where
  oeisIx n = (foldl1 lcm [n..n+6]) `div` 420

-- instance OEIS 189398 where
--   oeisIx n = product $ zipWith (^) (oeis @40) (map digitToInt $ show n)

-- instance OEIS 189419 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @114183))

-- instance OEIS 189639 where
--   oeisIx n = (oeis @189710) !! (n - 1)
--   oeis = elemIndices 0 $
--      zipWith (-) (map (oeisIx @3415) (oeis @3415)) (map pred (oeis @3415))

-- instance OEIS 189710 where
--   oeisIx n = (oeis @189710) !! (n - 1)
--   oeis = elemIndices 0 $
--      zipWith (-) (map (oeisIx @3415) (oeis @3415)) (map pred (oeis @3415))

-- instance OEIS 189711 where
--   oeis = tablList @189711
-- instance Table 189711 where
--   rowCol n k = (n - k) ^ k - 2 * (oeisIx @7318) (n - 1) k + n - k
--   rowT n = map (oeisIx n) [3..n - 2]
--   tabl = map (rowT @189711) [5..]

-- instance OEIS 189835 where
--   oeisIx n = (oeisIx @1157) n - (oeisIx @38040) n

-- instance OEIS 189920 where
--   oeis = tablList @189920
-- instance Table 189920 where
--   rowCol n k = (rowT @189920) n !! k
--   rowT n = z n $ reverse $ takeWhile (<= n) $ tail (oeis @45) where
--      z x (f:fs'@ (_:fs)) | f == 1 = if x == 1 then [1] else []
--                         | f == x = 1 : replicate (length fs) 0
--                         | f < x  = 1 : 0 : z (x - f) fs
--                         | f > x  = 0 : z x fs'
--   tabf = map (rowT @189920) [1..]

-- instance OEIS 190016 where
--   import Data.Ord (comparing)
--   oeisIx n = (oeis @190016) !! (n - 1)
--   oeis = sortBy (comparing show) [1..10000]

-- instance OEIS 190017 where
--   oeisIx n = (oeis @190017) !! (n - 1)
--   oeis =
--      map (succ . fromJust . (`elemIndex` (oeis @190016))) [1..10000]

-- instance OEIS 190018 where
--   oeis = 0 : drop 2 (merge (merge fibs $
--       map (^ 2) fibs) $ zipWith (*) fibs (drop 2 fibs))
--       where fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
--             merge xs'@ (x:xs) ys'@ (y:ys)
--                | x < y     = x : merge xs ys'
--                | x == y    = x : merge xs ys
--                | otherwise = y : merge xs' ys

-- instance OEIS 190126 where
--   import Data.Ord (comparing)
--   oeisIx n = (oeis @190126) !! (n - 1)
--   oeis = sortBy (comparing (show . (oeisIx @7088))) [1..10000]

-- instance OEIS 190127 where
--   oeisIx n = (oeis @190127) !! (n - 1)
--   oeis =
--      map (succ . fromJust . (`elemIndex` (oeis @190126))) [1..10000]

-- instance OEIS 190128 where
--   import Data.Ord (comparing)
--   oeisIx n = (oeis @190128) !! (n - 1)
--   oeis = sortBy (comparing (show . (oeisIx @7089))) [1..10000]

-- instance OEIS 190129 where
--   oeisIx n = (oeis @190129) !! (n - 1)
--   oeis =
--      map (succ . fromJust . (`elemIndex` (oeis @190128))) [1..10000]

-- instance OEIS 190130 where
--   import Data.Ord (comparing)
--   oeisIx n = (oeis @190130) !! (n - 1)
--   oeis = sortBy (comparing (show . (oeisIx @7094))) [1..10000]

-- instance OEIS 190131 where
--   oeisIx n = (oeis @190131) !! (n - 1)
--   oeis =
--      map (succ . fromJust . (`elemIndex` (oeis @190130))) [1..10000]

-- instance OEIS 190132 where
--   import Data.Ord (comparing)
--   import Numeric (showIntAtBase)
--   oeisIx n = (oeis @190132) !! (n - 1)
--   oeis =
--      sortBy (comparing (flip (showIntAtBase 12 intToDigit) "")) [1..10000]

-- instance OEIS 190133 where
--   oeisIx n = (oeis @190133) !! (n - 1)
--   oeis =
--      map (succ . fromJust . (`elemIndex` (oeis @190132))) [1..10000]

-- instance OEIS 190134 where
--   import Data.Ord (comparing)
--   import Numeric (showHex)
--   oeisIx n = (oeis @190134) !! (n - 1)
--   oeis = sortBy (comparing (flip showHex "")) [1..10000]

-- instance OEIS 190135 where
--   oeisIx n = (oeis @190135) !! (n - 1)
--   oeis =
--      map (succ . fromJust . (`elemIndex` (oeis @190134))) [1..10000]

-- instance OEIS 190136 where
--   oeisIx n = maximum $ map (oeisIx @6530) [n..n+3]

-- instance OEIS 190137 where
--   oeisIx n = head [k | k <- [1..9],
--                         all (<= "0123456789" !! k) $ show (k * n)]

-- instance OEIS 190311 where
--   oeisIx n = g n $ reverse $ takeWhile (<= n) $ tail (oeis @578) where
--     g _ []                 = 0
--     g m (x:xs) | x > m     = g m xs
--                | otherwise = signum m' + g r xs where (m',r) = divMod m x

-- instance OEIS 190321 where
--   oeisIx n = g n $ reverse $ takeWhile (<= n) $ tail (oeis @290) where
--     g _ []                 = 0
--     g m (x:xs) | x > m     = g m xs
--                | otherwise = signum m' + g r xs where (m',r) = divMod m x

-- instance OEIS 190600 where
--   import Numeric (showIntAtBase)
--   oeisIx = digitToInt . maximum . flip (showIntAtBase 12 intToDigit) ""

-- instance OEIS 190619 where
--   oeis = map read $ f 2 1 :: [Integer] where
--     f m k
--       | k < m - 1 = ((take k ones) ++ "0" ++ (take (m-k) ones)) : f m (k+1)
--       | otherwise = ((take k ones) ++ "01") : f (m + 1) 1
--     ones = repeat '1'

-- instance OEIS 190620 where
--   oeisIx n = (oeis @190620) !! (n - 1)
--   oeis = filter odd $ elemIndices 1 (oeis @23416)
--   oeis' = g 8 2 where
--      g m 2 = (m - 3) : g (2*m) (m `div` 2)
--      g m k = (m - k - 1) : g m (k `div` 2)

-- instance OEIS 190641 where
--   oeis = map (+ 1) $ elemIndices 1 (oeis @56170)

-- instance OEIS 190651 where
--   oeis = filter ((== 1) . (oeisIx @101312)) [1901..]

-- instance OEIS 190652 where
--   oeis = filter ((== 2) . (oeisIx @101312)) [1901..]

-- instance OEIS 190653 where
--   oeis = filter ((== 3) . (oeisIx @101312)) [1901..]

-- instance OEIS 190803 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @190803) !! (n - 1)
--   oeis = 1 : f (singleton 2)
--      where f s = m : (f $ insert (2*m-1) $ insert (3*m-1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 190805 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @190805) !! (n - 1)
--   oeis = 1 : f (singleton 4)
--      where f s = m : (f $ insert (2*m-1) $ insert (3*m+1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 190806 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @190806) !! (n - 1)
--   oeis = 1 : f (singleton 5)
--      where f s = m : (f $ insert (2*m-1) $ insert (3*m+2) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 190807 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @190807) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (2*m) $ insert (3*m-1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 190808 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @190808) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (2*m) $ insert (3*m+1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 190809 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @190809) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (2*m) $ insert (3*m+2) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 190810 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @190810) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (2*m+1) $ insert (3*m-1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 190811 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @190811) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (2*m+1) $ insert (3*m) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 190812 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @190812) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (2*m+1) $ insert (3*m+2) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 190944 where
--   oeisIx = (oeisIx @7088) . (* 3)

-- instance OEIS 191113 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191113) !! (n - 1)
--   oeis = 1 : f (singleton 2)
--      where f s = m : (f $ insert (3*m-2) $ insert (4*m-2) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191114 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191114) !! (n - 1)
--   oeis = 1 : f (singleton 3)
--      where f s = m : (f $ insert (3*m-2) $ insert (4*m-1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191115 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191115) !! (n - 1)
--   oeis = 1 : f (singleton 4)
--      where f s = m : (f $ insert (3*m-2) $ insert (4*m) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191116 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191116) !! (n - 1)
--   oeis = 1 : f (singleton 5)
--      where f s = m : (f $ insert (3*m-2) $ insert (4*m+1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191117 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191117) !! (n - 1)
--   oeis = 1 : f (singleton 6)
--      where f s = m : (f $ insert (3*m-2) $ insert (4*m+2) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191118 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191118) !! (n - 1)
--   oeis = 1 : f (singleton 7)
--      where f s = m : (f $ insert (3*m-2) $ insert (4*m+3) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191119 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191119) !! (n - 1)
--   oeis = 1 : f (singleton 2)
--      where f s = m : (f $ insert (3*m-1) $ insert (4*m-3) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191120 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191120) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m-1) $ insert (4*m-2) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191121 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191121) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m-1) $ insert (4*m-1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191122 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191122) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m-1) $ insert (4*m) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191123 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191123) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m-1) $ insert (4*m+1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191124 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191124) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m-1) $ insert (4*m+2) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191125 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191125) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m-1) $ insert (4*m+3) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191126 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191126) !! (n - 1)
--   oeis = 1 : f (singleton 3)
--      where f s = m : (f $ insert (3*m) $ insert (4*m-3) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191127 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191127) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m) $ insert (4*m-2) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191128 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191128) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m) $ insert (4*m-1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191129 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191129) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m) $ insert (4*m+1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191130 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191130) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m) $ insert (4*m+2) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191131 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191131) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m) $ insert (4*m+3) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191132 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191132) !! (n - 1)
--   oeis = 1 : f (singleton 4)
--      where f s = m : (f $ insert (3*m+1) $ insert (4*m-3) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191133 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191133) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m+1) $ insert (4*m-2) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191134 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191134) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m+1) $ insert (4*m-1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191135 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191135) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m+1) $ insert (4*m) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191136 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191136) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m+1) $ insert (4*m+1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191137 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191137) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m+1) $ insert (4*m+2) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191138 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191138) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m+1) $ insert (4*m+3) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191139 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191139) !! (n - 1)
--   oeis = 1 : f (singleton 5)
--      where f s = m : (f $ insert (3*m+2) $ insert (4*m-3) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191140 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191140) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m+2) $ insert (4*m-2) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191141 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191141) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m+2) $ insert (4*m-1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191142 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191142) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m+2) $ insert (4*m) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191143 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191143) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m+2) $ insert (4*m+1) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191144 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191144) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m+2) $ insert (4*m+2) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191145 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191145) !! (n - 1)
--   oeis = f $ singleton 1
--      where f s = m : (f $ insert (3*m+2) $ insert (4*m+3) s')
--                where (m, s') = deleteFindMin s

-- instance OEIS 191203 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191203) !! (n - 1)
--   oeis = f $ singleton 1 where
--      f s = m : f (insert (2 * m) $ insert (m ^ 2 + 1) s')
--            where (m, s') = deleteFindMin s

-- instance OEIS 191211 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @191211) !! (n - 1)
--   oeis = f $ singleton 1 where
--      f s = m : f (insert (2 * m + 1) $ insert (m ^ 2 + 1) s')
--            where (m, s') = deleteFindMin s

-- instance OEIS 191292 where
--   oeis = f (oeis @31443) where
--      f (x:x':xs) | x' == x+2 = (x+1) : f xs
--                  | otherwise = f (x':xs)

-- instance OEIS 191587 where
--   oeisIx n = head [p | p <- dropWhile (<= n) (oeis @40),
--                         (oeisIx @1221) (p - n) == n]

-- instance OEIS 191610 where
--   oeisIx 1 = 0
--   oeisIx n = sum $ takeWhile (> 0) $ map ((n - 1) `div`) (oeis @351)

-- instance OEIS 191854 where
--   oeisIx = (oeisIx @7966) . (oeisIx @7969)

-- instance OEIS 191855 where
--   oeisIx = (oeisIx @7967) . (oeisIx @7969)

-- instance OEIS 191856 where
--   oeisIx = (oeisIx @7966) . (oeisIx @7970)

-- instance OEIS 191857 where
--   oeisIx = (oeisIx @7967) . (oeisIx @7970)

-- instance OEIS 191860 where
--   oeisIx = fst . sqrtPair . (oeisIx @7969)

-- instance OEIS 191861 where
--   oeisIx = snd . sqrtPair . (oeisIx @7969)

-- instance OEIS 191862 where
--   oeisIx = fst . sqrtPair . (oeisIx @7970)

-- instance OEIS 191863 where
--   oeisIx = snd . sqrtPair . (oeisIx @7970)

-- instance OEIS 191933 where
--   oeisIx n = (oeis @191933) !! (n - 1)
--   oeis = findIndices (> 0) $ map (oeisIx @193095) [0..]

-- instance OEIS 191967 where
--   oeisIx n = n * (oeisIx @1651) n

-- instance OEIS 192010 where
--   oeisIx n = succ $ fromJust $ elemIndex n $ map (oeisIx @50252) [1..]

-- instance OEIS 192015 where
--   oeisIx = (oeisIx @3415) . (oeisIx @961)

-- instance OEIS 192016 where
--   oeisIx = (oeisIx @68346) . (oeisIx @961)

-- instance OEIS 192066 where
--   oeisIx = sum . filter odd . (rowT @77610)

-- instance OEIS 192109 where
--   oeisIx n = (oeis @192109) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 $ zipWith mod (oeis @918) [1..]

-- instance OEIS 192134 where
--   oeisIx n = (oeisIx @961) n - (oeisIx @192015) n

-- instance OEIS 192280 where
--   oeisIx n = fromEnum $ (oeisIx @53590) n == n
--   oeis = map (oeisIx @192280) [1..]

-- instance OEIS 192362 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @131644))

-- instance OEIS 192476 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @192476) !! (n - 1)
--   oeis = f [1] (singleton 1) where
--      f xs s =
--        m : f xs' (foldl (flip insert) s' (map (+ m^2) (map (^ 2) xs')))
--        where xs' = m : xs
--              (m,s') = deleteFindMin s

-- instance OEIS 192484 where
--   oeisIx n = (oeis @192484) !! n
--   oeis = 1 : 2 : f [2,1] where
--      f xs = y : f (y : xs) where
--        y = sum $ zipWith xor xs $ reverse xs :: Integer

-- instance OEIS 192489 where
--   oeis = f 2 1 where
--      f n x | x' == 2   = n : f (n+1) x'
--            | otherwise = f (n+1) x'
--            where x' = 1 + gcd n x

-- instance OEIS 192503 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @3309)

-- instance OEIS 192504 where
--   oeis = filter ((== 0) . (oeisIx @10051)) (oeis @3309)

-- instance OEIS 192505 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @192607)

-- instance OEIS 192506 where
--   oeis = filter ((== 0) . (oeisIx @10051)) (oeis @192607)

-- instance OEIS 192512 where
--   oeis = scanl1 (+) $ map (oeisIx @192490) [1..]

-- instance OEIS 192545 where
--   oeisIx n = (oeis @192545) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 $ map (oeisIx @48853) [1..]

-- instance OEIS 192607 where
--   oeis = filter ((== 0) . (oeisIx @192490)) [1..]

-- instance OEIS 192687 where
--   oeis = zipWith (-) females males where
--      females = 1 : zipWith (-) [1..] (map (males !!) females)
--      males = 0 : zipWith (-) [1..] (map (females !!) males)

-- instance OEIS 192719 where
--   oeis = tablList @192719
-- instance Table 192719 where
--   rowCol n k = (tabf @192719) !! (n - 1) !! (k-1)
--   rowT n = (tabf @192719) !! (n - 1)
--   tabf = f [1..] where
--      f (x:xs) = (oeisIx_row x) : f (del xs $ (rowT @220237) x)
--      del us [] = us
--      del us'@ (u:us) vs'@ (v:vs) | u > v     = del us' vs
--                                | u < v     = u : del us vs'
--                                | otherwise = del us vs

-- instance OEIS 192734 where
--   oeisIx n = head [x | x <- [2^u + 2^v + 1 | u <- [2..], v <- [1..u-1]],
--                         oeisIx x == n]

-- instance OEIS 192817 where
--   oeis = [x | x <- [1..], gcd x (oeisIx x) == 1]

-- instance OEIS 192825 where
--   oeisIx n = (oeis @192825) !! (n - 1)
--   oeis = filter (\x ->
--      '0' `elem` show x && null (show (2*x) `intersect` show x)) [1..]

-- instance OEIS 192849 where
--   oeisIx n = if n < 3 then 0 else (oeisIx @245334) (n + 1) 4

-- instance OEIS 192895 where
--   oeisIx n =
--      sum (map (oeisIx @120) $ filter ((== 0) . (mod n)) [1..n - 1]) - (oeisIx @120) n
--   oeis = map (oeisIx @192895) [1..]

-- instance OEIS 192977 where
--   oeis = f 0 $ group (oeis @68395) where
--      f n xss'@ (xs:xss)
--        | head xs `div` 9 == n = length xs : f (n+1) xss
--        | otherwise            = 0 : f (n+1) xss'

-- instance OEIS 192993 where
--   oeisIx n = (oeis @192993) !! (n - 1)
--   oeis = findIndices (> 1) $ map (oeisIx @193095) [0..]

-- instance OEIS 193095 where
--   oeisIx n = sum $ map c [1.. (length $ show n) - 1] where
--      c k | head ys == '0' = 0
--          | otherwise      = (oeisIx @10052) (read xs) * (oeisIx @10052) (read ys) where
--          (xs,ys) = splitAt k $ show n

-- instance OEIS 193096 where
--   oeisIx n = (oeis @193096) !! (n - 1)
--   oeis = elemIndices 0 $ map (oeisIx @193095) [0..]

-- instance OEIS 193097 where
--   oeisIx n = (oeis @193097) !! (n - 1)
--   oeis = elemIndices 1 $ map (oeisIx @193095) [0..]

-- instance OEIS 193159 where
--   oeis = map (+ 1) $ findIndices (<= 3) (oeis @50430)

-- instance OEIS 193166 where
--   oeis = filter ((== 0) . (oeisIx @192280)) [1..]

-- instance OEIS 193169 where
--   oeisIx = genericLength . filter odd . (rowT @27750) . (oeisIx @2322)

-- instance OEIS 193213 where
--   oeis = filter ((== 1) . (oeisIx @10051)) (oeis @99267)

instance OEIS 193238 where
  oeisIx n = genericLength $ filter (`elem` "2357") $ show $ fi n

-- instance OEIS 193286 where
--   -- See Theorem 5 in John Derbyshire link.
--   oeisIx n = p n [] where
--      p 0 ks       = product ks
--      p n []       = p (n - 1) [1]
--      p n (k:ks)
--       | n < 0     = 0
--       | otherwise = max (p (n - 1) ((k+1):ks)) (p (n-3) (1:k:ks))

-- instance OEIS 193314 where
--   oeisIx n = head [k | k <- [1..], let kk' = (oeisIx @2378) k,
--                         mod kk' (oeisIx n) == 0, (oeisIx @6530) kk' == (oeisIx @40) n]

-- instance OEIS 193315 where
--   oeisIx 1 = 1
--   oeisIx n = maximum $ zipWith (*) prims $ map (oeisIx . (2*n -)) prims
--      where prims = takeWhile (<= n) (oeis @8578)

-- instance OEIS 193331 where
--   oeis = tablList @193331
-- instance Table 193331 where
--   rowCol = rowCol_off @193331 @1 @1
--   tabl = map (rowT @193331) [1..]
--   rowT n = zipWith div (map (* n^2) [0..n - 1]) (map (2 *) [1..n])

-- instance OEIS 193358 where
--   oeis =
--      1 : 2 : (map ((+ 2) . (oeisIx @193358)) $ zipWith (-) [2..] (oeis @193358))

-- instance OEIS 193422 where
--   oeisIx n = (oeis @193422) !! (n - 1)
--   oeis = map (fromJust . (`elemIndex` (oeis @193358))) [1..]

-- instance OEIS 193428 where
--   oeisIx n = sum $ map ($ n) [oeisIx, (oeisIx @31288), (oeisIx @31289), (oeisIx @31290), (oeisIx @31291), (oeisIx @31292), (oeisIx @31293), (oeisIx @31294), (oeisIx @31295), (oeisIx @31296)]

instance OEIS 193431 where
  oeis = tail $ f (oeis @7376) where
     f (x:xs'@ (x':x'':xs)) = 10* (10*x + x') + x'' : f xs'

-- instance OEIS 193459 where
--   oeisIx n =
--      length $ nub $ concatMap divisors $ map read $ permutations $ show n
--         where divisors n = filter ((== 0) . mod n) [1..n]
--   oeis = map (oeisIx @193459) [1..]

-- instance OEIS 193460 where
--   oeisIx n = (oeis @193460) !! (n - 1)
--   oeis = elemIndices 0 $ 1 : zipWith (-) (oeis @193459) (oeis @5)

instance OEIS 193492 where
  oeis = tail $ f (oeis @7376) where
     f xs'@ (x:xs) = ((foldl (\u v -> 10*u + v) 0) $ take 4 xs') : f xs

instance OEIS 193493 where
  oeis = tail $ f (oeis @7376) where
     f xs'@ (x:xs) = ((foldl (\u v -> 10*u + v) 0) $ take 5 xs') : f xs

-- instance OEIS 193496 where
--   oeisIx = fromEnum . (>= 0) . (oeisIx @95916)

-- instance OEIS 193513 where
--   oeisIx n = p "0123456789" n 1 where
--      p "" _ _      = 0
--      p _  0 _      = 1
--      p cds m k
--        | m < k     = 0
--        | otherwise = p (cds `intersect` show k) (m - k) k + p cds m (k + 1)

instance OEIS 193551 where
  oeisIx (succ->n) = fi $ (fromJust $ elemIndex n (oeis @26)) + 1

-- instance OEIS 193574 where
--   oeisIx n = head [d | d <- [1..sigma] \\ nDivisors, mod sigma d == 0]
--      where nDivisors = (rowT @27750) n
--            sigma = sum nDivisors

instance OEIS 193581 where
  oeisIx n = n - (oeisIx @4185) n
--   oeis = map (oeisIx @193581) [0..]

-- instance OEIS 193582 where
--   oeisIx n = genericLength $ takeWhile (> 0) $ iterate (oeisIx @193581) n
--   oeis = map (oeisIx @193582) [0..]

-- instance OEIS 193596 where
--   oeis = tablList @193596
-- instance Table 193596 where
--   rowT n = (tabl @193596) !! n
--   tabl = map (map ((flip div 2) . (+ 1))) (tabl @7318)

-- instance OEIS 193641 where
--   oeis = drop 2 xs where
--      xs = 1 : 1 : 1 : zipWith (+) xs (map (* 2) $ drop 2 xs)

-- instance OEIS 193671 where
--   oeisIx n = (oeis @193671) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (> 0) $ map (oeisIx @187202) [1..]

-- instance OEIS 193672 where
--   oeisIx n = (oeis @193672) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (< 0) $ map (oeisIx @187202) [1..]

-- instance OEIS 193711 where
--   oeis = scanl1 (+) (oeis @5214) :: [Integer]

-- instance OEIS 193714 where
--   oeisIx n = (oeis @193714) !! (n - 1)
--   oeis =
--      map ((+ 1) . fromJust . (`elemIndex` (oeis @5214))) $ tail (oeis @290)

-- instance OEIS 193715 where
--   oeisIx n = (oeis @193715) !! (n - 1)
--   oeis =
--      map ((+ 1) . fromJust . (`elemIndex` (oeis @5214))) $ tail (oeis @217)

-- instance OEIS 193738 where
--   oeis = tablList @193738
-- instance Table 193738 where
--   rowT n = (tabl @193738) !! n
--   tabl = map reverse (tabl @193739)

-- instance OEIS 193739 where
--   oeis = tablList @193739
-- instance Table 193739 where
--   rowCol n k = (tabl @193738) !! n !! k
--   rowT n = (tabl @193738) !! n
--   tabl = map reverse (tabl @193739)

-- instance OEIS 193748 where
--   oeisIx = p (oeis @5214) where
--      p _          0 = 1
--      p ks'@ (k:ks) m
--        | m < k      = 0
--        | otherwise  = p ks' (m - k) + p ks m

-- instance OEIS 193749 where
--   oeisIx = p (oeis @5214) where
--      p _      0    = 1
--      p (k:ks) m
--        | m < k     = 0
--        | otherwise = p ks (m - k) + p ks m

-- instance OEIS 193773 where
--   oeisIx n = genericLength [ () | x <- [1 .. n + 1],
--                            let (y,m) = divMod (x + n) (2 * x - 1),
--                            x <= y, m == 0]

-- instance OEIS 193829 where
--   oeis = tablList @193829
-- instance Table 193829 where
--   rowCol n k = genericIndex (tabf @193829) (n - 1) !! (k - 1)
--   rowT n = genericIndex (tabf @193829) (n - 1)
--   tabf = zipWith (zipWith (-))
--                          (map tail (oeisIx @27750)_tabf') (oeisIx @27750)_tabf'

-- instance OEIS 193832 where
--   oeis = tablList @193832
-- instance Table 193832 where
--   rowCol n k = (tabf @193832) !! (n - 1) !! (k-1)
--   rowT n = (tabf @193832) !! (n - 1)
--   tabf = zipWith (++) (tabf @1650) (tabl @111650)
--   oeisIx' n = (oeis @193832) !! (n - 1)
--   oeis = concat (tabf @193832)

-- instance OEIS 193854 where
--   oeisIx n = (oeis @193854) !! (n - 1)
--   oeis = elemIndices 1 (oeis @62039)

-- instance OEIS 193890 where
--   oeisIx n = (oeis @193890) !! (n - 1)
--   oeis = filter f (oeis @107715) where
--      f n = (all ((== 1) . (oeisIx @10051)) $
--                  zipWith (\ins (t:tns) -> read $ (ins ++ x3 t ++ tns))
--                          (init $ inits $ show n) (init $ tails $ show n))
--          where x3 '0' = "0"
--                x3 '1' = "3"
--                x3 '2' = "6"
--                x3 '3' = "9"

-- instance OEIS 193891 where
--   oeis = tablList @193891
-- instance Table 193891 where
--   rowT n = (tabl @193891) !! n
--   tabl = [1] : map fst (iterate
--      (\ (xs, i) -> (zipWith (+) (0:xs) [i, 2 * i ..], i + 1)) ([1,2], 2))

-- instance OEIS 193926 where
--   oeis = zipWith (-) (tail (oeis @62039)) (oeis @62039)

-- instance OEIS 193927 where
--   oeisIx n = (oeis @193927) !! (n - 1)
--   oeis = findIndices (< 0) (oeis @193926)

-- instance OEIS 193928 where
--   oeisIx n = (oeis @193928) !! (n - 1)
--   oeis = findIndices (0 <=) (oeis @193926)

-- instance OEIS 194005 where
--   oeis = tablList @194005
-- instance Table 194005 where
--   rowT n = (tabl @194005) !! n
--   tabl = [1] : [1,1] : f [1] [1,1] where
--      f row' row = rs : f row rs where
--        rs = zipWith (+) ([0,1] ++ row') (row ++ [0])

-- instance OEIS 194020 where
--   oeisIx n = p (oeisIx n) n where
--      p _  0 = 1
--      p k m | m < k     = 0
--            | otherwise = p k (m - k) + p (k+1) m

-- instance OEIS 194081 where
--   oeisIx n = (oeis @194081) !! n
--   oeis = map (fromJust . (`elemIndex` (oeis @5375))) [0..]

-- instance OEIS 194187 where
--   oeis = zipWith (-) (oeis @40) (oeis @70883)

-- instance OEIS 194189 where
--   oeisIx n = sum $ map (oeisIx @10051) [n* (n+1) `div` 2 + 1 .. n^2 - 1]

-- instance OEIS 194218 where
--   oeisIx n = (oeis @194218) !! (n - 1)
--   oeis = map fst kaprekarPairs
--   oeisIx n = (oeis @194219) !! (n - 1)
--   oeis = map snd kaprekarPairs
--   oeisIx n = (oeis @6886) !! (n - 1)
--   oeis = map (uncurry (+)) kaprekarPairs
--   kaprekarPairs = (1,0) : (mapMaybe (\n -> kSplit n $ splits (n^2)) [1..])
--      where kSplit x = find (\ (left, right) -> left + right == x)
--            splits q = no0 . map (divMod q) $ iterate (10 *) 10
--            no0 = takeWhile ((> 0) . fst) . filter ((> 0) . snd)

-- instance OEIS 194233 where
--   oeisIx n =
--      fromMaybe (10*n) $ find (== (oeisIx @4186) n) $ map (oeisIx @4186) [n+1..10*n]

instance OEIS 194459 where
  oeisIx = sum . map (signum . flip mod 5) . rowT @7318 . fi

-- instance OEIS 194597 where
--   oeisIx n = [1,6,6,1,9,3,1,3,9] !! (oeisIx @10878) (n - 1)

-- instance OEIS 194626 where
--   oeisIx n = (oeis @194626) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 1 (oeis @81827)

-- instance OEIS 194733 where
--   oeisIx n = genericLength $ filter (nTau <) $
--               map (snd . properFraction . (* tau) . fromInteger) [1..n]
--      where (_, nTau) = properFraction (tau * fromInteger n)
--            tau = (1 + sqrt 5) / 2

-- instance OEIS 195013 where
--   oeisIx n = (oeis @195013) !! (n - 1)
--   oeis = concat $ transpose [[2, 4 ..], [3, 6 ..]]

-- instance OEIS 195041 where
--   oeis = scanl (+) 0 (oeis @47336)

-- instance OEIS 195042 where
--   oeis = scanl (+) 0 (oeis @56020)

-- instance OEIS 195043 where
--   oeis = scanl (+) 0 (oeis @175885)

-- instance OEIS 195045 where
--   oeis = scanl (+) 0 (oeis @175886)

-- instance OEIS 195063 where
--   oeis = filter (\x -> (oeisIx @36044) x < x) [0,2..]

-- instance OEIS 195064 where
--   oeis = filter (\x -> (oeisIx @36044) x <= x) [0,2..]

-- instance OEIS 195065 where
--   oeis = filter (\x -> (oeisIx @36044) x > x) [0,2..]

-- instance OEIS 195066 where
--   oeis = filter (\x -> (oeisIx @36044) x >= x) [0,2..]

-- instance OEIS 195069 where
--   oeis = filter ((== 10) . (oeisIx @46660)) [1..]

-- instance OEIS 195085 where
--   oeis = map (+ 1) $ elemIndices 2 (oeis @57918)

-- instance OEIS 195086 where
--   oeis = filter ((== 2) . (oeisIx @46660)) [1..]

-- instance OEIS 195087 where
--   oeis = filter ((== 3) . (oeisIx @46660)) [1..]

-- instance OEIS 195088 where
--   oeis = filter ((== 4) . (oeisIx @46660)) [1..]

-- instance OEIS 195089 where
--   oeis = filter ((== 5) . (oeisIx @46660)) [1..]

-- instance OEIS 195090 where
--   oeis = filter ((== 6) . (oeisIx @46660)) [1..]

-- instance OEIS 195091 where
--   oeis = filter ((== 7) . (oeisIx @46660)) [1..]

-- instance OEIS 195092 where
--   oeis = filter ((== 8) . (oeisIx @46660)) [1..]

-- instance OEIS 195093 where
--   oeis = filter ((== 9) . (oeisIx @46660)) [1..]

-- instance OEIS 195106 where
--   oeis = filter (\x -> (oeisIx @6530) x - (oeisIx @20639) x == 4) [1,3..]

-- instance OEIS 195118 where
--   oeis = filter f [3,5..] where
--      f x = last pfs - head pfs == 6 where pfs = (rowT @27748) x

-- instance OEIS 195142 where
--   oeis = scanl (+) 0 (oeis @90771)

-- instance OEIS 195143 where
--   oeis = scanl (+) 0 (oeis @91998)

-- instance OEIS 195145 where
--   oeis = scanl (+) 0 (oeis @113801)

instance OEIS 195150 where
  oeisIx (succ->fi->n) = genericLength [d | d <- [3..n], mod n d == 0, mod n (d - 1) /= 0]

-- instance OEIS 195238 where
--   oeis = filter (\x -> (oeisIx @1221) x `elem` [2,3] &&
--                                (oeisIx @6530) x `elem` [5,7] &&
--                                (mod x 7 == 0 || mod x 15 == 0)) [1..]

-- instance OEIS 195324 where
--   oeis = filter p [2,4..] where
--      p n = all ((== 0) . (oeisIx @10051)) $ takeWhile (> 1) $ map (n -) (oeis @5385)

-- instance OEIS 195376 where
--   oeis = map (`mod` 2) (oeis @64413)

-- instance OEIS 195437 where
--   oeis = tablList @195437
-- instance Table 195437 where
--   tabl = tail $ g 1 1 [0..] where
--      g m j xs = (filter ((== m) . (`mod` 2)) ys) : g (1 - m) (j + 2) xs'
--        where (ys,xs') = splitAt j xs
--   b195437 = bFile' "A195437" (concat $ take 101 (tabl @195437)) 0

-- instance OEIS 195470 where
--   oeisIx n = genericLength $ filter ((== 0) . (`mod` n)) $
--                          take (fromInteger n) (oeis @51)

-- instance OEIS 195610 where
--   oeisIx n = (oeis @195610) !! (n - 1)
--   oeis = catMaybes $ map k [1..] where
--      k x = elemIndex 0 $ map (`mod` x) $ take (fromInteger x) (oeis @51)

-- instance OEIS 195691 where
--   oeisIx = normal True 0 where
--     normal qLam k n = if n<2 then 0 else
--       (if n - 2<k then 1 else 0) +
--       (if qLam then normal True (k+1) (n - 2) else 0) +
--       sum [normal False k i * normal True k (n - 2-i) | i <- [0..n-2]]

-- instance OEIS 195758 where
--   oeisIx = (oeisIx @20639) . (oeisIx @16105)

-- instance OEIS 195759 where
--   oeisIx = (oeisIx @6530) . (oeisIx @16105)

-- instance OEIS 195942 where
--   oeis = filter (\x -> (oeisIx @10051) x == 0 && (oeisIx @10055) x == 1) (oeis @52382)

-- instance OEIS 195943 where
--   oeis = filter ((== 1) . (oeisIx @10055)) (oeis @52382)

-- instance OEIS 196032 where
--   oeis = filter f [1..] where
--      f 0 = False; f x = m == 0 || f x' where (x',m) = divMod x 4

-- instance OEIS 196046 where
--   oeisIx n = genericIndex (oeis @196046) (n - 1)
--   oeis = 0 : g 2 where
--     g x = y : g (x + 1) where
--       y | t > 0     = max (oeisIx t) (oeisIx t + 1)
--         | otherwise = maximum [oeisIx r, (oeisIx @196046) s, (oeisIx @1222) r + (oeisIx @1222) s]
--         where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 196047 where
--   oeisIx n = genericIndex (oeis @196047) (n - 1)
--   oeis = 0 : g 2 where
--      g x = y : g (x + 1) where
--        y = if t > 0 then (oeisIx @196047) t + (oeisIx @61775) t else (oeisIx @196047) r + (oeisIx @196047) s
--            where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 196048 where
--   oeisIx n = genericIndex (oeis @196048) (n - 1)
--   oeis = 0 : 1 : g 3 where
--      g x = y : g (x + 1) where
--        y = if t > 0 then (oeisIx @196048) t + (oeisIx @109129) t else (oeisIx @196048) r + (oeisIx @196048) s
--            where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 196049 where
--   oeisIx n = genericIndex (oeis @196049) (n - 1)
--   oeis = 0 : g 2 where
--      g x = y : g (x + 1) where
--        y | t > 0     = (oeisIx @196049) t + (oeisIx @64911) t
--          | otherwise = (oeisIx @196049) r + (oeisIx @196049) s + (oeisIx @64911) s
--          where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 196050 where
--   oeisIx n = genericIndex (oeis @196050) (n - 1)
--   oeis = 0 : g 2 where
--      g x = y : g (x + 1) where
--        y = if t > 0 then (oeisIx @196050) t + 1 else (oeisIx @196050) r + (oeisIx @196050) s
--            where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 196051 where
--   oeisIx n = genericIndex (oeis @196051) (n - 1)
--   oeis = 0 : g 2 where
--      g x = y : g (x + 1) where
--        y | t > 0     = (oeisIx @196051) t + (oeisIx @196047) t + (oeisIx @196050) t + 1
--          | otherwise = (oeisIx @196051) r + (oeisIx @196051) s +
--                        (oeisIx @196047) r * (oeisIx @196050) s + (oeisIx @196047) s * (oeisIx @196050) r
--          where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 196052 where
--   oeisIx n = genericIndex (oeis @196052) (n - 1)
--   oeis = 0 : g 2 where
--      g x = y : g (x + 1) where
--        y = if t > 0 then (oeisIx @1222) t + 1 else (oeisIx @196052) r + (oeisIx @196052) s
--            where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 196053 where
--   oeisIx n = genericIndex (oeis @196053) (n - 1)
--   oeis = 0 : g 2 where
--      g x = y : g (x + 1) where
--        y | t > 0     = (oeisIx @196053) t + 2 + 2 * (oeisIx @1222) t
--          | otherwise = (oeisIx @196053) r + (oeisIx @196053) s -
--                        (oeisIx @1222) r ^ 2  - (oeisIx @1222) s ^ 2 + (oeisIx @1222) x ^ 2
--          where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 196057 where
--   oeisIx n = genericIndex (oeis @196057) (n - 1)
--   oeis = 0 : g 2 where
--      g x = y : g (x + 1) where
--        y | t > 0     = (oeisIx @196057) t
--          | otherwise = (oeisIx @196057) r + (oeisIx @196057) s + (oeisIx @1222) r * (oeisIx @1222) s
--          where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 196062 where
--   oeisIx n = genericIndex (oeis @196062) (n - 1)
--   oeis = 0 : 1 : g 3 where
--      g x = y : g (x + 1) where
--        y | t > 0     = (oeisIx @196062) t
--          | otherwise = (oeisIx @196062) r + (oeisIx @196062) s - 0 ^ (x `mod` 4)
--          where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 196063 where
--   oeisIx n = genericIndex (oeis @196063) (n - 1)
--   oeis = 0 : 1 : g 3 where
--      g x = y : g (x + 1) where
--        y | t > 0     = (oeisIx @196063) t * (oeisIx t + 1) `div` (oeisIx @1222) t
--          | otherwise = (oeisIx @196063) r * (oeisIx @196063) s * (oeisIx @1222) x `div`
--                        (oeisIx r * (oeisIx @1222) s)
--          where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 196068 where
--   oeisIx n = genericIndex (oeis @196068) (n - 1)
--   oeis = 1 : g 2 where
--      g x = y : g (x + 1) where
--        y | t > 0     = (oeisIx @196068) t + (oeisIx @61775) t + 1
--          | otherwise = (oeisIx @196068) r + (oeisIx @196068) s - 1
--          where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 196149 where
--   oeis = filter f [1..] where
--      f n = all (<= 0) $ zipWith (-) (tail divs) (map (* 3) divs)
--                         where divs = (rowT @27750)' n

-- instance OEIS 196168 where
--   oeisIx 0 = 1
--   oeisIx n = foldl (\v b -> (2 * v + 1)* (b + 1)) 0 $ reverse $ unfoldr
--      (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2) n
--      where r v b = (2 * v + 1)* (b+1)

-- instance OEIS 196175 where
--   oeis = map (+ 2) $ elemIndices True $
--      zipWith (\x y -> x < 0 && y > 0) (oeis @36263) $ tail (oeis @36263)

-- instance OEIS 196189 where
--   oeis = f 1 [] where
--      f n xs = x : f (n+1) (x:xs) where
--        x = head [z | z <- [n+2..], z `notElem` xs, gcd z n == 1]

-- instance OEIS 196199 where
--   oeis = tablList @196199
-- instance Table 196199 where
--   rowCol n k = (rowT @196199) n !! k
--   tabf = map (rowT @196199) [0..]
--   rowT n = [-n..n]
--   b196199 = bFile' "A196199" (concat $ take 101 (tabf @196199)) 0

-- instance OEIS 196202 where
--   import Math.NumberTheory.Moduli (powerMod)
--   oeisIx n = powerMod 2 (p - 1) (p ^ 2) where p = (oeisIx @40) n

-- instance OEIS 196276 where
--   oeisIx n = (oeis @196276) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 1 (oeis @196274)

-- instance OEIS 196277 where
--   oeisIx n = (oeis @196277) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (> 1) (oeis @196274)

-- instance OEIS 196368 where
--   oeisIx n = fromEnum $ and $ zipWith (/=) (tail $ show n) (show n)
--   oeis = map (oeisIx @196368) [0..]

-- instance OEIS 196415 where
--   oeisIx n = (oeis @196415) !! (n - 1)
--   oeis =
--      map (+ 1) $ elemIndices 0 $ zipWith mod (oeis @36691) (oeis @53767)

-- instance OEIS 196486 where
--   oeis = tablList @196486
-- instance Table 196486 where
--   rowCol n k = (tabf @196486) !! (n - 1) !! (k-1)
--   rowT n = (tabf @196486) !! (n - 1)
--   tabf = map (tail . reverse) $ tail (tabf @227048)

-- instance OEIS 196526 where
--   oeisIx n = genericLength [c | let p = (oeisIx @40) n,
--                           c <- [-1,1..p-1], let b = p - c,
--                           gcd b c == 1,
--                           (oeisIx @6530) b ^ 2 < p || p == 3, (oeisIx @6530) c ^ 2 < p]

instance OEIS 196563 where
  oeisIx (fi->n) = genericLength [d | d <- show n, d `elem` "02468"]

instance OEIS 196564 where
  oeisIx (fi->n) = genericLength [d | d <- show n, d `elem` "13579"]

-- instance OEIS 196871 where
--   oeis = filter
--      (all (== 0) . map (oeisIx @10051) . takeWhile (> 2) . iterate (oeisIx @6370)) [1..]

-- instance OEIS 197081 where
--   oeisIx = p (drop 2 (oeis @2620)) where
--      p _      0             = 1
--      p (k:ks) m | m < k     = 0
--                 | otherwise = p ks (m - k) + p ks m

-- instance OEIS 197122 where
--   oeisIx = p (drop 2 (oeis @2620)) where
--      p _          0             = 1
--      p ks'@ (k:ks) m | m < k     = 0
--                     | otherwise = p ks' (m - k) + p ks m

-- instance OEIS 197181 where
--   oeisIx n = (oeis @197181) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 $
--      zipWith mod (map (oeisIx @66459) [1..]) [1..]

-- instance OEIS 197182 where
--   oeisIx = (oeisIx @64986) . (oeisIx @290)

-- instance OEIS 197183 where
--   oeisIx = (oeisIx @115944) . (oeisIx @290)

-- instance OEIS 197410 where
--   oeisIx = product . scanl1 (+) . (rowT @27750)

-- instance OEIS 197704 where
--   base_weight b g n | n == 0 = 0 | otherwise = (base_weight b g (n `div` b)) + (g $ n `mod` b)
--   interesting b g = filter f [1..] where f n = n `mod` (base_weight b g n) == 0
--   bin_interesting g = interesting 2 g
--   weights l n | (n >=0) && ((length l) > fromInteger n) = l !! fromInteger n | otherwise = 0
--   original = weights [4,3]
--   let a = bin_interesting original

-- instance OEIS 197863 where
--   oeisIx n = product $
--      zipWith (^) (oeisIx_row n) (map (max 2) $ (rowT @124010) n)

-- instance OEIS 197877 where
--   oeisIx n = (oeis @197877) !! n
--   oeis = map (fromJust . (`elemIndex` (oeis @96535))) [0..]

-- instance OEIS 197911 where
--   oeis = scanl (+) 0 (oeis @56832)

-- instance OEIS 197945 where
--   oeisIx n = genericLength $ takeWhile (`isPrefixOf` (show $ (oeisIx @96095) $ n+1)) $
--                                  tail $ inits $ show $ (oeisIx @96095) n

-- instance OEIS 198069 where
--   oeis = tablList @198069
-- instance Table 198069 where
--   rowCol n k = (tabf @198069) !! n !! k
--   rowT n = (tabf @198069) !! n
--   tabf = [0] : iterate f [1, 1] where
--      f (x:xs) = ys ++ tail (reverse ys) where ys = (2 * x) : xs

-- instance OEIS 198259 where
--   oeisIx n = sum $ map (oeisIx . (mod n)) [1..n]

-- instance OEIS 198273 where
--   oeis = map (oeisIx @40) $ filter ((== 0) . (oeisIx @67432)) [1..]

-- instance OEIS 198277 where
--   oeisIx n = (oeisIx @40) . (+ 1) . fromJust $ elemIndex n (oeis @67432)

-- instance OEIS 198328 where
--   oeisIx n = genericIndex (oeis @198328) (n - 1)
--   oeis = 1 : 1 : g 3 where
--      g x = y : g (x + 1) where
--        y = if t > 0 then (oeisIx @40) (oeisIx t) else (oeisIx @198328) r * (oeisIx @198328) s
--            where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 198332 where
--   oeisIx n = genericIndex (oeis @198332) (n - 1)
--   oeis = 0 : g 2 where
--      g x = y : g (x + 1) where
--        y | t > 0     = (oeisIx @198332) t + 2 * (oeisIx @1222) t
--          | otherwise = (oeisIx @198332) r + (oeisIx @198332) s + 2 * (oeisIx @1222) r * (oeisIx @1222) s
--          where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 198384 where
--   oeis = map (^ 2) (oeis @198388)

-- instance OEIS 198385 where
--   oeis = map (^ 2) (oeis @198389)

-- instance OEIS 198386 where
--   oeis = map (^ 2) (oeis @198390)

-- instance OEIS 198387 where
--   oeis = zipWith (-) (oeis @198385) (oeis @198384)

-- instance OEIS 198388 where
--   oeis = map (\ (x,_,_) -> x) ts where
--      ts = [ (u,v,w) | w <- [1..], v <- [1..w-1], u <- [1..v-1],
--                      w^2 - v^2 == v^2 - u^2]

-- instance OEIS 198389 where
--   oeis = map (\ (_,x,_) -> x) ts where
--      ts = [ (u,v,w) | w <- [1..], v <- [1..w-1], u <- [1..v-1],
--                      w^2 - v^2 == v^2 - u^2]

-- instance OEIS 198390 where
--   oeis = map (\ (_,_,x) -> x) ts where
--      ts = [ (u,v,w) | w <- [1..], v <- [1..w-1], u <- [1..v-1],
--                      w^2 - v^2 == v^2 - u^2]

-- instance OEIS 198409 where
--   oeisIx n = (oeis @198409) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 1 $ map (oeisIx @8966) $
--      zipWith gcd (oeis @198384) $ zipWith gcd (oeis @198385) (oeis @198386)

-- instance OEIS 198435 where
--   oeis = map (oeisIx @198384) (oeis @198409)

-- instance OEIS 198436 where
--   oeis = map (oeisIx @198385) (oeis @198409)

-- instance OEIS 198437 where
--   oeis = map (oeisIx @198386) (oeis @198409)

-- instance OEIS 198438 where
--   oeis = map (oeisIx @198387) (oeis @198409)

-- instance OEIS 198439 where
--   oeis = map (oeisIx @198388) (oeis @198409)

-- instance OEIS 198440 where
--   oeis = map (oeisIx @198389) (oeis @198409)

-- instance OEIS 198441 where
--   oeis = map (oeisIx @198390) (oeis @198409)

-- instance OEIS 198726 where
--   import Data.MemoCombinators (memo2, list, integral)
--   oeisIx n = (oeis @198726) !! n
--   oeis = f 0 [] $ tail (oeis @3136) where
--      f u vs ws'@ (w:ws) | u < w = (p' vs u) : f (u + 1) vs ws'
--                        | otherwise = f u (vs ++ [w]) ws
--      p' = memo2 (list integral) integral p
--      p _  0 = 1
--      p [] _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p' ks' (m - k) + p' ks m

-- instance OEIS 198727 where
--   import Data.MemoCombinators (memo2, list, integral)
--   oeisIx n = (oeis @198727) !! n
--   oeis = f 0 [] $ tail (oeis @3136) where
--      f u vs ws'@ (w:ws) | u < w = (p' vs u) : f (u + 1) vs ws'
--                        | otherwise = f u (vs ++ [w]) ws
--      p' = memo2 (list integral) integral p
--      p _  0 = 1
--      p [] _ = 0
--      p (k:ks) m = if m < k then 0 else p' ks (m - k) + p' ks m

-- instance OEIS 198772 where
--   oeis = filter ((== 1) . (oeisIx @88534)) (oeis @3136)

-- instance OEIS 198773 where
--   oeis = filter ((== 2) . (oeisIx @88534)) (oeis @3136)

-- instance OEIS 198774 where
--   oeis = filter ((== 3) . (oeisIx @88534)) (oeis @3136)

-- instance OEIS 198775 where
--   oeis = filter ((== 4) . (oeisIx @88534)) (oeis @3136)

-- instance OEIS 198799 where
--   oeisIx n = fromJust $ elemIndex n (oeis @88534)

-- instance OEIS 199016 where
--   199016 = p (oeis @2858) where
--      p _ 0 = 1
--      p us'@ (u:us) m | m < u     = 0
--                     | otherwise = p us' (m - u) + p us m

-- instance OEIS 199017 where
--   oeisIx = p (oeis @2858) where
--      p _  0 = 1
--      p (u:us) m | m < u = 0
--                 | otherwise = p us (m - u) + p us m

-- instance OEIS 199045 where
--   oeisIx n = head $
--      filter ((<= 2) . (oeisIx @54055)) $ map (* 2^n) [oeisIx (n - 1)..]

-- instance OEIS 199118 where
--   oeisIx = p (oeis @2859) where
--      p _ 0 = 1
--      p us'@ (u:us) m | m < u     = 0
--                     | otherwise = p us' (m - u) + p us m

-- instance OEIS 199119 where
--   oeisIx = p (oeis @2859) where
--      p _  0 = 1
--      p (u:us) m | m < u = 0
--                 | otherwise = p us (m - u) + p us m

-- instance OEIS 199120 where
--   oeisIx = p (oeis @3666) where
--      p _ 0 = 1
--      p us'@ (u:us) m | m < u     = 0
--                     | otherwise = p us' (m - u) + p us m

-- instance OEIS 199121 where
--   oeisIx = p (oeis @3666) where
--      p _  0 = 1
--      p (u:us) m | m < u =
--                 | otherwise = p us (m - u) + p us m

-- instance OEIS 199122 where
--   oeisIx = p (oeis @1857) where
--      p _ 0 = 1
--      p us'@ (u:us) m | m < u     = 0
--                     | otherwise = p us' (m - u) + p us m

-- instance OEIS 199123 where
--   oeisIx = p (oeis @1857) where
--      p _  0 = 1
--      p (u:us) m | m < u = 0
--                 | otherwise = p us (m - u) + p us m

-- instance OEIS 199162 where
--   oeis = 1 : 6 : ulam 2 6 (oeis @199162)

-- instance OEIS 199238 where
--   oeis = zipWith mod [1..] $ tail (oeis @120)

-- instance OEIS 199262 where
--   oeisIx n = (fromJust $ elemIndex n (oeis @199238)) + 1

-- instance OEIS 199332 where
--   oeis = tablList @199332
--   rowCol = rowCol_off @199332 @1 @1
--   rowT   = rowT_off   @199332 @1
--   oeis = concat (tabl @199332)
--   tabl = f [1..] [1..] where
--      f (x:xs) ys'@ (y:ys) | odd x  = (replicate x y) : f xs ys
--                          | even x = us : f xs vs
--                          where (us,vs) = splitAt x ys'

-- instance OEIS 199333 where
--   oeis = tablList @199333
-- instance Table 199333 where
--   rowT n = (tabl @199333) !! n
--   oeis = concat (tabl @199333)
--   tabl = iterate
--      (\row -> map (oeisIx @159477) $ zipWith (+) ([0] ++ row) (row ++ [0])) [1]

-- instance OEIS 199424 where
--   oeisIx n = fromJust $ findIndex (elem $ (oeisIx @40) n) (tabl @199333)

-- instance OEIS 199425 where
--   oeisIx n = (oeis @199425) !! n
--   oeis = f [] (tabl @199333) where
--      f ps (ts:tts) =  (length ps') : f ps' tts where
--        ps' = ps `union` (take ((length ts - 1) `div` 2) $ tail ts)

-- instance OEIS 199581 where
--   oeisIx n = (rowT @199333) (2*n) !! n

-- instance OEIS 199582 where
--   oeisIx n = (rowT @199333) n !! (n `div` 2)

instance OEIS 199682 where
  oeisIx = (+ 1) . (* 2) . (10 ^)

-- instance OEIS 199694 where
--   oeisIx = sum . (rowT @199333)

-- instance OEIS 199695 where
--   oeisIx = product . (rowT @199333)

-- instance OEIS 199696 where
--   oeisIx n = product . (take (n `div` 2 + 1)) $ (rowT @199333) n

-- instance OEIS 199713 where
--   oeisIx n = f ps where
--      f (q:qs) = if sort (show q) `contains` sort (show p) then q else f qs
--      contains _  []                         = True
--      contains [] _                          = False
--      contains (u:us) vs'@ (v:vs) | u == v    = contains us vs
--                                 | otherwise = contains us vs'
--      p : ps = drop (n - 1) (oeis @40)

-- instance OEIS 199745 where
--   oeis = filter (\x -> 2 * (oeisIx x) == (oeisIx @8472) x) [1..]

-- instance OEIS 199770 where
--   oeisIx n = (oeis @199770) !! (n - 1)
--   oeis = 1 : f [1] where
--      f xs = y : f (y : xs) where
--        y = sum $ zipWith xor xs $ reverse xs :: Integer

-- instance OEIS 199771 where
--   oeisIx  = sum . (rowT @199332)

instance OEIS 199799 where
  oeis = [x | x <- [1..111111], gcd x 111111 == 1]

-- instance OEIS 199921 where
--   oeisIx n = (oeis @199921) !! (n - 1)
--   oeis = map length $ group $ sort $ map (oeisIx . (oeisIx @61493)) [1..3999]

-- instance OEIS 199968 where
--   oeisIx = head . (rowT @173540)

-- instance OEIS 200069 where
--   oeis = 1 : 4 : zipWith (+)
--      (map (* 4) $ tail (oeis @200069)) (map (* 13) (oeis @200069))

-- instance OEIS 200087 where
--   oeisIx n = (fromJust $ elemIndex n (oeis @79878)) + 1

-- instance OEIS 200379 where
--   oeisIx n = (tabl @56230) !! n !! (n - 1)

-- instance OEIS 200612 where
--   oeis = filter f [2..] where
--      f x = r == 0 && x' == 3 where (x',r) = divMod (oeisIx x) (oeisIx x)

-- instance OEIS 200723 where
--   oeisIx = sum . zipWith (*) [1..] . map (oeisIx @63524) . (rowT @165430)

-- instance OEIS 200737 where
--   oeis = tablList @200737
-- instance Table 200737 where
--   rowCol = rowCol_off @200737 @1 @1
--   rowT n = sort
--      [v*w + w*u + u*v | w <- [1..n], v <- [1..w], u <- [1..v]]
--   tabl = map (rowT @200737) [1..]

-- instance OEIS 200738 where
--   oeis = f (tabl @200737) where
--      f (rs:rss'@ (rs':rss)) =
--        (length $ takeWhile (== EQ) $ zipWith compare rs rs') : f rss'

-- instance OEIS 200741 where
--   oeis = tablList @200741
-- instance Table 200741 where
--   rowCol = rowCol_off @200741 @1 @1
--   rowT = nub . (rowT @200737)
--   tabl = map (rowT @200741) [1..]

-- instance OEIS 200742 where
--   oeis = f (tabl @200741) where
--      f (rs:rss'@ (rs':rss)) =
--        (length $ takeWhile (== EQ) $ zipWith compare rs rs') : f rss'

-- instance OEIS 200745 where
--   oeisIx n = p [nd | nd <- [1..n], mod n nd /= 0] n where
--      p _  0 = 1
--      p [] _ = 0
--      p (k:ks) m | m < k = 0 | otherwise = p ks (m - k) + p ks m

-- instance OEIS 200996 where
--   oeisIx n = max (oeisIx n) (oeisIx n)

-- instance OEIS 201009 where
--   oeisIx = (oeis @201009)
--   oeis = 1 : filter
--      (\x -> (rowT @27748) x == (rowT @27748) (oeisIx x)) [2..]

-- instance OEIS 201053 where
--   oeis = 0 : concatMap (\x -> genericReplicate (oeisIx x) (x ^ 3)) [1..]

-- instance OEIS 201208 where
--   oeis = concat $ zipWith ($) (map replicate [1..]) (oeis @34)

-- instance OEIS 201217 where
--   oeisIx n = (oeis @201217) !! (n - 1)
--   oeis = elemIndices 0 (oeis @61023)

-- instance OEIS 201266 where
--   oeisIx n = [d | d <- [1..], (oeisIx @175755) n `mod` d == 0] !! 6

-- instance OEIS 201462 where
--   oeis = [x | x <- [1..], gcd x (oeisIx x) > 1]

-- instance OEIS 201629 where
--   oeisIx = (* 2) . (oeisIx @4524) . (+ 1)

-- instance OEIS 201634 where
--   oeis = tablList @201634
-- instance Table 201634 where
--   rowT n = (tabl @201634) !! n
--   tabl = iterate (\xs -> scanl1 (+) xs ++ [2 * last xs]) [1]

-- instance OEIS 201651 where
--   oeisIx :: Integer -> Integer -> Integer
--   oeisIx n 0 = n
--   oeisIx n k = (oeisIx @54240) (n `xor` k) (shift (n .&. k) 2)
--   oeisIx_row n = map (oeisIx n) [0..n]
--   oeisIx_tabl = map (rowT @201651) [0..]

-- instance OEIS 201881 where
--   oeisIx n = (oeis @201881) !! (n - 1)
--   oeis = map length $ group (oeis @7061)

-- instance OEIS 202014 where
--   oeisIx n = (fromJust $ elemIndex n (oeis @63882)) + 1

-- instance OEIS 202016 where
--   oeisIx n = (oeis @202016) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 1 (oeis @132157)

-- instance OEIS 202018 where
--   oeisIx = (+ 41) . (oeisIx @2378)

-- instance OEIS 202022 where
--   oeisIx = fromEnum . (== 1) . (oeisIx @43537)

-- instance OEIS 202089 where
--   oeisIx n = (oeis @202089) !! (n - 1)
--   oeis = elemIndices 0 (oeis @240752)

instance OEIS 202138 where
  oeis = [17, 78, 19, 23, 29, 77, 95, 77, 1, 11, 13, 15, 1, 55]

-- instance OEIS 202262 where
--   oeis = [4,6,8,9] ++ [x | u <- (oeis @202262), v <- [4,6,8,9],
--                          let x = 10 * u + v, v /= 9 || (oeisIx @10051) x == 0]

-- instance OEIS 202337 where
--   oeis = f (oeis @62723) where
--      f (x:xs'@ (x':xs)) = if x == x' then f xs' else x : f xs'

-- instance OEIS 202340 where
--   oeisIx n = (oeis @202340) !! n
--   oeis = map length $ group (oeis @5374)

-- instance OEIS 202341 where
--   oeisIx n = (oeis @202341) !! (n - 1)
--   oeis = elemIndices 1 (oeis @202340)

-- instance OEIS 202342 where
--   oeisIx n = (oeis @202342) !! (n - 1)
--   oeis = elemIndices 2 (oeis @202340)

-- instance OEIS 202387 where
--   oeis = [x | x <- (oeis @120944),
--                       oeisIx x == sum (map (oeisIx @7953) (oeisIx_row x))]

-- instance OEIS 202822 where
--   oeis = filter ((== 1) . flip mod 3) (oeis @3136)

-- instance OEIS 203069 where
--   oeisIx n = (oeis @203069) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f u vs = g vs where
--        g (w:ws) | odd z && (oeisIx @10051)' z == 0 = w : f w (delete w vs)
--                 | otherwise = g ws
--                 where z = u + w

instance OEIS 203363 where
  oeis = [91, 85, 51, 38, 33, 29, 23, 19, 17, 13, 11, 2, 7, 1]

-- instance OEIS 203400 where
--   oeis = scanl1 (+) (oeis @50935)

-- instance OEIS 203463 where
--   oeisIx n = (oeis @203463) !! (n - 1)
--   oeis = elemIndices 1 (oeis @20985)

-- instance OEIS 203531 where
--   oeisIx n = (oeis @203531) !! n
--   oeis = map length $ group (oeis @20985)

-- instance OEIS 203602 where
--   oeisIx n = (oeis @203602) !! (n - 1)
--   oeis = map (+ 1) $ mapMaybe (`elemIndex` (oeis @92401)) [1..]

-- instance OEIS 203776 where
--   oeisIx = p (oeis @47209) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 203814 where
--   oeisIx n = genericLength [x | x <- [0..n], (oeisIx @43537) x == (oeisIx @43537) n]

-- instance OEIS 203907 where
--   oeisIx n = numerator $ head
--      [x | x <- map (* fromInteger n) fracts, denominator x == 1]
--      where fracts = zipWith (%) (oeis @202138) (oeis @203363)
--   oeis = map (oeisIx @203907) [1..]

-- instance OEIS 203908 where
--   oeisIx n = product $ map abs $
--               zipWith (-) (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 203967 where
--   oeisIx n = genericLength $ takeWhile (<= n) (oeis @9087)

-- instance OEIS 203976 where
--   oeis = 0 : 1 : 5 : 4 : zipWith (-)
--      (map (* 3) $ drop 2 (oeis @203976)) (oeis @203976)

-- instance OEIS 204093 where
--   oeis = map (* 6) (oeis @7088)

-- instance OEIS 204094 where
--   oeis = map (* 7) (oeis @7088)

-- instance OEIS 204095 where
--   oeis = map (* 8) (oeis @7088)

-- instance OEIS 204138 where
--   oeis = filter ((== 1) . (oeisIx @10051)) $ drop 6 (oeis @1945)

-- instance OEIS 204200 where
--   oeis = 1 : 1 : 2 : zipWith (+) (oeis @204200) (tail $ zipWith (-)
--      (map (* 4) (tail (oeis @204200))) (map (* 3) (oeis @204200)))

-- instance OEIS 204293 where
--   oeis = tablList @204293
-- instance Table 204293 where
--   rowT n = (tabl @204293) !! n
--   tabl = [1] : [0,0] : f [1] [0,0] where
--      f xs ys = xs' : f ys xs' where
--        xs' = zipWith (+) ([0,0] ++ xs) (xs ++ [0,0])

-- instance OEIS 204389 where
--   oeisIx = p (oeis @2808) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

instance OEIS 204457 where
  oeis = [x | x <- [1, 3 ..], mod x 13 > 0]

-- instance OEIS 204515 where
--   oeisIx n = (oeisIx @247500) (2 * n) n

-- instance OEIS 204556 where
--   oeisIx = head . (rowT @45975)

-- instance OEIS 204557 where
--   oeisIx = last . (rowT @45975)

-- instance OEIS 204558 where
--   oeisIx = sum . (rowT @45975)

instance OEIS 204674 where
  oeisIx n = n * (n * (4 * n + 5) + 2) + 1

instance OEIS 204675 where
  oeisIx n = 2 * n * (8 * n + 1) + 1

-- instance OEIS 204878 where
--   oeisIx n = (oeis @204878) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @97796)

-- instance OEIS 204879 where
--   oeisIx n = (oeis @204879) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (> 0) (oeis @97796)

-- instance OEIS 205216 where
--   oeisIx = p $ tail (oeis @5836) where
--      p _ 0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 205217 where
--   oeisIx = p $ tail (oeis @5836) where
--      p _ 0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 205565 where
--   oeisIx n = sum $ map (oeisIx . (n -)) $
--                     takeWhile (<= n `div` 2) (oeis @5836)

-- instance OEIS 205666 where
--   oeis = [x | x <- [1..], (oeisIx @65306) x == fi x]

-- instance OEIS 205667 where
--   oeis = filter ((== 1) . (oeisIx @39997)) [0..]

-- instance OEIS 205745 where
--   oeisIx n = sum $ map ((`mod` 2) . (n `div`))
--      [p | p <- takeWhile (<= n) (oeis @40), n `mod` p == 0]

-- instance OEIS 205956 where
--   oeisIx n = (oeis @205956) !! (n - 1)
--   oeis = sort $ filter ((== 1) . (oeisIx @10051)) $
--                         nub $ map read (tail $ subsequences "39467139")

-- instance OEIS 205959 where
--   oeisIx n = product $ map (div n) $ (rowT @27748) n

-- instance OEIS 206159 where
--   oeis = filter ((<= 2) . (oeisIx @95048)) [1..]

-- instance OEIS 206244 where
--   oeisIx = p $ tail (oeis @2275) where
--      p _             0 = 1
--      p rus'@ (ru:rus) n = if n < ru then 0 else p rus' (n - ru) + p rus n

-- instance OEIS 206245 where
--   oeisIx = p (oeis @83278) where
--      p _      0 = 1
--      p rps'@ (rp:rps) n = if n < rp then 0 else p rps' (n - rp) + p rps n

-- instance OEIS 206282 where
--   oeis = 1 : 1 : -1 : -4 :
--      zipWith div
--        (zipWith (+)
--          (zipWith (*) (drop 3 (oeis @206282))
--                       (drop 1 (oeis @206282)))
--          (drop 2 (oeis @206282)))
--        (oeis @206282)

-- instance OEIS 206332 where
--   oeis = compl [1..] (oeis @92754) where
--      compl (u:us) vs'@ (v:vs) | u == v = compl us vs
--                              | u /= v = u : compl us vs'

-- instance OEIS 206351 where
--   oeis = 1 : 3 : map (subtract 4)
--                  (zipWith (-) (map (* 7) (tail (oeis @206351))) (oeis @206351))

-- instance OEIS 206368 where
--   oeisIx n = (oeis @206368) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @206475)

-- instance OEIS 206369 where
--   oeisIx n = product $
--      zipWith h (oeisIx_row n) (map toInteger $ (rowT @124010) n) where
--              h p e = sum $ take (fromInteger e + 1) $
--                            iterate ((* p) . negate) (1 - 2 * (e `mod` 2))

-- instance OEIS 206424 where
--   oeisIx = genericLength . filter (== 1) . (rowT @83093)

-- instance OEIS 206462 where
--   oeis = map (oeisIx . (+ 1)) $
--                      elemIndices 1 $ map (oeisIx @8966) (oeis @1043)

-- instance OEIS 206475 where
--   oeis = zipWith (-) (tail (oeis @206369)) (oeis @206369)

-- instance OEIS 206497 where
--   oeisIx n = genericIndex (oeis @206497) (n - 1)
--   oeis = 1 : g 2 where
--     g x = y : g (x + 1) where
--       y | t > 0     = (oeisIx @206497) t
--         | otherwise = product $ zipWith (\p e -> (oeisIx @142) e * (oeisIx @206497) p ^ e)
--                                         (oeisIx_row x) (oeisIx_row x)
--         where t = (oeisIx @49084) x

-- instance OEIS 206498 where
--   oeisIx 1 = 0
--   oeisIx 2 = 2
--   oeisIx x = if t > 0 then (oeisIx @196062) t + t `mod` 2 else (oeisIx @196062) x
--               where t = (oeisIx @49084) x

-- instance OEIS 206553 where
--   oeisIx n = head [p | p <- drop 2 (oeis @40),
--                         (oeisIx @10051) (2^n + p*2^ (div (n+1) 2) - 1) == 1]

-- instance OEIS 206702 where
--   import Control.Monad
--   --this creates the powerset of a set
--   ps n = filterM (\x->[True,False]) n
--   --given a set z, this creates the set X of (a+b) for all a, b, in Z
--   addset z = do x<-z
--                 y<-z
--                 [x+y]
--   --this check if two sets are disjoint
--   disjoint a [] = True
--   disjoint a (c:d) = (disjoint a d) && ((filter (\x->x==c) a) ==[])
--   --this checks if a set z is disjoint from its "adsset" in a certain Zn, n being the second argument.
--   good z n = disjoint z (map (\x->rem x n) (addset z))
--   --this generates all off Zn's subsets with the required property.
--   sets n = filter (\x ->good x n) (ps [0.. (n - 1)])
--   --this generates the first n terms of the sequence
--   sequence n = map (\x->length (sets x) ) [1..n]

-- instance OEIS 206778 where
--   oeis = tablList @206778
-- instance Table 206778 where
--   rowCol n k = (rowT @206778) n !! k
--   rowT = filter ((== 1) . (oeisIx @8966)) . (rowT @27750)
--   tabf = map (rowT @206778) [1..]

-- instance OEIS 206787 where
--   oeisIx = sum . filter odd . (rowT @206778)

-- instance OEIS 206913 where
--   oeisIx n = last $ takeWhile (<= n) (oeis @6995)

-- instance OEIS 206914 where
--   oeisIx n = head $ dropWhile (< n) (oeis @6995)

-- instance OEIS 206920 where
--   oeis = scanl1 (+) (oeis @6995)

-- instance OEIS 206925 where
--   import Data.Map (fromList, (!), insert)
--   oeisIx n = (oeis @206925) !! (n - 1)
--   oeis = 1 : f [0, 1] (fromList [ (Bin [0], 1), (Bin [1], 1)]) where
--      f bs'@ (b:bs) m = y : f (succ bs') (insert (Bin bs') y m) where
--        y = m ! (Bin bs) +
--            length (filter (\ds -> ds == reverse ds) $ tail $ inits bs')
--        succ [] = [1]; succ (0:ds) = 1 : ds; succ (1:ds) = 0 : succ ds

-- instance OEIS 206941 where
--   oeisIx = (oeisIx @10) . (oeisIx @2322)

-- instance OEIS 207193 where
--   oeisIx 1 = 1
--   oeisIx n | p == 2 && e > 2 = 2 ^ (e - 2)
--             | otherwise       = (p - 1) * p ^ (e - 1)
--             where p = (oeisIx @25473) n; e = (oeisIx @25474) n

-- instance OEIS 207337 where
--   oeis = f (oeis @2522) where
--      f (x:xs) | m == 0 && (oeisIx @10051) y == 1 = y : f xs
--               | otherwise                = f xs
--               where (y,m) = divMod x 10

-- instance OEIS 207432 where
--   oeisIx n = (fromJust $ elemIndex (oeisIx n) (oeis @66680)) + 1

-- instance OEIS 207481 where
--   oeis = [x | x <- [1..], and $ zipWith (<=)
--                       (map toInteger $ (rowT @124010) x) (oeisIx_row x) ]

-- instance OEIS 207674 where
--   oeisIx n = (oeis @207674) !! (n - 1)
--   oeis = filter
--      (\x -> (rowT @27750) x `intersect` (rowT @70165) x == (rowT @27750) x) [1..]

-- instance OEIS 207675 where
--   oeisIx n = (oeis @207675) !! (n - 1)
--   oeis = filter
--      (\x -> (rowT @27750) x `intersect` (rowT @70165) x /= (rowT @27750) x) [1..]

-- instance OEIS 207852 where
--   oeisIx n = (fromJust $ elemIndex n (oeis @178830)) + 1

-- instance OEIS 207954 where
--   oeis = filter ((== 1) . (oeisIx @136522)) (oeis @33075)

-- instance OEIS 208083 where
--   oeisIx = sum . map (oeisIx @10051) . (rowT @81118)

-- instance OEIS 208091 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @208083))

-- instance OEIS 208101 where
--   oeis = tablList @208101
-- instance Table 208101 where
--   rowT n = (tabl @208101) !! n
--   tabl =  iterate
--      (\row -> zipWith (+) ([0,1] ++ init row) (row ++ [0])) [1]

-- instance OEIS 208131 where
--   oeis = scanl (*) 1 $ (oeis @52901)

-- instance OEIS 208134 where
--   oeisIx = genericLength . filter (== 0) . (rowT @8975)

-- instance OEIS 208177 where
--   oeis = filter ((== 1) . (oeisIx @10051)) [1,129..]

-- instance OEIS 208178 where
--   oeis = filter ((== 1) . (oeisIx @10051)) [1,257..]

-- instance OEIS 208238 where
--   oeisIx = genericIndex (oeis @208238)
--   oeis = f nns $ filter ((== 1) . (oeisIx @10051)' . fst) nns where
--      f mms'@ ((m,ms):mms) pps'@ ((p,ps):pps) =
--        if m == p then f mms' pps else q : f mms pps'
--        where q = fst $ fromJust $ find ((ms `isInfixOf`) . snd) pps'
--      nns = zip [0..] (tabf @30308)

-- instance OEIS 208239 where
--   oeis = tablList @208239
-- instance Table 208239 where
--   rowCol n k = (rowT @208239) n !! k
--   rowT n = map (+ n) $ zipWith (-) divs $ reverse divs
--                   where divs = (rowT @27750) n
--   tabl = map (rowT @208239) [1..]

-- instance OEIS 208241 where
--   oeisIx = genericIndex (oeis @208241)
--   oeis = f nns $ filter ((== 1) . (oeisIx @10051)' . fst) nns where
--      f mms'@ ((m,ms):mms) pps'@ ((p,ps):pps) =
--        if m == p then f mms' pps else q : f mms pps'
--        where q = fst $ fromJust $ find ((ms `isPrefixOf`) . snd) pps'
--      nns = zip [1..] $ map reverse $ tail (tabf @30308)

-- instance OEIS 208245 where
--   oeis = tablList @208245
-- instance Table 208245 where
--   rowCol = rowCol_off @208245 @1 @1
--   rowT   = rowT_off   @208245 @1
--   tabl = map fst $ iterate f ([1], [1, 1]) where
--      f (us, vs) = (vs, zipWith (+) ([0] ++ us ++ [0]) (us ++ [0, 1]))

-- instance OEIS 208247 where
--   oeisIx n = (oeis @95841) !! (n - 1)
--   oeis = filter ((== 1) . (oeisIx @71330)) (oeis @961)

-- instance OEIS 208259 where
--   oeis = 1 : map ((+ 1) . (* 10)) (oeis @131835)

-- instance OEIS 208260 where
--   oeis = filter ((== 0) . (oeisIx @10051)') (oeis @208259)

-- instance OEIS 208278 where
--   oeisIx = sum . (rowT @8975)

-- instance OEIS 208279 where
--   oeisIx n = (oeisIx @8975) (2*n) n

-- instance OEIS 208280 where
--   oeisIx = genericLength . nub . (rowT @8975)

-- instance OEIS 208341 where
--   oeis = tablList @208341
-- instance Table 208341 where
--   rowCol = rowCol_off @208341 @1 @1
--   rowT   = rowT_off   @208341 @1
--   tabl = map reverse (tabl @106195)

-- instance OEIS 208355 where
--   oeisIx n = (oeisIx @208101) n n
--   oeis = map last (tabl @208101)

-- instance OEIS 208448 where
--   oeis = zipWith gcd (oeis @10786) $ tail (oeis @10786)

-- instance OEIS 208449 where
--   oeisIx n = (oeis @208449) !! (n - 1)
--   oeis = map numerator $
--      zipWith (%) (tail (oeis @10786)) (oeis @10786)

-- instance OEIS 208450 where
--   oeisIx n = (oeis @208450) !! (n - 1)
--   oeis = map denominator $
--      zipWith (%) (tail (oeis @10786)) (oeis @10786)

-- instance OEIS 208570 where
--   oeisIx n = lcm n $ (oeisIx @7978) n

-- instance OEIS 208662 where
--   oeisIx n = head [m | m <- [1..], let p = (oeisIx @65091) n,
--      let q = 2 * m - p, (oeisIx @10051)' q == 1,
--      all ((== 0) . (oeisIx @10051)') $ map (2 * m -) $ take (n - 1) (oeis @65091)]

-- instance OEIS 208768 where
--   oeisIx n = (oeis @208768) !! (n - 1)
--   oeis = nub (oeis @70198)

-- instance OEIS 208852 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @90895))

-- instance OEIS 208976 where
--   oeis = map (subtract 1) $ tail (oeis @50168)

-- instance OEIS 208981 where
--   oeisIx = genericLength . takeWhile ((== 0) . (oeisIx @209229)) . (rowT @70165)

-- instance OEIS 208983 where
--   oeisIx n = (oeisIx @208101) (2 * n) n

-- instance OEIS 209037 where
--   oeisIx n = p (max 1 (n `div` 3)) n where
--      p _ 0 = 1
--      p k m = if m < k then 0 else p k (m - k) + p (k + 1) m

-- instance OEIS 209038 where
--   oeisIx n = p (max 1 (n `div` 4)) n where
--      p _ 0 = 1
--      p k m = if m < k then 0 else p k (m - k) + p (k + 1) m

-- instance OEIS 209039 where
--   oeisIx n = p (max 1 (n `div` 5)) n where
--      p _ 0 = 1
--      p k m = if m < k then 0 else p k (m - k) + p (k + 1) m

-- instance OEIS 209061 where
--   oeis = filter
--      (all (== 1) . map (oeisIx . fi) . (rowT @124010)) [1..]

-- instance OEIS 209211 where
--   oeis = filter (\x -> (x - 1) `gcd` (oeisIx @10) x == 1) [1..]

-- instance OEIS 209229 where
--   oeisIx n | n < 2 = n
--             | n > 1 = if m > 0 then 0 else (oeisIx @209229) n'
--             where (n',m) = divMod n 2

-- instance OEIS 209297 where
--   oeis = tablList @209297
-- instance Table 209297 where
--   rowCol n k = k * n + k - n
--   rowT n = map (oeisIx n) [1..n]
--   tabl = map (rowT @209297) [1..]

-- instance OEIS 209403 where
--   oeisIx n = sum $
--      zipWith (*) (reverse $ take n (oeis @40)) (oeis @65091)

-- instance OEIS 209561 where
--   oeis = tablList @209561
-- instance Table 209561 where
--   rowCol = rowCol_off @209561 @1 @1
--   rowT   = rowT_off   @209561 @1
--   tabl = [1] : iterate
--                  (\row -> zipWith (+) ([1] ++ row) (row ++ [0])) [1,1]

-- instance OEIS 209675 where
--   oeisIx = (oeisIx @3484) . (* 2)

-- instance OEIS 209802 where
--   oeis = scanl1 (+) (oeis @166234)

-- instance OEIS 209815 where
--   oeisIx n = p [1..n - 1] (2*n) where
--      p _          0 = 1
--      p []         _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 209816 where
--   oeisIx n = p [1..n] (2*n) where
--      p _          0 = 1
--      p []         _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 209878 where
--   oeis = iterate (oeisIx @36839) 20169

-- instance OEIS 209879 where
--   oeis = iterate (oeisIx @36839) 6999

-- instance OEIS 209880 where
--   oeis = iterate (oeisIx @36839) 29

-- instance OEIS 209933 where
--   oeisIx n = (oeis @209933) !! (n - 1)
--   oeis = filter f [1..] where
--      f x = head (ds x) /= 0 && all (== 0) (map ((mod x)) (ds x)) where
--        ds = sort . nub . concatMap (unfoldr (\z ->
--             if z == 0 then Nothing else Just $ swap $ divMod z 10)) .
--             (rowT @27750)

-- instance OEIS 210108 where
--   oeis = tablList @210108
-- instance Table 210108 where
--   rowT n = (tabl @210108) !! n
--   tabl = zipWith take [1..] (tabf @8301)

-- instance OEIS 210111 where
--   oeis = tablList @210111
-- instance Table 210111 where
--   rowT n = (tabl @210111) !! n
--   tabl = zipWith take [1..] (tabf @125053)

-- instance OEIS 210208 where
--   oeis = tablList @210208
-- instance Table 210208 where
--   rowCol n k = (tabf @210208) !! (n - 1) !! (n-1)
--   rowT n = (tabf @210208) !! (n - 1)
--   tabf = map (filter ((== 1) . (oeisIx @10055))) (tabf @27750)

-- instance OEIS 210241 where
--   oeis = scanl1 (+) (oeis @73093)

-- instance OEIS 210442 where
--   oeisIx n = p (oeisIx_row n) n where
--      p _          0 = 1
--      p []         _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 210454 where
--   oeisIx = (`div` 3) . (subtract 1) . (4 ^) . (oeisIx @40) . (+ 2)

-- instance OEIS 210455 where
--   oeisIx n = fromEnum $ p (oeisIx_row n) n where
--      p ks m = m == 0 || not (null ks) && head ks <= m &&
--               (p (tail ks) (m - head ks) || p (tail ks) m)

-- instance OEIS 210461 where
--   oeisIx = (`div` 8) . (subtract 1) . (9 ^) . (oeisIx @65091)

-- instance OEIS 210481 where
--   oeisIx n = sum [oeisIx' $ p * q - 2 |
--                    let p = (oeisIx @40) n, q <- takeWhile (< p) (oeis @40)]

-- instance OEIS 210490 where
--   oeis = filter chi [1..] where
--      chi x = all (== 1) es || all even es where es = (rowT @124010) x

-- instance OEIS 210494 where
--   oeis = filter
--      (\x -> (oeisIx x + (oeisIx @38040) x) `mod` (oeisIx @74400) x == 0) [1..]

-- instance OEIS 210582 where
--   oeis = filter (\x -> mod x (oeisIx x) == (oeisIx @30) x) (oeis @67251)

-- instance OEIS 210719 where
--   oeis = f (zip [1..] (oeis @10)) [] where
--      f ((i,x):ixs) phis | x `elem` phis = f ixs phis
--                         | otherwise     = i : f ixs (x : phis)

-- instance OEIS 210757 where
--   oeisIx n = (oeis @210757) !! (n - 1)
--   oeis = sortBy (compare `on` show) $
--                         takeWhile (<= 10^4) (oeis @40)

-- instance OEIS 210758 where
--   oeisIx n = (oeis @210758) !! (n - 1)
--   oeis = sortBy (compare `on` show) $
--                         takeWhile (<= 1000) (oeis @40)

-- instance OEIS 210759 where
--   oeisIx n = (oeis @210759) !! (n - 1)
--   oeis = sortBy (compare `on` show) $
--                         takeWhile (<= 10^4) (oeis @40)

-- instance OEIS 210760 where
--   oeisIx n = (oeis @210760) !! (n - 1)
--   oeis = sortBy (compare `on` show) $
--                         takeWhile (<= 10^5) (oeis @40)

-- instance OEIS 210761 where
--   Data.List (sortBy)
--   oeisIx n = (oeis @210761) !! (n - 1)
--   oeis = sortBy (compare `on` show) $
--                         takeWhile (<= 10^6) (oeis @40)

-- instance OEIS 210770 where
--   oeisIx n = (oeis @210770) !! (n - 1)
--   oeis = 1 : 2 : f 1 2 [3..] where
--      f u v (w:ws) = u' : w : f u' w (delete u' ws) where u' = v + w

-- instance OEIS 210771 where
--   oeisIx n = fromJust (elemIndex n (oeis @210770)) + 1

-- instance OEIS 211005 where
--   oeisIx n = (oeis @211005) !! (n - 1)
--   oeis = map length $ group (oeis @69754)

-- instance OEIS 211110 where
--   oeisIx n = p (tail $ (rowT @27750) n) n where
--      p _      0 = 1
--      p []     _ = 0
--      p ks'@ (k:ks) m | m < k     = 0
--                     | otherwise = p ks' (m - k) + p ks m

-- instance OEIS 211111 where
--   oeisIx n = p (tail $ (rowT @27750) n) n where
--      p _  0 = 1
--      p [] _ = 0
--      p (k:ks) m | m < k     = 0
--                  | otherwise = p ks (m - k) + p ks m

-- instance OEIS 211201 where
--   oeisIx = fromJust . (`elemIndex` (oeis @50493))

-- instance OEIS 211223 where
--   oeis = map (+ 1) $ findIndices (> 0) (oeis @211225)

-- instance OEIS 211225 where
--   oeisIx n = genericLength $ filter (== (oeisIx @203) n) $ zipWith (+) us' vs where
--      (us,vs@ (v:_)) = splitAt (fromInteger $ (n - 1) `div` 2) (oeis @203)
--      us' = if even n then v : reverse us else reverse us

-- instance OEIS 211316 where
--   oeisIx n | not $ null ps = n * (head ps + 1) `div` (3 * head ps)
--             | m == 0        = n'
--             | otherwise     = (n - 1) `div` 3
--             where ps = [p | p <- (rowT @27748) n, mod p 3 == 2]
--                   (n',m) = divMod n 3

-- instance OEIS 211396 where
--   oeisIx n = if null ips then 0 else head ips
--      where ips = [p | p <- takeWhile (<= n) (oeis @40),
--                       show p `isInfixOf` show n]

-- instance OEIS 211520 where
--   oeis = 0 : 0 : 0 : scanl1 (+) (oeis @178804)

-- instance OEIS 211538 where
--   oeis = scanl (+) 0 (oeis @29578)

-- instance OEIS 211858 where
--   oeisIx n = p 0 [] [1..3] n where
--      p m ms _      0 = if m `elem` ms then 0 else 1
--      p _ _  []     _ = 0
--      p m ms ks'@ (k:ks) x
--        | x < k       = 0
--        | m == 0      = p 1 ms ks' (x - k) + p 0 ms ks x
--        | m `elem` ms = p (m + 1) ms ks' (x - k)
--        | otherwise   = p (m + 1) ms ks' (x - k) + p 0 (m : ms) ks x

-- instance OEIS 211859 where
--   oeisIx n = p 0 [] [1..4] n where
--      p m ms _      0 = if m `elem` ms then 0 else 1
--      p _ _  []     _ = 0
--      p m ms ks'@ (k:ks) x
--        | x < k       = 0
--        | m == 0      = p 1 ms ks' (x - k) + p 0 ms ks x
--        | m `elem` ms = p (m + 1) ms ks' (x - k)
--        | otherwise   = p (m + 1) ms ks' (x - k) + p 0 (m : ms) ks x

-- instance OEIS 211860 where
--   oeisIx n = p 0 [] [1..5] n where
--      p m ms _      0 = if m `elem` ms then 0 else 1
--      p _ _  []     _ = 0
--      p m ms ks'@ (k:ks) x
--        | x < k       = 0
--        | m == 0      = p 1 ms ks' (x - k) + p 0 ms ks x
--        | m `elem` ms = p (m + 1) ms ks' (x - k)
--        | otherwise   = p (m + 1) ms ks' (x - k) + p 0 (m : ms) ks x

-- instance OEIS 211861 where
--   oeisIx n = p 0 [] [1..6] n where
--      p m ms _      0 = if m `elem` ms then 0 else 1
--      p _ _  []     _ = 0
--      p m ms ks'@ (k:ks) x
--        | x < k       = 0
--        | m == 0      = p 1 ms ks' (x - k) + p 0 ms ks x
--        | m `elem` ms = p (m + 1) ms ks' (x - k)
--        | otherwise   = p (m + 1) ms ks' (x - k) + p 0 (m : ms) ks x

-- instance OEIS 211862 where
--   oeisIx n = p 0 [] [1..7] n where
--      p m ms _      0 = if m `elem` ms then 0 else 1
--      p _ _  []     _ = 0
--      p m ms ks'@ (k:ks) x
--        | x < k       = 0
--        | m == 0      = p 1 ms ks' (x - k) + p 0 ms ks x
--        | m `elem` ms = p (m + 1) ms ks' (x - k)
--        | otherwise   = p (m + 1) ms ks' (x - k) + p 0 (m : ms) ks x

-- instance OEIS 211863 where
--   oeisIx n = p 0 [] [1..8] n where
--      p m ms _      0 = if m `elem` ms then 0 else 1
--      p _ _  []     _ = 0
--      p m ms ks'@ (k:ks) x
--        | x < k       = 0
--        | m == 0      = p 1 ms ks' (x - k) + p 0 ms ks x
--        | m `elem` ms = p (m + 1) ms ks' (x - k)
--        | otherwise   = p (m + 1) ms ks' (x - k) + p 0 (m : ms) ks x

instance OEIS 211866 where
  oeisIx = (flip div 4) . (subtract 5) . (9 ^) . succ

-- instance OEIS 211868 where
--   oeisIx n = f (oeis @5408) 1 nn 0 where
--      f (o:os) l nl xx
--        | yy > nl   = 0
--        | yy < nl   = f os (l + 1) (nl + nn) yy + f os l nl xx
--        | otherwise = if w == n then 1 else 0
--        where w = if r == 0 then (oeisIx @196) m else 0
--              (m, r) = divMod yy l
--              yy = xx + o * o
--      nn = n ^ 2

-- instance OEIS 211889 where
--   oeisIx n = head [k | let p = (oeisIx @40) n, k <- [1..],
--               all ((== 1) . (oeisIx @10051)') $ map ((+ p) . (* k)) (oeisIx_row n)]

-- instance OEIS 211890 where
--   oeis = tablList @211890
-- instance Table 211890 where
--   rowT n = (tabl @211890) !! n
--   tabl = zipWith3 (\p k row -> map ((+ p) . (* k)) row)
--                           (oeis @8578) (0 : (oeis @211889)) (tabl @2262)

-- instance OEIS 211996 where
--   oeisIx n = genericLength [x | x <- [1..n], let (y, m) = divMod n x,
--                           m == 0, (oeisIx @10052) (x + y) == 1]

-- instance OEIS 212133 where
--   oeisIx n = if n == 0 then 0 else (oeisIx n + 1) `div` 2

-- instance OEIS 212164 where
--   oeisIx n = (oeis @212164) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (< 0) (oeis @225230)

-- instance OEIS 212165 where
--   oeisIx n = (oeis @212165) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (<= 0) (oeis @225230)

-- instance OEIS 212166 where
--   oeisIx n = (oeis @212166) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @225230)

-- instance OEIS 212167 where
--   oeisIx n = (oeis @212167) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (>= 0) (oeis @225230)

-- instance OEIS 212168 where
--   oeisIx n = (oeis @212168) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (> 0) (oeis @225230)

-- instance OEIS 212177 where
--   oeis = filter (> 0) (oeis @56170)

-- instance OEIS 212190 where
--   oeis = filter ((== 1) . (oeisIx @10052)) (oeis @14311)

-- instance OEIS 212191 where
--   oeis = map (oeisIx @196) (oeis @212190)

-- instance OEIS 212192 where
--   oeis = filter ((== 1) . (oeisIx @10054)) (oeis @14311)

-- instance OEIS 212193 where
--   oeisIx n = f n [0..3] where
--      f x ys | x <= 2    = head $ delete x ys
--             | otherwise = f x' $ delete d ys where (x',d) = divMod x 3

-- instance OEIS 212210 where
--   oeis = tablList @212210
-- instance Table 212210 where
--   rowCol = rowCol_off @212210 @1 @1
--   rowT   = rowT_off   @212210 @1
--   tabl = f $ tail $ zip (inits pis) (tails pis) where
--      f ((xs,ys) : zss) = (zipWith (-) (map (+ last xs) (xs)) ys) : f zss
--      pis = (oeis @720)

-- instance OEIS 212211 where
--   oeis = tablList @212211
-- instance Table 212211 where
--   rowCol = rowCol_off @212211 @2 @2
--   tabl = map (rowT @212211) [2..]
--   rowT n = zipWith (-)
--      (map (+ (oeisIx @720) n) $ take (n - 1) $ tail (oeis @720))
--      (drop (n + 1) (oeis @720))

-- instance OEIS 212300 where
--   oeis = f 1 (2 : (oeis @40)) [1] $ tail (oeis @6530) where
--      f x ps'@ (_ : ps@ (_ : p : _)) gpfs (q : qs) =
--        y : f (x + 1) (if y == p then ps else ps') (q : gpfs) qs where
--        y = head [z | z <- ps', length (filter (> z) gpfs) <= div x 2]

-- instance OEIS 212306 where
--   oeis = f [1..] where
--      f (x:xs) = x : f ((map (subtract x) us) ++ vs)
--                 where (us, vs) = splitAt x xs

-- instance OEIS 212412 where
--   oeisIx = (`mod` 2) . (oeisIx @181935)

-- instance OEIS 212439 where
--   oeisIx n = 2 * n + (oeisIx @212412) n

-- instance OEIS 212440 where
--   oeis = filter (even . (oeisIx @181935)) [0..]

-- instance OEIS 212441 where
--   oeis = filter (odd . (oeisIx @181935)) [0..]

-- instance OEIS 212444 where
--   oeis = iterate (oeisIx @212439) 0

-- instance OEIS 212529 where
--   oeisIx = (oeisIx @39724) . negate

-- instance OEIS 212721 where
--   oeis = tablList @212721
-- instance Table 212721 where
--   rowCol n k = (rowT @212721) n !! (k-1)
--   rowT = nub . sort . (map product) . ps 1 where
--      ps x 0 = [[]]
--      ps x y = [t:ts | t <- [x..y], ts <- ps t (y - t)]
--   tabf = map (rowT @212721) [0..]

-- instance OEIS 212760 where
--   oeisIx = (oeisIx @260706) . fromInteger . (oeisIx @1318) . (+ 1)

-- instance OEIS 212793 where
--   oeisIx = cubeFree (oeis @40) 0 0 where
--      cubeFree ps'@ (p:ps) q e x
--         | e > 2     = 0
--         | x == 1    = 1
--         | r > 0     = cubeFree ps  p 0 x
--         | otherwise = cubeFree ps' p (e + 1) x' where (x', r) = divMod x p

-- instance OEIS 212813 where
--   oeisIx n | n < 7     = -1
--             | otherwise = fst $ (until ((== 8) . snd))
--                                 (\ (s, x) -> (s + 1, (oeisIx @36288) x)) (0, n)

-- instance OEIS 212908 where
--   oeisIx n = (oeis @212908) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 3 (oeis @212813)

-- instance OEIS 212909 where
--   oeisIx n = (oeis @212909) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 4 (oeis @212813)

-- instance OEIS 212911 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @212813))

-- instance OEIS 213025 where
--   oeis = f (oeis @1358) where
--      f (x:sps'@ (y:z:sps)) | 2 * y == (x + z) = y : f sps'
--                           | otherwise        = f sps'

-- instance OEIS 213087 where
--   oeis = f (oeis @30190) where
--      f xs = foldl1 (\v d -> 10 * v + d) (ys ++ [0]) : f zs where
--             (ys, _:zs) = span (/= 0) xs

-- instance OEIS 213190 where
--   oeis = 1 : 1 : zipWith (+)
--      (zipWith (*) [2..] $ tail (oeis @213190)) (map (* 3) (oeis @213190))

-- instance OEIS 213517 where
--   oeis = filter ((<= 2) . (oeisIx @118668)) [0..]

-- instance OEIS 213518 where
--   oeis = filter ((== 2) . (oeisIx @118668)) [0..]

instance OEIS 213541 where
  oeisIx (fi->n) = fi do n .&. n ^ 2 :: Int

-- instance OEIS 213629 where
--   oeis = tablList @213629
-- instance Table 213629 where
--   rowCol = rowCol_off @213629 @1 @1
--   rowT   = rowT_off   @213629 @1
--   tabl = map f $ tail $ inits $ tail $ map reverse (tabf @30308) where
--      f xss = map (\xs ->
--              sum $ map (fromEnum . (xs `isPrefixOf`)) $ tails $ last xss) xss

-- instance OEIS 213676 where
--   oeis = tablList @213676
-- instance Table 213676 where
--   rowCol n k = (tabf @213676) !! n !! k
--   rowT n = (tabf @213676) !! n
--   tabf = [0] : map reverse (tabf @189920)

-- instance OEIS 213684 where
--   oeisIx n = (oeisIx @155161) (2*n) n

-- instance OEIS 213714 where
--   oeisIx n = genericIndex (oeis @213714) n
--   oeis = f [0..] (oeis @5187) 0 where
--      f (x:xs) ys'@ (y:ys) i | x == y    = i : f xs ys (i+1)
--                            | otherwise = 0 : f xs ys' i

-- instance OEIS 213723 where
--   oeisIx = (* 2) . (oeisIx @213714)

-- instance OEIS 213724 where
--   oeisIx 0 = 1
--   oeisIx n = (oeisIx @213723) n + signum (oeisIx n)

-- instance OEIS 213911 where
--   oeisIx = genericLength . filter ((== 0) . head) . group . (rowT @213676)

-- instance OEIS 213912 where
--   oeis = 1 : f [1] where
--      f xs@ (x:_) = y : f (y : xs) where
--        y = if z `notElem` xs then z else 3 * x where z = (oeisIx @196) x

-- instance OEIS 213913 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @213912))

-- instance OEIS 213925 where
--   oeis = tablList @213925
-- instance Table 213925 where
--   rowCol n k = (rowT @213925) n !! (k-1)
--   rowT 1 = [1]
--   rowT n = reverse $ fd n (reverse $ takeWhile (<= n) (oeis @50376))
--      where fd 1 _      = []
--            fd x (q:qs) = if m == 0 then q : fd x' qs else fd x qs
--                          where (x',m) = divMod x q
--   tabf = map (rowT @213925) [1..]

-- instance OEIS 213967 where
--   oeis = 0 : xs where
--                  xs = 1 : 2 : 3 : map (+ 1)
--                       (zipWith3 (((+) .) . (+)) xs (tail xs) (drop 2 xs))

-- instance OEIS 213998 where
--   oeis = tablList @213998
-- instance Table 213998 where
--   rowT n = (tabl @213998) !! n
--   tabl = map (map numerator) $ iterate pf [1] where
--      pf row = zipWith (+) ([0] ++ row) (row ++ [-1 % (x * (x + 1))])
--               where x = denominator $ last row

-- instance OEIS 213999 where
--   oeis = tablList @213999
-- instance Table 213999 where
--   rowT n = (tabl @213999) !! n
--   tabl = map (map denominator) $ iterate pf [1] where
--      pf row = zipWith (+) ([0] ++ row) (row ++ [-1 % (x * (x + 1))])
--               where x = denominator $ last row

-- instance OEIS 214075 where
--   oeis = tablList @214075
-- instance Table 214075 where
--   rowT n = (tabl @214075) !! n
--   tabl = zipWith (zipWith div) (tabl @213998) (tabl @213999)

-- instance OEIS 214084 where
--   oeis = tablList @214084
-- instance Table 214084 where
--   rowCol n k = (tabf @214084) !! n !! k
--   rowT n = (tabf @214084) !! n
--   tabf = zipWith enumFromTo (oeis @290) (oeis @578)

instance OEIS 214085 where
  oeisIx n = n^2 * (n^4 - n^2 + n + 1) `div` 2

-- instance OEIS 214090 where
--   oeisIx = (`mod` 2) . (oeisIx @9947)

-- instance OEIS 214178 where
--   oeis = tablList @214178
-- instance Table 214178 where
--   rowT n = (tabl @214178) !! n
--   tabl = [0] : map f (tabl @37027) where
--      f row = (zipWith (*) (oeis @142) row) ++ [0]

-- instance OEIS 214282 where
--   oeisIx n = (oeisIx @7318) (n - 1) (oeisIx (n - 1))

-- instance OEIS 214283 where
--   oeisIx 1 = 0
--   oeisIx n = - (oeisIx @7318) (n - 1) (oeisIx n)

-- instance OEIS 214292 where
--   oeis = tablList @214292
-- instance Table 214292 where
--   rowT n = (tabl @214292) !! n
--   tabl = map diff $ tail (tabl @7318)
--      where diff row = zipWith (-) (tail row) row

-- instance OEIS 214295 where
--   oeisIx n = (oeisIx @10052) n - (oeisIx @10052) (3*n)

-- instance OEIS 214320 where
--   oeis = 1 : 1 : 1 : (map (oeisIx @6530) $
--      zipWith (+) (oeis @214320) (drop 2 $ (oeis @214320)))

-- instance OEIS 214321 where
--   import Data.Set (fromList, toList, Set)
--   oeis_conjectured  = toList $ fromList $ take 100000 (oeis @214551)
--   b214321 = bFile' "A214321" (take 10000 (oeis @214321)_conjectured) 1

-- instance OEIS 214322 where
--   oeis = 1 : 1 : 1 : zipWith (+) (oeis @214551) (drop 2 (oeis @214551))

-- instance OEIS 214323 where
--   oeis = 1 : 1 : 1 : zipWith gcd (oeis @214551) (drop 2 (oeis @214551))

-- instance OEIS 214360 where
--   oeis = [x | k <- [0..], let x = 3120613860*k+23, (oeisIx @10051)' x == 1]

-- instance OEIS 214390 where
--   oeisIx n = (oeis @214390) !! (n - 1)
--   oeis = map numerator $ scanl1 (+) $ map (1 %) (oeis @45542)

-- instance OEIS 214391 where
--   oeisIx n = (oeis @214391) !! (n - 1)
--   oeis = map denominator $ scanl1 (+) $ map (1 %) (oeis @45542)

-- instance OEIS 214414 where
--   oeis = [x | x <- [0..], (oeisIx @105027) x == x]

-- instance OEIS 214416 where
--   oeisIx = fromJust . (`elemIndex` (oeis @105025))

-- instance OEIS 214417 where
--   oeisIx = fromJust . (`elemIndex` (oeis @105027))

-- instance OEIS 214433 where
--   oeis = [x | x <- [0..], (oeisIx @105025) x == (oeisIx @105027) x]

-- instance OEIS 214489 where
--   oeis = [x | x <- [0..], (oeisIx @70939) x == (oeisIx @103586) x]

-- instance OEIS 214511 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @45698))

-- instance OEIS 214546 where
--   oeis = zipWith (-) (tail (oeis @140472)) (oeis @140472)

-- instance OEIS 214551 where
--   oeis = 1 : 1 : 1 : zipWith f (oeis @214551) (drop 2 (oeis @214551))
--      where f u v = (u + v) `div` gcd u v

-- instance OEIS 214560 where
--   oeisIx = (oeisIx @23416) . (oeisIx @290)

-- instance OEIS 214567 where
--   oeisIx n = genericIndex (oeis @214567) (n - 1)
--   oeis = 1 : g 2 where
--     g x = y : g (x + 1) where
--       y | t > 0     = (oeisIx @214567) t + 1
--         | otherwise = 1 + sum (map ((subtract 1) . (oeisIx @214567)) $ (rowT @27748) x)
--          where t = (oeisIx @49084) x

-- instance OEIS 214583 where
--   oeis = filter (p 3 1) [2..] where
--      p i k2 x = x <= k2 || (gcd k2 x > 1 || (oeisIx @10051)' (x - k2) == 1) &&
--                            p (i + 2) (k2 + i) x

-- instance OEIS 214604 where
--   oeis = tablList @214604
-- instance Table 214604 where
--   rowCol = rowCol_off @214604 @1 @1
--   rowT   = rowT_off   @214604 @1
--   tabl = zipWith take [1..] $ transpose (tabl @176271)

-- instance OEIS 214614 where
--   oeis = tablList @214614
-- instance Table 214614 where
--   rowCol n k = (tabf @214614) !! (n - 1) (k-1)
--   rowT n = (tabf @214614) !! (n - 1)
--   tabf = zipWith f [1..] (tabf @70165) where
--                          f v ws = sort $ filter (<= v) ws

-- instance OEIS 214626 where
--   oeis = 1 : 1 : 3 : zipWith f (oeis @214626) (drop 2 (oeis @214626))
--      where f u v = (u + v) `div` gcd u v

-- instance OEIS 214653 where
--   oeisIx n = (oeis @214653) !! (n - 1)
--   oeis = elemIndices 1 (oeis @214323)

instance OEIS 214659 where
  oeisIx n = ((7 * n - 3) * n - 1) * n `div` 3

instance OEIS 214660 where
  oeisIx (succ->n) = (9 * n - 11) * n + 3

-- instance OEIS 214661 where
--   oeis = tablList @214661
-- instance Table 214661 where
--   rowCol = rowCol_off @214661 @1 @1
--   rowT   = rowT_off   @214661 @1
--   tabl = zipWith take [1..] $ transpose $ map reverse (tabl @176271)

instance OEIS 214675 where
  oeisIx (succ->n) = (9 * n - 13) * n + 5

-- instance OEIS 214723 where
--   oeisIx n = (oeis @214723) !! (n - 1)
--   oeis = elemIndices 1 (oeis @45698)

-- instance OEIS 214727 where
--   oeis = 1 : 2 : 2 : zipWith3 (\x y z -> x + y + z)
--      (oeis @214727) (tail (oeis @214727)) (drop 2 (oeis @214727))

-- instance OEIS 214772 where
--   oeisIx = p [6, 9, 20] where
--      p _      0 = 1
--      p []     _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 214777 where
--   oeisIx n = (oeis @214777) !! (n - 1)
--   oeis = findIndices (> 0) (oeis @214772)

instance OEIS 214803 where
  oeis = [x * y - x - y | y <- [1..], x <- [1..y - 1], gcd x y == 1]

instance OEIS 214832 where
  oeisIx = floor . (* 440) . (2 **) . (/ 12) . fi . subtract 49 . succ

-- instance OEIS 214848 where
--   oeis = zipWith (-) (tail (oeis @22846)) (oeis @22846)

-- instance OEIS 214855 where
--   oeisIx = (oeisIx @45) . (oeisIx @8597) . subtract 1

-- instance OEIS 214866 where
--   oeisIx n = (oeis @214866) !! (n - 1)
--   oeis = elemIndices 0 (oeis @59175)

-- instance OEIS 214879 where
--   oeisIx n = (oeis @214879) !! (n - 1)
--   oeis = elemIndices 0 (oeis @45698)

-- instance OEIS 214949 where
--   oeisIx = f 0 where
--      f y 0 = numerator y
--      f y x = f (y + if d == 0 then 0 else 1 % d) x'
--              where (x',d) = divMod x 10

-- instance OEIS 214950 where
--   oeisIx = f 0 where
--      f y 0 = denominator y
--      f y x = f (y + if d == 0 then 0 else 1 % d) x'
--              where (x',d) = divMod x 10

-- instance OEIS 214957 where
--   oeis = [x | x <- [0..], (oeisIx @214950) x == 1]

-- instance OEIS 214958 where
--   oeis = [x | x <- [0..], (oeisIx @214949) x == 1]

-- instance OEIS 214959 where
--   oeisIx n = (oeis @214959) !! (n - 1)
--   oeis = [x | x <- [0..], f x 0] where
--      f 0 v = numerator v == 1 && denominator v == 1
--      f u v | d > 0     = f u' (v + 1 % d)
--            | otherwise = f u' v  where (u',d) = divMod u 10

-- instance OEIS 215217 where
--   twinLow [] = []
--   twinLow [_] = []
--   twinLow (n : (m : ns))
--       | m == n + 1 = n : twinLow (m : ns)
--       | otherwise = twinLow (m : ns)
--   oeisIx n = (twinLow (oeis @7304)) !! (n - 1)

-- instance OEIS 215231 where
--   (oeis, (oeis @85809)) = unzip $ (2, 1) : f 1 2 (oeis @65516) where
--      f i v (q:qs) | q > v = (q, i) : f (i + 1) q qs
--                   | otherwise = f (i + 1) v qs

-- instance OEIS 215244 where
--   import Data.Map (Map, singleton, (!), insert)
--   newtype Bin = Bin [Int] deriving (Eq, Show, Read)
--   instance Ord Bin where
--      Bin us <= Bin vs | length us == length vs = us <= vs
--                       | otherwise              = length us <= length vs
--   oeisIx n = (oeis @215244) !! n
--   oeis = 1 : f [1] (singleton (Bin [0]) 1) where
--      f bs m | last bs == 1 = y : f (succ bs) (insert (Bin bs) y m)
--             | otherwise    = f (succ bs) (insert (Bin bs) y m) where
--        y = fromEnum (pal bs) +
--            sum (zipWith (\us vs -> if pal us then m ! Bin vs else 0)
--                         (init $ drop 1 $ inits bs) (drop 1 $ tails bs))
--        pal ds = reverse ds == ds
--        succ [] = [0]; succ (0:ds) = 1 : ds; succ (1:ds) = 0 : succ ds

-- instance OEIS 215403 where
--   oeis = map (foldr (\d v -> 10 * v + d) 0) $
--                      concatMap (\x -> map (x :) [plut', nept']) [4..] where
--     plut' = [1,1,2,2,2,3,2,1,1,2,1,1,2,2,2,1,2,2,2,3,1,1,2,2,1,3]
--     nept' = [1,1,2,2,3,3,1,2,1,1,2,2,1,1,2,2,3,1,1,2,3,3,1,1,2,2,2,1,1,3,1]
-- instance Table 215403 where
--   rowCol n k = (oeis @215403) !! (n - 1)

-- instance OEIS 215630 where
--   oeis = tablList @215630
-- instance Table 215630 where
--   rowCol = rowCol_off @215630 @1 @1
--   rowT   = rowT_off   @215630 @1
--   tabl = zipWith3 (zipWith3 (\u v w -> u - v + w))
--                           (tabl @93995) (tabl @75362) (tabl @133819)

-- instance OEIS 215631 where
--   oeis = tablList @215631
-- instance Table 215631 where
--   rowCol = rowCol_off @215631 @1 @1
--   rowT   = rowT_off   @215631 @1
--   tabl = zipWith3 (zipWith3 (\u v w -> u + v + w))
--                           (tabl @93995) (tabl @75362) (tabl @133819)

instance OEIS 215646 where
  oeisIx n = n * (n * (11*n + 6) + 1) `div` 6

-- instance OEIS 215879 where
--   oeisIx n = if t == 0 then 0 else (oeisIx @215879) n' + 1
--               where (n',t) = divMod n 3

-- instance OEIS 215973 where
--   oeis = 1 : f [1] where
--      f xs = y : f (y:xs) where
--        y = sum $ zipWith (*) xs $ map (+ 1) $ reverse xs

-- instance OEIS 216022 where
--   oeisIx = genericLength .
--      takeWhile (== 0) . zipWith (-) [1..] . sort . (rowT @70165)

-- instance OEIS 216059 where
--   oeisIx  n = head $ enumFromTo 1 (maximum ts + 1) \\ ts
--      where ts = (rowT @70165) n

-- instance OEIS 216151 where
--   oeis = 1 : 2 : f 2 3 where
--      f u v = w : f (u * w) (v + w) where w = u * v

-- instance OEIS 216155 where
--   oeis = filter
--      (\x -> (oeisIx @196) (oeisIx x) == (oeisIx @196) (oeisIx x) + 1) [1..]

-- instance OEIS 216176 where
--   oeisIx n = sum $ zipWith (*) zs $ reverse zs
--      where zs = (rowT @189920) n

-- instance OEIS 216183 where
--   oeisIx n = (oeis @216183) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @59514)

-- instance OEIS 216237 where
--   oeis = filter ((== 1) . (oeisIx @136522)) (oeis @7770)

-- instance OEIS 216261 where
--   oeisIx = fromJust . (`elemIndex` (oeis @6942))

-- instance OEIS 216345 where
--   oeis = 1 : (filter (\x -> (oeisIx @2) x /= (oeisIx @2) (x - 1)) [2..])

-- instance OEIS 216407 where
--   oeisIx = (45 -) . (oeisIx @217928)

-- instance OEIS 216599 where
--   oeisIx n | n <= 2    = 0
--             | otherwise = (tabl @66032) !! (n - 1) !! (n `div` 3 - 1)

-- instance OEIS 216600 where
--   oeisIx n | n <= 3    = 0
--             | otherwise = (tabl @66032) !! (n - 1) !! (n `div` 4 - 1)

-- instance OEIS 216601 where
--   oeisIx n | n <= 4    = 0
--             | otherwise = (tabl @66032) !! (n - 1) !! (n `div` 5 - 1)

-- instance OEIS 216602 where
--   oeisIx n | n <= 5    = 0
--             | otherwise = (tabl @66032) !! (n - 1) !! (n `div` 6 - 1)

-- instance OEIS 216965 where
--   oeis = [p | p <- (oeis @40), odd $ (oeisIx @141468) $ fromInteger p]

-- instance OEIS 217122 where
--   oeisIx n = (oeis @217122) !! (n - 1)
--   oeis = f 1 [0..] where
--      f x zs = y : f (x + 1) (delete y zs) where
--        y = zs !! (oeisIx @120) x

-- instance OEIS 217218 where
--   oeis = iterate (oeisIx @6368) 44

-- instance OEIS 217261 where
--   import Data.Set (singleton, insert, deleteFindMin)
--   oeisIx n = (oeis @217261) !! (n - 1)
--   oeis = f [3..] $ singleton (16, (2, 2)) where
--      f xs'@ (x:xs) s
--        | m > x ^ 4  = f xs $ insert (x ^ 4, (x, 2)) s
--        | m == x ^ 4 = f xs s
--        | otherwise  = m : f xs' (insert (i ^ (j + 1) ^ 2, (i, j + 1)) s')
--        where ((m, (i,j)), s') = deleteFindMin s

-- instance OEIS 217398 where
--   oeis = filter ((== 5) . (oeisIx @30)) [1..]

-- instance OEIS 217575 where
--   oeisIx = subtract 1 . (oeisIx @63657)

-- instance OEIS 217589 where
--   import Data.Word (Word16)
--   oeisIx :: Word16 -> Word16
--   oeisIx n = rev 0 0 where
--      rev 16 y = y
--      rev i y = rev (i + 1) (if testBit n i then setBit y (15 - i) else y)

-- instance OEIS 217657 where
--   oeisIx n | n <= 9    = 0
--             | otherwise = 10 * (oeisIx @217657) n' + m where (n', m) = divMod n 10

-- instance OEIS 217659 where
--   oeisIx = (oeisIx @151800) . fromInteger . (oeisIx @185934)

-- instance OEIS 217712 where
--   import Data.Set (Set, empty, fromList, toList, union, size)
--   import Data.Set (member, delete, insert)
--   oeisIx n = (oeis @217712) !! (n - 1)
--   oeis = f 1 empty empty where
--      f x s s1 = size s1' : f (x + 1) (s `union` fromList hs) s1' where
--        s1' = g s1 $ filter ((== 1) . (oeisIx @10051)') $ map numerator hs
--        g v []                    = v
--        g v (w:ws) | w `member` v = g (delete w v) ws
--                   | otherwise    = g (insert w v) ws
--        hs = map (+ 1 % x) $ 0 : toList s

-- instance OEIS 217793 where
--   oeis = tablList @217793
-- instance Table 217793 where
--   rowCol n k = (tabf @217793) !! (n - 1) !! k
--   rowT n = (tabf @217793) !! (n - 1)
--   tabf =
--      map (\p -> [2*p*k + k^2 `mod` p | k <- [0..p-1]]) (oeis @65091)

-- instance OEIS 217843 where
--   import Data.Set (singleton, deleteFindMin, insert, Set)
--   oeisIx n = (oeis @217843) !! (n - 1)
--   oeis = f (singleton (0, (0,0))) (-1) where
--      f s z = if y /= z then y : f s'' y else f s'' y
--                 where s'' = (insert (y', (i, j')) $
--                              insert (y' - i ^ 3 , (i + 1, j')) s')
--                       y' = y + j' ^ 3; j' = j + 1
--                       ((y, (i, j)), s') = deleteFindMin s

-- instance OEIS 217863 where
--   oeisIx = (oeisIx @10) . (oeisIx @3418)

-- instance OEIS 217921 where
--   oeisIx n = fst $ until (all (== 1) . snd) f (0, (rowT @30308) n) where
--      f (i, xs)  = (i + 1, map genericLength $ group xs)

instance OEIS 217928 where
  oeisIx = fi . (sum . nub . map (read . return) . show :: Integer -> Integer) . fi

-- instance OEIS 218388 where
--   oeisIx = foldl1 (.|.) . (rowT @27750) :: Integer -> Integer

-- instance OEIS 218403 where
--   oeisIx = foldl (.|.)  0 . (rowT @27751) :: Integer -> Integer

-- instance OEIS 218454 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @176352))

-- instance OEIS 218494 where
--   oeisIx = p (tail (oeis @290)) . (^ 3) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 218533 where
--   oeisIx n = (oeisIx @176352) n `div` (oeisIx @218535) n
--   oeis = map numerator $ zipWith (%) (oeis @176352) $ tail (oeis @176352)

-- instance OEIS 218534 where
--   oeisIx n = (oeisIx @176352) (n + 1) `div` (oeisIx @218535) n
--   oeis = map denominator $ zipWith (%) (oeis @176352) $ tail (oeis @176352)

-- instance OEIS 218535 where
--   oeisIx n = (oeis @218535) !! (n - 1)
--   oeis = zipWith gcd (oeis @176352) $ tail (oeis @176352)

-- instance OEIS 218978 where
--   oeis = tablList @218978
-- instance Table 218978 where
--   rowCol n k = (rowT @218978) n !! k
--   rowT n = genericIndex (tabf @218978) n
--   tabf = map (sort . nub . map (foldr (\d v -> 10 * v + d) 0) .
--                      concatMap (tail . inits) . tails) (tabf @31298)

-- instance OEIS 219031 where
--   oeis = tablList @219031
-- instance Table 219031 where
--   rowCol n k = (tabf @219031) !! n !! k
--   rowT n = (tabf @219031) !! n
--   tabf = map (rowT @218978) (oeis @290)

-- instance OEIS 219032 where
--   oeisIx = sum . map (oeisIx @10052) . (rowT @219031)

instance OEIS 219054 where
  oeisIx (succ->n) = n * (n * (8 * n + 3) + 1) `div` 6

instance OEIS 219056 where
  oeisIx = (* 3) . (^ 4)

-- instance OEIS 219069 where
--   oeis = tablList @219069
--   rowCol = rowCol_off @219069 @1 @1
--   rowT n = (tabl @219069) !! n
--   tabl = zipWith (zipWith (*)) (tabl @215630) (tabl @215631)

instance OEIS 219070 where
  oeisIx n = n * (n * (n * (n * (46 * n + 30) + 15)) - 1) `div` 30

instance OEIS 219092 where
  oeisIx 0 = 1
  oeisIx n = floor (exp 1 ** (fi n + 0.5))

-- instance OEIS 219117 where
--   oeis = filter (all (== 1) . p) [1..] where
--      p x = map (oeisIx . (+ (x + 1)) . (x ^)) [1..4]

-- instance OEIS 219206 where
--   oeis = tablList @219206
-- instance Table 219206 where
--   rowT n = (tabl @219206) !! n
--   tabl = zipWith (zipWith (^)) (tabl @7318) (tabl @2262)

-- instance OEIS 219244 where
--   oeis = map (`div`  6) $ zipWith (-) (oeis @217659) (oeis @185934)

-- instance OEIS 219462 where
--   oeisIx = sum . zipWith (*) (oeis @1906) . (rowT @34870)

-- instance OEIS 219463 where
--   oeis = tablList @219463
--   rowCol n k = (tabl @219463) !! n !! k :: Int
--   rowT n = (tabl @219463) !! n
--   tabl = map (map (1 -)) (tabl @47999)

-- instance OEIS 219529 where
--   -- Very slow, could certainly be accelerated.  SST stands for Snub Square Tiling.
--   setUnion [] l2 = l2
--   setUnion (a:rst) l2 = if (elem a l2) then doRest else (a:doRest)
--     where doRest = setUnion rst l2
--   setDifference [] l2 = []
--   setDifference (a:rst) l2 = if (elem a l2) then doRest else (a:doRest)
--     where doRest = setDifference rst l2
--   adjust k = (if (even k) then 1 else -1)
--   weirdAdjacent (x,y) = (x+ (adjust y),y+ (adjust x))
--   sstAdjacents (x,y) = [ (x+1,y), (x-1,y), (x,y+1), (x,y-1), (weirdAdjacent (x,y))]
--   sstNeighbors core = foldl setUnion core (map sstAdjacents core)
--   sstGlob n core = if (n == 0) then core else (sstGlob (n - 1) (sstNeighbors core))
--   sstHalo core = setDifference (sstNeighbors core) core
--   origin = [ (0,0)]
--   oeisIx n = genericLength (sstHalo (sstGlob (n - 1) origin))

instance OEIS 219531 where
  oeisIx = sum . take 12 . rowT @7318

-- instance OEIS 219603 where
--   oeisIx n = (oeisIx @40) n * (oeisIx @31368) n

instance OEIS 219606 where
  oeis = concat $ transpose [oeis @1223, oeis @40]

-- instance OEIS 219607 where
--   oeisIx = p (oeis @47221) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 219608 where
--   oeis = filter odd (oeis @60142)

-- instance OEIS 219609 where
--   oeis = map (`div` 2) $ zipWith (-) (tail (oeis @219608)) (oeis @219608)

-- instance OEIS 219696 where
--   oeis = filter (\x -> collatz'' x == x) [1..] where
--      collatz'' x = until (`elem` [1, x]) (oeisIx @6370) (3 * x + 1)

-- instance OEIS 219762 where
--   oeisIx = subtract 1 . (oeisIx @99054) . subtract 1

-- instance OEIS 219843 where
--   oeisIx = foldr (\u v-> 2*v + u) 0 . map toInteger . (rowT @219463)

-- instance OEIS 219907 where
--   import Data.Set (deleteFindMin, empty, fromList, union)
--   import qualified Data.Set as Set (null)
--   oeisIx n = (oeis @219907) !! (n - 1)
--   oeis = f 0 empty where
--      f z s | Set.null s || z' <= m = f (z + 1) (s `union` (fromList ws))
--            | otherwise             = m : f z s'
--            where (m,s') = deleteFindMin s
--                  ws = map (h z) [0..z] ++ map (flip h z) [0..z-1]
--                  h i j = 4 * i ^ 2 + 2 * i * j + 7 * j ^ 2
--                  z' = h z 0

-- instance OEIS 219908 where
--   oeisIx n = (oeis @219907) !! (n - 1)
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @219907)

-- instance OEIS 219922 where
--   oeisIx n = (fromJust $ findIndex (n `elem`) (tabl @26835)) + 1

-- instance OEIS 220053 where
--   oeis = tablList @220053
-- instance Table 220053 where
--   rowCol = rowCol_off @220053 @1 @1
--   rowT   = rowT_off   @220053 @1
--   tabl = map (scanl1 (+)) (tabl @130517)

-- instance OEIS 220073 where
--   oeis = tablList @220073
-- instance Table 220073 where
--   rowCol = rowCol_off @220073 @1 @1
--   rowT   = rowT_off   @220073 @1
--   tabl = map reverse (tabl @130517)

-- instance OEIS 220075 where
--   oeis = tablList @220075
-- instance Table 220075 where
--   rowCol = rowCol_off @220075 @1 @1
--   rowT   = rowT_off   @220075 @1
--   tabl = map (scanl1 (+)) (tabl @220073)

-- instance OEIS 220096 where
--   oeisIx n = if z == 1 then n - 1 else z  where z = (oeisIx @32742) n

-- instance OEIS 220101 where
--   oeisIx n = (oeisIx (2 * (n - 1)) (n - 1)) `div` 2

-- instance OEIS 220104 where
--   oeis = concatMap (\x -> take (oeisIx x) $ repeat x) [1..]

-- instance OEIS 220218 where
--   oeis = 1 : filter
--                  (all (== 1) . map (oeisIx' . (+ 1)) . (rowT @124010)) [1..]

-- instance OEIS 220237 where
--   oeis = tablList @220237
-- instance Table 220237 where
--   rowCol n k = (tabf @220237) !! (n - 1) !! (k-1)
--   rowT n = (tabf @220237) !! (n - 1)
--   tabf = map sort (tabf @70165)

-- instance OEIS 220263 where
--   oeisIx = genericLength . (rowT @192719)

-- instance OEIS 220264 where
--   oeisIx n = fromJust $ find ((== n) . (oeisIx @86971)) (oeis @220423)

-- instance OEIS 220347 where
--   oeisIx =  (+ 1) . fromJust . (`elemIndex` (oeis @183079))

-- instance OEIS 220348 where
--   oeisIx n = fromJust (findIndex (elem n) (tabf @183079)) + 1

-- instance OEIS 220376 where
--   oeisIx n = (oeis @220376) !! (n - 1)
--   oeis = at 1 where
--      at z | (reverse (show (z - 1)) `isPrefixOf` fst bird) = at (z + 1)
--           | otherwise                = (length $ fst bird) : at (z + 1)
--           where bird = fromJust $ find ((show z `isPrefixOf`) . snd) xys
--      xys = iterate (\ (us, v : vs) -> (v : us, vs))
--                    ([], concatMap show [0 ..])

-- instance OEIS 220423 where
--   import Data.Set (deleteFindMin, empty, fromList, union)
--   import qualified Data.Set as Set (null)
--   oeisIx n = (oeis @220423) !! (n - 1)
--   oeis = f (splitAt 1 (oeis @2110)) empty where
--      f (us'@ (u:_), vs'@ (v:vs)) s
--        | Set.null s || m > u
--                    = f (v:us', vs) (s `union` (fromList $ map (* u) us'))
--        | otherwise = m : f (us', vs') s'
--        where (m,s') = deleteFindMin s

-- instance OEIS 220424 where
--   oeis = tablList @220424
-- instance Table 220424 where
--   rowCol n k = (tabf @220424) !! (n - 1) !! (k-1)
--   rowT n = (tabf @220424) !! (n - 1)
--   tabf = iterate
--                  (concatMap (\xs -> [head xs, length xs]) . group) [1]

-- instance OEIS 220432 where
--   oeis = filter (\x -> null $
--      intersect (oeisIx_row x) (takeWhile (<= x) (oeis @219908))) (oeis @7310)

-- instance OEIS 220654 where
--   oeisIx = fromJust . (`elemIndex` (oeis @215244))

-- instance OEIS 220811 where
--   oeisIx n = (oeis @220811) !! n
--   oeis = map numerator vs where
--      vs = iterate (\x -> x * (4 - 3 * x)) (1 % 10)

-- instance OEIS 220812 where
--   oeisIx = (oeisIx @11557) . (oeisIx @79)

-- instance OEIS 220885 where
--   oeis = 5 : 8 : zs where
--      zs = 12 : zipWith (+) zs (drop 13 (oeis @931))

-- instance OEIS 220894 where
--   t :: Int -> Int -> Integer
--   t 0 m = (fi m)
--   t n m = t (n - 1) (m+1) + foldl (+) 0 (let tt = [t i m | i<- [0.. (n-1)]] in
--                                         (map (uncurry (*)) (zip tt (reverse tt))))

-- instance OEIS 220968 where
--   oeisIx n = (oeis @220968) !! (n - 1)
--   oeis = map (+ 1) $ findIndices odd (oeis @30229)

-- instance OEIS 220969 where
--   oeisIx n = (oeis @220969) !! (n - 1)
--   oeis = map (+ 1) $ findIndices even (oeis @30229)

-- instance OEIS 221054 where
--   oeis = filter (z 0 0 . (rowT @27748)) $ tail (oeis @5843) where
--      z u v []     = u == v
--      z u v (p:ps) = z (u + p) v ps || z u (v + p) ps

-- instance OEIS 221056 where
--   oeisIx n = (oeis @221056) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @61265)

-- instance OEIS 221172 where
--   oeis = -2 : 3 : zipWith (+)
--                           (map (* 2) $ tail (oeis @221172)) (oeis @221172)

-- instance OEIS 221173 where
--   oeis = -3 : 4 : zipWith (+)
--                           (map (* 2) $ tail (oeis @221173)) (oeis @221173)

-- instance OEIS 221174 where
--   oeis = -4 : 5 : zipWith (+)
--                           (map (* 2) $ tail (oeis @221174)) (oeis @221174)

-- instance OEIS 221175 where
--   oeis = -5 : 6 : zipWith (+)
--                           (map (* 2) $ tail (oeis @221175)) (oeis @221175)

-- instance OEIS 221221 where
--   oeis = filter (\x -> (oeisIx @133500) x == (oeisIx @133048) x) [0..]

-- instance OEIS 221264 where
--   oeis = filter ((< 0) . (oeisIx @5094)) [1..] is

-- instance OEIS 221265 where
--   oeis = filter ((> 0) . (oeisIx @5094)) [1..]

-- instance OEIS 221309 where
--   oeis = map (+ 1) $ elemIndices 0 (oeis @117499)

-- instance OEIS 221310 where
--   oeis = map (+ 1) $ elemIndices 4 (oeis @117499)

-- instance OEIS 221469 where
--   oeisIx n = sum $ map fromEnum $ zipWith (>) (tail ts) ts where
--      ts = scanl1 max $ (rowT @70165) n

-- instance OEIS 221470 where
--   oeisIx = (+ 1 ) . fromJust . (`elemIndex` (map (oeisIx @221469) [1..]))

-- instance OEIS 221490 where
--   oeisIx n = sum [oeisIx (k*n + k - n) | k <- [1..n]]

-- instance OEIS 221491 where
--   oeisIx n = sum [oeisIx' (k*n - k + n) | k <- [1..n]]

instance OEIS 221639 where
  oeisIx n = 5 ^ (5 * n + 1) + 4 ^ (5 * n + 2) + 3 ^ (5 * n)

-- instance OEIS 221869 where
--   import Data.Set (singleton, member, insert)
--   oeisIx n = (oeis @221869) !! (n - 1)
--   oeis = f 2 7 (singleton 1) where
--      f u v s | d `member` s = f (u + 1) (v + d) s
--              | otherwise    = d : f (u + 1) (v + d) (d `insert` s)
--              where d = gcd u v

-- instance OEIS 222208 where
--   oeisIx n = (oeis @222208) !! (n - 1)
--   oeis = 1 : 3 : f 3 (2 : [4 ..]) where
--      f u vs = g vs where
--        g (w:ws) = if all (== 0) $ map ((mod w) . (oeisIx @222208)) $ (rowT @27751) u
--                      then w : f (u + 1) (delete w vs) else g ws

-- instance OEIS 222209 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @222208))

-- instance OEIS 222222 where
--   oeisIx = foldl f 0 . map (read . return) . show :: Integer -> Integer
--             where f v d = 10 * v + if d == 1 || d == 5 then 6 - d else d

-- instance OEIS 222493 where
--   oeisIx = (oeisIx @133500) . (oeisIx @221221)

-- instance OEIS 222581 where
--   oeisIx n = (oeis @222581) !! (n - 1)
--   oeis = map length $ group (oeis @93796)

-- instance OEIS 222622 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @113966))

-- instance OEIS 222623 where
--   oeis = filter (\x -> (oeisIx @113966) x == x) [1..]

-- instance OEIS 222946 where
--   oeis = tablList @222946
-- instance Table 222946 where
--   rowCol = rowCol_off @222946 @2 @1
--   rowT = rowT_off @222946 @2
--   tabl = zipWith p [2..] (tabl @55096) where
--      p x row = zipWith (*) row $
--                map (\k -> ((x + k) `mod` 2) * (oeisIx @63524) (gcd x k)) [1..]

-- instance OEIS 223456 where
--   oeis = filter ((== 1 ) . (oeisIx @10051) . (oeisIx @32741) . (oeisIx @32741)) (oeis @2808)

-- instance OEIS 223490 where
--   oeisIx = head . (rowT @213925)

-- instance OEIS 223491 where
--   oeisIx = last . (rowT @213925)

-- instance OEIS 224075 where
--   oeis = tablList @224075
-- instance Table 224075 where
--   rowCol n k = (tabf @224075) !! (n - 1) !! (k-1)
--   rowT n = (tabf @224075) !! (n - 1)
--   tabf = f 3 where
--      f x = g [] 3 1 where
--        g ps i k2 | x <= k2        = ps : f (x + 1)
--                  | gcd k2 x > 1   = g ps (i + 2) (k2 + i)
--                  | (oeisIx @10051) q == 1 = g (q:ps) (i + 2) (k2 + i)
--                  | otherwise      = f (x + 1)
--                  where q = x - k2

-- instance OEIS 224076 where
--   oeisIx = genericLength . (rowT @224075)

-- instance OEIS 224345 where
--   gtab :: [[Integer]]
--   gtab = [0..] : [[s n m |  m <- [0..]] | n <- [1..]]
--     where s n m  = let fi =  [ftab !! i !! m | i <- [0.. (n - 1)]]
--                        gi =  [gtab !! i !! m | i <- [0.. (n - 1)]]
--                    in foldl (+) 0 (map (uncurry (*)) (zip fi (reverse gi)))
--   ftab :: [[Integer]]
--   ftab = [0..] : [[ftab !! (n - 1) !! (m+1) + gtab !! n !! m | m<-[0..]] | n<-[1..]]
--   f (n,m) = ftab !! n !! m

-- instance OEIS 224363 where
--   oeisIx = (oeisIx @40) . (oeisIx @221056)

-- instance OEIS 224401 where
--   oeisIx = (+ 1) . fromJust . (`findIndex` (tabf @85612)) . elem

-- instance OEIS 224458 where
--   oeisIx n = genericIndex (oeis @224458) (n - 1)
--   oeis = 0 : g 2 where
--      g x = y : g (x + 1) where
--        y | t > 0     = (oeisIx @224458) t + (oeisIx @1222) t
--          | otherwise = (oeisIx @224458) r + (oeisIx @224458) s + (oeisIx @1222) r * (oeisIx @1222) s
--          where t = (oeisIx @49084) x; r = (oeisIx @20639) x; s = x `div` r

-- instance OEIS 224694 where
--   oeisIx n = (oeis @224694) !! (n - 1)
--   oeis = elemIndices 0 (oeis @213541)

-- instance OEIS 224729 where
--   oeisIx n = (oeisIx @59283) (2*n) n

-- instance OEIS 224782 where
--   oeisIx n = (oeis @224782) !! n
--   oeis = map (foldl h 0 . group . show) (oeis @79) where
--      h x zs@ (z:_) = if z == '0' then max x $ length zs else x

-- instance OEIS 224791 where
--   oeis = tablList @224791
-- instance Table 224791 where
--   rowT n = (tabl @224791) !! n
--   tabl = iterate
--      (\row -> scanl1 (+) $ zipWith (+) ([1] ++ row) (row ++ [1])) [0]

-- instance OEIS 224823 where
--   oeisIx n = genericLength [ () | let ts = takeWhile (<= n) (oeis @217),
--               x <- ts, y <- ts, z <- takeWhile (<= div (n - x - y) 3) ts,
--               x + y + 3 * z == n]

-- instance OEIS 224829 where
--   oeis = filter ((== 0) . (oeisIx @224823)) [0..]

-- instance OEIS 224839 where
--   oeis = f [1..] [] where
--      f (x:xs) ys = if all ((== 0) . (oeisIx @10052)) $ map (x -) ys
--                       then x : f xs (x:ys) else f xs ys

-- instance OEIS 224841 where
--   oeis = tablList @224841
-- instance Table 224841 where
--   rowCol = rowCol_off @224841 @1 @1
--   rowT   = rowT_off   @224841 @1
--   tabl = map
--      (reverse . map (read . concatMap show) . init . tails) $
--      tail $ inits (oeis @7376) :: [[Integer]]

-- instance OEIS 224866 where
--   oeis = [x | x <- [2..] , let x' = x - 1, let k = (oeisIx @7947) x',
--                       let (y,m) = divMod x' k, m == 0, (oeisIx @7947) y == k]

-- instance OEIS 224909 where
--   oeis = 1 : 1 : zipWith mod
--      (zipWith (+) (oeis @224909) $ tail (oeis @224909))
--      (zipWith (-) [3..] $ tail (oeis @224909))

-- instance OEIS 224981 where
--   oeis = filter (p 6 $ tail (oeis @290)) [1..] where
--      p k (q:qs) m = k == 0 && m == 0 ||
--                     q <= m && k >= 0 && (p (k - 1) qs (m - q) || p k qs m)

-- instance OEIS 224982 where
--   oeis = filter (p 7 $ tail (oeis @290)) [1..] where
--      p k (q:qs) m = k == 0 && m == 0 ||
--                     q <= m && k >= 0 && (p (k - 1) qs (m - q) || p k qs m)

-- instance OEIS 224983 where
--   oeis = filter (p 8 $ tail (oeis @290)) [1..] where
--      p k (q:qs) m = k == 0 && m == 0 ||
--                     q <= m && k >= 0 && (p (k - 1) qs (m - q) || p k qs m)

-- instance OEIS 225043 where
--   oeis = tablList @225043
-- instance Table 225043 where
--   rowT n = (tabl @225043) !! n
--   tabl = zipWith (map . flip mod) [1..] (tabl @7318)

-- instance OEIS 225044 where
--   oeisIx = p (oeis @14132) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 225045 where
--   oeisIx = p (oeis @14132) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 225047 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @121216))

-- instance OEIS 225078 where
--   oeisIx n = (oeis @225078) !! (n - 1)
--   oeis = elemIndices 1 $
--      zipWith ((*) `on` (oeisIx @10051)') (oeis @2522) (oeis @8865)

-- instance OEIS 225105 where
--   oeis = filter
--      ((== 1) . (oeisIx @10051)' . maximum . filter odd . (rowT @70165)) (oeis @5408)

-- instance OEIS 225124 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @25586)) . (oeisIx @79)

-- instance OEIS 225126 where
--   oeisIx n = (oeisIx @48152) (2 * n - 1)  n

-- instance OEIS 225183 where
--   zipl :: [[x]] -> [x]
--   zipl (s:ss) = head s : zipl (ss ++ [ (tail s)])
--   oeisIx = s where
--     s = 0 : x
--     x = 1 : zipl [x,y]
--     y = 0 : 1 : zipl [z,x,y]
--     z = 0 : zipl [y,x]

-- instance OEIS 225228 where
--   oeis = filter f [1..] where
--      f x = length es == 3 && sum es `elem` [3,5,7] &&
--                              maximum es - minimum es <= 1
--            where es = (rowT @124010) x

-- instance OEIS 225230 where
--   oeisIx n = (oeisIx @1221) n - (oeisIx @51903) n

-- instance OEIS 225243 where
--   oeis = tablList @225243
-- instance Table 225243 where
--   rowCol n k = (tabf @225243) !! (n - 1) !! (k-1)
--   rowT n = (tabf @225243) !! (n - 1)
--   tabf = [1] : map (filter ((== 1) . (oeisIx @10051)')) (tail (tabf @165416))

-- instance OEIS 225244 where
--   oeisIx n = p (oeisIx_row n) n where
--      p _          0 = 1
--      p []         _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 225245 where
--   oeisIx n = p (oeisIx_row n) n where
--      p _      0 = 1
--      p []     _ = 0
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 225353 where
--   oeisIx n = (oeis @225353) !! (n - 1)
--   oeis = map (+ 1) $ elemIndices 0 (oeis @225245)

-- instance OEIS 225354 where
--   oeisIx n = (oeis @225354) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (> 0) (oeis @225245)

-- instance OEIS 225395 where
--   oeisIx n = product $ zipWith (^)
--       (map (oeisIx @49084) $ (rowT @27748) n) (map (oeisIx @225395) $ (rowT @124010) n)

-- instance OEIS 225413 where
--   oeis = tablList @225413
-- instance Table 225413 where
--   rowT n = (tabl @225413) !! n
--   tabl = map (map (`div` 2)) $
--                  zipWith (zipWith (-)) (tabl @101164) (tabl @14473)

-- instance OEIS 225481 where
--   oeisIx n = product [p | p <- takeWhile (<= n + 1) (oeis @40),
--                            mod n (p - 1) == 0 || mod (n + 1) p == 0]

-- instance OEIS 225493 where
--   import Data.Set (singleton, fromList, union, deleteFindMin)
--   oeisIx n = (oeis @225493) !! (n - 1)
--   oeis = 1 : h (singleton p) ps [p] where
--      (p:ps) = (oeis @51634)
--      h s xs'@ (x:xs) ys
--        | m > x     = h (s `union` (fromList $ map (* x) (1 : ys))) xs ys
--        | otherwise = m : h (s' `union` (fromList $ map (* m) ys')) xs' ys'
--        where ys' = m : ys; (m, s') = deleteFindMin s

-- instance OEIS 225494 where
--   import Data.Set (singleton, fromList, union, deleteFindMin)
--   oeisIx n = (oeis @225494) !! (n - 1)
--   oeis = 1 : h (singleton p) ps [p] where
--      (p:ps) = (oeis @6562)
--      h s xs'@ (x:xs) ys
--        | m > x     = h (s `union` (fromList $ map (* x) (1 : ys))) xs ys
--        | otherwise = m : h (s' `union` (fromList $ map (* m) ys')) xs' ys'
--        where ys' = m : ys; (m, s') = deleteFindMin s

-- instance OEIS 225495 where
--   import Data.Set (singleton, fromList, union, deleteFindMin)
--   oeisIx n = (oeis @225495) !! (n - 1)
--   oeis = 1 : h (singleton p) ps [p] where
--      (p:ps) = (oeis @51635)
--      h s xs'@ (x:xs) ys
--        | m > x     = h (s `union` (fromList $ map (* x) (1 : ys))) xs ys
--        | otherwise = m : h (s' `union` (fromList $ map (* m) ys')) xs' ys'
--        where ys' = m : ys; (m, s') = deleteFindMin s

-- instance OEIS 225496 where
--   import Data.Set (singleton, fromList, union, deleteFindMin)
--   oeisIx n = (oeis @225496) !! (n - 1)
--   oeis = 1 : h (singleton p) ps [p] where
--      (p:ps) = (oeis @178943)
--      h s xs'@ (x:xs) ys
--        | m > x     = h (s `union` (fromList $ map (* x) (1 : ys))) xs ys
--        | otherwise = m : h (s' `union` (fromList $ map (* m) ys')) xs' ys'
--        where ys' = m : ys; (m, s') = deleteFindMin s

-- instance OEIS 225589 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @217122))

-- instance OEIS 225621 where
--   oeisIx n = (oeisIx @74911) (2 * n - 1) n

-- instance OEIS 225693 where
--   oeisIx = f 1 0 where
--      f _ a 0 = a
--      f s a x = f (negate s) (s * a + d) x' where (x', d) = divMod x 10

-- instance OEIS 225761 where
--   oeisIx = numerator . sum . map (recip . fi) . (rowT @70165)

-- instance OEIS 225784 where
--   oeisIx = denominator . sum . map (recip . fi) . (rowT @70165)

-- instance OEIS 225790 where
--   oeisIx 1 = 1
--   oeisIx n = 12 ^ (n1 * n1) * 2 ^ (2 * n1 - 1) * k
--     where
--       n1 = div n 2
--       k = if odd n then 4 else 1

-- instance OEIS 225793 where
--   oeis = filter ((== 1) . (oeisIx @230093)) [1..]

-- instance OEIS 225817 where
--   oeis = tablList @225817
-- instance Table 225817 where
--   rowCol n k = (tabf @225817) !! (n - 1) !! (k-1)
--   rowT n = (tabf @225817) !! (n - 1)
--   tabf = map (map (oeisIx @8683)) (tabf @27750)

-- instance OEIS 225840 where
--   oeisIx n = maximum $ filter (< n) $ (rowT @70165) n

-- instance OEIS 225843 where
--   oeisIx = floor . sum . map (recip . fi) . (rowT @70165)

-- instance OEIS 225850 where
--   oeisIx = fromJust . (`elemIndex` (oeis @167151))

-- instance OEIS 225860 where
--   oeisIx n = p (oeisIx_row n) (2 ^ n) where
--      p _          0 = 1
--      p []         _ = 0
--      p bs'@ (b:bs) m = if m < b then 0 else p bs' (m - b) + p bs m

-- instance OEIS 225985 where
--   oeis = map read $ filter (not . null) $
--       map (filter (`elem` "13579") . show) [0..] :: [Integer]

-- instance OEIS 226025 where
--   oeis = filter ((/= 2) . (oeisIx @100995)) (oeis @71904)

-- instance OEIS 226029 where
--   oeis = zipWith (-) (tail (oeis @182402)) (oeis @182402)

-- instance OEIS 226030 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @226029))

-- instance OEIS 226047 where
--   oeisIx = maximum . (rowT @226078)

-- instance OEIS 226077 where
--   oeisIx n = (oeis @226077) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f :: Integer -> [Integer] -> [Integer]
--      f x zs = g zs where
--        g (y:ys) | (oeisIx @209229) (x .&. y) == 0 = g ys
--                 | otherwise = y : f y (delete y zs)

-- instance OEIS 226078 where
--   oeis = tablList @226078
-- instance Table 226078 where
--   rowCol n k = (tabf @226078) !! n !! k
--   rowT n = (tabf @226078) !! n
--   tabf = map (rowT @141809) (oeis @984)

-- instance OEIS 226091 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @225985)) . (oeisIx @14261)

-- instance OEIS 226093 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @226077))

-- instance OEIS 226110 where
--   oeisIx 1 = 0
--   oeisIx n = maximum $ map abs $ zipWith (-) (tail ts) ts
--      where ts = (rowT @70165) n

-- instance OEIS 226123 where
--   oeisIx = sum . map (oeisIx @209229) . (rowT @70165)

-- instance OEIS 226134 where
--   oeisIx = foldl (\v d -> 10*v+d) 0 . scanl1 (\d x -> (x+d) `mod` 10) .
--             map (read . return) . show :: Int -> Int

-- instance OEIS 226203 where
--   oeisIx n = (oeis @226203) !! n
--   oeis = concat $ transpose
--                  [[1, 3 ..], [-3, -1 ..], [-1, 1 ..], [1, 3 ..], [1, 3 ..]]

-- instance OEIS 226219 where
--   oeisIx n = head [k | k <- [2..],
--                         isInfixOf (show n) (show (k*n)), not $ p10 k]
--      where p10 = flip isPrefixOf ('1' : repeat '0') . show  :: Int -> Bool

-- instance OEIS 226222 where
--   oeis = 1 : 1 : 1 : zipWith (+)
--      (map (oeisIx @226222) $ zipWith (-) [3..] (oeis @226222))
--      (map (oeisIx @226222) $ zipWith (-) [2..] $ tail (oeis @226222))

-- instance OEIS 226227 where
--   oeisIx n = (oeis @226227) !! (n - 1)
--   oeis = filter (all (== 1) .
--                  map (oeisIx . genericLength) .
--                      other . tail . reverse . group . (rowT @30308)) [1..]
--      where other [] = []; other [x] = [x]; other (x:_:xs) = x : other xs

-- instance OEIS 226228 where
--   oeisIx n = (oeis @226228) !! (n - 1)
--   oeis = filter (all (== 1) .
--                  map (oeisIx . genericLength) .
--                      other . reverse . group . (rowT @30308)) [1..]
--      where other [] = []; other [x] = [x]; other (x:_:xs) = x : other xs

-- instance OEIS 226229 where
--   oeisIx n = (oeis @226229) !! (n - 1)
--   oeis = filter
--      (all (== 1) . map (oeisIx . genericLength) . group . (rowT @30308)) [1..]

-- instance OEIS 226244 where
--   (oeis, (oeis @226245)) = unzip $ (1,1) : f 1 1 (oeis @5185) where
--      f i v (q:qs) | q > v = (q,i) : f (i + 1) q qs
--                   | otherwise = f (i + 1) v qs

-- instance OEIS 226245 where

-- instance OEIS 226272 where
--   oeis = tablList @226272
-- instance Table 226272 where
--   rowCol n k = (tabf @226272) !! n !! k
--   rowT n = sort $ nub [u ^ v | u <- digs, v <- digs]
--                   where digs = nub $ map (read . return) $ show n
--   tabf = map (rowT @226272) [0..]

-- instance OEIS 226273 where
--   oeisIx = genericLength . (rowT @226272) :: Integer -> Int

-- instance OEIS 226277 where
--   oeisIx n = (oeis @226277) !! (n - 1)
--   oeis = sort [w | u <- [0..9], v <- [0..9], let w = u ^ v,
--      "0123456789" !! u `elem` show w, "0123456789" !! v `elem` show w]

-- instance OEIS 226314 where
--   oeis = tablList @226314
-- instance Table 226314 where
--   rowCol n k = n - (n - k) `div` gcd n k
--   rowT   = rowT_off   @226314 @1
--   tabl = map f $ tail (tabl @2262) where
--      f us'@ (_:us) = map (v -) $ zipWith div vs (map (gcd v) us)
--        where (v:vs) = reverse us'

-- instance OEIS 226387 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @85612))

-- instance OEIS 226390 where
--   oeis = zipWith (-) (tail (oeis @14011)) (oeis @14011)

-- instance OEIS 226452 where
--   oeisIx n = (oeis @226452) !! n
--   oeis = 1 : 2 : f [[0,0],[0,1],[1,0],[1,1]] where
--      f bss = sum (map h bss) : f ((map (0 :) bss) ++ (map (1 :) bss)) where
--      h bs = fromEnum $ or $ zipWith
--              (\xs ys -> xs == ys && not (xs `isInfixOf` (init $ tail bs)))
--              (init $ inits bs) (reverse $ tails $ tail bs)

-- instance OEIS 226463 where
--   oeis = tablList @226463
-- instance Table 226463 where
--   rowCol n k = (tabf @226463) !! n !! k
--   rowT n = (tabf @226463) !! n
--   tabf = map (map (1 -)) (tabf @70950)

-- instance OEIS 226464 where
--   oeis = tablList @226464
-- instance Table 226464 where
--   rowCol n k = (tabf @226464) !! n !! k
--   rowT n = (tabf @226464) !! n
--   tabf = map reverse (tabf @226463)

-- instance OEIS 226474 where
--   oeisIx = (1 -) . (oeisIx @51023)

-- instance OEIS 226481 where
--   oeis = tablList @226481
-- instance Table 226481 where
--   rowCol n k = (tabf @226481) !! n !! k
--   rowT n = (tabf @226481) !! n
--   tabf = map (map length . group) (tabf @70950)

-- instance OEIS 226482 where
--   oeisIx = genericLength . (rowT @226481)

-- instance OEIS 226483 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @224909))

-- instance OEIS 226518 where
--   oeis = tablList @226518
-- instance Table 226518 where
--   rowCol n k = (tabf @226518) !! (n - 1) !! k
--   rowT n = (tabf @226518) !! (n - 1)
--   tabf = map (scanl1 (+)) (tabf @226520)

-- instance OEIS 226520 where
--   oeis = tablList @226520
-- instance Table 226520 where
--   rowCol n k = (tabf @226520) !! (n - 1) !! k
--   rowT n = (tabf @226520) !! (n - 1)
--   tabf =
--      map (\p -> map (flip legendreSymbol p) [0..p-1]) (oeis @40)

-- instance OEIS 226532 where
--   oeisIx n = product $ zipWith (^)
--               (oeis @40) (scanr1 xor $ (rowT @67255) n :: [Integer])

instance OEIS 226538 where
  oeis = concat $ transpose [drop 2 (oeis @71), tail (oeis @1911)]

-- instance OEIS 226555 where
--   oeisIx n = numerator $ sum $
--               zipWith ((%) `on` toInteger) (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 226569 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @226532))

-- instance OEIS 226637 where
--   oeis = filter ((== 0) . (oeisIx @76489)) [0..]

-- instance OEIS 226649 where
--   oeisIx n = (oeis @226649) !! n
--   oeis = concat $ transpose [oeis, drop 2 (oeis @1611)]

-- instance OEIS 226748 where
--   oeisIx = p (oeis @53012) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 226749 where
--   oeisIx = p (oeis @53012) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 226777 where
--   import qualified Data.Set as Set (null, split, filter)
--   import Data.Set (Set, empty, insert, member)
--   oeisIx n = (oeis @226777) !! (n - 1)
--   oeis = f (oeis @76467) empty where
--      f (x:xs) s | Set.null $ Set.filter ((`member` s) . (x -)) s'
--                             = f xs (x `insert` s)
--                 | otherwise = x : f xs (x `insert` s)
--                 where (s', _) = Set.split (x `div` 2) s

-- instance OEIS 226778 where
--   oeis = filter ((== 1) . (oeisIx @55483)) [1..]

-- instance OEIS 226898 where
--   oeisIx = maximum . map length .
--      map (\ds@ (d:_) -> takeWhile (<= e' d) ds) . init . tails . (rowT @27750)
--      where e' = floor . (* e) . fi; e = exp 1

-- instance OEIS 226946 where
--   oeis = filter ((== 0) . (oeisIx @86)) [1..]

-- instance OEIS 226950 where
--   import qualified Data.Set as Set (split, filter)
--   import Data.Set (Set, empty, size, insert, member)
--   oeisIx n = (oeis @226950) !! (n - 1)
--   oeis = f (oeis @76467) empty where
--      f (x:xs) s | size s'' <= 1 = f xs (x `insert` s)
--                 | otherwise     = x : f xs (x `insert` s)
--                 where s'' = Set.filter ((`member` s) . (x -)) s'
--                       (s', _) = Set.split (x `div` 2) s

-- instance OEIS 227048 where
--   oeis = tablList @227048
-- instance Table 227048 where
--   rowCol n k = (tabf @227048) !! n !! (k-1)
--   rowT n = (tabf @227048) !! n
--   tabf = map f (oeis @244)  where
--      f x = reverse $ map (x -) $ takeWhile (<= x) (oeis @79)

-- instance OEIS 227068 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @56924))

-- instance OEIS 227113 where
--   oeisIx n = (oeis @227113) !! (n - 1)
--   oeis = 1 : f [2..] where
--      f (x:xs) = x : y : f (delete y xs)
--        where y : _ = filter ((> 1) . (gcd x)) xs

-- instance OEIS 227114 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @227113))

-- instance OEIS 227118 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @184992))

-- instance OEIS 227144 where
--   oeis = [1,2,7,17,23] ++ map (+ 24) (oeis @227144)

-- instance OEIS 227146 where
--   oeis = [5,11,13,14,19] ++ map (+ 24) (oeis @227146)

-- instance OEIS 227190 where
--   oeisIx n = n - (oeisIx @167489) n

-- instance OEIS 227288 where
--   oeis = zipWith gcd (tail (oeis @227113)) (oeis @227113)

-- instance OEIS 227289 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @227288))

-- instance OEIS 227291 where
--   oeisIx n = fromEnum $ (sum $ zipWith (*) mds (reverse mds)) == 1
--      where mds = (rowT @225817) n

-- instance OEIS 227296 where
--   oeisIx n = p [1 .. (oeisIx @10) n] n where
--      p _          0 = 1
--      p []         _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 227325 where
--   oeisIx n = (oeisIx @272) (n + 1) * (oeisIx @984) n

-- instance OEIS 227326 where
--   oeisIx n = (oeis @227326) !! n
--   oeis = 0 : xs where
--      xs = concat $ transpose
--           [oeis, zipWith (+) (tail (oeis @302)) (map (* 2) xs)]

instance OEIS 227362 where
  oeisIx = fi . (read . reverse . sort . nub . show :: Integer -> Integer) . fi

-- instance OEIS 227378 where
--   oeisIx = fromJust . (`elemIndex` (oeis @217928))

-- instance OEIS 227388 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @226390))

-- instance OEIS 227389 where
--   oeisIx n = (oeis @227389) !! (n - 1)
--   oeis = map length $ group (oeis @226390)

-- instance OEIS 227413 where
--   oeisIx n = (oeis @227413) !! (n - 1)
--   oeis = 1 : concat (transpose [map (oeisIx @40) (oeis @227413),
--                                         map (oeisIx @2808) (oeis @227413)])

-- instance OEIS 227426 where
--   oeisIx = p 1 1 where
--     p _ _ 0 = 1
--     p k i m = if m < k then 0 else p (k + i) (3 - i) (m - k) + p (k + 1) 1 m

-- instance OEIS 227428 where
--   oeisIx = sum . map (flip div 2) . (rowT @83093)

-- instance OEIS 227431 where
--   oeis = tablList @227431
-- instance Table 227431 where
--   rowCol = rowCol_off @227431 @1 @1
--   rowT   = rowT_off   @227431 @1
--   tabl = h [] 0 1 where
--      h row u v = row' : h row' v (u + v) where row' = scanl (-) v row

-- instance OEIS 227455 where
--   oeis = 1 : f [2..] [1] where
--      f (v:vs) ws = if any (`notElem` ws) $ map (subtract 1) $ (rowT @27748) v
--                       then v : f vs (v : ws) else f vs ws

-- instance OEIS 227481 where
--   oeisIx = sum . map (oeisIx @10052) . (rowT @69011)

-- instance OEIS 227550 where
--   oeis = tablList @227550
-- instance Table 227550 where
--   rowT n = (tabl @227550) !! n
--   tabl = map fst $ iterate
--      (\ (vs, w:ws) -> (zipWith (+) ([w] ++ vs) (vs ++ [w]), ws))
--      ([1], (oeis @1563))

-- instance OEIS 227617 where
--   import qualified Data.Map as Map (null, insert)
--   import Data.Map (empty, deleteFindMin)
--   oeisIx n = (oeis @227617) !! (n - 1)
--   oeis = f 1 empty $ zip (oeis @100707) [1..] where
--      f i mp (uv:uvs)
--        | Map.null mp = f i (uncurry Map.insert uv mp) uvs
--        | y == i      = x : f (i + 1) (uncurry Map.insert uv mp') uvs
--        | otherwise   = f i (uncurry Map.insert uv mp) uvs
--        where ((y,x), mp') = deleteFindMin mp

-- instance OEIS 227632 where
--   (oeis, (oeis @227633)) = unzip $ (1,1) : f 1 1 (oeis @227617) where
--      f i v (q:qs) | q > v = (q,i) : f (i + 1) q qs
--                   | otherwise = f (i + 1) v qs

-- instance OEIS 227633 where

-- instance OEIS 227736 where
--   oeis = tablList @227736
-- instance Table 227736 where
--   rowCol n k = (tabf @227736) !! (n - 1) !! (k-1)
--   rowT n = (tabf @227736) !! (n - 1)
--   tabf = map (map length . group) $ tail (tabf @30308)

-- instance OEIS 227791 where
--   oeisIx n = (oeisIx @227550) (2 * n) n

-- instance OEIS 227836 where
--   oeisIx = (oeisIx @7814) . (oeisIx @214551)

-- instance OEIS 227837 where
--   oeisIx = (oeisIx @7949) . (oeisIx @214551)

-- instance OEIS 227838 where
--   oeisIx = (oeisIx @7814) . (oeisIx @5132)

-- instance OEIS 227839 where
--   oeisIx = (oeisIx @7949) . (oeisIx @5132)

-- instance OEIS 227862 where
--   oeis = tablList @227862
-- instance Table 227862 where
--   rowT n = (tabl @227862) !! n
--   tabl = map snd $ iterate ox (False, [1]) where
--      ox (turn, xs) = (not turn, if turn then reverse ys else ys)
--         where ys = scanl (+) 1 (if turn then reverse xs else xs)

-- instance OEIS 227876 where
--   oeisIx n = fst $ until (null . snd) h (0, (rowT @31298) n) where
--               h (s, ds) = (s + sum ds, map abs $ zipWith (-) ds $ tail ds)

-- instance OEIS 227878 where
--   oeis = f (oeis @51701) where
--      f (p:ps@ (_:p':_)) = if p == p' then p : f ps else f ps

-- instance OEIS 227915 where
--   oeis = filter ((== 4) . (oeisIx @228085)) [1..]

-- instance OEIS 227928 where
--   oeis = 1 : f 0 0 (tail (oeis @79)) (tail (oeis @244)) where
--      f x y us'@ (u:us) vs'@ (v:vs)
--        | x > 0     = u : f 0 (u - x + y) us vs'
--        | y > v - u = v : f (v + x - y) 0 us' vs
--        | otherwise = u : f 0 (u + y) us vs'

-- instance OEIS 227944 where
--   oeisIx n = fst $
--               until ((== 1) . snd) (\ (i, x) -> (i + 1, (oeisIx @53575) x)) (0, n)

-- instance OEIS 227946 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @227944))

-- instance OEIS 227953 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @70965))

-- instance OEIS 227954 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @70965)) . negate

-- instance OEIS 228053 where
--   oeis = tablList @228053
-- instance Table 228053 where
--   rowT n = (tabl @228053) !! n
--   tabl = iterate (\row@ (i:_) -> zipWith (+)
--      ([- i] ++ tail row ++ [0]) ([0] ++ init row ++ [- i])) [- 1]
--

instance OEIS 228056 where
  oeis = filter f [1..] where
     f x = length us == 1 && (head us > 1 || not (null vs)) where
           (us,vs) = Data.List.partition odd $ (rowT @124010) x

-- instance OEIS 228057 where
--   oeis = filter odd (oeis @228056)

-- instance OEIS 228058 where
--   oeisIx n = (oeis @228058) !! (n - 1)
--   oeis = filter f [1, 3 ..] where
--      f x = length us == 1 && not (null vs) &&
--            fst (head us) `mod` 4 == 1 && snd (head us) `mod` 4 == 1
--            where (us,vs) = partition (odd . snd) $
--                            zip (oeisIx_row x) (oeisIx_row x)

-- instance OEIS 228074 where
--   oeis = tablList @228074
-- instance Table 228074 where
--   rowT n = (tabl @228074) !! n
--   tabl = map fst $ iterate
--      (\ (u:_, vs) -> (vs, zipWith (+) ([u] ++ vs) (vs ++ [1]))) ([0], [1,1])

-- instance OEIS 228078 where
--   oeisIx = subtract 1 . (oeisIx @99036)

-- instance OEIS 228082 where
--   oeis = 0 : filter ((> 0) . (oeisIx @228085)) [1..]

-- instance OEIS 228085 where
--   oeisIx n = genericLength $ filter ((== n) . (oeisIx @92391)) [n - (oeisIx @70939) n .. n]

-- instance OEIS 228088 where
--   oeis = 0 : filter ((== 1) . (oeisIx @228085)) [1..]

-- instance OEIS 228276 where
--   oeisIx n = (oeis @228276) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f x zs = g zs where
--        g (y:ys) = if null $ show (x + y) \\ (show x ++ show y)
--                      then y : f y (delete y zs) else g ys

-- instance OEIS 228340 where
--   oeis = tablList @228340
-- instance Table 228340 where
--   rowCol = rowCol_off @228340 @1 @0
--   rowT   = rowT_off   @228340 @1
--   tabl = map (reverse . fst) $ iterate f ([1], [1,0]) where
--      f (us, vs'@ (_ : vs@ (v : _))) = (vs', ws) where
--        ws = 1 : (v + 1) : zipWith (+) us (map (* (v + 2)) vs)

-- instance Table 228351 where
--   rowT 0 = []
--   rowT n = (oeisIx @1511) n : (rowT @228351) (n `div` 2^ (oeisIx @1511 n))
-- instance OEIS 228351 where
--   oeis = concatMap (rowT @228351) [1..]

-- instance OEIS 228369 where
--   oeis = concatMap (rowT @228369) [1..]
--   oeisIx_row 0 = []
--   oeisIx_row n
--     | 2^k == 2 * n + 2 = [k - 1]
--     | otherwise        = (rowT @228369) (n `div` 2^k) ++ [k] where
--       k = (oeisIx @7814) (n + 1) + 1

-- instance OEIS 228446 where
--   oeisIx n = head
--      [q | let m = 2 * n + 1,
--           q <- map (m -) $ reverse $ takeWhile (< m) $ tail (oeis @2378),
--           oeisIx q == 1]

-- instance OEIS 228643 where
--   oeis = tablList @228643
-- instance Table 228643 where
--   rowCol = rowCol_off @228643 @1 @1
--   rowT   = rowT_off   @228643 @1
--   tabl = map fst $ iterate
--      (\ (row, x) -> (scanl (+) (x * (x - 1) + 1) row, x + 1)) ([1], 2)

-- instance OEIS 228709 where
--   oeis = filter ((== 0) . (oeisIx @228710)) [0..]

-- instance OEIS 228710 where
--   oeisIx n = fromEnum $ f (n `div` 10) (n `mod` 2) where
--      f x p = x == 0 || (x `mod` 2) /= p && f (x `div` 10) (1 - p)

-- instance OEIS 228722 where
--   oeisIx n = head [x | x <- [n, n - 1 ..], (oeisIx @228710) x == 1]

-- instance OEIS 228723 where
--   oeisIx n = head [x | x <- [n..], (oeisIx @228710) x == 1]

-- instance OEIS 229037 where
--   import Data.IntMap (empty, (!), insert)
--   oeisIx n = (oeis @229037) !! (n - 1)
--   oeis = f 0 empty  where
--      f i m = y : f (i + 1) (insert (i + 1) y m) where
--        y = head [z | z <- [1..],
--                      all (\k -> z + m ! (i - k) /= 2 * m ! (i - k `div` 2))
--                          [1, 3 .. i - 1]]

-- instance OEIS 229109 where
--   oeisIx n  = (oeisIx @1221) n + n

-- instance OEIS 229139 where
--   oeisIx 1 = 0
--   oeisIx n = head $
--      dropWhile (== 0) $ map (oeisIx . (t -) . (^ 2)) [s, s - 1 ..]
--      where t = (oeisIx @45) (2 * n - 1); s = (oeisIx @196) t

-- instance OEIS 229362 where
--   oeis = 1 : 2 : 3 : f 4 [1,2,3] where
--      f x ys = y : f (x + 1) (ys ++ [y]) where y = p ys x
--      p _          0 = 1
--      p []         _ = 0
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 229363 where
--   oeisIx n = (oeis @229363) !! (n - 1)
--   oeis = f "" [0, 2 ..] where
--      f xs (e:es) = if null $ intersect xs ys then e : f ys es else f xs es
--                    where ys = show e

-- instance OEIS 229364 where
--   oeisIx n = (oeis @229364) !! (n - 1)
--   oeis = f "" [1, 3 ..] where
--      f xs (o:os) = if null $ intersect xs ys then o : f ys os else f xs os
--                    where ys = show o

instance OEIS 229762 where
  oeisIx (fi->n) = fi do (n `xor` shiftR n 1) .&. shiftR n 1 :: Int

instance OEIS 229763 where
  oeisIx (fi->n) = fi do (shiftL n 1 `xor` n) .&. n :: Int

instance OEIS 230089 where
  oeisIx (succ->n) = if odd n then n else if mod n 4 == 0 then 4 else 2

-- instance OEIS 230091 where
--   oeis = filter ((== 2) . (oeisIx @228085)) [1..]

-- instance OEIS 230092 where
--   oeis = filter ((== 3) . (oeisIx @228085)) [1..]

-- instance OEIS 230094 where
--   oeis = filter ((== 2) . (oeisIx @230093)) [0..]

-- instance OEIS 230097 where
--   oeis = 0 : f 0 0 where
--      f i m = if v > m then i : f (i + 1) v else f (i + 1) m
--              where v = (oeisIx @159918) i

instance OEIS 230099 where
  oeisIx n = (oeisIx @7954) n + n

-- instance OEIS 230102 where
--   oeis = iterate (oeisIx @230099) 1

-- instance OEIS 230107 where
--   oeisIx = fromMaybe (-1) . f (10^5) 1 1 1 where
--      f k i u j v | k <= 0    = Nothing
--                  | u < v     = f (k - 1) (i + 1) (oeisIx u) j v
--                  | u > v     = f (k - 1) i u (j + 1) (oeisIx v)
--                  | otherwise = Just j

-- instance OEIS 230116 where
--   oeisIx = foldr (\u v-> 2*v + u) 0 . map toInteger . (rowT @166360)

-- instance OEIS 230286 where
--   oeisIx = (flip div 3) . (oeisIx @16052)

-- instance OEIS 230287 where
--   oeis = zipWith (-) (tail (oeis @230286)) (oeis @230286)

-- instance OEIS 230504 where
--   oeisIx n = head $ filter ((== 1) . (oeisIx @10051)') rs where
--                      rs = n : zipWith (+) rs (zipWith gcd rs [2..])

-- instance OEIS 230584 where
--   oeisIx n = (oeis @230584) !! (n - 1)
--   oeis = 2 : 3 : concat
--                  (transpose [drop 2 (oeis @59100), drop 2 (oeis @8865)])

-- instance OEIS 230585 where
--   oeisIx 1 = 3
--   oeisIx n = (oeisIx @7318) (2*n) n - (oeisIx @7318) (2*n) (n+2)

-- instance OEIS 230631 where
--   oeisIx n = (oeisIx @53737) n + n

-- instance OEIS 230641 where
--   oeisIx n = (oeisIx @53735) n + n

-- instance OEIS 230709 where
--   oeis = filter (\x -> (oeisIx @10060) x * x `mod` 2 == 0) [0..]

-- instance OEIS 230720 where
--   oeisIx = (oeisIx @3071) . (oeisIx @92246)
--   oeis = filter even (oeis @3071)

-- instance OEIS 230721 where
--   oeisIx = (oeisIx @3071) . (oeisIx @230709) . (+ 1)
--   oeis = filter odd (oeis @3071)

-- instance OEIS 230780 where
--   oeis = filter (all (/= 1) . map (flip mod 6) . (rowT @27748)) [1..]

-- instance OEIS 230871 where
--   data Dtree = Dtree Dtree (Integer, Integer) Dtree
--   oeisIx n k = (tabf @230871) !! n !! k
--   oeisIx_row n = (tabf @230871) !! n
--   oeisIx_tabf = [0] : map (map snd) (rows $ deleham (0, 1)) where
--      rows (Dtree left (x, y) right) =
--           [ (x, y)] : zipWith (++) (rows left) (rows right)
--      deleham (x, y) = Dtree
--              (deleham (y, y + x)) (x, y) (deleham (y, 3 * y - x))

-- instance OEIS 230872 where
--   oeis = f [] (tabf @231330) where
--      f ws (xs:xss) = us ++ f (merge vs xs) xss where
--        (us,vs) = span (< head xs) ws
--      merge us [] = us
--      merge [] vs = vs
--      merge us'@ (u:us) vs'@ (v:vs)
--           | u < v = u : merge us vs'
--           | u > v = v : merge us' vs
--           | otherwise = u : merge us vs

-- instance OEIS 230873 where
--   oeis = f [0..] (oeis @230872) where
--      f (u:us) vs'@ (v:vs) = if u == v then f us vs else u : f us vs'

-- instance OEIS 230950 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) $ map fi (oeis @10060)

-- instance OEIS 230951 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) $ map fi (oeis @10059)

-- instance OEIS 230952 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) $ map fi (oeis @120)

-- instance OEIS 230953 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) $ tail (oeis @40)

-- instance OEIS 230954 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) (oeis @2808)

-- instance OEIS 230955 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) (oeis @18252)

-- instance OEIS 230957 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) (oeis @9)

-- instance OEIS 230958 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) $ map fi (oeis @1285)

-- instance OEIS 230959 where
--   oeisIx n = (if null cds then 0 else read cds) :: Integer
--      where cds = "9876543210" \\ show n

-- instance OEIS 230960 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) (oeis @142)

-- instance OEIS 230961 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) $ tail (oeis @142)

-- instance OEIS 231179 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) [0..]

-- instance OEIS 231200 where
--   oeisIx n = sum $ zipWith (*) (oeisIx_row n) $ [0, 2 ..]

-- instance OEIS 231330 where
--   oeis = tablList @231330
-- instance Table 231330 where
--   rowCol n k = (tabf @231330) !! n !! k
--   rowT n = (tabf @231330) !! n
--   tabf = map (sort . nub) (tabf @230871)

-- instance OEIS 231331 where
--   oeisIx = genericLength . (rowT @231330)

-- instance OEIS 231335 where
--   oeisIx = genericLength . filter ((== 1) . (oeisIx @10056)) . (rowT @231330)

-- instance OEIS 231429 where
--   oeisIx n = p [1..n - 1] (2*n) where
--      p _  0 = 1
--      p [] _ = 0
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 231600 where
--   oeisIx n = a 3 n where
--      a s 0 = 0 ^ s
--      a s x = a (t s b) x' where (x',b) = divMod x 2
--      t 3 0 = 1; t 3 1 = 2; t 2 0 = 0; t 2 1 = 3; t 1 _ = 1; t 0 _ = 0
--

-- instance OEIS 231692 where
--   oeis = map numerator $ 0 : wilson 1 0 where
--      wilson x y = y' : wilson (x + 1) y'
--                   where y' = y + (if y < 1 % x then 1 else -1) % x

-- instance OEIS 231693 where
--   oeis = map denominator $ 0 : wilson 1 0 where
--      wilson x y = y' : wilson (x + 1) y'
--                   where y' = y + (if y < 1 % x then 1 else -1) % x

-- instance OEIS 231897 where
--   oeisIx n = head [x | x <- [1..], (oeisIx @159918) x == n]

-- instance OEIS 231900 where
--   oeis = filter (> 1) (oeis @134744)

-- instance OEIS 232054 where
--   oeis = c [1..] (oeis @56875) where
--      c (u:us) vs'@ (v:vs) = if u == v then c us vs else u : c us vs'

-- instance OEIS 232221 where
--   oeis = scanl1 (+) (oeis @232342)

-- instance OEIS 232244 where
--   oeis = 1 : concat (zipWith w (oeis @2193) $ tail (oeis @2193))
--      where w v u | v > u     = [v - 1, v - 2 .. u]
--                  | v < u     = [v + 1 .. u]
--                  | otherwise = [v]

-- instance OEIS 232246 where
--   oeisIx n = (oeisIx @110440) (2 * n) n

-- instance OEIS 232342 where
--   oeis = zipWith (-) (oeis @77068) (oeis @77065)

-- instance OEIS 232359 where
--   (oeis, (oeis @232361)) = unzip $
--      f 2 (tail (oeis @232221)) $ zipWith (-) (tail (oeis @232221)) (oeis @232221)
--      where f x (y:ys) (u:ws@ (v:_))
--              | u > 0 && v < 0 = (x, y) : f (x + 1) ys ws
--              | otherwise      = f (x + 1) ys ws

-- instance OEIS 232361 where

-- instance OEIS 232501 where
--   oeisIx n = (oeis @232501) !! (n - 1)
--   oeis = filter f [1..] where
--      f x = all ((== 1) . (oeisIx @10054)) $ init $ sort $
--            map (abs . (x -) . (^ 2) . (+ (oeisIx x))) [-1..2]

-- instance OEIS 232608 where
--   oeis = filter f $ tail (oeis @217) where
--      f x = all ((== 1) . (oeisIx @10054)) $ init $ sort $
--            map (abs . (x -) . (^ 2) . (+ (oeisIx x))) [-1..2]

-- instance OEIS 232642 where
--   import Data.List.Ordered (member); import Data.List (sort)
--   oeisIx n k = (tabf @232642) !! (n - 1) !! (k-1)
--   oeisIx_row n = (tabf @232642) !! (n - 1)
--   oeisIx_tabf = f (tabf @82560) [] where
--      f (xs:xss) zs = ys : f xss (sort (ys ++ zs)) where
--        ys = [v | v <- xs, not $ member v zs]
--   oeis = concat (tabf @232642)

-- instance OEIS 232643 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @232642))

-- instance OEIS 232991 where
--   oeisIx = (0 ^) . subtract 1 . gcd 6 . (+ 1)
--   oeis = cycle [1,0,0,0,1,0]

-- instance OEIS 233281 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (oeisIx @1177)) [1..]

-- instance OEIS 233734 where
--   oeisIx n = (oeisIx @19538) (2 * n - 1) n

-- instance OEIS 233836 where
--   oeisIx n = (oeis @233836) !! (n - 1)
--   oeis = map length $ group (oeis @4539)

-- instance OEIS 234098 where
--   oeis = filter ((== 1) . (oeisIx @10051)') $
--                         map ((flip div 2) . (+ 1)) (oeis @46388)

-- instance OEIS 234324 where
--   oeisIx n = (oeisIx @8955) (2 * n) n

-- instance OEIS 234575 where
--   oeis = tablList @234575
-- instance Table 234575 where
--   rowCol = rowCol_off @234575 @1 @1
--   rowT   = rowT_off   @234575 @1
--   tabl = zipWith (zipWith (+)) (tabl @48158) (tabl @10766)

-- instance OEIS 234586 where
--   oeisIx n = (oeis @234586) !! (n - 1)
--   oeis = concat (transpose [oeis, [2, 4 ..]])
--   oeis = 1 : 1 : (drop 2 $
--                  map abs $ zipWith (-) (oeis @234586) $ tail (oeis @234586))

-- instance OEIS 234587 where

-- instance OEIS 234814 where
--   oeis = filter (\x -> x `mod` (oeisIx @7953) x == 0 &&
--                                x `mod` (oeisIx @10888) x /= 0) [1..]

-- instance OEIS 234932 where
--   oeisIx n = (oeis @234932) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f x zs = g zs where
--        g (y:ys) = if null $ show (x * y) \\ (show x ++ show y)
--                      then y : f y (delete y zs) else g ys

-- instance OEIS 234950 where
--   oeis = tablList @234950
-- instance Table 234950 where
--   rowCol n k = sum [oeisIx s k * (oeisIx @9766) n s | s <- [k..n]]
--   rowT n = map (oeisIx n) [0..n]
--   tabl = map (rowT @234950) [0..]

-- instance OEIS 234959 where
--   oeisIx = f 1 where
--      f y x = if m == 0 then f (y * 6) x' else y  where (x', m) = divMod x 6

-- instance OEIS 235049 where
--   oeisIx x = if x == 0 then 0 else 10 * (oeisIx @235049) x' + max 0 (d - 1)
--               where (x', d) = divMod x 10

instance OEIS 235052 where
  oeisIx (succ->n) = head [x | x <- [2..], show (fi x) `isInfixOf` (show $ fi $ x ^ n)]

instance OEIS 235151 where
  oeis = filter ((== 12) . (oeisIx @7953)) [0..]

-- instance OEIS 235168 where
--   oeis = tablList @235168
-- instance Table 235168 where
--   rowCol n k = (rowT @235168) n !! k
--   rowT 0 = [0]
--   rowT n = t n $ reverse $ takeWhile (<= n) (oeis @2110)
--      where t 0 []     = []
--            t x (b:bs) = x' : t m bs where (x', m) = divMod x b
--   tabf = map (rowT @235168) [0..]

-- instance OEIS 235224 where
--   oeisIx n = genericLength $ takeWhile (<= n) (oeis @2110)

instance OEIS 235225 where
  oeis = filter ((== 14) . (oeisIx @7953)) [0..]

instance OEIS 235226 where
  oeis = filter ((== 15) . (oeisIx @7953)) [0..]

instance OEIS 235227 where
  oeis = filter ((== 16) . (oeisIx @7953)) [0..]

instance OEIS 235228 where
  oeis = filter ((== 18) . (oeisIx @7953)) [0..]

instance OEIS 235229 where
  oeis = filter ((== 20) . (oeisIx @7953)) [0..]

-- instance OEIS 235249 where
--   oeisIx n = if y == n then n else (oeisIx @235249) y  where y = (oeisIx @1175) n

-- instance OEIS 235353 where
--   oeis = filter (\x -> mod x (oeisIx x) == 0) (oeis @7694)

-- instance OEIS 235540 where
--   oeis = filter ((== 0) . (oeisIx @10051)') (oeis @158034)

instance OEIS 235702 where
  oeisIx (succ->n) = if n == 1 then 1 else 24 * 5 ^ (n - 2)
  oeis = 1 : iterate (* 5) 24

-- instance OEIS 235708 where
--   oeisIx n = f n where
--      f 1 = 1
--      f b = if isPandigital b n then b else f (b - 1) where
--            isPandigital b = (== b) . length . nub . unfoldr
--              (\x -> if x == 0 then Nothing else Just $ swap $ divMod x b)

-- instance OEIS 235711 where
--   oeisIx = (oeisIx @3415) . (oeisIx @2620)

-- instance OEIS 235715 where
--   oeisIx 1 = 1
--   oeisIx n = f 1 ps 0 where
--      f 0 (1 : xs) z = z
--      f _ (x : xs) z = f x xs (z + 0 ^ (n - 1 - x))
--      ps = 1 : 1 : zipWith (\u v -> (u + v) `mod` n) (tail ps) ps

-- instance OEIS 235726 where
--   a 1 = 1
--   a 4 = 2
--   a n = head $ filter (`notElem` disallowedValues) [1..] where
--     disallowedValues = map a $ (n - 1) : filter (<n) sums where
--       sums = map divisorSum divisors where
--         divisors = filter (\d -> n `mod` d == 0) [1..n]
--         divisorSum d = d + n `div` d

-- instance OEIS 235775 where
--   oeisIx = (oeisIx @47842) . (oeisIx @47842)

instance OEIS 235933 where
  oeis = filter ((== 1) . gcd 35) [1..]

-- instance OEIS 235991 where
--   oeis = filter (odd . (oeisIx @3415)) [0..]

-- instance OEIS 235992 where
--   oeis = filter (even . (oeisIx @3415)) [0..]

instance OEIS 236046 where
  oeisIx ((+2)->n) = head [x | x <- [2..], not $ show (fi x) `isInfixOf` (show $ fi $ x ^ n)]

-- instance OEIS 236076 where
--   oeis = tablList @236076
-- instance Table 236076 where
--   rowT n = (tabl @236076) !! n
--   tabl = [1] : [0, 2] : f [1] [0, 2] where
--      f us vs = ws : f vs ws where
--        ws = [0] ++ zipWith (+) (zipWith (+) ([0] ++ us) (us ++ [0])) vs

-- instance OEIS 236246 where
--   oeis = filter ((== 1) . (oeisIx @229037)) [1..]

-- instance OEIS 236341 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @160855))

-- instance OEIS 236473 where
--   oeisIx = p (oeis @7422) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 236563 where
--   oeisIx n = foldl lcm 1 $ zipWith (\p e -> p ^ (e + 1) * (p - 1))
--                                     (oeisIx_row n) (oeisIx_row n)

-- instance OEIS 237056 where
--   oeisIx n = (oeis @237056) !! (n - 1)
--   oeis = concat $ transpose [oeis, (oeis @192607)]

-- instance OEIS 237058 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @237056))

-- instance OEIS 237126 where
--   oeisIx n = (oeis @237126) !! n
--   oeis = 0 : es where
--      es = 1 : concat (transpose [map (oeisIx @192607) es, map (oeisIx . (+ 1)) es])

-- instance OEIS 237347 where
--   oeis = zipWith (-) (tail (oeis @78633)) (oeis @78633)

-- instance OEIS 237424 where
--   oeisIx = flip div 3 . (+ 1) . (oeisIx @52216)

-- instance OEIS 237427 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @237126))

-- instance OEIS 237709 where
--   oeisIx n = (oeis @237709) !! (n - 1)
--   oeis = map length $ group (oeis @188666)

-- instance OEIS 237739 where
--   oeisIx = fi . (+ 1) . fromJust . (`elemIndex` (oeis @71574))

-- instance OEIS 237851 where
--   oeisIx n = (oeis @237851) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f x zs = g zs where
--        g (u:us) | all ((== 0) . (mod u)) ds = u : f u (delete u zs)
--                 | otherwise = g us
--                 where ds = dropWhile (<= 1) $
--                            sort $ nub $ map (read . return) $ show x

-- instance OEIS 237860 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @237851))

-- instance OEIS 238056 where
--   oeis = filter ((== 1) . length . f) (oeis @40) where
--     f x = filter (\ (us, vs) ->
--                  head vs /= '0' &&
--                  (oeisIx @10051)' (read us :: Integer) == 1 &&
--                  (oeisIx @10051)' (read vs :: Integer) == 1) $
--                  map (flip splitAt $ show x) [1 .. length (show x) - 1]

-- instance OEIS 238057 where
--   oeis = filter ((== 2) . length . f) (oeis @40) where
--     f x = filter (\ (us, vs) ->
--                  head vs /= '0' &&
--                  (oeisIx @10051)' (read us :: Integer) == 1 &&
--                  (oeisIx @10051)' (read vs :: Integer) == 1) $
--                  map (flip splitAt $ show x) [1 .. length (show x) - 1]

-- instance OEIS 238246 where
--   oeis = filter ((== 3) . (oeisIx @72219)) [1..]

-- instance OEIS 238247 where
--   oeis = filter ((== 5) . (oeisIx @72219)) [1..]

-- instance OEIS 238248 where
--   oeis = filter ((== 7) . (oeisIx @72219)) [1..]

instance OEIS 238324 where
  oeis = scanl1 (\u v -> if u > v then u - v else u + v) [1, 3 ..]

-- instance OEIS 238327 where
--   oeis = iterate ((+ 2) . (oeisIx @151800)) 1

-- instance OEIS 238332 where
--   oeis = f [] $ drop 4 (oeis @40) where
--      f xs (p:ps) | (oeisIx @10051) t == 1 || t `elem` xs = f xs ps
--                  | otherwise = p : f (t:xs) ps
--                  where t = read $ tail $ show p

-- instance OEIS 238333 where
--   oeis = f [] $ drop 4 (oeis @40) where
--      f xs (p:ps) | (oeisIx @10051) t == 1 || t `elem` xs = f xs ps
--                  | otherwise = t : f (t:xs) ps
--                  where t = read $ tail $ show p

-- instance OEIS 238453 where
--   oeis = tablList @238453
-- instance Table 238453 where
--   rowT n = (tabl @238453) !! n
--   tabl = [1] : f [1] (oeis @10) where
--      f xs (z:zs) = (map (div y) $ zipWith (*) ys $ reverse ys) : f ys zs
--        where ys = y : xs; y = head xs * z

-- instance OEIS 238497 where
--   oeis = filter ((== 1) . (oeisIx @212793)) $ tail (oeis @45)

-- instance OEIS 238498 where
--   oeis = tablList @238498
-- instance Table 238498 where
--   rowT n = (tabl @238498) !! n
--   tabl = [1] : f [1] (oeis @1615) where
--      f xs (z:zs) = (map (div y) $ zipWith (*) ys $ reverse ys) : f ys zs
--        where ys = y : xs; y = head xs * z

-- instance OEIS 238525 where
--   oeisIx n = mod n $ (oeisIx @1414) n

-- instance OEIS 238593 where
--   oeisIx n = (+ 1) $ fromJust $ findIndex
--      (isInfixOf $ show $ (oeisIx @40) n) (scanl1 (++) $ map show (oeis @40))

-- instance OEIS 238685 where
--   oeisIx n = (oeisIx @142) n * (oeisIx @8275) (2 * n - 1) n

-- instance OEIS 238689 where
--   oeisIx_row 1 = [1]
--   oeisIx_row n = a n [] (oeis @40) where
--     a m factors ps@ (p:ps')
--       | m == 1         = factors
--       | m `mod` p == 0 = a (m `div` p) (p : factors) ps
--       | otherwise      = a m           factors       ps'
--   a _ _ [] = []

-- instance OEIS 238704 where
--   oeisIx n = (oeis @238704) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f x zs = g zs where
--        g (y:ys) =
--          if y `mod` 2 /= m then g ys else y : f y (delete y zs)
--        m = (oeisIx @30) x `mod` 2

-- instance OEIS 238718 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @238704))

-- instance OEIS 238778 where
--   oeisIx n = sum $ filter ((== 1) . (oeisIx @10051)') $
--      map (2 * n -) $ takeWhile (<= 2 * n) (oeis @40)

-- instance OEIS 238845 where
--   oeisIx n = genericLength $ takeWhile (== 0) $ zipWith (-) (bin n) (bin (n+1))
--   where bin = reverse . unfoldr
--   (\x -> if x == 0 then Nothing else Just $ swap $ divMod x 2)

-- instance OEIS 238862 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @239965))

-- instance OEIS 238880 where
--   oeisIx n = (oeis @238880) !! (n - 1)
--   oeis = f [0..] where
--      f (u:us) = u : g us where
--        g vs = h vs where
--          h (w:ws) = if reverse ys == ys then w : f (delete w vs) else h ws
--                     where ys = xs ++ show w
--        xs = show u

-- instance OEIS 238985 where
--   import Data.Set (singleton, deleteFindMin, fromList, union)
--   oeisIx n = (oeis @238985) !! (n - 1)
--   oeis = filter ((== 1) . (oeisIx @168046)) $ f $ singleton 1 where
--      f s = x : f (s' `union` fromList
--                  (filter ((> 0) . (`mod` 10)) $ map (* x) [2,3,5,7]))
--                  where (x, s') = deleteFindMin s

-- instance OEIS 239070 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @132995)) . (oeisIx @5117)

-- instance OEIS 239122 where
--   oeis = scanl1 (+) (oeis @61019)

-- instance OEIS 239293 where
--   import Math.NumberTheory.Moduli (powerMod)
--   oeisIx n = head [c | c <- (oeis @2808), powerMod n c c == n]

-- instance OEIS 239324 where
--   oeis = scanl (+) 0 (oeis @90431)

instance OEIS 239426 where
  oeisIx n = (((21 * n - 36) * n + 25) * n - 8) * n + 1

-- instance OEIS 239433 where
--   oeis = filter
--      (\z -> any (== z) $ map (oeisIx @3415) $ takeWhile (<= (oeisIx @2620) z) (oeis @13929)) [2..]

instance OEIS 239449 where
  oeisIx n = (7 * n - 5) * n + 1

-- instance OEIS 239452 where
--   import Math.NumberTheory.Moduli (powerMod)
--   oeisIx n = head [m | m <- [2..], powerMod m n n == mod m n]

-- instance OEIS 239508 where
--   oeisIx = p (oeis @469) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 239509 where
--   oeisIx = p (oeis @469) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 239549 where
--   oeis = 0 : 1 : zipWith (+)
--                  (map (* 8) $ tail (oeis @239549)) (map (* 12) (oeis @239549))

-- instance OEIS 239585 where
--   oeisIx = (oeisIx @20639) . (oeisIx @78972)

-- instance OEIS 239586 where
--   oeisIx n = (oeisIx @78972) n `div` (oeisIx @239585) n

-- instance OEIS 239634 where
--   oeisIx = (oeisIx @30) . (oeisIx @1358)

-- instance OEIS 239636 where
--   oeisIx = subtract 1 . (* 2) . (oeisIx @14689)

-- instance OEIS 239639 where
--   oeisIx n = (oeis @239639) !! (n - 1)
--   oeis = map length $ group (oeis @239634)

-- instance OEIS 239656 where
--   oeis = zipWith (-) (tail (oeis @7304)) (oeis @7304)

-- instance OEIS 239664 where
--   oeisIx n = (oeis @239664) `genericIndex` (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f v ws = g ws where
--        g (x:xs) = if gcd v x == 1 && ((intersect `on` show) v x == "")
--                      then x : f x (delete x ws) else g xs

-- instance OEIS 239673 where
--   (oeis, (oeis @239674)) = unzip $ (12, 1) : f 1 12 (oeis @239656) where
--      f i v (q:qs) | q > v = (q, i) : f (i + 1) q qs
--                   | otherwise = f (i + 1) v qs

-- instance OEIS 239674 where

-- instance OEIS 239690 where
--   oeisIx = (oeisIx @53737) . (oeisIx @40)

-- instance OEIS 239728 where
--   import Data.Map (singleton, findMin, deleteMin, insert)
--   oeisIx n = (oeis @239728) !! (n - 1)
--   oeis = f 9 (3, 2) (singleton 4 (2, 2)) where
--      f zz (bz, be) m
--       | xx < zz && gcd 6 be > 1 =
--                   f zz (bz, be+1) (insert (bx*xx) (bx, be+1) $ deleteMin m)
--       | xx < zz = xx :
--                   f zz (bz, be+1) (insert (bx*xx) (bx, be+1) $ deleteMin m)
--       | xx > zz = f (zz+2*bz+1) (bz+1, 2) (insert (bz*zz) (bz, 3) m)
--       | otherwise = f (zz + 2 * bz + 1) (bz + 1, 2) m
--       where (xx, (bx, be)) = findMin m

-- instance OEIS 239740 where
--   oeisIx n = gcd (sum fs) (product fs)
--               where fs = take n $ tail (oeis @45)

-- instance OEIS 239826 where
--   oeisIx n = sum $
--               filter ((flip isPrefixOf `on` (rowT @30308)) n) $ (rowT @27750) n

-- instance OEIS 239870 where
--   import Data.Map (singleton, findMin, deleteMin, insert)
--   oeisIx n = (oeis @239870) !! (n - 1)
--   oeis = f 9 (3, 2) (singleton 4 (2, 2)) where
--      f zz (bz, ez) m
--       | xx < zz = if ex `mod` 3 > 0
--         then xx : f zz (bz, ez+1) (insert (bx*xx) (bx, ex+1) $ deleteMin m)
--         else      f zz (bz, ez+1) (insert (bx*xx) (bx, ex+1) $ deleteMin m)
--       | xx > zz = if ez `mod` 3 > 0
--         then zz : f (zz+2*bz+1) (bz+1, 2) (insert (bz*zz) (bz, 3) m)
--         else      f (zz+2*bz+1) (bz+1, 2) (insert (bz*zz) (bz, 3) m)
--       | otherwise = f (zz+2*bz+1) (bz+1, 2) m
--       where (xx, (bx, ex)) = findMin m

-- instance OEIS 239878 where
--   oeisIx n = (oeis @239878) !! (n - 1)
--   oeis = elemIndices 1 (oeis @240752)

-- instance OEIS 239930 where
--   oeisIx = sum . map (oeisIx @240025) . (rowT @27750)

-- instance OEIS 239943 where
--   oeis = [x | x <- [1..], (oeisIx @239965) x == x]

-- instance OEIS 239965 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @240024)) . (oeisIx @18252)

-- instance OEIS 239968 where
--   oeisIx n = genericIndex (oeis @239968) (n - 1)
--   oeis = unfoldr c (1, 1, (oeis @18252)) where
--      c (i, z, xs'@ (x:xs)) | i == x = Just (z, (i + 1, z + 1, xs))
--                           | i /= x = Just (0, (i + 1, z, xs'))

-- instance OEIS 239969 where
--   oeisIx n = head [k | k <- [1..],
--                         (oeisIx @10054) (oeisIx n + (oeisIx @217) (n + k)) == 1]

-- instance OEIS 239970 where
--   oeisIx n = head [k | k <- [1..],
--                         (oeisIx @10054) (oeisIx k + (oeisIx @217) (n + k)) == 1]

-- instance OEIS 240024 where
--   oeisIx n = genericIndex (oeis @240024) (n - 1)
--   oeis = 1 : ekg 4 (oeis @2808) where
--      ekg x zs = f zs where
--          f (y:ys) = if gcd x y > 1 then y : ekg y (delete y zs) else f ys

-- instance OEIS 240025 where
--   oeisIx n = max (oeisIx n) (oeisIx n)

-- instance OEIS 240052 where
--   oeisIx = (oeisIx @68346) . (oeisIx @6094)

-- instance OEIS 240162 where
--   import Math.NumberTheory.Moduli (powerMod)
--   oeisIx n = powerMod 3 (oeisIx $ (oeisIx @10) n) n

-- instance OEIS 240236 where
--   oeis = tablList @240236
-- instance Table 240236 where
--   rowCol = rowCol_off @240236 @1 @1
--   rowT   = rowT_off   @240236 @1
--   tabl = zipWith (map . flip q)
--                          [2..] (map tail $ tail (tabl @2260)) where
--      q b n = if n < b then n else q b n' + d where (n', d) = divMod n b

-- instance OEIS 240277 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @7456))

-- instance OEIS 240400 where
--   oeis = filter ((> 0) . (oeisIx @241759)) [0..]

-- instance OEIS 240508 where
--   oeisIx = genericLength . (rowT @174382)

-- instance OEIS 240595 where
--   oeis = tablList @240595
-- instance Table 240595 where
--   rowCol n k = (tabf @240595) !! (n - 1) !! (k-1)
--   rowT n = (tabf @240595) !! (n - 1)
--   tabf = iterate f [1] where
--      f xs = concat [map length zss, map head zss]
--             where zss = group $ sort xs

-- instance OEIS 240694 where
--   oeis = tablList @240694
-- instance Table 240694 where
--   rowCol n k = (tabf @240694) !! (n - 1) !! (k-1)
--   rowT n = (tabf @240694) !! (n - 1)
--   tabf = map (scanl1 (*)) (tabf @27750)

-- instance OEIS 240698 where
--   oeis = tablList @240698
-- instance Table 240698 where
--   rowCol n k = (tabf @240698) !! (n - 1) !! (k-1)
--   rowT n = (tabf @240698) !! (n - 1)
--   tabf = map (scanl1 (+)) (tabf @27750)

-- instance OEIS 240752 where
--   oeis = zipWith (-) (tail (oeis @4159)) (oeis @4159)

-- instance OEIS 240754 where
--   oeisIx n = (oeis @240754) !! (n - 1)
--   oeis = elemIndices (-1) (oeis @240752)

-- instance OEIS 240769 where
--   oeis = tablList @240769
-- instance Table 240769 where
--   rowCol = rowCol_off @240769 @1 @1
--   rowT   = rowT_off   @240769 @1
--   tabl = iterate (\ (x:xs) -> xs ++ [2*x, 2*x-1]) [1]

-- instance OEIS 240807 where
--   oeis = -1 : -1 : 2 : zipWith (+) xs (tail xs)
--      where xs = map (oeisIx @240807) $ zipWith (-) [1..] $ tail (oeis @240807)

-- instance OEIS 240808 where
--   oeis = 2 : 1 : 0 : zipWith (+) xs (tail xs)
--      where xs = map (oeisIx @240808) $ zipWith (-) [1..] $ tail (oeis @240808)

-- instance OEIS 240844 where
--   oeisIx = p $ drop 3 (oeis @73) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 240857 where
--   oeis = tablList @240857
-- instance Table 240857 where
--   rowT n = (tabl @240857) !! n
--   tabl = iterate (\ (x:xs) -> xs ++ [x, x + 1]) [0]

-- instance OEIS 240883 where
--   oeisIx n = (oeisIx @240857) (2 * n) n

-- instance OEIS 240913 where
--   oeis = filter (not . elem '1' . show) (oeis @69715)

-- instance OEIS 240923 where
--   oeisIx n = numerator sq - (oeisIx @203) (denominator sq)
--      where sq = (oeisIx @203) n % n

-- instance OEIS 240952 where
--   oeisIx = fromJust . (`elemIndex` (oeis @245575))

-- instance OEIS 240960 where
--   oeis = filter (\x -> (oeisIx @51612) x == (oeisIx @110088) x) [1..]

-- instance OEIS 240993 where
--   oeisIx n = (oeisIx @142) (n + 1) * (oeisIx @2109) n

-- instance OEIS 241012 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @109465))

-- instance OEIS 241023 where
--   oeisIx n = (oeisIx @102413) (2 * n) n

instance OEIS 241157 where
  oeis = 0 : filter f [0..] where
     f x = d' /= d where d' = mod x' 10; (x', d) = divMod x 10

instance OEIS 241158 where
  oeis = filter (f . show . fi)  [0..] where
     f [_] = True; f (d : d' : _) = d /= d'

-- instance OEIS 241218 where
--   oeisIx = fromJust . (`elemIndex` (oeis @240808))

-- instance OEIS 241235 where
--   oeis = map length $ group (oeis @6949)

-- instance OEIS 241241 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @241241) !! (n - 1)
--   oeis = 0 : 1 : f (singleton 2) where
--      f s = m : f (insert (oeisIx m) $ insert (oeisIx m) s')
--            where (m, s') = deleteFindMin s

-- instance OEIS 241418 where
--   oeis = zipWith (-) (tail (oeis @99054)) (oeis @99054)

-- instance OEIS 241426 where
--   oeisIx = foldr (\b v -> 2 * v + b) 0 . concat . inits .
--             unfoldr (\x -> if x == 0 then Nothing
--                                      else Just $ swap $ divMod x 2)

-- instance OEIS 241582 where
--   (oeis, (oeis @241583)) =  unzip $ f [1..] (oeis @131644) (-1) where
--      f (x:xs) (y:ys) r = if y > r then (y, x) : f xs ys y else f xs ys r

-- instance OEIS 241583 where

-- instance OEIS 241664 where
--   oeisIx n = fst $ until ((<= 1) . snd)
--                           (\ (u, v) -> (u + 1, (oeisIx @58026) v)) (0, n)

-- instance OEIS 241671 where
--   oeis = filter ((== 0) . (oeisIx @65806)) [1..]

-- instance OEIS 241673 where
--   oeis = filter ((== 1) . (oeisIx @209229) . (oeisIx @229037)) [1..]

instance OEIS 241751 where
  oeisIx = (+ 16) . (^ 2)

-- instance OEIS 241752 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @229037))

-- instance OEIS 241759 where
--   oeisIx = p $ tail (oeis @1047) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 241766 where
--   oeisIx = p $ tail (oeis @1047) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 241772 where
--   oeis = zipWith (-) (tail (oeis @65094)) (oeis @65094)

-- instance OEIS 241783 where
--   oeis = filter ((== 0) . (oeisIx @241759)) [0..]

-- instance OEIS 241816 where
--   oeisIx n = f (oeisIx_row n) [] where
--      f [] _ = n
--      f (0 : 1 : us) vs = foldr (\b y -> 2 * y + b) 0 $
--                                reverse vs ++ 1 : 0 : us
--      f (u : us) vs     = f us (u : vs)

-- instance OEIS 241887 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @65806))

-- instance OEIS 241909 where
--   oeisIx 1 = 1
--   oeisIx n = product $ zipWith (^) (oeis @40) $ zipWith (-) is (1 : is)
--               where is = reverse ((j + 1) : js)
--                     (j:js) = reverse $ map (oeisIx @49084) $ (rowT @27746) n

-- instance OEIS 241917 where
--   oeisIx n = i - j where
--               (i:j:_) = map (oeisIx @49084) $ reverse (1 : (rowT @27746) n)

-- instance OEIS 241919 where
--   oeisIx 1 = 0
--   oeisIx n = i - j where
--               (i:j:_) = map (oeisIx @49084) $ reverse (1 : (rowT @27748) n)

-- instance OEIS 241944 where
--   oeisIx = sum . (rowT @27420)

instance OEIS 241979 where
  oeis = cycle [0,1,1,0,0,0,1,0,0,1,1,1]

-- instance OEIS 242014 where
--   oeisIx n = (oeis @242014) !! (n-1)

-- instance OEIS 242094 where
--   oeis = c [1..] (oeis @3249) where
--      c (v:vs) ws'@ (w:ws) = if v == w then c vs ws else v : c vs ws'

-- instance OEIS 242114 where
--   oeis = tablList @242114
-- instance Table 242114 where
--   rowCol = rowCol_off @242114 @1 @1
--   rowT   = rowT_off   @242114 @1
--   tabl = map (map (oeisIx @18805)) (tabl @10766)

-- instance OEIS 242179 where
--   oeisIx  n k = (tabf @242179) !! n !! n
--   oeisIx_row n = (tabf @242179) !! n
--   oeisIx_tabf = iterate (concatMap (\x -> [-x, x])) [1] :: (Num t => [[t]])
--   oeis = concat (tabf @242179)

-- instance OEIS 242183 where
--   oeis = concatMap (\ (r,x) -> take r [x,x..]) $
--                            zip (oeis @242192) [1..]

-- instance OEIS 242186 where
--   oeis = filter ((> 1) . (oeisIx @242192)) [1..]

-- instance OEIS 242192 where
--   oeisIx n = sum $ map (oeisIx . (n ^ 4 -)) $
--                         takeWhile (< n ^ 4) $ map (^ 3) [1..]

instance OEIS 242216 where
  oeisIx = p [1,2,3,7,11,19,43,67,163] where
     p _          0 = 1
     p []         _ = 0
     p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

instance OEIS 242217 where
  oeisIx = p [1,2,3,7,11,19,43,67,163] where
     p _      0 = 1
     p []     _ = 0
     p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 242311 where
--   oeisIx = maximum . (rowT @96145)

-- instance OEIS 242312 where
--   oeis = tablList @242312
-- instance Table 242312 where
--   rowT n = (tabl @242312) !! n
--   tabl = map (map (oeisIx @10888)) (tabl @7318)

-- instance OEIS 242314 where
--   oeisIx = maximum . (rowT @242312)

-- instance OEIS 242342 where
--   oeisIx n = if n <= 2 then 0 else (oeisIx @7318)' n (oeisIx n)

-- instance OEIS 242357 where
--   oeisIx n = (oeis @242357) !! (n - 1)
--   oeis = concatMap f $ tail $ inits [1..] where
--      f us = (init us) ++ (take v [v, v ..]) ++ vs
--             where (v:vs) = reverse us

-- instance OEIS 242399 where
--   oeisIx n = foldr (\t v -> 3 * v + t) 0 $
--                     map (flip mod 3) $ zipWith (+) ([0] ++ ts) (ts ++ [0])
--               where ts = (rowT @30341) n

-- instance OEIS 242400 where
--   oeisIx n = (oeisIx @8586) n - (oeisIx @242399) n

-- instance OEIS 242401 where
--   oeis = filter ((== 0) . (oeisIx @10054)) (oeis @37)

-- instance OEIS 242407 where
--   oeis = filter ((== 0) . (oeisIx @242400)) [0..]

-- instance OEIS 242408 where
--   oeis = filter ((> 0) . (oeisIx @242400)) [0..]

-- instance OEIS 242411 where
--   oeisIx 1 = 0
--   oeisIx n = i - j where
--               (i:j:_) = map (oeisIx @49084) $ ps ++ [p]
--               ps@ (p:_) = reverse $ (rowT @27748) n

-- instance OEIS 242535 where
--   oeisIx n = (oeis @242535) !! (n - 1)
--   oeis = f [1..] where
--      f xs'@ (x:xs) = x : f (xs \\ [z, 2 * z]) where z = xs' !! x

-- instance OEIS 242614 where
--   oeis = tablList @242614
-- instance Table 242614 where
--   rowCol n k = (rowT @242614) n !! (k-1)
--   rowT n = filter ((== n) . (oeisIx @7953)) [n .. (oeisIx @2275) n]
--   tabf = map (rowT @242614) [0..]

-- instance OEIS 242622 where
--   oeisIx = genericLength . (rowT @242614)

instance OEIS 242627 where
  oeisIx n = genericLength $ filter ((== 0) . mod n) [1..9]

-- instance OEIS 242885 where
--   oeisIx n = head [k | let nn = n ^ n,
--                         k <- [1..], mod (k ^ k + nn) (k + n) == 0]

-- instance OEIS 242901 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @242885))

-- instance OEIS 243355 where
--   oeisIx n = (oeis @243355) !! (n - 1)
--   oeis = filter
--      (\x -> null $ show x `intersect` (show $ (oeisIx @40) x)) [1..]

-- instance OEIS 243451 where
--   oeis = [x | x <- (oeis @241751), (oeisIx @10051)' x == 1]

-- instance OEIS 243757 where
--   oeis = scanl (*) 1 (oeis @60904)

-- instance OEIS 243758 where
--   oeis = scanl (*) 1 (oeis @234959)

-- instance OEIS 243987 where
--   oeis = tablList @243987
-- instance Table 243987 where
--   rowCol = rowCol_off @243987 @1 @1
--   rowT   = rowT_off   @243987 @1
--   tabl = map (scanl1 (+)) (tabl @51731)

-- instance OEIS 244040 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @244040) (2 * n') + t where (n', t) = divMod n 3

-- instance OEIS 244080 where
--   oeisIx = (oeisIx @6530) . (oeisIx @166133)

-- instance OEIS 244112 where
--   oeisIx :: Integer -> Integer
--   oeisIx n = read $ concat $
--      zipWith ((++) `on` show) (map length xs) (map head xs)
--      where xs = group $ reverse $ sort $ map (read . return) $ show n

-- instance OEIS 244365 where
--   oeis = tablList @244365
-- instance Table 244365 where
--   rowCol n k = (tabf @244365) !! (n - 1) !! (k-1)
--   rowT n = (tabf @244365) !! (n - 1)
--   tabf = zipWith farideh (map (+ 1) (oeis @40)) (oeis @249669)
--                  where farideh u v = filter ((== 1) .  (oeisIx @10051)') [u..v]

-- instance OEIS 244408 where
--   oeis = map (* 2) $ filter f [2..] where
--      f x = sqrt (fi $ 2 * x) <= fi (oeisIx x)

-- instance OEIS 244477 where
--   oeis = 3 : 2 : 1 : zipWith (+)
--      (map (oeisIx @244477) $ zipWith (-) [4..] $ tail (oeis @244477))
--      (map (oeisIx @244477) $ zipWith (-) [4..] $ drop 2 (oeis @244477))

-- instance OEIS 244478 where
--   oeis = 2 : 0 : 2 : zipWith (+) xs (tail xs)
--      where xs = map (oeisIx @244478) $ zipWith (-) [1..] $ tail (oeis @244478)

-- instance OEIS 244479 where
--   oeisIx = (`div` 2) . (oeisIx @244478)

-- instance OEIS 244483 where
--   oeis = 3 : 1 : 0 : zipWith (+) xs (tail xs)
--      where xs = map (oeisIx @244483) $ zipWith (-) [1..] $ tail (oeis @244483)

-- instance OEIS 244724 where
--   oeisIx n = (oeis @244724) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f x xs = f' xs where
--        f' (u:us) | (oeisIx @10051)' (x + u) == 1 = g u (delete u xs)
--                  | otherwise             = f' us where
--           g y ys = g' ys where
--             g' (v:vs) | (oeisIx @10051)' (y + v) == 0 = u : v : f v (delete v ys)
--                       | otherwise        = g' vs

-- instance OEIS 244731 where
--   oeis = [x | x <- [1..], (oeisIx @244724) x == x]

-- instance OEIS 244732 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @244724))

-- instance OEIS 244747 where
--   oeisIx n = (oeis @244747) !! (n - 1)
--   oeis = findIndices ((== 1) . (oeisIx @209229)) (oeis @51145)

-- instance OEIS 245022 where
--   oeis = filter ((== 3) . (oeisIx @2635)) [0..]

-- instance OEIS 245057 where
--   oeisIx = fromJust . (`elemIndex` (oeis @249129))

-- instance OEIS 245066 where
--   oeisIx n = (oeisIx @1497) (2 * n) n

-- instance OEIS 245093 where
--   oeis = tablList @245093
-- instance Table 245093 where
--   rowCol = rowCol_off @245093 @1 @1
--   rowT   = rowT_off   @245093 @1
--   tabl = tail $ inits $ (oeis @203)

-- instance OEIS 245097 where
--   oeisIx n = sum $ map (oeisIx @10051)' [n + 1 .. (oeisIx @7535) n]

-- instance OEIS 245180 where
--   oeisIx = flip div 8 . (oeisIx @160239)

-- instance OEIS 245193 where
--   oeisIx n = head [p | p <- (oeis @40),
--                         (isSuffixOf `on` show) (oeisIx n) p]

-- instance OEIS 245234 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @238880))

-- instance OEIS 245300 where
--   oeis = tablList @245300
--   rowCol n k = (n + k) * (n + k + 1) `div` 2 + k
--   rowT n = map (oeisIx n) [0..n]
--   tabl = map (rowT @245300) [0..]
--   oeis = concat (tabl @245300)

instance OEIS 245301 where
  oeisIx n = n * (n * (7 * n + 15) + 8) `div` 6

-- instance OEIS 245304 where
--   oeis = map (pred . head) $ filter (all (== 1) . map (oeisIx @10051)') $
--      iterate (zipWith (+) [1, 1, 1, 1, 1]) [1, 3, 7, 9, 13]

-- instance OEIS 245305 where
--   oeis = map ((`div` 4) . (subtract 1) . head) $
--      filter (all (== 1) . map (oeisIx @10051)') $
--             iterate (zipWith (+) [4, 4, 6]) [1, 3, 5]

-- instance OEIS 245334 where
--   oeis = tablList @245334
-- instance Table 245334 where
--   rowT n = (tabl @245334) !! n
--   tabl = iterate (\row@ (h:_) -> (h + 1) : map (* h) row) [1]

-- instance OEIS 245340 where
--   import Data.IntMap (singleton, member, (!), insert)
--   oeisIx n = (oeis @245340) !! n
--   oeis = 0 : f [1..] [1..] 0 (singleton 0 0) where
--      f us'@ (u:us) vs'@ (v:vs) w m
--        | u `member` m = (m ! u) : f us vs' w m
--        | otherwise    = g (reverse[w-v,w-2*v..1] ++ [w+v,w+2*v..]) where
--        g (x:xs) = if x `member` m then g xs else f us' vs x $ insert x v m

-- instance OEIS 245394 where
--   (oeis, (oeis @245395)) =  unzip $ f [0..] (oeis @125717) (-1) where
--      f (x:xs) (y:ys) r = if y > r then (y,x) : f xs ys y else f xs ys r

-- instance OEIS 245395 where

-- instance OEIS 245396 where
--   oeisIx n = (oeisIx @244365) n (oeisIx n)

-- instance OEIS 245471 where
--   oeisIx n = (oeis @245471) !! (n - 1)
--   oeis = concat $ transpose [odds (oeis @65621), [1..]]
--      where odds [] = []; odds [x] = []; odds (_:x:xs) = x : odds xs

-- instance OEIS 245492 where
--   oeis = [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0] ++
--                  zipWith3 (((+) .) . (+))
--                  (drop 8 (oeis @245492)) (drop 10 (oeis @245492))
--                  (cycle [1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 0])

-- instance OEIS 245508 where
--   oeisIx n = genericIndex (oeis @245508) (n - 1)
--   oeis = f (oeis @40) (oeis @1105) where
--      f ps'@ (p:ps) xs'@ (x:xs) = if p <= x then x : f ps xs' else f ps' xs

-- instance OEIS 245530 where
--   oeisIx = product . (rowT @245499)

-- instance OEIS 245542 where
--   oeis = scanl1 (+) (oeis @160239)

-- instance OEIS 245543 where
--   oeisIx n = (oeis @245542) !! n
--   oeis = scanl1 (+) (oeis @160239)

-- instance OEIS 245550 where
--   oeis = 0 : zipWith (-) (tail (oeis @6046)) (h (oeis @6046))
--                  where h (x:xs) = (2 * x) : (2 * x) : h xs

-- instance OEIS 245563 where
--   oeis = tablList @245563
-- instance Table 245563 where
--   rowCol n k = (tabf @245563) !! n !! k
--   rowT n = (tabf @245563) !! n
--   tabf = [0] : map
--      (map length . (filter ((== 1) . head)) . group) (tail (tabf @30308))

-- instance OEIS 245575 where
--   oeis = f 0 [] $ tail (oeis @2620) where
--      f u vs ws'@ (w:ws)
--        | u < w     = (sum $ map (oeisIx . (u -)) vs) : f (u + 1) vs ws'
--        | otherwise = f u (w : vs) ws

-- instance OEIS 245585 where
--   oeis = filter ((== 0) . (oeisIx @245575)) [0..]

-- instance OEIS 245586 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @228276))

-- instance OEIS 245644 where
--   oeis = filter ((== 1) . (oeisIx @245656) . (^ 3)) [1..]

-- instance OEIS 245656 where
--   oeisIx = (0 ^) . (oeisIx @54025) :: (Integral a, Integral t) => a -> t

instance OEIS 245663 where
  oeisIx ((+2)->n) = head [k | k <- [1..], not ((fact k) `mod` (sigbAse (fact k) n) == 0)]
    where
      base 0 b = []
      base a b = (a `mod` b) : base ((a- (a `mod` b)) `div` b) b
      bAse a b = reverse (base a b)
      sigbAse a b = foldl (+) 0 (bAse a b)

instance OEIS 245677 where
  oeisIx ((+3)->n) = numerator $ sum
     [num % den | num <- [1 .. div n 2], let den = n - num, gcd num den == 1]

instance OEIS 245678 where
  oeisIx ((+3)->n) = denominator $ sum
     [num % den | num <- [1 .. div n 2], let den = n - num, gcd num den == 1]

-- instance OEIS 245717 where
--   oeis = tablList @245717
-- instance Table 245717 where
--   rowCol = rowCol_off @245717 @1 @1
--   rowT   = rowT_off   @245717 @1
--   tabl = zipWith (zipWith gcd) (tabl @2024) (tabl @133819)

-- instance OEIS 245718 where
--   oeisIx n = (oeisIx @245677) n `div` (oeisIx @245678) n

-- instance OEIS 245722 where
--   oeisIx = product . (rowT @244365)

-- instance OEIS 245729 where
--   oeis = filter f [1..] where
--                         f x = p ^ 2 < q && (oeisIx' q == 1 || f q)
--                               where q = div x p; p = (oeisIx @20639) x

-- instance OEIS 245826 where
--   oeis = tablList @245826
-- instance Table 245826 where
--   rowCol n k = n * k * (2 * n^2 * k^2 - n^2 - k^2) `div` 6
--   rowT n = map (oeisIx n) [1..n]
--   tabl = map (rowT @245826) [1..]

-- instance OEIS 245836 where
--   oeisIx = sum . (rowT @53398)

instance OEIS 245940 where
  oeisIx n = n^3 * (2 * n^3 + 2 * n^2 - 3 * n - 1) * (n + 1) `div` 24

instance OEIS 245941 where
  oeisIx n = n * (16*n^5 - 24*n^4 + 2*n^3 + 11*n^2 - 6*n + 1) `div` 6

-- instance OEIS 245970 where
--   import Math.NumberTheory.Moduli (powerMod)
--   oeisIx n = powerMod 2 (phi + (oeisIx @245970) phi) n
--               where phi = (oeisIx @10) n

-- instance OEIS 245971 where
--   import Math.NumberTheory.Moduli (powerMod)
--   oeisIx n = powerMod 4 (phi + (oeisIx @245971) phi) n
--               where phi = (oeisIx @10) n

-- instance OEIS 246398 where
--   oeis = f 0 $ map show (oeis @40) where
--      f x pss = (length ps - length xs) :
--                f (x + 1) (dropWhile (== xs) pss)
--        where ps = head [qs | qs <- pss, isin xs qs]; xs = show x
--      isin [] _  = True
--      isin _  [] = False
--      isin (u:us) vs = not (null ws) && isin us ws
--                       where ws = dropWhile (/= u) vs

-- instance OEIS 246430 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @212300)) . (oeisIx @40)

-- instance OEIS 246431 where
--   oeisIx = fromJust . (`elemIndex` (oeis @101403))

-- instance OEIS 246433 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @113963))

-- instance OEIS 246435 where
--   oeisIx n = if n < 3 then 1 else (oeisIx @246435) (2 * div n 3) + 1

-- instance OEIS 246436 where
--   oeisIx n = genericLength $ [1..n] \\ genericIndex (tabf @220237) (n - 1)

-- instance OEIS 246438 where
--   oeis = filter ((== 0) . (oeisIx @164349)) [0..]

-- instance OEIS 246439 where
--   oeis = filter ((== 1) . (oeisIx @164349)) [0..]

-- instance OEIS 246517 where
--   oeis = filter ((== 1) . (oeisIx @10051)'' . (oeisIx @141036)) [0..]

-- instance OEIS 246518 where
--   oeis = filter ((== 1) . (oeisIx @10051)'') $ (oeis @141036)

-- instance OEIS 246520 where
--   oeisIx = maximum . (rowT @246830)

-- instance OEIS 246558 where
--   oeisIx = (oeisIx @7954) . (oeisIx @45)

-- instance OEIS 246588 where
--   oeisIx = product . map (oeisIx . length) .
--             filter ((== 1) . head) . group . (rowT @30308)

-- instance OEIS 246606 where
--   oeisIx n = (oeisIx @116853) (2 * n - 1) n

-- instance OEIS 246694 where
--   oeis = tablList @246694
-- instance Table 246694 where
--   rowT n = (tabl @246694) !! n
--   tabl = [1] : [1,2] : f 1 2 [1,2] where
--      f i z xs = ys : f j (z + 1) ys where
--        ys = take (z + 1) $ map (+ 1) (xs !! (z - i) : xs !! (z - j) : ys)
--        j = 3 - i

-- instance OEIS 246695 where
--   oeis = scanl1 (+) (oeis @257083)

-- instance OEIS 246700 where
--   oeis = tablList @246700
-- instance Table 246700 where
--   rowCol n k = genericIndex (tabf @246700) (n - 1) !! (k-1)
--   rowT n = genericIndex (tabf @246700) (n - 1)
--   tabf = [1] : f 2  where
--      f x = (x : (rowT @246700) (oeisIx x)) : f (x + 1)

-- instance OEIS 246701 where
--   oeis = zipWith (-) (tail (oeis @246520)) (oeis @246520)

-- instance OEIS 246704 where
--   oeis = filter (\x -> (oeisIx @113963) x == x) [1..]

-- instance OEIS 246776 where
--   oeisIx n = (oeisIx @249669) n - (oeisIx @40) (n + 1)

-- instance OEIS 246781 where
--   oeis = filter ((== 3) . (oeisIx @182134)) [1..]

-- instance OEIS 246782 where
--   oeis = filter ((== 2) . (oeisIx @182134)) [1..]

-- instance OEIS 246785 where
--   oeisIx n = if null ms then 0 else head ms
--               where ms = [m | m <- [1 .. n - 1], (oeisIx @182134) (n - m) == m]

-- instance OEIS 246830 where
--   oeis = tablList @246830
-- instance Table 246830 where
--   rowT n = (tabl @246830) !! n
--   tabl = zipWith (zipWith f) (tabl @51162) (tabl @25581) where
--      f x y = foldr (\b v -> 2 * v + b) 0 $ x |+| y
--      (|+|) = (++) `on` (rowT @30308)
--   (oeisIx @246830) = []

-- instance OEIS 246878 where
--   oeisIx n = (oeis @246878) !! n
--   oeis = 1 : f [1] (oeis @523) where
--      f xs (k:ks) = y : f (xs ++ [y]) ks where y = sum $ genericDrop k xs

-- instance OEIS 246999 where
--   oeisIx n = read $ s ++ "21" ++ s ++ "211" ++ s ++ "2" :: Integer
--               where s = replicate n '1'

-- instance OEIS 247023 where
--   oeis = tablList @247023
-- instance Table 247023 where
--   rowT n = (tabl @247023) !! n
--   tabl = map reverse (tabl @201634)

-- instance OEIS 247061 where
--   oeis = [1,8,16,17] ++ zipWith (+)
--      (drop 3 (oeis @247061)) (zipWith (-) (tail (oeis @247061)) (oeis @247061))

-- instance OEIS 247062 where
--   oeis = [1,2,5,6,8,11,12,16,17] ++ zipWith (+)
--      (drop 8 (oeis @247062)) (zipWith (-) (tail (oeis @247062)) (oeis @247062))

-- instance OEIS 247065 where
--   oeis = [1,16,24,32,40,49,64,65] ++ zipWith (+)
--      (drop 7 (oeis @247065)) (zipWith (-) (tail (oeis @247065)) (oeis @247065))

-- instance OEIS 247066 where
--   oeis = [1,2,6,8,12,16,17,21,24,27,32,33] ++ zipWith (+)
--      (drop 11 (oeis @247066)) (zipWith (-) (tail (oeis @247066)) (oeis @247066))

-- instance OEIS 247073 where
--   oeis = tablList @247073
-- instance Table 247073 where
--   rowCol = rowCol_off @247073 @1 @1
--   tabl = map (rowT @247073) [1..]
--   rowT n = map length $ groupBy ((==) `on` fst) $ sort $
--      takeWhile ((<= 2^n). snd) $ tail $ zip (oeis @25474) (oeis @961)

-- instance OEIS 247095 where
--   oeisIx = (+ 5) . fromJust . (`elemIndex` (oeis @250030))

-- instance OEIS 247104 where
--   oeis = filter ((== 1) . (oeisIx @8966)) $ tail (oeis @3052)

-- instance OEIS 247108 where
--   oeis = tablList @247108
-- instance Table 247108 where
--   rowT n = (tabl @247108) !! n
--   tabl = iterate (\row -> scanl (+) (- last row) row) [1]

-- instance OEIS 247143 where
--   oeisIx n = (oeis @247143) !! n
--   oeis = [0..10] ++ f 11 (map show [11..]) where
--      f x zss = (read ys :: Int) : f (x + 1) (delete ys zss) where
--                ys = fromJust $ find (elem $ ds !! x) zss
--      ds = concatMap show (oeis @247143)

-- instance OEIS 247144 where
--   oeisIx = fromJust . (`elemIndex` (oeis @247143))

-- instance OEIS 247149 where
--   oeisIx n = (oeis @247149) !! n
--   oeis = map digitToInt $ concatMap show (oeis @247143)

-- instance OEIS 247160 where
--   oeis = [1..14] ++ [16,17] ++ zipWith (+)
--      (drop 15 (oeis @247160)) (zipWith (-) (tail (oeis @247160)) (oeis @247160))

-- instance OEIS 247161 where
--   oeis = [1,2,4,5,6,8,9,11,12,13,16,17] ++ zipWith (+)
--      (drop 11 (oeis @247161)) (zipWith (-) (tail (oeis @247161)) (oeis @247161))

-- instance OEIS 247167 where
--   oeis = filter ((zipWith (==) [0..] (oeis @247143)) !!) [0..]

-- instance OEIS 247180 where
--   oeis = filter ((== 1) . (oeisIx @67029)) [1..]

-- instance OEIS 247199 where
--   oeisIx n = (oeis @247199) !! (n - 1)
--   oeis = filter f [1..] where
--      f x = 1 == denominator
--            (sum [v % w | (v:ws) <- tails $ reverse $ (rowT @27750) x, w <- ws])

-- instance OEIS 247204 where
--   oeis = filter ((zipWith (==) [1..] (oeis @250552)) !!) [1..]

-- instance OEIS 247233 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @75323)) . (oeisIx @65091)

-- instance OEIS 247253 where
--   oeis = zipWith (-) (tail (oeis @251239)) (oeis @251239)

-- instance OEIS 247303 where
--   oeis = f [head (oeis @10059)] $ tail (oeis @10059) where
--      f xs (z:zs) = (sum $ zipWith (*) xs (reverse xs)) : f (z : xs) zs

-- instance OEIS 247358 where
--   oeis = tablList @247358
-- instance Table 247358 where
--   rowCol = rowCol_off @247358 @1 @1
--   rowT   = rowT_off   @247358 @1
--   tabl = map sort (tabl @51129)

-- instance OEIS 247363 where
--   oeisIx n = (oeisIx @247358) (2 * n - 1) n

-- instance OEIS 247364 where
--   oeis = tablList @247364
-- instance Table 247364 where
--   rowT n = (tabl @247364) !! n
--   tabl = [1] : (map reverse (tabf @34928))

-- instance OEIS 247365 where
--   oeisIx n = (oeisIx @102473) (2 * n - 1) n

-- instance OEIS 247366 where
--   import Data.Set (Set, singleton, insert, deleteFindMin)
--   oeisIx n = (oeis @247366) !! (n - 1)
--   oeis = h $ singleton (1, 0, 0) where
--      h :: Set (Double, Int, Int) -> [Integer]
--      h s = (floor x) : h (insert (f i (j + 1)) $ insert (f (i + 1) j) s')
--            where ((x, i, j), s') = deleteFindMin s
--      f :: Int -> Int -> (Double, Int, Int)
--      f u v = (2 ^^ uh * 3 ^^ vh * g ur vr, u, v) where
--        g 0 0 = 1; g 0 1 = sqrt 3; g 1 0 = sqrt 2; g 1 1 = sqrt 6
--        (uh, ur) = divMod u 2; (vh, vr) = divMod v 2

-- instance OEIS 247367 where
--   oeisIx n = sum $ map ((1 -) . (oeisIx @10052) . (n -)) $
--                     takeWhile (<= n) (oeis @290)

-- instance OEIS 247368 where
--   oeis = 0 : xs where
--      xs = [1, 1, 1, 1] ++ zipWith (flip div) xs (zipWith (+)
--                 (zipWith (*) (tail xs) (drop 3 xs))
--                 (zipWith (*) (cycle [1, -1]) (map (^ 2) $ drop 2 xs)))

-- instance OEIS 247369 where
--   oeis = [0, -1, 1, 1, 1, 0] ++ xs where
--      xs = [1, 1, 1, 3] ++ zipWith (flip div) xs (zipWith (+)
--                 (zipWith (*) (tail xs) (drop 3 xs))
--                 (zipWith (*) (cycle [1, -1]) (map (^ 2) $ drop 2 xs)))

-- instance OEIS 247370 where
--   oeis = [1, 1, 0] ++ xs where
--      xs = [1, 1, 1, 2] ++ zipWith (flip div) xs (zipWith (+)
--                 (zipWith (*) (tail xs) (drop 3 xs))
--                 (zipWith (*) (cycle [1, -1]) (map (^ 2) $ drop 2 xs)))

-- instance OEIS 247378 where
--   oeis = [1, -2, 1, 1] ++ zipWith (flip div) (oeis @247378)
--      (zipWith (+)
--           (zipWith (*) (tail (oeis @247378)) (drop 3 (oeis @247378)))
--           (zipWith (*) (cycle [1, -1]) (map (^ 2) $ drop 2 (oeis @247378))))

-- instance OEIS 247379 where
--   oeisIx n = gcd n $ (oeisIx @64413) n

-- instance OEIS 247382 where
--   oeis = [-3, 7, 1, 46] ++ zipWith (flip div) (oeis @247382)
--      (zipWith (+)
--           (zipWith (*) (tail (oeis @247382)) (drop 3 (oeis @247382)))
--           (zipWith (*) (cycle [-1, 1]) (map (^ 2) $ drop 2 (oeis @247382))))

-- instance OEIS 247383 where
--   import Data.IntMap (empty, member, (!), insert)
--   oeisIx n = (oeis @247383) !! (n - 1)
--   oeis = f 1 1 empty where
--      f x z m | member x m = m ! x : f (x + 1) (x + 1) m
--              | member y m = f x (z + 1) m
--              | otherwise  = f x (z + 1) (insert y z m)
--              where y = (oeisIx @247379) z

-- instance OEIS 247414 where
--   oeis = zipWith (-) (tail (oeis @24431)) (oeis @24431)

-- instance OEIS 247419 where
--   oeisIx n = (oeis @247419) !! (n - 1)
--   oeis = concat $
--                  transpose [map (subtract 1) (oeis @3256), (oeis @3256)]

-- instance OEIS 247451 where
--   oeis = map (oeisIx @7947) (oeis @25487)

-- instance OEIS 247453 where
--   oeis = tablList @247453
-- instance Table 247453 where
--   rowT n = (tabl @247453) !! n
--   tabl = zipWith (zipWith (*)) (tabl @109449) (tabl @97807)

-- instance OEIS 247462 where
--   oeisIx 1 = 1
--   oeisIx n = fst $ until ((== 1) . denominator . snd)
--                           (\ (i, x) -> (i + 1, f x)) (0, 1 % n) where
--      f x = (oeisIx @8472) x' % (oeisIx @1221) x' where x' = numerator x + denominator x

-- instance OEIS 247468 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @247462))

-- instance OEIS 247485 where
--   oeisIx = (+ 1) . floor . (* 2) . sqrt . fi . (oeisIx @40)

-- instance OEIS 247499 where
--   oeisIx = sum . (rowT @247500)

-- instance OEIS 247500 where
--   oeis = tablList @247500
-- instance Table 247500 where
--   rowT n = (tabl @247500) !! n
--   tabl = zipWith (zipWith div) (tabl @105278) (tabl @4736)

-- instance OEIS 247503 where
--   oeisIx = product . filter (odd . (oeisIx @49084)) . (rowT @27746)

-- instance OEIS 247514 where
--   oeis = filter (\x -> (oeisIx @117767) x == (oeisIx @247485) x) [1..]

-- instance OEIS 247515 where
--   oeis = filter (\x -> (oeisIx @117767) x < (oeisIx @247485) x) [1..]

-- instance OEIS 247540 where
--   oeis = 1 : 1 : zipWith (-)
--      (map (* 2) xs) (zipWith div (map ((* 3) . (^ 2)) xs) (oeis @247540))
--      where xs = tail (oeis @247540)

-- instance OEIS 247560 where
--   oeis = 1 : 1 : zipWith (-) (map (* 3) $ tail (oeis @247560))
--                                      (map (* 4) (oeis @247560))

-- instance OEIS 247563 where
--   oeis = 2 : 3 : zipWith (-) (map (* 3) $ tail (oeis @247563))
--                                      (map (* 4) (oeis @247563))

-- instance OEIS 247564 where
--   oeis = [2,1,3,1] ++ zipWith (-) (map (* 3) $ drop 2 (oeis @247564))
--                                           (map (* 4) $ (oeis @247564))

-- instance OEIS 247594 where
--   oeis = 1 : 2 : 5 : zipWith (+)
--      (tail $ zipWith (+) (oeis @247594) $ tail (oeis @247594))
--      (map (* 3) (oeis @247594))

-- instance OEIS 247595 where
--   oeis = 1 : 3 : 10 : map (* 4) (zipWith3 (((+) .) . (-))
--      (drop 2 (oeis @247595)) (tail (oeis @247595)) (oeis @247595))

instance OEIS 247616 where
  oeis = filter f [100 .. 9876543210] where
     f x = head vs /= 0 && all (== 0) ws where
           ws = zipWith (-) (tail vs) vs
           vs = zipWith (-) (tail us) us
           us = map (read . return) $ show $ fi x

-- instance OEIS 247628 where
--   oeis = filter f (oeis @216155) where
--      f x = any ((== 1) . (oeisIx @10057)) [oeisIx x .. (oeisIx @2378) x - 1]

-- instance OEIS 247647 where
--   oeisIx = (oeisIx @7088) . (oeisIx @247648)

-- instance OEIS 247648 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @247648) !! (n - 1)
--   oeis = f $ singleton 1 where
--      f s = x : f (insert (4 * x + 1) $ insert (2 * x + 1) s')
--            where (x, s') = deleteFindMin s

-- instance OEIS 247657 where
--   oeis = f 0 $ drop 2 (oeis @40) where
--      f z (p:ps) | (oeisIx @10051)' z' == 1 = z' : f z' (delete z' ps)
--                 | otherwise        = f z' ps
--                 where z' = z + p

instance OEIS 247665 where
  oeis = 2 : 3 : f [3] [4..] where
     f (x:xs) zs = ys ++ f (xs ++ ys) (zs \\ ys) where
       ys = [v, head [w | w <- vs, gcd v w == 1]]
       (v:vs) = filter (\u -> gcd u x == 1 && all ((== 1) . (gcd u)) xs) zs

-- instance OEIS 247714 where
--   oeisIx = (+ 1) . fromJust .
--                     (`elemIndex` (oeis @3586)) . (oeis !!)

-- instance OEIS 247750 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247750) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [4, 9, 2, 1, 0, 8, 5, 7, 6, 3]

-- instance OEIS 247751 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247751) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [1, 5, 4, 9, 0, 8, 6, 7, 2, 3]

-- instance OEIS 247752 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247752) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [8, 1, 3, 9, 0, 2, 4, 5, 6, 7]

-- instance OEIS 247753 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247753) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [8, 2, 3, 6, 4, 0, 7, 5, 9, 1]

-- instance OEIS 247754 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247754) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [5, 2, 8, 9, 4, 7, 6, 3, 1, 0]

-- instance OEIS 247755 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247755) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [8, 3, 1, 5, 9, 0, 6, 7, 4, 2]

-- instance OEIS 247756 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247756) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [1, 3, 6, 7, 2, 9, 4, 0, 8, 5]

-- instance OEIS 247757 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247757) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [5, 2, 9, 8, 4, 6, 7, 3, 1, 0]

-- instance OEIS 247758 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247758) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [2, 9, 8, 4, 5, 6, 7, 3, 1, 0]

-- instance OEIS 247759 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247759) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [8, 1, 5, 4, 0, 6, 7, 9, 2, 3]

-- instance OEIS 247760 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247760) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [4, 2, 9, 1, 8, 5, 6, 7, 3, 0]

-- instance OEIS 247761 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247761) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [8, 2, 9, 0, 1, 5, 7, 3, 4, 6]

-- instance OEIS 247762 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247762) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--                   fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--            where (x, s') = deleteFindMin s
--      digs = [9, 2, 1, 0, 8, 5, 7, 6, 4, 3]

-- instance OEIS 247764 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   oeisIx n = (oeis @247764) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s = x : f (s' `union`
--            fromList (map (+ 10 * x) $ dropWhile (/= mod x 10) digs))
--        where (x, s') = deleteFindMin s
--      digs = [6, 5, 1, 9, 4, 2, 8, 0, 3, 7]

-- instance OEIS 247765 where
--   oeis = tablList @247765
-- instance Table 247765 where
--   rowCol n k = (tabf @247765) !! (n - 1) !! (k-1)
--   tabf = map (rowT @247765) [1..]
--   rowT n = f (map recip [2..]) (n % (n + 1)) where
--      f es x | numerator x == 1 = [denominator x]
--             | otherwise        = g es
--             where g (u:us) | u <= x    = (denominator u) : f us (x - u)
--                            | otherwise =  g us

-- instance OEIS 247793 where
--   oeis = 2 : f (zip [2..] $ tail (oeis @40)) where
--      f ((x, p) : xps) = m : f xps where
--        m = head [y | y <- [1..], (p + (oeisIx @40) y) `mod` (oeisIx @720) (x * y) == 0]

-- instance OEIS 247795 where
--   oeis = tablList @247795
-- instance Table 247795 where
--   rowCol n k = (tabf @247795) !! (n - 1) !! (k-1)
--   rowT n = (tabf @247795) !! (n - 1)
--   tabf = map (map (flip mod 2)) (tabf @27750)

instance OEIS 247796 where
  oeisIx = f 0 where
     f s 0 = s
     f s x = if s + d < 10 then f (s + d) x' else (f d x') * 10 + s
             where (x', d) = divMod x 10

-- instance OEIS 247797 where
--   oeisIx n = (oeis @247797) !! (n - 1)
--   oeis = f 1 $ zip (oeis @40) (oeis @7605) where
--      f q' vws = g vws where
--        g  ((p,q):pqs) = if gcd q q' == 1
--                            then p : f q (delete (p,q) vws) else g pqs

-- instance OEIS 247798 where
--   oeisIx n = (oeisIx @77581) (2 * n - 1) n

-- instance OEIS 247799 where
--   oeisIx n = (oeis @247799) !! n
--   oeis = 0 : f 1 [0] where
--      f x zs@ (z:_) = y : f (x + 1) (y : zs) where
--                     y = z + maybe x id (elemIndex x $ reverse zs)

-- instance OEIS 247800 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247800) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [4, 9, 2, 1, 0, 8, 5, 7, 6, 3]

-- instance OEIS 247801 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247801) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [1, 5, 4, 9, 0, 8, 6, 7, 2, 3]

-- instance OEIS 247802 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247802) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [8, 1, 3, 9, 0, 2, 4, 5, 6, 7]

-- instance OEIS 247803 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247803) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [8, 2, 3, 6, 4, 0, 7, 5, 9, 1]

-- instance OEIS 247804 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247804) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [5, 2, 8, 9, 4, 7, 6, 3, 1, 0]

-- instance OEIS 247805 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247805) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [8, 3, 1, 5, 9, 0, 6, 7, 4, 2]

-- instance OEIS 247806 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247806) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [1, 3, 6, 7, 2, 9, 4, 0, 8, 5]

-- instance OEIS 247807 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247807) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [5, 2, 9, 8, 4, 6, 7, 3, 1, 0]

-- instance OEIS 247808 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247808) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [2, 9, 8, 4, 5, 6, 7, 3, 1, 0]

-- instance OEIS 247809 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247809) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [8, 1, 5, 4, 0, 6, 7, 9, 2, 3]

-- instance OEIS 247810 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247810) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [4, 2, 9, 1, 8, 5, 6, 7, 3, 0]

-- instance OEIS 247811 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247811) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [8, 2, 9, 0, 1, 5, 7, 3, 4, 6]

-- instance OEIS 247812 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247812) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [9, 2, 1, 0, 8, 5, 7, 6, 4, 3]

-- instance OEIS 247813 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247813) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [0, 5, 4, 2, 9, 8, 6, 7, 3, 1]

-- instance OEIS 247814 where
--   import Data.IntSet (fromList, deleteFindMin, union)
--   import qualified Data.IntSet as Set (null)
--   oeisIx n = (oeis @247814) !! (n - 1)
--   oeis = 0 : f (fromList [1..9]) where
--      f s | Set.null s = []
--          | otherwise  = x : f (s' `union`
--            fromList (map (+ 10 * x) $ tail $ dropWhile (/= mod x 10) digs))
--          where (x, s') = deleteFindMin s
--      digs = [6, 5, 1, 9, 4, 2, 8, 0, 3, 7]

-- instance OEIS 247815 where
--   oeisIx = sum . map (oeisIx @10051)' . (rowT @77581)

-- instance OEIS 247824 where
--   oeisIx n = genericIndex (oeis @247824) (n - 1)
--   oeis = f ips where
--      f ((x, p) : xps) = head
--        [y | (y, q) <- ips, (p + q) `mod` (x + y) == 0] : f xps
--      ips = zip [1..] (oeis @40)

-- instance OEIS 247857 where
--   oeis = concat $ zipWith replicate (oeis @256852) (oeis @40)

-- instance OEIS 247869 where
--   oeisIx n = (oeisIx (oeisIx n) + (oeisIx @40) n) `div` (oeisIx n + n)

-- instance OEIS 247875 where
--   oeis = filter (\x -> even x || f x) [0..] where
--      f x = x > 0 && (x `mod` 4 == 0 || f (x `div` 2))

-- instance OEIS 247879 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @248025))

-- instance OEIS 247892 where
--   oeisIx n = n - (oeisIx @247815) n

-- instance OEIS 247894 where
--   oeisIx = (oeisIx @196) . (oeisIx @10807)

-- instance OEIS 247896 where
--   oeis = filter f (oeis @40) where
--      f p = any ((== 1) . (oeisIx @10051)') $
--                map (+ p) $ filter (> 0) $ map (read . return) $ show p

-- instance OEIS 248012 where
--   oeisIx = foldr1 (^) . (rowT @27748)

-- instance OEIS 248013 where
--   oeis = filter (\x -> (oeisIx @247796) x == x) [0..]

-- instance OEIS 248014 where
--   oeis = filter (\x -> (oeisIx @247796) x < x) [0..]

-- instance OEIS 248024 where
--   oeisIx n = (oeis @248024) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--     f x zs = g zs where
--       g (y:ys) = if x `mod` (oeisIx y) == 0
--                  then y : f y (delete y zs) else g ys

-- instance OEIS 248025 where
--   oeisIx n = (oeis @248025) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--     f x zs = g zs where
--       g (y:ys) = if (oeisIx @30) y == (oeisIx @10888) x
--                  then y : f y (delete y zs) else g ys

-- instance OEIS 248043 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @248024))

-- instance OEIS 248045 where
--   oeisIx n = (oeisIx @891) (n - 1) * (oeisIx @142) n

-- instance OEIS 248098 where
--   oeis = 1 : 1 : 1 : map (+ 1) (zipWith3 (((+) .) . (+))
--                  (oeis @248098) (tail (oeis @248098)) (drop 2 (oeis @248098)))

-- instance OEIS 248101 where
--   oeisIx = product . filter (even . (oeisIx @49084)) . (rowT @27746)

-- instance OEIS 248110 where
--   oeis = tablList @248110
-- instance Table 248110 where
--   rowCol n k = (tabf @248110) !! (n - 1) !! (k-1)
--   rowT n = (tabf @248110) !! (n - 1)
--   tabf = map (\x -> [x + 1 .. x + (oeisIx @7953) x]) [1 ..]

-- instance OEIS 248122 where
--   a 0 = 0; a 1 = 0;
--   a n = 3 * a (n - 1) + 3^ceiling (n % 2) - a (ceiling (n % 2))

-- instance OEIS 248131 where
--   oeis = 1 : (map (* 3) $
--                  concatMap (map (read . return) . show) (oeis @248131))

-- instance OEIS 248141 where
--   oeis = tablList @248141
-- instance Table 248141 where
--   rowCol n k = (tabf @248141) !! (n - 1) !! (k-1)
--   rowT n = (tabf @248141) !! (n - 1)
--   tabf = map concat usss where
--      usss = iterate f [[1]] where
--        f vss = group [1 .. last (last vss) + 1] ++
--                map (\ws -> ws ++ [last ws + 1]) vss

-- instance OEIS 248147 where
--   oeis = tablList @248147
-- instance Table 248147 where
--   rowCol n k = (tabf @248147) !! (n - 1) !! (k-1)
--   rowT n = (tabf @248147) !! (n - 1)
--   tabf = map concat psss where
--      psss = iterate f [[2]] where
--         f pss = group (h $ last pss) ++ map h pss
--         h ws = ws ++ [oeisIx $ last ws]

-- instance OEIS 248164 where
--   oeis = tablList @248164
-- instance Table 248164 where
--   rowCol n k = (tabf @248164) !! (n - 1) !! (k-1)
--   rowT n = (tabf @248164) !! (n - 1)
--   tabf = map (map product) psss where
--      psss = iterate f [[2]] where
--         f pss = group (h $ last pss) ++ map h pss
--         h ws = ws ++ [oeisIx $ last ws]

-- instance OEIS 248327 where
--   oeisIx 0 = 0
--   oeisIx n = levenshtein (show n) (dropWhile (== '0') $ reverse $ show n)
--   levenshtein :: (Eq t) => [t] -> [t] -> Int
--   levenshtein us vs = last $ foldl transform [0..length us] vs where
--      transform xs@ (x:xs') c = scanl compute (x+1) (zip3 us xs xs') where
--         compute z (c', x, y) = minimum [y+1, z+1, x + fromEnum (c' /= c)]

-- instance OEIS 248336 where
--   oeisIx = fromJust . (`elemIndex` map (oeisIx @248327) [0..])

-- instance OEIS 248353 where
--   oeis = filter k [1..] where
--      k x = elem x $ map (uncurry (+)) $
--            takeWhile ((> 0) . fst) $ map (divMod (x ^ 2)) (oeis @11557)

-- instance OEIS 248378 where
--   oeisIx n = (oeis @248378) !! n
--   oeis = concat $ transpose [oeis, tail (oeis @127423)]

-- instance OEIS 248387 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @247665)) . (oeisIx @40)

-- instance OEIS 248479 where
--   oeis = 1 : 3 : zipWith ($) (map uncurry $ cycle [ (-), (*)])
--                                      (zip (tail (oeis @248479)) (oeis @248479))

-- instance OEIS 248518 where
--   oeisIx = p $ tail (oeis @52383) where
--      p _          0 = 1
--      p ks'@ (k:ks) m = if m < k then 0 else p ks' (m - k) + p ks m

-- instance OEIS 248519 where
--   oeisIx = p $ tail (oeis @52383) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 248574 where
--   oeisIx 0 = 1
--   oeisIx n = (oeisIx @27306) (n - 1) + (oeisIx @27306) n

-- instance OEIS 248663 where
--   oeisIx = foldr (xor) 0 . map (\i -> 2^ (i - 1)) . (rowT @112798)

-- instance OEIS 248737 where
--   oeisIx n = (oeis @248737) !! n
--   oeis = 0 : f 1 [0] where
--      f x ys = y : f (x + 1) (y : ys) where
--        y = (+ 1) $ fromMaybe (x - 1) $ findIndex (\z -> gcd z x /= 1) ys

-- instance OEIS 248756 where
--   oeis = f 1 [] where
--      f x yvs = fst yw : f (x + 1) (yw:yvs) where
--        yw = g 1 yvs
--        g _ []          = (x, h)
--        g k ((z,w):zws) = if w == h then (k, (oeisIx @120) k) else g (k + 1) zws
--        h = (oeisIx @120) x

-- instance OEIS 248906 where
--   oeisIx = sum . map ((2 ^) . subtract 2 . (oeisIx @95874)) . tail . (rowT @210208)

-- instance OEIS 248907 where
--   oeisIx = (oeisIx @32810) . (oeisIx @185969)

-- instance OEIS 248910 where
--   oeis = iterate f 1 where
--      f x = 1 + if r < 5 then x else 6 * f x'  where (x', r) = divMod x 6

-- instance OEIS 248918 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @247665)) . (oeisIx @961) . (+ 1)

-- instance OEIS 248940 where
--   oeis = (rowT @248939) 7

-- instance OEIS 248941 where
--   oeis = (rowT @248939) 17

-- instance OEIS 248942 where
--   oeis = (rowT @248939) 20

-- instance OEIS 248952 where
--   import Data.IntSet (singleton, member, insert, findMin, findMax)
--   oeisIx n = (oeis @248952) !! n
--   (oeis, (oeis @248953)) = unzip $
--      map (\x -> minmax 1 x $ singleton x) [0..] where
--      minmax _ 0 s = (findMin s, findMax s)
--      minmax k x s = minmax (k + 1) y (insert y s) where
--                            y = x + (if (x - j) `member` s then j else -j)
--                            j = k * signum x

-- instance OEIS 248953 where

-- instance OEIS 248973 where
--   oeis = tablList @248973
-- instance Table 248973 where
--   rowCol n k = (tabf @248973) !! n !! k
--   rowT n = (tabf @248973) !! n
--   tabf = map (scanl1 (+)) (tabf @248939)

-- instance OEIS 249031 where
--   oeisIx n = (oeis @249031) !! (n - 1)
--   oeis = f [1..] where
--      f ws@ (u:v:_) = u : v : f (ws \\ [u, v, u + v])

-- instance OEIS 249032 where
--   oeis = zipWith (-) (tail (oeis @75326)) (oeis @75326)

-- instance OEIS 249034 where
--   oeis = filter odd (oeis @171946)

-- instance OEIS 249039 where
--   oeisIx n = genericIndex (oeis @249039) (n - 1)
--   oeis = 1 : 2 : f 2 2 1 1 where
--      f x u v w = y : f (x + 1) y (v + 1 - mod y 2) (w + mod y 2)
--                  where y = u + (oeisIx @249039) (x - v) + (oeisIx @249039) (x - w)

-- instance OEIS 249040 where
--   oeis = tail $ scanl (\i j -> i + 1 - mod j 2) 0 (oeis @249039)

-- instance OEIS 249041 where
--   oeis = tail $ scanl (\i j -> i + mod j 2) 0 (oeis @249039)

-- instance OEIS 249043 where
--   oeis = iterate (oeisIx @62028) 42

-- instance OEIS 249044 where
--   oeis = filter ((== 0) . (oeisIx @10051)') $ tail (oeis @3052)

-- instance OEIS 249045 where
--   oeis = filter ((== 0) . flip mod 3) (oeis @3052)

-- instance OEIS 249046 where
--   oeis = filter ((> 0) . flip mod 9) (oeis @249045)

-- instance OEIS 249047 where
--   oeis = filter ((> 0) . flip mod 3) (oeis @3052)

-- instance OEIS 249048 where
--   oeis = filter ((== 0) . flip mod 9) (oeis @3052)

-- instance OEIS 249053 where
--   import Data.Map (singleton, findMin, delete, insert)
--   oeisIx n = (oeis @249053) !! (n - 1)
--   oeis = 1 : f 1 1 (oeis @2808) (singleton 1 1) where
--      f x z cs m
--        | k == x    = p : f (x + 1) p cs (insert (x + p) 0 $ delete x m)
--        | otherwise = c : f (x + 1) c cs' (insert (x + c) 0 m)
--        where p = (oeisIx @7918) z
--              (c:cs') = dropWhile (<= z) cs
--              (k,_) = findMin m

-- instance OEIS 249054 where
--   import Data.Map (singleton, findMin, delete, insert)
--   oeisIx n = (oeis @249054) !! (n - 1)
--   oeis = 1 : f 1 (oeis @40) (oeis @2808) (singleton 1 1) where
--      f x ps'@ (p:ps) cs'@ (c:cs) m
--        | k == x    = p : f (x + 1) ps cs' (insert (x + p) 0 $ delete x m)
--        | otherwise = c : f (x + 1) ps' cs (insert (x + c) 0 m)
--        where (k,_) = findMin m

-- instance OEIS 249095 where
--   oeis = tablList @249095
-- instance Table 249095 where
--   rowCol n k = (tabf @249095) !! n !! k
--   rowT n = (tabf @249095) !! n
--   tabf = [1] : map (concat . transpose)
--      (zipWith ((. return) . (:)) (tail (tabl @7318)) (tabl @7318))

-- instance OEIS 249111 where
--   oeis = tablList @249111
-- instance Table 249111 where
--   rowCol n k = (tabf @249111) !! n !! k
--   rowT n = (tabf @249111) !! n
--   tabf = map (scanl1 (+)) (tabf @249095)

-- instance OEIS 249129 where
--   oeisIx n = (oeis @249129) !! n
--   oeis = 1 : 0 : 2 : f 3 2 [3..] where
--      f :: Int -> Int -> [Int] -> [Int]
--      f k x zs'@ (z:zs)
--        | r == 0 = y : f (k+1) y (delete (x + y) $ delete y zs')
--        | r == 1 = z : f (k+1) z (delete (x + z) zs)
--        where y = (oeisIx @249129) k' + (oeisIx @249129) (k' + 1)
--              (k', r) = divMod k 2

-- instance OEIS 249133 where
--   oeis = tablList @249133
-- instance Table 249133 where
--   rowCol n k = (tabf @249133) !! n !! k
--   rowT n = (tabf @249133) !! n
--   tabf = map (map (flip mod 2)) (tabf @249095)

-- instance OEIS 249167 where
--   oeisIx n = (oeis @249167) !! (n - 1)
--   oeis = 1 : 2 : 3 : f 2 3 [4..] where
--      f u v ws = g ws where
--        g (x:xs) | null (intersect fdx $ (rowT @213925) u) ||
--                   not (null $ intersect fdx $ (rowT @213925) v) = g xs
--                 | otherwise =  x : f v x (delete x ws)
--                 where fdx = (rowT @213925) x

-- instance OEIS 249183 where
--   oeisIx = foldr (\b v -> 10 * v + b) 0 . (rowT @249133)

-- instance OEIS 249184 where
--   oeisIx = foldr (\b v -> 2 * v + b) 0 . (rowT @249133)

-- instance OEIS 249278 where
--   oeis = 0 : f 0 [1..] where
--      f u vs = g vs where
--        g (x:xs) = if (oeisIx x) `mod` 2 == u `mod` 2
--                      then x : f x (delete x vs) else g xs

-- instance OEIS 249279 where
--   oeisIx = fromJust . (`elemIndex` (oeis @249278))

-- instance OEIS 249304 where
--   oeisIx n = if n == 0 then 0 else (oeisIx @48967) n + (oeisIx @48967) (n - 1)

-- instance OEIS 249307 where
--   oeis = tablList @249307
-- instance Table 249307 where
--   rowCol n k = (tabf @249307) !! n !! k
--   rowT n = (tabf @249307) !! n
--   tabf = map (zipWith (*) (oeis @79)) (tabf @249095)

-- instance OEIS 249308 where
--   oeisIx n = (oeisIx @249307) n n

-- instance OEIS 249343 where
--   oeisIx = (oeisIx @7949) . (oeisIx @1142)

-- instance OEIS 249346 where
--   oeisIx = (oeisIx @122841) . (oeisIx @1142)

instance OEIS 249357 where
  oeis = 1 : 2 : 3 : f 2 3 where
     f u v = y : f v y where
       y = head [x | x <- [u + v ..], gcd x u > 1, gcd x v == 1]

-- instance OEIS 249406 where
--   oeisIx n = (oeis @249406) !! (n - 1)
--   oeis = 1 : f [2..] where
--      f ws@ (u:v:_) = y : f (ws \\ [u, v, y]) where y = u * v

-- instance OEIS 249407 where
--   oeisIx n = (oeis @249407) !! (n - 1)
--   oeis = f [2..] where
--      f ws@ (u:v:_) = u : v : f (ws \\ [u, v, u * v])

-- instance OEIS 249408 where
--   oeisIx n = (oeis @249408) !! (n - 1)
--   oeis = filter ((== 0) . (oeisIx @5369)) (oeis @249406)

-- instance OEIS 249411 where
--   oeis = filter ((== 1) . (oeisIx @5369)) (oeis @249407)

-- instance OEIS 249484 where
--   oeis = 1 : concat (zipWith (++) ([2] : f [5,2,7]) (f [4,3])) where
--      f = iterate (\row -> [g $ head row] ++ row ++ [g $ last row])
--      g x = x + ((5 -) . (* 2) . flip mod 2) x

-- instance OEIS 249566 where
--   oeis = filter ((== 4) . (oeisIx @182134)) [1..]

-- instance OEIS 249569 where
--   oeis = 1 : 1 : zipWith (+)
--      (map (oeisIx @249569) $ zipWith (-) [3..] $ tail (oeis @249569))
--      (map (oeisIx @249569) $ zipWith (-) [3..] $ map (oeisIx @249569) (oeis @249569))

-- instance OEIS 249571 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @249054))

-- instance OEIS 249575 where
--   oeis = filter ((== 1) . (oeisIx @10055) . (oeisIx @84937)) [1..]

-- instance OEIS 249591 where
--   oeisIx n = (oeis @249591) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f x zs = g zs where
--        g (y:ys) = if null $ show y `intersect` show (x - 1)
--                      then g ys else y : f y (delete y zs)

-- instance OEIS 249594 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @249054)) . (oeisIx @40)

-- instance OEIS 249595 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @249054)) . (oeisIx @18252)

-- instance OEIS 249602 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @84937)) [1..]

-- instance OEIS 249603 where
--   oeisIx = flip mod 3 . (oeisIx @84937)

-- instance OEIS 249626 where
--   oeisIx n = (oeis @249626) !! n
--   oeis = f (zip [0,0..] [0..9]) (tabf @31298) where
--      f acds@ ((_,dig):_) zss = g zss where
--        g (ys:yss) = if dig `elem` ys
--                        then y : f acds' (delete ys zss) else g yss
--          where y = foldr (\d v -> 10 * v + d) 0 ys
--                acds' = sortBy (compare `on` fst) $
--                       addd (sortBy (compare `on` snd) acds)
--                            (sortBy (compare `on` snd) $
--                                    zip (map length gss) (map head gss))
--                addd cds [] = cds
--                addd []   _ = []
--                addd ((c, d) : cds) yys'@ ((cy, dy) : yys)
--                     | d == dy  = (c + cy, d) : addd cds yys
--                     | otherwise = (c, d) : addd cds yys'
--                gss = sortBy compare $ group ys

-- instance OEIS 249629 where
--   a 0 = 0; a 1 = 0;
--   a n = 4 * a (n - 1) + 4^ceiling (n % 2) - a (ceiling (n % 2))

-- instance OEIS 249638 where
--   a 0 = 0; a 1 = 0;
--   a n = 5 * a (n - 1) + 5^ceiling (n % 2) - a (ceiling (n % 2))

-- instance OEIS 249648 where
--   oeisIx = fromJust . (`elemIndex` (oeis @249626)) . (oeisIx @11540)

-- instance OEIS 249669 where
--   oeisIx n = floor $ fi (oeisIx n) ** (1 + recip (fi n))

-- instance OEIS 249680 where
--   oeisIx = (oeisIx @84937) . (+ 1) . (* 3)

-- instance OEIS 249681 where
--   oeisIx = (oeisIx @84937) . (+ 2) . (* 3)

-- instance OEIS 249682 where
--   oeisIx = (oeisIx @84937) . (* 3)

-- instance OEIS 249683 where
--   oeisIx = flip div 2 . (oeisIx @249681)

-- instance OEIS 249684 where
--   oeis = filter ((== 0) . (oeisIx @249777)) [1..]

-- instance OEIS 249694 where
--   oeis = zipWith gcd (drop 3 (oeis @84937)) (oeis @84937)

instance OEIS 249777 where
  oeis = 0 : 0 : f 2 1 [3..] where
     f x y zs = g zs 0 where
        g (u:us) w | gcd y u > 1 || gcd x u > 1 = g us (w + 1)
                   | otherwise = w : f u x (delete u zs)

instance OEIS 249783 where
  oeisIx 0 = 0
  oeisIx n = minimum (map (bi n) [0.. (n - 1)])
    where
      bi x y = if (x<y) then (x+y) else (bi y (x-y))

-- instance OEIS 249830 where
--   oeis = filter ((== 0) . (oeisIx @249832)) [0..]

-- instance OEIS 249832 where
--   oeisIx = (0 ^) . flip mod 10 . (oeisIx @93017)

-- instance OEIS 249854 where
--   oeisIx n = (oeis @249854) !! (n - 1)
--   oeis = sortBy (compare `on` show) $
--                         takeWhile (<= 10^6) (oeis @93018)

-- instance OEIS 249855 where
--   oeisIx n = (oeis @249855) !! (n - 1)
--   oeis = sortBy (compare `on` f) $ takeWhile (<= 10^6) (oeis @93018)
--                  where f x = (head $ reverse ds, ds) where ds = show x

instance OEIS 249856 where
  oeisIx = sum . map (flip mod 2) . (uss `genericIndex`)

instance OEIS 249857 where
  oeisIx = sum . map ((1 -) . flip mod 2) . (uss `genericIndex`) . succ

-- instance OEIS 249858 where
--   oeisIx n = (oeisIx @249857) n - (oeisIx @249856) n

-- instance OEIS 249873 where
--   oeisIx n = if n == 0 then 0 else 100*oeisIx n' + 10*oeisIx (2*t) + d
--               where (n', td) = divMod n 100; (t, d) = divMod td 10

-- instance OEIS 249900 where
--   oeis = [1..4] ++ concatMap (uncurry (++))
--             (f [2] [3,4] (drop 2 (oeis @40)) (tail (oeis @2808))) where
--      f us@ (u:_) vs ps'@ (p:p':ps) cs'@ (c:c':cs)
--        | (oeisIx @10051) u == 1 = g ([c] ++ us ++ [c']) vs ps' cs
--        | otherwise      = g ([p] ++ us ++ [p']) vs ps cs'
--      g us vs@ (v:_) (p:ps) (c:cs) = (us, ws) : f us ws ps cs where
--        ws = if (oeisIx @10051) v == 1 then [c] ++ vs ++ [p] else [p] ++ vs ++ [c]

-- instance OEIS 249918 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @203069))

-- instance OEIS 249920 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @55266))

-- instance OEIS 249943 where
--   oeis = scanl1 max $ map (oeisIx @98551) [1..]

-- instance OEIS 249951 where
--   oeis = filter ((== 1) . (oeisIx @10051)'' . (oeisIx @113630)) [1..]

-- instance OEIS 249990 where
--   oeis = f 2 [1..] where
--      f k xs = reverse ys ++ f (k + 1) (g zs) where
--               g us = reverse vs ++ g ws where
--                      (vs, ws) = splitAt k us
--               (ys, zs) = splitAt k xs

-- instance OEIS 250007 where
--   oeisIx n = (oeis @250007) !! (n - 1)
--   oeis = map length $ group $ map (oeisIx @100618) [1..]

-- instance OEIS 250030 where
--   oeisIx n = snd $ until ((== 5) . fst)
--                     (\ (x, s) -> (oeisIx x, s + 1)) (oeisIx n, 1)

-- instance OEIS 250299 where
--   oeisIx = flip mod 2 . (oeisIx @98550)

-- instance OEIS 250402 where
--   oeis = filter ((== 0) . (oeisIx @247149)) [0..]

-- instance OEIS 250403 where
--   oeis = filter ((== 1) . (oeisIx @247149)) [0..]

-- instance OEIS 250552 where
--   oeisIx = (oeisIx @49084) . (oeisIx @247797)

-- instance OEIS 250553 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @250552))

-- instance OEIS 251045 where
--   oeisIx = (oeisIx @7913) . fi . (oeisIx @98550)

-- instance OEIS 251046 where
--   oeisIx = (oeisIx @7913) . fi . (oeisIx @98548)

-- instance OEIS 251089 where
--   oeisIx = (oeisIx @7947) . fi . (oeisIx @98550)

-- instance OEIS 251090 where
--   oeisIx = (oeisIx @7947) . fi . (oeisIx @98548)

-- instance OEIS 251101 where
--   oeisIx = (oeisIx @20639) . fi . (oeisIx @98550)

-- instance OEIS 251102 where
--   oeis = zipWith gcd (drop 2 (oeis @98550)) (oeis @98550)

-- instance OEIS 251103 where
--   oeisIx = (oeisIx @6530) . fi . (oeisIx @98550)

-- instance OEIS 251104 where
--   oeisIx = (oeisIx @6530) . fi . (oeisIx @98548)

-- instance OEIS 251138 where
--   oeisIx = (oeisIx @1221) . fi . (oeisIx @98550)

-- instance OEIS 251139 where
--   oeisIx = (oeisIx @1221) . fi . (oeisIx @98548)

-- instance OEIS 251140 where
--   oeisIx = (oeisIx @1222) . fi . (oeisIx @98550)

-- instance OEIS 251141 where
--   oeisIx = (oeisIx @1222) . fi . (oeisIx @98548)

-- instance OEIS 251237 where
--   oeis = filter (even . (oeisIx @98550)) [1..]

-- instance OEIS 251238 where
--   oeis = filter (odd . (oeisIx @98550)) [1..]

-- instance OEIS 251239 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @98550)) [1..]

-- instance OEIS 251240 where
--   oeis = filter ((== 2) . (oeisIx @62799) . fi . (oeisIx @98550)) [1..]

-- instance OEIS 251241 where
--   oeis = filter ((== 1) . (oeisIx @10055) . (oeisIx @98550)) [1..]

-- instance OEIS 251391 where
--   oeis = filter ((== 1) . (oeisIx @8966) . fi . (oeisIx @98550)) [1..]

-- instance OEIS 251392 where
--   oeis = filter ((== 0) . (oeisIx @10051)' . (oeisIx @98550)) [1..]

-- instance OEIS 251393 where
--   oeis = filter ((== 1) . (oeisIx @209229) . (oeisIx @98550)) [1..]

-- instance OEIS 251394 where
--   oeis = filter ((== 1) . gcd 6 . (oeisIx @98550)) [1..]

-- instance OEIS 251412 where
--   oeis = iterate (oeisIx @98550) 11

-- instance OEIS 251413 where
--   oeisIx n = (oeis @251413) !! (n - 1)
--   oeis = 1 : 3 : 5 : f 3 5 [7, 9 ..] where
--      f u v ws = g ws where
--        g (x:xs) = if gcd x u > 1 && gcd x v == 1
--                      then x : f v x (delete x ws) else g xs

-- instance OEIS 251416 where
--   oeisIx n = (oeis @251416) !! (n - 1)
--   oeis = 2 : 3 : f 2 3 [4..] where
--      f u v ws = h ws where
--        h (x:xs) = if gcd x u > 1 && gcd x v == 1
--                      then (head ws) : f v x (delete x ws) else h xs

-- instance OEIS 251417 where
--   oeisIx n = (oeis @251417) !! (n - 1)
--   oeis = map length $ group (oeis @251416)

-- instance OEIS 251535 where
--   oeis = fst (oeisIx @98548)_bisect
--   oeisIx_bisect = cleave (oeis @98548) where
--      cleave xs = (evens xs, odds xs) where
--         evens [] = []; evens [x] = [x]; evens (x:_:xs) = x : evens xs
--         odds [] = []; odds [x] = []; odds (_:x:xs) = x : odds xs

-- instance OEIS 251536 where
--   oeis = map (flip div 2) $ snd (oeisIx @98548)_bisect

-- instance OEIS 251537 where
--   oeis = filter (\x -> (oeisIx @98548) (x + 2) > (oeisIx @98548) x + 6) [1, 3 ..]

-- instance OEIS 251538 where
--   oeis = filter (\x -> (oeisIx @98548) (2*x+3) > (oeisIx @98548) (2*x+1) + 6) [1..]

-- instance OEIS 251539 where
--   oeis = zipWith (-) (tail (oeis @251538)) (oeis @251538)

-- instance OEIS 251540 where
--   oeis = filter ((> 0) . flip mod 3 . (oeisIx @98548)) [1, 3 ..]

-- instance OEIS 251542 where
--   oeis = [div u v | (u, v) <- zip (drop 2 (oeis @98550)) (oeis @98550),
--                             (oeisIx @10051)' v == 1]

-- instance OEIS 251546 where
--   oeisIx n = head $ [2, 4 ..] \\ filter even (take n (oeis @98550))

-- instance OEIS 251547 where
--   oeisIx = flip div 2 . (oeisIx @251546)

-- instance OEIS 251548 where
--   oeisIx n = (oeis @251548) !! (n - 1)
--   oeis = map length $ group $ map (oeisIx @251546) [1..]

-- instance OEIS 251549 where
--   oeisIx n = head $ [1, 3 ..] \\ filter odd (take n (oeis @98550))

-- instance OEIS 251550 where
--   oeisIx = flip div 2 . subtract 1 . (oeisIx @251549)

-- instance OEIS 251551 where
--   oeisIx n = (oeisIx @251546) n - (oeisIx @251549) n

-- instance OEIS 251552 where
--   oeisIx = flip div 2 . subtract 1 . (oeisIx @251551)

-- instance OEIS 251553 where
--   oeis = filter ((== 0) . flip mod 3 . (oeisIx @98550)) [1..]

-- instance OEIS 251554 where
--   oeisIx n = (oeis @251554) !! (n - 1)
--   oeis = 1 : 2 : 5 : f 2 5 (3 : 4 : [6..]) where
--      f u v ws = g ws where
--        g (x:xs) = if gcd x u > 1 && gcd x v == 1
--                      then x : f v x (delete x ws) else g xs

-- instance OEIS 251555 where
--   oeisIx n = (oeis @251555) !! (n - 1)
--   oeis = 1 : 3 : 2 : f 3 2 [4..] where
--      f u v ws = g ws where
--        g (x:xs) = if gcd x u > 1 && gcd x v == 1
--                      then x : f v x (delete x ws) else g xs

-- instance OEIS 251557 where
--   oeis = map (+ 2) $ tail $ scanl maxEven 0 (oeis @98550)
--                  where maxEven u v = if even v then max u v else u

-- instance OEIS 251558 where
--   oeisIx n = (oeis @251558) !! (n - 1)
--   oeis = 9 : 9 : 9 : f 2 3 [4..] (tail (oeis @14076)) where
--      f u v ws zs = g ws where
--        g (x:xs) = if gcd x u > 1 && gcd x v == 1
--                      then y : f v x (delete x ws) ys else g xs
--                   where ys@ (y:_) = zs `minus` [x]

-- instance OEIS 251561 where
--   oeisIx 1 = 1
--   oeisIx n | q == 1                    = 2 * p
--             | p == 2 && (oeisIx @10051)' q == 1 = q
--             | otherwise                 = n
--             where q = div n p; p = (oeisIx @20639) n

-- instance OEIS 251595 where
--   oeisIx n = (oeis @251595) !! (n - 1)
--   oeis = map head $ group (oeis @251416)

-- instance OEIS 251599 where
--   oeis = f 0 $ g 1 [1..] where
--      f i (us:vs:wss) = [head $ drop i us] ++ (take 2 $ drop i vs) ++
--                        f (i + 1) wss
--      g k zs = ys : g (k + 1) xs where (ys,xs) = splitAt k zs

-- instance OEIS 251604 where
--   oeisIx n = (oeis @251604) !! (n - 1)
--   oeis = 1 : 2 : 3 : f 2 3 [4..] where
--      f u v ws = g ws where
--        g (x:xs) = if gcd x (u + v) > 1 && gcd x v == 1
--                      then x : f v x (delete x ws) else g xs

-- instance OEIS 251608 where
--   oeis = 2 : 3 : f 2 3 (drop 5 (oeis @45)) where
--      f u v (w:ws) = if gcd u w > 1 && gcd v w == 1
--                        then w : f v w ws else f u v ws

-- instance OEIS 251618 where
--   oeisIx n = fromJust $
--               find (\x -> mod x (fi $ (oeisIx @40) n) == 0) (oeis @98550)

-- instance OEIS 251619 where
--   oeisIx = (oeisIx @20639) . fi . (oeisIx @251618)

-- instance OEIS 251620 where
--   oeisIx n = (oeis @251620) !! (n - 1)
--   oeis = map head $ group (oeis @249943)

-- instance OEIS 251621 where
--   oeisIx n = (oeis @251621) !! (n - 1)
--   oeis = map length $ group (oeis @249943)

-- instance OEIS 251622 where
--   oeis = 1 : 2 : f 1 2 [3..] where
--      f u v xs = g xs where
--        g (w:ws) = if gcd w u > 1 || gcd w v > 1
--                      then w : f v w (delete w xs) else g ws

-- instance OEIS 251635 where
--   oeis = tablList @251635
-- instance Table 251635 where
--   rowT n = (tabl @251635) !! n
--   tabl = [1] : iterate (0 :) [-2, 1]

-- instance OEIS 251725 where
--   oeisIx 1 = 1
--   oeisIx n = if length ps == 1 then 1 else head $ filter f [2..]  where
--     f b = all (== len) lbs where len:lbs = map (length . d b) ps
--     ps = (rowT @27748) n
--     d b = unfoldr (\z -> if z == 0 then Nothing else Just $ swap $ divMod z b)

-- instance OEIS 251728 where
--   oeis = filter f [1..] where
--                         f x = q < p ^ 2 && (oeisIx @10051)' q == 1
--                               where q = div x p; p = (oeisIx @20639) x

-- instance OEIS 251756 where
--   oeisIx n = (oeis @251756) !! (n - 1)
--   oeis = 0 : f 0 (oeis @2808) where
--      f x zs = g zs where
--        g (y:ys) | d == 1 || (oeisIx @10051)' d == 1 = g ys
--                 | otherwise = y : f y (delete y zs)
--                 where d = gcd x y

-- instance OEIS 251767 where
--   oeisIx n = (oeis @251767) !! (n - 1)
--   oeis = map head $ group (oeis @251539)

-- instance OEIS 251768 where
--   oeisIx n = (oeis @251768) !! (n - 1)
--   oeis = map length $ group (oeis @251539)

-- instance OEIS 251984 where
--   oeisIx n = if d > 0 then 10 - d else 10 * (oeisIx @251984) n'
--               where (n',d) = divMod n 10

-- instance OEIS 252001 where
--   oeisIx n = (oeis @252001) !! (n - 1)
--   oeis = 1 : f [1] (drop 2 (tabf @31298)) where
--      f xs zss = g zss where
--        g (ds:dss) = if any (> 9) $ zipWith (+) xs ds
--          then (foldr (\d v -> 10 * v + d) 0 ds) : f ds (delete ds zss)
--          else g dss

-- instance OEIS 252002 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @252001))

-- instance OEIS 252022 where
--   oeisIx n = (oeis @252022) !! (n - 1)
--   oeis = 1 : f [1] (drop 2 (tabf @31298)) where
--      f xs zss = g zss where
--        g (ds:dss) = if all (<= 9) $ zipWith (+) xs ds
--          then (foldr (\d v -> 10 * v + d) 0 ds) : f ds (delete ds zss)
--          else g dss

-- instance OEIS 252023 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @252022))

-- instance OEIS 252078 where
--   oeis = [x | x <- [1..], (oeisIx @252001) x == x]

-- instance OEIS 252079 where
--   oeis = [x | x <- [1..], (oeisIx @252022) x == x]

-- instance OEIS 252094 where
--   (oeis, (oeis @252095)) = unzip $ f 3 where
--      f x = if z then (q, p - q) : f (x + 2) else f (x + 2)  where
--            z = 0 `notElem` ds && length ds > 2 &&
--                all (== 0) (zipWith mod (tail ds) ds) && all (== q) qs
--            q:qs = (zipWith div (tail ds) ds)
--            ds = zipWith (-) (tail ps) ps
--            ps = 1 : ps'; ps'@ (p:_) = (rowT @27746) x

-- instance OEIS 252095 where

-- instance OEIS 252448 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @249990))

-- instance OEIS 252458 where
--   oeis = [x | x <- [1..], (oeisIx @249990) x == x]

-- instance OEIS 252477 where
--   oeis = map (floor . recip) $ zipWith (-) (tail rs) rs
--                  where rs = map (sqrt . fi) (oeis @40)

-- instance OEIS 252596 where
--   oeis = iterate (\x -> (oeisIx @40) (oeisIx x + mod x 3)) 5

-- instance OEIS 252837 where
--   oeis = f (oeis @98550) where
--      f us = (h 0 vs) : f vs where
--        (_:vs) = dropWhile ((== 0) . (oeisIx @10051)') us
--        h e (w:_:ws) = if even w then h (e + 1) ws else e

-- instance OEIS 252849 where
--   oeis = filter (even . (oeisIx @46951)) [1..]

-- instance OEIS 252865 where
--   oeisIx n = (oeis @252865) !! (n - 1)
--   oeis = 1 : 2 : 3 : f 2 3 (drop 3 (oeis @5117)) where
--      f u v ws = g ws where
--        g (x:xs) = if gcd x u > 1 && gcd x v == 1
--                      then x : f v x (delete x ws) else g xs

-- instance OEIS 252867 where
--   oeisIx n = (oeis @252867) !! n
--   oeis = 0 : 1 : 2 : f 1 2 [3..] where
--      f :: Int -> Int -> [Int] -> [Int]
--      f u v ws = g ws where
--        g (x:xs) = if x .&. u > 0 && x .&. v == 0
--                      then x : f v x (delete x ws) else g xs

-- instance OEIS 252895 where
--   oeis = filter (odd . (oeisIx @46951)) [1..]

-- instance OEIS 252912 where
--   oeis = filter (\x -> (oeisIx @98550) x == (oeisIx @251555) x) [1..]

-- instance OEIS 252939 where
--   oeis = zipWith (-) (tail (oeis @252912)) (oeis @252912)

-- instance OEIS 252940 where
--   oeisIx n = (oeis @252940) !! (n - 1)
--   oeis = map length $ group (oeis @252939)

-- instance OEIS 252942 where
--   oeisIx n = head [y | m <- [1..],
--      let y = read (show m ++ show n ++ show m) :: Integer, (oeisIx @10051)' y == 1]

-- instance OEIS 253046 where
--   oeisIx n | i == 0 || p > 3 = n
--             | p == 2          = 3 * (oeisIx @40) (i + 1)
--             | otherwise       = 2 * (oeisIx @40) (i - 1)
--               where i = (oeisIx @49084) (div n p);  p = (oeisIx @20639) n

-- instance OEIS 253048 where
--   oeis = filter ((== 0) . (oeisIx @10051)') $ map (oeisIx @253049) [1..]

-- instance OEIS 253073 where
--   oeis = 0 : f 0 (oeis @18252) where
--      f u vs = g vs where
--        g (w:ws) | (oeisIx @10051)' (u + w) == 1 = g ws
--                 | otherwise = w : f w (delete w vs)

-- instance OEIS 253074 where
--   oeis = 0 : f 0 [1..] where
--      f u vs = g vs where
--        g (w:ws) | (oeisIx @10051)' (u + w) == 1 = g ws
--                 | otherwise = w : f w (delete w vs)

-- instance OEIS 253106 where
--   oeis = filter f [1..] where
--      f x = p <= 3 && (oeisIx @10051)' (div x p) == 1  where p = (oeisIx @20639) x

-- instance OEIS 253138 where
--   oeisIx n = sum $ map (oeisIx @64911) $
--      takeWhile (> 0) $ map (2 * p -) $ dropWhile (< p) (oeis @1358)
--      where p = (oeisIx @40) n

-- instance OEIS 253146 where
--   oeis = tablList @253146
-- instance Table 253146 where
--   rowCol = rowCol_off @253146 @1 @1
--   rowT   = rowT_off   @253146 @1
--   tabl = [1] : [2,3] : f [1] [2,3] where
--      f us vs@ (v:_) = ws : f vs ws where
--                      ws = [v + 2] ++ us ++ [v + 3]

-- instance OEIS 253169 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @256188))

-- instance OEIS 253170 where
--   oeisIx = sum . (rowT @30717)

-- instance OEIS 253172 where
--   oeisIx n = (oeis @253172) !! (n - 1)
--   oeis = filter f [2..] where
--      f x = g divs $ reverse divs where
--            g (d:ds) (q:qs) = d <= q &&
--              (sort (nub $ xs ++ show d ++ show q) == decs || g ds qs)
--            xs = show x
--            divs = (rowT @27750) x
--      decs = "0123456789"

-- instance OEIS 253253 where
--   oeisIx n = (oeis @253253) !! (n - 1)
--   oeis = f (oeis @1704) [] where
--      f (x:xs) ds = y : f xs (insert y ds) where
--                    y = head (oeisIx_row' x `minus` ds)

-- instance OEIS 253297 where
--   oeis = f (oeis @98550) where
--      f (u:vs@ (_:v:_)) = if (oeisIx @10051)' v == 1 && div u v > 2
--                            then v : f vs else f vs

-- instance OEIS 253315 where
--   oeisIx :: Integer -> Integer
--   oeisIx = f 0 0 where
--      f _ y 0 = y
--      f z y x = f (z + 1) (y `xor` b * z) x' where (x', b) = divMod x 2

-- instance OEIS 253415 where
--   oeisIx n = (oeis @253415) !! (n - 2)
--   oeis = f [2..] 1 where
--      f xs z = g xs where
--        g (y:ys) = if mod z' y > 0 then g ys else x : f xs' (z + y)
--                   where xs'@ (x:_) = delete y xs
--        z' = z + 2

-- instance OEIS 253425 where
--   oeisIx n = (oeis @253425) !! (n - 1)
--   oeis = map length $ group (oeis @253415)

-- instance OEIS 253443 where
--   oeisIx n = (oeis @253443) !! (n - 4)
--   oeis = f (4, []) 6 where
--      f (m,ys) z = g $ dropWhile (< m) $ (rowT @27750)' z where
--        g (d:ds) | elem d ys = g ds
--                 | otherwise = m : f (ins [m, m+1 ..] (insert d ys)) (z + d)
--        ins (u:us) vs'@ (v:vs) = if u < v then (u, vs') else ins us vs

-- instance OEIS 253444 where
--   oeisIx n = (oeis @253444) !! (n - 1)
--   oeis = map length $ group (oeis @253443)

-- instance OEIS 253569 where
--   oeis = filter f [1..] where
--                       f x = (p ^ 2 < (oeisIx @20639) q) && (oeisIx' q == 1 || f q)
--                             where q = div x p; p = (oeisIx @20639) x
--   oeisIx n = (oeis @253569) !! (n - 1)
--   oeis = filter (not . f''') (oeis @2808) where
--      f''' x = p ^ 2 > (oeisIx @20639) q || (oeisIx q == 0 && f''' q)
--               where q = div x p; p = (oeisIx @20639) x

-- instance OEIS 253580 where
--   oeis = tablList @253580
-- instance Table 253580 where
--   rowCol n k = (tabf @253580) !! n !! k
--   rowT n = (tabf @253580) !! n
--   tabf = [0] : [1,0,2] : f [1,0,2] where
--      f xs@ (x:_) = ys : f ys where ys = [x + 2] ++ xs ++ [x + 3]
--   oeis = concat (tabf @253580)

-- instance OEIS 253581 where
--   oeisIx n = (oeis @253581) !! n
--   oeis = zipWith (.&.) (oeis @252867) $ drop 2 (oeis @252867) :: [Int]

-- instance OEIS 253582 where
--   oeisIx n = (oeis @253582) !! n
--   oeis = zipWith (.|.) (oeis @252867) $ tail (oeis @252867) :: [Int]
--   oeis' = zipWith (+) (oeis @252867) $ tail (oeis @252867)

-- instance OEIS 253584 where
--   oeisIx n = (oeis @253584) !! (n - 1)
--   oeis = map head $ group (oeis @253443)

-- instance OEIS 253589 where
--   oeisIx = (oeisIx @120) . (oeisIx @252867)

-- instance OEIS 253603 where
--   oeisIx = fromJust . (`elemIndex` (oeis @253581))

-- instance OEIS 253607 where
--   oeis = zipWith (-) (tail (oeis @253580)) (oeis @253580)

-- instance OEIS 253672 where
--   oeis = tablList @253672
-- instance Table 253672 where
--   rowCol n k = (tabf @253672) !! n !! k
--   rowT n = (tabf @253672) !! n
--   tabf = [0,1,2] : f [] [0,1,2] [] (iterate (map (+ 3)) [3..5]) where
--      f as bs cs (uvws:uvwss) = (as' ++ uvws ++ cs') : f as' uvws cs' uvwss
--        where as' = as ++ [u,v]; cs' = [w] ++ cs
--              [u,v,w] = bs
--   oeis = concat (tabf @253672)

-- instance OEIS 253717 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @106039)

-- instance OEIS 253721 where
--   oeisIx = flip mod 10 . (oeisIx @14612)

-- instance OEIS 253853 where
--   oeis = 1 : 1 : 1 : map (+ 1)
--                              (zipWith (*) (oeis @253853) $ tail (oeis @253853))

-- instance OEIS 253910 where
--   oeisIx n = (oeis @253911) !! (n - 1)
--   oeis = map read $
--      zipWith ((++) `on` show) (oeis @18252) (oeis @40) :: [Integer]

-- instance OEIS 253911 where
--   oeisIx n = (oeis @253911) !! (n - 1)
--   oeis = map read $
--      zipWith ((++) `on` show) (oeis @18252) (oeis @40) :: [Integer]

instance OEIS 254077 where
  oeis = 1 : 2 : 3 : f 2 3 [4..] where
     f u v ws = g ws where
       g (x:xs) = if gcd x u > gcd x v then x : f v x (delete x ws) else g xs

-- instance OEIS 254143 where
--   import Data.Set (empty, fromList, deleteFindMin, union)
--   import qualified Data.Set as Set (null)
--   oeisIx n = (oeis @254143) !! (n - 1)
--   oeis = f (oeis @237424) [] empty where
--      f xs'@ (x:xs) zs s
--        | Set.null s || x < y = f xs zs' (union s $ fromList $ map (* x) zs')
--        | otherwise           = y : f xs' zs s'
--        where zs' = x : zs
--              (y, s') = deleteFindMin s

-- instance OEIS 254308 where
--   oeis = 0 : 1 : 1 : zipWith3 (\u v w -> u + if odd u then v else w)
--                  (drop 2 (oeis @254308)) (tail (oeis @254308)) (oeis @254308)

-- instance OEIS 254323 where
--   oeisIx = (oeisIx @137564) . (oeisIx @254143)

-- instance OEIS 254338 where
--   oeisIx = (oeisIx @30) . (oeisIx @254143)

-- instance OEIS 254339 where
--   oeisIx = flip mod 10 . (oeisIx @254143)

-- instance OEIS 254397 where
--   oeisIx = (oeisIx @30) . (oeisIx @237424)

-- instance OEIS 254398 where
--   oeisIx = flip mod 10 . (oeisIx @237424)

instance OEIS 254429 where
  oeis = iterate ((+ 1) . (2 ^)) 0

-- instance OEIS 254524 where
--   import Data.IntMap (empty, findWithDefault, insert)
--   oeisIx n = (oeis @254524) !! (n - 1)
--   oeis = f 1 empty where
--      f x m = y : f (x + 1) (insert q (y + 1) m) where
--              y = findWithDefault 1 q m; q = (oeisIx @7953) x

-- instance OEIS 254531 where
--   oeisIx = (+ 49) . round . (* 12) . logBase 2 . (/ 440) . fi

-- instance OEIS 254609 where
--   oeis = tablList @254609
-- instance Table 254609 where
--   rowT n = (tabl @254609) !! n
--   tabl = zipWith (map . div)
--      (oeis @243757) $ zipWith (zipWith (*)) xss $ map reverse xss
--      where xss = tail $ inits (oeis @243757)

instance OEIS 254649 where
  oeis = f (oeis @7376) [0] where
     f (x:xs) ys = g x xs where
       g y zs'@ (z:zs) | y `elem` ys = g (y + z) zs
                      | otherwise   = y : f zs' (y:ys)

-- instance OEIS 254650 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @254649))

-- instance OEIS 254656 where
--   oeis = [x | x <- [1..], (oeisIx @254649) x == x]

-- instance OEIS 254679 where
--   oeis = tablList @254679
-- instance Table 254679 where
--   rowCol n k = (tabf @254679) !! (n - 1) !! (k-1)
--   rowT n = (tabf @254679) !! (n - 1)
--   tabf = map (sortBy (comparing show)) (tabf @27750)

instance OEIS 254719 where
  oeis = g (0 : drop 2 (oeis @45)) (oeis @105317) where
     g fs'@ (f:fs) (x:xs) = if x == f then g fs xs else x : g fs' xs

-- instance OEIS 254730 where
--   oeis = tablList @254730
-- instance Table 254730 where
--   rowT n = (tabl @254730) !! n
--   tabl = zipWith (map . div)
--      (oeis @243758) $ zipWith (zipWith (*)) xss $ map reverse xss
--      where xss = tail $ inits (oeis @243758)

instance OEIS 254732 where
  oeisIx (succ->n) = head [k | k <- [n + 1 ..], mod (k ^ 2) n == 0]

instance OEIS 254744 where
  oeis = 1 : f 2 [1] where
     f x ys = y : f (x * 2) (y : ys) where
              y = x * (sum $ zipWith (*) ys $ reverse ys)

instance OEIS 254784 where
  oeis = (iterate (scanl1 (+)) (oeis @40)) !! 5

instance OEIS 254788 where
  oeis = 1 : f [2..] 1 [] where
     f xs y zs = g xs where
       g (w:ws) | s `elem` zs || d `elem` zs = g ws
                | otherwise = w : f (delete w xs) w (d : s : zs)
                where s = y + w; d = abs (y - w)

instance OEIS 254790 where
  oeisIx = fi . (+ 1) . fromJust . (`elemIndex` (oeis @254788)) . succ

instance OEIS 254792 where
  oeis = map abs $ zipWith (-) (oeis @254788) $ tail (oeis @254788)

instance OEIS 254793 where
  oeis = zipWith (+) (oeis @254788) $ tail (oeis @254788)

instance Table 254858 where
  tabl = diags [] $ iterate (scanl1 (+)) (oeis @40) where
     diags uss (vs:vss) = (map head wss) : diags (map tail wss) vss
                          where wss = vs : uss
instance OEIS 254858 where
  oeis = tablList @254858

instance OEIS 254868 where
  oeis = 6 : kehrig (S.singleton 6) 6 where
     kehrig s x | x > 4 && (x - 4) `S.notMember` s =
                  (x - 4) : kehrig (S.insert (x - 4) s) (x - 4)
                | (x + 4) `S.notMember` s =
                  (x + 4) : kehrig (S.insert (x + 4) s) (x + 4)
                | otherwise =
                  (x * 4) : kehrig (S.insert (x * 4) s) (x * 4)

instance OEIS 254967 where
  oeis = tablList @254967
instance Table 254967 where
  tabl = diags [] $
     iterate (\lds -> map abs $ zipWith (-) (tail lds) lds) (oeis @959)
     where diags uss (vs:vss) = (map head wss) : diags (map tail wss) vss
                                where wss = vs : uss

instance OEIS 254969 where
  oeisIx n = (rowCol @254967) (2 * n) n

instance OEIS 255134 where
  oeis = zipWith (-) (tail (oeis @97764)) (oeis @97764)

(oeis255136, (oeis255137)) = unzip $ f [1..] (oeis @255134) (-1) where
     f (x:xs) (y:ys) r = if y > r then (y, x) : f xs ys y else f xs ys r

instance OEIS 255136 where
  oeis = oeis255136

instance OEIS 255137 where
  oeis = oeis255137

-- instance OEIS 255313 where
--   oeis = tablList @255313
-- instance Table 255313 where
--   rowCol = rowCol_off @255313 @1 @1
--   rowT   = rowT_off   @255313 @1
--   tabl = zipWith (zipWith (+)) tss $ map tail tss
--                  where tss = tail (tabl @88643)

-- instance OEIS 255316 where
--   oeis = tablList @255316
-- instance Table 255316 where
--   rowCol n k = (tabf @255316) !! (n - 1) !! (k-1)
--   rowT n = (tabf @255316) !! (n - 1)
--   tabf = map (sort . nub) (tabl @255313)

-- instance OEIS 255395 where
--   oeisIx = genericLength . nub . (rowT @255313)

-- instance OEIS 255420 where
--   oeis = iterate (oeisIx . (+ 1)) 1

-- instance OEIS 255427 where
--   oeisIx = product . nub . (rowT @255313)

-- instance OEIS 255479 where
--   oeisIx = (+ 1) . fromJust. (`elemIndex` (oeis @255582))

-- instance OEIS 255480 where
--   oeis = zipWith gcd (oeis @255582) $ drop 2 (oeis @255582)

-- instance OEIS 255481 where
--   oeis = zipWith gcd (oeis @255582) $ tail (oeis @255582)

-- instance OEIS 255482 where
--   oeisIx n = (oeisIx @64664) n - (oeisIx @255479) n

-- instance OEIS 255507 where
--   oeis = zipWith (-) (tail (oeis @255437)) (oeis @255437)

-- instance OEIS 255508 where
--   oeis = scanl1 (+) (oeis @255437)

-- instance OEIS 255527 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @255437)) . (oeisIx @164514)

instance OEIS 255582 where
  oeis = 1 : 2 : 3 : f 2 3 [4..] where
     f u v ws = y : f v y (delete y ws) where
                y = head [z | z <- ws, let d = gcd u z, d > 1, gcd v z <= d]

-- instance OEIS 255646 where
--   oeisIx = flip mod 10 . (oeisIx @46316)

-- instance OEIS 255678 where
--   oeisIx n = head $ filter ((== n) . (oeisIx @118668)) [0..]

-- instance OEIS 255723 where
--   oeis = 0 : concat (transpose [map (subtract 2) (oeis @255723),
--                                         map (-1 -) (oeis @255723),
--                                         map (+ 2) (oeis @255723),
--                                         tail (oeis @255723)])

-- instance OEIS 255731 where
--   oeis = filter (rhonda 60) $ iterate z 1 where
--      z x = 1 + if r < 59 then x else 60 * z x' where (x', r) = divMod x 60

-- instance OEIS 255732 where
--   oeis = filter (rhonda 20) $ iterate z 1 where
--      z x = 1 + if r < 29 then x else 30 * z x' where (x', r) = divMod x 30

-- instance OEIS 255735 where
--   oeis = filter (rhonda 18) $ iterate z 1 where
--      z x = 1 + if r < 17 then x else 18 * z x' where (x', r) = divMod x 18

-- instance OEIS 255736 where
--   oeis = filter (rhonda 30) $ iterate z 1 where
--      z x = 1 + if r < 29 then x else 30 * z x' where (x', r) = divMod x 30

-- instance OEIS 255805 where
--   oeis = iterate f 1 where
--      f x = 1 + if r < 7 then x else 8 * f x'  where (x', r) = divMod x 8

-- instance OEIS 255808 where
--   oeis = iterate f 1 where
--      f x = 1 + if r < 8 then x else 9 * f x'  where (x', r) = divMod x 9

-- instance OEIS 255833 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @166133))

-- instance OEIS 255872 where
--   oeisIx n = head $ filter (rhonda b) $ iterate zeroless 1 where
--
--               zeroless x = 1 + if r < b - 1 then x else b * zeroless x'
--                            where (x', r) = divMod x b
--               b = (oeisIx @2808) n

-- instance OEIS 255878 where
--   oeis = zipWith (-) (tail (oeis @256188)) (oeis @256188)

-- instance OEIS 255879 where
--   oeis = scanl1 (+) (oeis @256188)

-- instance OEIS 255880 where
--   oeisIx n = (filter (rhonda b) $ iterate zeroless 1) !! (n - 1) where
--
--               zeroless x = 1 + if r < b - 1 then x else b * zeroless x'
--                            where (x', r) = divMod x b
--               b = (oeisIx @2808) n

-- instance OEIS 255940 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @249167))

-- instance OEIS 255972 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @251604))

-- instance OEIS 256012 where
--   oeisIx = p (oeis @13929) where
--      p _      0 = 1
--      p (k:ks) m = if m < k then 0 else p ks (m - k) + p ks m

-- instance OEIS 256015 where
--   oeis = tablList @256015
-- instance Table 256015 where
--   rowCol n k = (tabf @256015) !! (n - 1) !! (k-1)
--   rowT n = (tabf @256015) !! (n - 1)
--   tabf = map (sort . filter ((== 1) . (oeisIx @10051)') . nub .
--                   map sum . tail . subsequences) (tail $ inits (oeis @40))

instance OEIS 256100 where
  oeis = tail $ f (oeis @7376) $ take 10 $ repeat 1 where
     f (d:ds) counts = y : f ds (xs ++ (y + 1) : ys) where
                             (xs, y:ys) = splitAt d counts

-- instance OEIS 256113 where
--   oeis = tablList @256113
-- instance Table 256113 where
--   rowCol n k = (tabf @256113) !! (n - 1) !! (n-1)
--   rowT n = (tabf @256113) !! (n - 1)
--   tabf = map (rowT @27748) $ tail (oeis @1142)

-- instance OEIS 256152 where
--   256152_list = filter f (oeis @6881) where
--      f x = (oeisIx @10052)' ((spf + 1) * (x `div` spf + 1)) == 1
--            where spf = (oeisIx @20639) x

-- instance OEIS 256184 where
--   oeis = 0 : concat (transpose [map (subtract 2) (oeis @256184),
--                                         map (subtract 1) (oeis @256184),
--                                         map negate $ tail (oeis @256184)])

-- instance OEIS 256185 where
--   oeis = 0 : concat (transpose [map (subtract 3) (oeis @256185),
--                                         map (-2 -) (oeis @256185),
--                                         map negate $ tail (oeis @256185)])

-- instance OEIS 256187 where
--   oeis = zipWith (-) (tail (oeis @4718)) (oeis @4718)

-- instance OEIS 256188 where
--   oeis = f 0 [1..] (tabl @2260) where
--      f k xs (zs:zss) = us ++ zs ++ f (k + 1) vs zss
--                        where (us, v:vs) = splitAt k xs

-- instance OEIS 256213 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @254077)) [1..]

-- instance OEIS 256232 where
--   oeisIx n = product $ zipWith f (oeisIx_row n) (oeisIx_row n)
--      where f 2 e = e - 1; f 3 e = 1; f _ e = e + 1

-- instance OEIS 256248 where
--   oeis = filter ((== 1) . (oeisIx @209229) . (oeisIx @55744)) [1..]

-- instance OEIS 256283 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @257905))

-- instance OEIS 256285 where
--   oeisIx n = (oeis @256285) !! (n - 1)
--   oeis = f (tail (oeis @127423)) [] where
--      f (x:xs) ds = y : f xs (insert y ds) where
--                    y = head (oeisIx_row x `minus` ds)

-- instance OEIS 256371 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @256210))

-- instance OEIS 256372 where
--   oeis = [x | x <- [1..], (oeisIx @256210) x == x]

-- instance OEIS 256393 where
--   oeis = 2 : zipWith ($) (cycle [oeisIx, (oeisIx @61228)]) (oeis @256393)

-- instance OEIS 256405 where
--   oeisIx n = (oeis @256405) !! (n - 1)
--   oeis = 2 : 3 : f (3:[5..]) 4 where
--      f zs@ (z:_) x = z : f (delete y zs) y where
--                     y = head $ isect (oeisIx_row' (x ^ 2 - 1)) zs

-- instance OEIS 256406 where
--   oeis = f (oeis @166133) where
--      f (u:vs'@ (v:ws)) | u > v || v /= u ^ 2 - 1 = f vs'
--                       | otherwise               = u : f ws

-- instance OEIS 256414 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @121217)) . (oeisIx @40)

-- instance OEIS 256415 where
--   oeisIx n | (oeisIx @10051) n == 1 = 2 * n
--             | r == 0 && (oeisIx @10051) n' == 1 = 2 * n'
--             | otherwise = n
--             where (n', r) = divMod n 3

-- instance OEIS 256417 where
--   oeisIx = (oeisIx @256415) . (oeisIx @64413)

-- instance OEIS 256419 where
--   oeisIx = (oeisIx @256415) . (oeisIx @121217)

-- instance OEIS 256489 where
--   oeis = zipWith (-) (tail (oeis @257509)) (oeis @257509)

-- instance OEIS 256507 where
--   oeis = tablList @256507
-- instance Table 256507 where
--   rowCol n k = (tabf @256507) !! (n - 1) !! (k-1)
--   rowT n = (tabf @256507) !! (n - 1)
--   tabf = zipWith (\us vs ->
--                          map ((+ 1) . fromJust . (`elemIndex` vs)) us)
--                          (tabf @256946) $ tail (tabf @256946)

instance OEIS 256512 where
  oeisIx n = n * (1 + (2 * n) ^ n)

instance OEIS 256523 where
  oeis = [x | x <- [0..], let i = (oeisIx @30) x,
                      (oeisIx @30) (x ^ 2) == i, (oeisIx @30) (x ^ 3) == i]

-- instance OEIS 256541 where
--   oeis = zipWith (-) (tail (oeis @166133)) (oeis @166133)

-- instance OEIS 256542 where
--   oeisIx = (oeisIx @5) . (oeisIx @166133)

-- instance OEIS 256543 where
--   oeis = [x | x <- [1..], abs (oeisIx x) == 1]

instance OEIS 256556 where
  oeisIx (succ->n) = n * uncurry (^) (divMod n 10)

-- instance OEIS 256561 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @166133)) . (oeisIx @40)

-- instance OEIS 256563 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @166133)) . (oeisIx @1358)

-- instance OEIS 256564 where
--   oeisIx = (oeisIx @20639) . (oeisIx @166133)

-- instance OEIS 256578 where
--   oeisIx = (oeisIx @32742) . (oeisIx @166133)

-- instance OEIS 256607 where
--   oeisIx = (oeisIx @7733) . fi . (oeisIx @7733)

-- instance OEIS 256617 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @256617) !! (n - 1)
--   oeis = f (singleton (6, 2, 3)) $ tail (oeis @40) where
--      f s ps@ (p : ps'@ (p':_))
--        | m < p * p' = m : f (insert (m * q, q, q')
--                             (insert (m * q', q, q') s')) ps
--        | otherwise  = f (insert (p * p', p, p') s) ps'
--        where ((m, q, q'), s') = deleteFindMin s

-- instance OEIS 256618 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @121217))

-- instance OEIS 256628 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @251622))

-- instance OEIS 256673 where
--   oeis = filter odd (oeis @157037)

-- instance OEIS 256703 where
--   oeisIx n = (oeis @256703) !! (n - 1)
--   oeis = map (+ 1) $ findIndices (\ (u, v) -> v == u^2-1) $
--                              zip (oeis @166133) (tail (oeis @166133))

-- instance OEIS 256751 where
--   oeisIx n = (+ 1) $ fromJust $
--               (oeisIx @166133) n `elemIndex` (rowT @27750)' (oeisIx (n - 1) ^ 2 - 1)

-- instance OEIS 256757 where
--   oeisIx n = fst $ until ((== 1) . snd)
--               (\ (i, x) -> (i + 1, fi $ (oeisIx @7733) x)) (0, n)

-- instance OEIS 256758 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex`  (oeis @256757))

-- instance OEIS 256775 where
--   oeis = [x | x <- map (+ 81) (oeis @290), (oeisIx @10051)' x == 1]

-- instance OEIS 256776 where
--   oeis = [x | x <- map (+ 256) (oeis @290), (oeisIx @10051)' x == 1]

-- instance OEIS 256777 where
--   oeis = [x | x <- map (+ 625) (oeis @290), (oeisIx @10051)' x == 1]

-- instance OEIS 256786 where
--   oeis = filter f (oeis @52382) where
--      f x = g x where
--        g z = z == 0 || x `mod` (oeisIx @40) d == 0 && g z'
--              where (z', d) = divMod z 10

-- instance OEIS 256834 where
--   oeis = [x | x <- map (+ 1296) (oeis @290), (oeisIx @10051)' x == 1]

-- instance OEIS 256835 where
--   oeis = [x | x <- map (+ 2401) (oeis @290), (oeisIx @10051)' x == 1]

-- instance OEIS 256836 where
--   oeis = [x | x <- map (+ 4096) (oeis @290), (oeisIx @10051)' x == 1]

-- instance OEIS 256837 where
--   oeis = [x | x <- map (+ 6561) (oeis @290), (oeisIx @10051)' x == 1]

-- instance OEIS 256838 where
--   oeis = [x | x <- map (+ 10000) (oeis @290), (oeisIx @10051)' x == 1]

-- instance OEIS 256839 where
--   oeis = [x | x <- map (+ 14641) (oeis @290), (oeisIx @10051)' x == 1]

-- instance OEIS 256840 where
--   oeis = [x | x <- map (+ 20736) (oeis @290), (oeisIx @10051)' x == 1]

-- instance OEIS 256841 where
--   oeis = [x | x <- map (+ 28561) (oeis @290), (oeisIx @10051)' x == 1]

-- instance OEIS 256852 where
--   oeis = f (oeis @40) [] $ tail (oeis @583) where
--      f ps'@ (p:ps) us vs'@ (v:vs)
--        | p > v     = f ps' (v:us) vs
--        | otherwise = (sum $ map (oeisIx . (p -)) us) : f ps us vs'

-- instance OEIS 256863 where
--   oeis = map (oeisIx @40) $ filter ((== 0) . (oeisIx @256852)) [1..]

-- instance OEIS 256885 where
--   oeisIx n = (oeisIx @217) n - (oeisIx @720) n

-- instance OEIS 256913 where

-- instance OEIS 256914 where
--   oeisIx = last . (rowT @256913)

-- instance OEIS 256915 where
--   oeisIx = genericLength . (rowT @256913)

-- instance OEIS 256918 where
--   oeisIx n = (oeis @257218) !! (n - 1)
--   oeis = zipWith gcd (oeis @257218) $ tail (oeis @257218)

-- instance OEIS 256946 where
--   oeis = tablList @256946
-- instance Table 256946 where
--   rowCol n k = (tabf @256946) !! (n - 1) !! (k-1)
--   rowT n = (tabf @256946) !! (n - 1)
--   tabf = f 0 [] [] where
--      f k us vs = (xs ++ ys) : f (k+1) xs ys where
--        xs = us ++ qs
--        ys = sortBy (compare `on`
--                     snd . properFraction . sqrt . fi) (vs ++ rs)
--        (qs, rs) = span ((== 1) . (oeisIx @10052)') [k* (k+2)+1 .. (k+1)* (k+3)]

-- instance OEIS 256970 where
--   oeisIx = (oeisIx @20639) . (oeisIx @53755)

-- instance OEIS 256971 where
--   oeis = scanl1 (+) (oeis @256970)

-- instance OEIS 257001 where
--   oeisIx n = (oeis @257001) !! (n - 1)
--   oeis = filter f [1..] where
--      f x = h > 0 && mod x h == 0 where h = (oeisIx @30) $ (oeisIx @230959) x

-- instance OEIS 257046 where
--   oeis = filter ((== 1) . (oeisIx @256914)) [0..]

-- instance OEIS 257047 where
--   oeis = filter ((/= 1) . (oeisIx @256914)) [0..]

-- instance OEIS 257053 where
--   oeis = tablList @257053
-- instance Table 257053 where
--   rowCol n k = (tabf @257053) !! (n - 1) !! k
--   rowT n = (tabf @257053) !! (n - 1)
--   tabf = map (oeisIx_row . fi) (oeis @40)

-- instance OEIS 257070 where
--   oeisIx = last . (rowT @257053)

-- instance OEIS 257071 where
--   oeisIx = genericLength . (rowT @257053)

-- instance OEIS 257078 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @248756))

-- instance OEIS 257083 where
--   oeis = scanl1 (+) (oeis @257088)

-- instance OEIS 257088 where
--   oeisIx n = (oeis @257088) !! n
--   oeis = concat $ transpose [oeis, (oeis @5408)]

-- instance OEIS 257111 where
--   oeis = zipWith (-) (tail (oeis @257339)) (oeis @257339)

-- instance OEIS 257120 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @256918))

-- instance OEIS 257122 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @257218))

-- instance OEIS 257143 where
--   oeisIx n = (oeis @257143) !! n
--   oeis = concat $ transpose [oeis, (oeis @5408)]

-- instance OEIS 257145 where
--   oeisIx 0 = 1
--   oeisIx n = div (n + 2) 5 * 5 - n

-- instance OEIS 257173 where
--   oeisIx = fromJust . (`elemIndex` (oeis @248737))

instance OEIS 257212 where
  oeisIx n = head [d | d <- [1..], div n d - div n (d+1) <= 1]

instance OEIS 257213 where
  oeisIx n = head [d | d <- [1..], div n d == div n (d + 1)]

-- instance OEIS 257218 where
--   oeisIx n = (oeis @257218) !! (n - 1)
--   oeis = 1 : f 1 [2..] (oeis @4526) where
--      f x zs cds = g zs where
--        g (y:ys) | cd `member` cds = y : f y (delete y zs) (delete cd cds)
--                 | otherwise       = g ys
--                 where cd = gcd x y

-- instance OEIS 257232 where
--   oeis = tablList @257232
-- instance Table 257232 where
--   rowCol = rowCol_off @257232 @1 @1
--   rowT   = rowT_off   @257232 @1
--   tabl = iterate
--                  (\xs@ (x:_) -> map (+ 1) xs ++ [1 - (oeisIx @10051) (x + 1)]) [1]

-- instance OEIS 257241 where
--   oeis = tablList @257241
-- instance Table 257241 where
--   rowCol n k = (tabf @257241) !! (n - 1) !! (k-1)
--   rowT n = (tabf @257241) !! (n - 1)
--   tabf = iterate stifel [1] where
--      stifel xs@ (x:_) = if odd x then xs' else xs' ++ [last xs']
--                        where xs' = zipWith (+) xs (1 : xs)

-- instance OEIS 257244 where
--   oeis = zipWith gcd (oeis @256393) $ tail (oeis @256393)

-- instance OEIS 257265 where
--   oeisIx = genericLength . us where
--      us n = if (oeisIx @79559) n == 0
--                then [] else () : zipWith (const $ const ())
--                                  (us $ (oeisIx @213723) n) (us $ (oeisIx @213724) n)

-- instance OEIS 257278 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @257278) !! (n - 1)
--   oeis = f (singleton (4, 2)) 27 (tail (oeis @40)) where
--      f s pp ps@ (p:ps'@ (p':_))
--        | qq > pp   = pp : f (insert (pp * p, p) s) (p' ^ p') ps'
--        | otherwise = qq : f (insert (qq * q, q) s') pp ps
--        where ((qq, q), s') = deleteFindMin s

-- instance OEIS 257279 where
--   oeis = filter ((== 1) . (oeisIx @168046)) (oeis @257278)

-- instance OEIS 257455 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @257339))

-- instance OEIS 257456 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @257340))

-- instance OEIS 257457 where
--   oeis = filter ((== 1) . (oeisIx @10051) . (oeisIx @257339)) [1..]

-- instance OEIS 257458 where
--   oeis = filter ((== 1) . (oeisIx @10055) . (oeisIx @257339)) [1..]

-- instance OEIS 257465 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @175498))

-- instance OEIS 257478 where
--   oeisIx n = (oeisIx @257475) n - (oeisIx @257120) n

-- instance OEIS 257502 where
--   oeisIx = fromJust . (`elemIndex` (oeis @78783))

-- instance OEIS 257508 where
--   oeis = filter ((== 1) . (oeisIx @257265)) [0..]

-- instance OEIS 257509 where
--   oeis = filter ((== 2) . (oeisIx @257265)) [0..]

-- instance OEIS 257572 where
--   oeisIx = (oeisIx @20639) . (oeisIx @257278)

-- instance OEIS 257573 where
--   oeisIx = (oeisIx @1222) . (oeisIx @257278)

-- instance OEIS 257585 where
--   oeisIx = flip mod 2 . (oeisIx @254077)

instance OEIS 257588 where
  oeisIx = abs . f 1 where
     f _ 0 = 0
     f s x = s * d ^ 2 + f (negate s) x' where (x', d) = divMod x 10

-- instance OEIS 257641 where
--   oeisIx n = (oeisIx @103284) (2 * n) n

-- instance OEIS 257644 where
--   oeis = scanl (+) 1 (oeis @7503)

-- instance OEIS 257646 where
--   oeisIx n = fromJust $ findIndex (elem n) (tabl @103284)

-- instance OEIS 257719 where
--   oeis = filter f [1..] where
--      f x = sx >= x && (oeisIx @1065) sx < sx where sx = (oeisIx @1065) x

-- instance OEIS 257720 where
--   oeis = filter f [1..] where
--      f x = sx > 0 && sx < x && (oeisIx @1065) sx >= sx where sx = (oeisIx @1065) x

-- instance OEIS 257762 where
--   oeis = map (oeisIx @258432) $ filter ((== 2) . (oeisIx @258383)) [1..]

-- instance OEIS 257770 where
--   oeis = tablList @257770
-- instance Table 257770 where
--   rowCol n k = (tabf @257770) !! n !! k
--   rowT n = filter belge [0..9] where
--      belge k = n == (head $ dropWhile (< n) $
--                     scanl (+) k $ cycle $ (map (read . return) . show) n)
--   tabf = map (rowT @257770) [0..]

-- instance OEIS 257773 where
--   oeisIx = genericLength . (rowT @257770)

-- instance OEIS 257778 where
--   oeisIx = head . (rowT @257770)

-- instance OEIS 257779 where
--   oeisIx = last . (rowT @257770)

-- instance OEIS 257782 where
--   oeis = filter ((> 0) . (oeisIx @257778)) [0..]

-- instance OEIS 257785 where
--   oeis = filter ((== 1) . (oeisIx @257773)) [0..]

-- instance OEIS 257815 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @64364))

-- instance OEIS 257831 where
--   oeisIx = foldr (\b v -> 10 * v + b) 0 .
--              concat . mapMaybe (flip lookup bin) . (rowT @31298)
--               where bin = zip [0..9] (tabf @30308)

-- instance OEIS 257836 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @257836) !! (n - 1)
--   oeis = f $ singleton (15, 3, 5) where
--      f s = y : f (insert (w, u, v') $ insert (w `div` u, u + 2, v') s')
--            where w = y * v'; v' = v + 2
--                  ((y, u, v), s') = deleteFindMin s

-- instance OEIS 257851 where
--   oeis = tablList @257851
-- instance Table 257851 where
--   rowT n = (tabl @257851) !! n
--   tabl = map
--      (\x -> take (x + 1) $ filter ((== x) . (oeisIx @46660)) [1..]) [0..]

-- instance OEIS 257860 where
--   oeisIx n = (oeis @257860) !! (n - 1)
--   oeis = 1 : filter f [1..] where
--      f x = any (\d -> member (x - q + d) $ ps d) $ filter (> 1) $ nub ds
--            where q = sum ds; ds = (map (read . return) . show) x
--      ps x = iterate (* x) (x ^ 2)

-- instance OEIS 257891 where
--   import Data.Set (singleton, deleteFindMin, insert)
--   oeisIx n = (oeis @257891) !! (n - 1)
--   oeis = f $ singleton (30, 2, 5) where
--      f s = y : f (insert (w, p, q') $ insert (w `div` p, (oeisIx @151800) p, q') s')
--            where w = y * q'; q' = (oeisIx @151800) q
--                  ((y, p, q), s') = deleteFindMin s

-- instance OEIS 257892 where
--   oeis = map (oeisIx @258432) $ filter ((== 4) . (oeisIx @258383)) [1..]

-- instance OEIS 257905 where
--   oeisIx n = (oeis @257905) !! (n - 1)
--   oeis = 0 : f [0] [0] where
--      f xs@ (x:_) ds = g [2 - x .. -1] where
--        g [] = y : f (y:xs) (h:ds) where
--                     y = x + h
--                     (h:_) = [z | z <- [1..] \\ ds, x - z `notElem` xs]
--        g (h:hs) | h `notElem` ds && y `notElem` xs = y : f (y:xs) (h:ds)
--                 | otherwise = g hs
--                 where y = x + h

-- instance OEIS 257906 where
--   oeisIx n = (oeis @257906) !! (n - 1)
--   oeis = 0 : f [0] [1] where
--      f xs@ (x:_) ds = g [2 - x .. -1] where
--        g [] = y : f (y:xs) (h:ds) where
--                     y = x + h
--                     (h:_) = [z | z <- [1..] \\ ds, x - z `notElem` xs]
--        g (h:hs) | h `notElem` ds && y `notElem` xs = y : f (y:xs) (h:ds)
--                 | otherwise = g hs
--                 where y = x + h

-- instance OEIS 257907 where
--   oeisIx n = (oeis @257907) !! (n - 1)
--   oeis = 1 : f [0] [1] where
--      f xs@ (x:_) ds = g [2 - x .. -1] where
--        g [] = h : f ((x + h) : xs) (h : ds) where
--                     (h:_) = [z | z <- [1..] \\ ds, x - z `notElem` xs]
--        g (h:hs) | h `notElem` ds && y `notElem` xs = h : f (y:xs) (h:ds)
--                 | otherwise = g hs
--                 where y = x + h

-- instance OEIS 257951 where
--   oeis = map (oeisIx @258432) $ filter ((== 5) . (oeisIx @258383)) [1..]

-- instance OEIS 257956 where
--   oeisIx = sum . (rowT @232642)

-- instance OEIS 257971 where
--   oeis = zipWith (-) (tail (oeis @6921)) (oeis @6921)

-- instance OEIS 257997 where
--   import Data.List.Ordered (unionAll)
--   oeisIx n = (oeis @257997) !! (n - 1)
--   oeis = unionAll [oeis, (oeis @3592), (oeis @3593)]

-- instance OEIS 257998 where
--   oeis = scanl1 (+) (oeis @188967)

-- instance OEIS 257999 where
--   oeis = filter (odd . flip mod 2 . (oeisIx @1222)) (oeis @3586)

-- instance OEIS 258023 where
--   import Data.List.Ordered (union)
--   oeisIx n = (oeis @258023) !! (n - 1)
--   oeis = union (oeis @3586) (oeis @3593)

-- instance OEIS 258032 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . flip div 10. (^ 3)) (oeis @40)

-- instance OEIS 258033 where
--   oeisIx n = (oeis @258033) !! (n - 1)
--   oeis = 0 : f (tail (oeis @22328)) where
--      f xs = (0 : (delete (maximum ys) ys)) ++ f zs
--             where (ys, (_ : zs)) = span (> 0) xs

-- instance OEIS 258051 where
--   oeisIx n = (oeis @258051) !! (n - 1)
--   oeis = f (tail (oeis @258033)) where
--      f xs = (0 : (delete (maximum ys) ys)) ++ f zs
--             where (ys, (_ : zs)) = span (> 0) xs

-- instance OEIS 258057 where
--   oeis = zipWith (-) (tail (oeis @3415)) (oeis @3415)

-- instance OEIS 258059 where
--   oeisIx = f 0 . (rowT @30386) where
--      f i [] = i
--      f i (t:ts) = if t == 1 then f (i + 1) ts else i

-- instance OEIS 258062 where
--   oeisIx n = (oeis @258062) !! (n - 1)
--   oeis = map length $ group (oeis @188967)

-- instance OEIS 258063 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @258062))

instance OEIS 258073 where
  oeisIx = (+ 1) . (* 78557) . (2 ^) . succ

-- instance OEIS 258083 where
--   oeisIx n = (oeis @258083) !! (n - 1)
--   oeis = f 1 $ tail $ zip
--      (oeis @8585) $ map (reverse . show) (oeis @8585) where
--      f x ws = g ws where
--        g ((u, vs) : uvs) = if isPrefixOf xs vs
--                            then u : f (x + 1) (delete (u, vs) ws) else g uvs
--        xs = reverse $ show x

-- instance OEIS 258087 where
--   oeis = f 0 [0] $
--      map (\i -> take (i + 1) (repeat 0) ++ replicate (i + 2) i) [0..] where
--      f i ys@ (y:_) (xs:xss) = (ys !! i) :
--                              f (i + 1) (zipWith (+) (ys ++ repeat 0) xs) xss

-- instance OEIS 258091 where
--   oeisIx = (oeisIx @20639) . (oeisIx @258073)

-- instance OEIS 258095 where
--   oeis = filter
--                  (\x -> (oeisIx @258091) x `notElem` [3, 5, 7, 13, 19, 37, 73]) [1..]

-- instance OEIS 258115 where
--   oeisIx n = (oeisIx @208570) n `div` n

-- instance OEIS 258125 where
--   oeis = 2 : 2 : zipWith (+)
--                  (map (oeisIx @6530) (oeis @258125)) (tail (oeis @258125))

-- instance OEIS 258138 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @99305))

-- instance OEIS 258143 where
--   oeisIx = sum . (rowT @257241)

-- instance OEIS 258144 where
--   oeisIx = sum . zipWith (*) (cycle [1, -1]) . (rowT @257241)

-- instance OEIS 258188 where
--   oeisIx n = (oeis @258188) !! (n - 1)
--   oeis = f 1 $ tail $ zip
--      (oeis @8589) $ map (reverse . show) (oeis @8589) where
--      f x ws = g ws where
--        g ((u, vs) : uvs) = if isPrefixOf xs vs
--                            then u : f (x + 1) (delete (u, vs) ws) else g uvs
--        xs = reverse $ show x

-- instance OEIS 258193 where
--   oeisIx n = head $ (filter ((== 1) . (oeisIx @10051)'') $
--                       scanl1 (<+>) (oeisIx_row n)) ++ [0]
--               where (<+>) = (oeisIx .) . on (+) (oeisIx @265)

-- instance OEIS 258197 where
--   oeis = tablList @258197
-- instance Table 258197 where
--   rowT n = (tabl @258197) !! n
--   tabl = map (map (oeisIx @3415)) (tabl @7318)

-- instance OEIS 258217 where
--   oeisIx n = (oeis @258217) !! (n - 1)
--   oeis = f 1 $ tail $ zip (oeis @8589) $ map show (oeis @8589) where
--      f x ws = g ws where
--        g ((u, vs) : uvs) = if isPrefixOf (show x) vs
--                            then u : f (x + 1) (delete (u, vs) ws) else g uvs

-- instance OEIS 258225 where
--   oeisIx = flip div 3 . (oeisIx @258083)

-- instance OEIS 258226 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @258225))

-- instance OEIS 258227 where
--   oeis = f 12 1 (map fi $ tail (oeis @7376)) where
--      f x y (d:ds) | gcd x y > 1 = y : f y d ds
--                   | otherwise   = f x (10 * y + d) ds

-- instance OEIS 258262 where
--   oeis = filter ((== 1) . (oeisIx @10057)) (oeis @258865)

-- instance OEIS 258290 where
--   oeisIx = (oeisIx @3415) . (oeisIx @984)

-- instance OEIS 258317 where
--   oeisIx = sum . (rowT @258197)

-- instance OEIS 258318 where
--   import Data.Set (singleton, insert, size)
--   oeisIx n = (oeis @258318) !! n
--   oeis = f 2 (tabl @258197) $ singleton 0 where
--      f k (xs:xss) zs = g (take (div k 2) xs) zs where
--        g []     ys = size ys : f (k + 1) xss ys
--        g (x:xs) ys = g xs (insert x ys)

-- instance OEIS 258324 where
--   oeisIx n = foldl lcm 1 $ map (n -) $ (rowT @27751) n

-- instance OEIS 258329 where
--   oeisIx = flip div 7 . (oeisIx @258188)

-- instance OEIS 258330 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @258329))

-- instance OEIS 258334 where
--   oeisIx = flip div 7 . (oeisIx @258217)

-- instance OEIS 258335 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @258334))

-- instance OEIS 258337 where
--   oeisIx n = (oeis @258337) !! (n - 1)
--   oeis = f 1 $ map show (oeis @40) where
--      f x pss = g pss where
--        g (qs:qss) = if show x `isPrefixOf` qs
--                        then (read qs :: Int) : f (x + 1) (delete qs pss)
--                        else g qss

-- instance OEIS 258353 where
--   oeis = filter ((== 1) . (oeisIx @212306)) [1..]

-- instance OEIS 258354 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @212306))

-- instance OEIS 258383 where
--   oeisIx n = (oeis @258383) !! (n - 1)
--   oeis = map length $ group (oeis @62234)

-- instance OEIS 258409 where
--   oeisIx n = foldl1 gcd $ map (subtract 1) $ tail $ (rowT @27750)' n

-- instance OEIS 258432 where
--   oeisIx n = (oeis @258432) !! (n - 1)
--   oeis = map (snd . head) $
--                       groupBy ((==) `on` fst) $ zip (oeis @62234) [1..]

-- instance OEIS 258437 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @258383))

-- instance OEIS 258449 where
--   oeis = map (oeisIx @258432) $ filter ((== 3) . (oeisIx @258383)) [1..]

-- instance OEIS 258469 where
--   oeis = map (oeisIx @258432) $ filter ((== 1) . (oeisIx @258383)) [1..]

-- instance OEIS 258565 where
--   oeisIx = (oeisIx @3415) . (oeisIx @1694)

-- instance OEIS 258567 where
--   oeisIx = (oeisIx @20639) . (oeisIx @1694)

-- instance OEIS 258568 where
--   oeisIx = (oeisIx @20639) . (oeisIx @36966)

-- instance OEIS 258569 where
--   oeisIx = (oeisIx @20639) . (oeisIx @36967)

-- instance OEIS 258570 where
--   oeisIx = (oeisIx @20639) . (oeisIx @69492)

-- instance OEIS 258571 where
--   oeisIx = (oeisIx @20639) . (oeisIx @69493)

-- instance OEIS 258599 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @258567)) . (oeisIx @40)

-- instance OEIS 258600 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @258568)) . (oeisIx @40)

-- instance OEIS 258601 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @258569)) . (oeisIx @40)

-- instance OEIS 258602 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @258570)) . (oeisIx @40)

-- instance OEIS 258603 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @258571)) . (oeisIx @40)

-- instance OEIS 258613 where
--   oeis = filter ((== 1) . (oeisIx @74695)) [1..]

-- instance OEIS 258614 where
--   oeis = filter ((> 1) . (oeisIx @74695)) [1..]

-- instance OEIS 258682 where
--   oeisIx n = read ('0' : minus (show (n ^ 2)) (show n)) :: Int  where
--      minus [] _  = []
--      minus us [] = us
--      minus (u:us) vs | elem u vs = minus us $ delete u vs
--                      | otherwise = u : minus us vs

instance OEIS 258703 where
  oeisIx = floor . (/ 2) . subtract 1 . (* sqrt 2) . fi

-- instance OEIS 258706 where
--   oeisIx n = (oeis @258706) !! (n - 1)
--   oeis = f (oeis @40) where
--      f ps'@ (p:ps) | any (== 0) (map (oeisIx @10051)' dps) = f ps
--                   | otherwise = p : f (ps' \\ dps)
--                   where dps = map read $ permutations $ show p

-- instance OEIS 258708 where
--   oeis = tablList @258708
-- instance Table 258708 where
--   rowCol = rowCol_off @258708 @1 @0
--   rowT   = rowT_off   @258708 @1
--   tabl = zipWith (zipWith ((round .) . ((/) `on` fi)))
--                          (tabl @258993) (tabl @158405)

instance OEIS 258721 where
  oeisIx n = 4 * n * (6 * n + 13) + 29

-- instance OEIS 258738 where
--   oeis = f [1..] where
--      f (x:xs) = if show x `elem` zipWith (++) kss (map show $ (rowT @27750)' x)
--                    then x : f xs else f xs
--      kss = map show [1..]

-- instance OEIS 258765 where
--   oeisIx = fromJust . (`elemIndex` (map abs (oeis @258057)))

-- instance OEIS 258767 where
--   oeisIx n = (oeis @258767) !! (n - 1)
--   oeis = 1 : f 1 [2..] where
--      f x zs = g zs where
--        g (y:ys) | (oeisIx @8966) (x^2 + y^2) == 1 = g ys
--                 | otherwise = y : f y (delete y zs)

-- instance OEIS 258768 where
--   oeis = [x | x <- [1..], (oeisIx @258767) x == x]

-- instance OEIS 258827 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @258767))

-- instance OEIS 258865 where
--   import Data.Set (singleton, deleteFindMin, fromList)
--   import qualified Data.Set as Set (union)
--   import qualified Data.List.Ordered as List (union)
--   oeisIx n = (oeis @258865) !! (n - 1)
--   oeis = tail $ f (singleton 1) 1 [] [] (oeis @30078) where
--      f s z vs qcs pcs'@ (pc:pcs)
--        | m < z = m : f s' z vs qcs pcs'
--        | otherwise = f (Set.union s $ fromList $ map (+ pc) ws)
--                        pc ws (pc:qcs) pcs
--        where ws = List.union vs $ map (+ pc) (pc : qcs)
--              (m, s') = deleteFindMin s

-- instance OEIS 258993 where
--   oeis = tablList @258993
-- instance Table 258993 where
--   rowCol = rowCol_off @258993 @1 @0
--   rowT   = rowT_off   @258993 @1
--   tabl = zipWith (zipWith (oeisIx @7318)) (tabl @94727) (tabl @4736)

instance OEIS 259022 where
  oeis = cycle [1, -1, -1, 1, 0, -1, 1, 1, -1]

-- instance OEIS 259024 where
--   oeisIx n = (oeis @259024) !! (n - 1)
--   oeis = concat
--                  (transpose [drop 2 cs, [0, 0 ..], drop 7 cs, (oeis @259024)])
--                  where cs = map negate (oeis @259022)

-- instance OEIS 259029 where
--   oeis = scanl1 (+) (oeis @259024)

-- instance OEIS 259031 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (map abs (oeis @259029)))

-- instance OEIS 259043 where
--   oeisIx x = if x < 10 then x else (oeisIx @259043) (x' + d) + d
--               where (x', d) = divMod x 10

-- instance OEIS 259046 where
--   oeisIx = fromJust . (`elemIndex` (map (oeisIx @259043) [0..]))

-- instance OEIS 259143 where
--   oeisIx n = (oeis @259143) !! (n - 1)
--   oeis = [length $ nub $ show m ++ show d |
--                   m <- [1 .. 12], d <- [1 .. (oeisIx @8685) m]]

-- instance OEIS 259260 where
--   oeisIx n = (oeis @259260) !! (n - 1)
--   oeis = 1 : f 1 [3, 5 ..] where
--      f x zs = g zs where
--        g (y:ys) = if (oeisIx @10052) ((x + y) `div` 2) == 1
--                      then y : f y (delete y zs) else g ys

-- instance OEIS 259315 where
--   oeis = filter ((== 0) . (oeisIx @10051)') (oeis @52382)

-- instance OEIS 259361 where
--   oeisIx = floor . subtract (1 / 2) . sqrt . (+ 1 / 4) . fi
--   oeis = concat xss where
--      xss = iterate (\ (xs@ (x:_)) -> map (+ 1) (x : x : xs)) [0, 0]

-- instance OEIS 259366 where
--   oeis = filter (\x -> (oeisIx @60682) x < (oeisIx @5)' x - 1) [2..]

-- instance OEIS 259429 where
--   oeisIx n = (oeis @259429) !! (n - 1)
--   oeis = 1 : f 1 [3, 5 ..] where
--      f x zs = g zs where
--        g (y:ys) = if (oeisIx @10057) ((x + y) `div` 2) == 1
--                      then y : f y (delete y zs) else g ys

-- instance OEIS 259431 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @183209))

instance OEIS 259525 where
  oeis = zipWith (-) (tail pascal) pascal
    where pascal = concat (tabl @7318)

-- instance OEIS 259526 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @259260)) . subtract 1 . (* 2)

-- instance OEIS 259537 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @259429)) . subtract 1 . (* 2)

-- instance OEIS 259542 where
--   oeisIx n = (oeis @259542) !! (n - 1)
--   oeis = 1 : f 1 [3, 5 ..] where
--      f x zs = g zs where
--        g (y:ys) = if (oeisIx @10054) ((x + y) `div` 2) == 1
--                      then y : f y (delete y zs) else g ys

-- instance OEIS 259543 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @259542)) . subtract 1 . (* 2)

-- instance OEIS 259565 where
--   oeis = 1 : f 1 [3, 5 ..] where
--      f x zs = g zs where
--        g (y:ys) = if (oeisIx @8966) ((x + y) `div` 2) == 1
--                      then y : f y (delete y zs) else g ys

-- instance OEIS 259570 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @259565)) . subtract 1 . (* 2)

-- instance OEIS 259602 where
--   oeis = zipWith ((flip div 2 .) . (+))
--                          (oeis @259260) $ tail (oeis @259260)

-- instance OEIS 259603 where
--   oeis = zipWith ((flip div 2 .) . (+))
--                          (oeis @259429) $ tail (oeis @259429)

-- instance OEIS 259604 where
--   oeis = zipWith ((flip div 2 .) . (+))
--                          (oeis @259542) $ tail (oeis @259542)

-- instance OEIS 259605 where
--   oeis = zipWith ((flip div 2 .) . (+))
--                          (oeis @259565) $ tail (oeis @259565)

-- instance OEIS 259644 where
--   oeisIx n = (oeis @259644) !! n
--   oeis = map numerator $
--                  scanl1 (+) $ map (recip . fi) (oeis @112373)

-- instance OEIS 259645 where
--   import Data.List.Ordered (isect)
--   oeisIx n = (oeis @259645) !! (n - 1)
--   oeis = (oeis @5574) `isect` (oeis @87370) `isect` (oeis @56561)

-- instance OEIS 259730 where
--   import Data.List.Ordered (isect)
--   oeisIx n = (oeis @259730) !! (n - 1)
--   oeis = (oeis @63908) `isect` (oeis @88878)

-- instance OEIS 259758 where
--   oeisIx n = (2 * p - 3) * (3 * p - 2)  where p = (oeisIx @259730) n

-- instance OEIS 259823 where
--   oeis = scanl (+) 0 (oeis @3586)

-- instance OEIS 259966 where
--   oeis = 0 : 0 : 2 : 7 : zipWith (+)
--      (zipWith3 (((+) .) . (+))
--                (oeis @259966) (drop 2 (oeis @259966)) (drop 3 (oeis @259966)))
--      (drop 2 $ zipWith (+)
--                (map (* 2) $ drop 2 (oeis @5251)) (map (* 3) (oeis @5251)))

-- instance OEIS 259967 where
--   oeis = 3 : 2 : 2 : 5 : zipWith3 (((+) .) . (+))
--      (oeis @259967) (drop 2 (oeis @259967)) (drop 3 (oeis @259967))

-- instance OEIS 259968 where
--   oeis = 1 : 1 : 3 : 6 : zipWith3 (((+) .) . (+))
--      (oeis @259968) (drop 2 (oeis @259968)) (drop 3 (oeis @259968))

-- instance OEIS 259969 where
--   oeisIx n = (oeis @259967) !! n
--   oeis = 3 : 2 : 2 : 5 : zipWith3 (((+) .) . (+))
--      (oeis @259967) (drop 2 (oeis @259967)) (drop 3 (oeis @259967))

-- instance OEIS 260020 where
--   oeis = filter
--                  (\x -> 2 * (oeisIx @10)' x == (oeisIx @10)' (2 * (oeisIx @203)' x)) [1..]

-- instance OEIS 260022 where
--   oeisIx = (oeisIx @6921) . (* 2)

-- instance OEIS 260031 where
--   import Math.NumberTheory.Moduli (powerMod)
--   oeisIx n = if x > 0 then x else f $ div (n ^ n) 12
--             where x = powerMod n n 12
--                   f z = if m == 0 then f z' else m
--                         where (z', m) = divMod z 12

instance OEIS 260112 where
  oeisIx n = b n 0
    where
      c i = if i `mod` 4 == 0 then i `div` 4 else i - 1
      b 0 foldCount = foldCount
      b sheetCount foldCount = b (c sheetCount) (foldCount + 1)

instance OEIS 260194 where
  oeis = 1 : 1 : 1 : f 1 1 1 where
     f u v v' = w : f w u v where w = u + gcd u (u + v')

-- instance OEIS 260254 where
--   oeisIx n = sum $ map (oeisIx . (n -)) $
--                  takeWhile (<= n `div` 2) (oeis @2113)

-- instance OEIS 260255 where
--   oeis = filter ((> 0) . (oeisIx @260254)) [0..]

-- instance OEIS 260273 where
--   oeis = iterate (\x -> x + (oeisIx @261461) x) 1

instance OEIS 260416 where
  oeis = f 1 (oeis @40) where
     f x (p:ps) = g ps where
         g (q:qs) = if (q - x) `mod` p == 0 then q : f (x + 1) ps else g qs

-- instance OEIS 260485 where
--   oeisIx = head . (rowT @260580)

-- instance OEIS 260580 where
--   import Data.List.Ordered (union); import Data.List ((\\))
--   oeisIx n k = (tabf @260580) !! (n - 1) !! (k-1)
--   oeisIx_row n = (tabf @260580) !! (n - 1)
--   oeisIx_tabf = zipWith (\\) (tail zss) zss where
--                               zss = scanl union [] (tabl @65305)

-- instance OEIS 260633 where

-- instance OEIS 260664 where
--   oeisIx = sum . zipWith (*) (oeis @87960) . map (oeisIx @133042) . (rowT @260672)

-- instance OEIS 260669 where
--   oeisIx = flip div 2 . (oeisIx @54440)

-- instance OEIS 260672 where
--   oeis = tablList @260672
-- instance Table 260672 where
--   rowCol n k = (tabf @260672) !! n !! k
--   rowT n = (tabf @260672) !! n
--   tabf = map (takeWhile (>= 0) . flip map (oeis @1318) . (-)) [0..]

-- instance OEIS 260682 where
--   oeis = filter ((== 1) . flip mod 6) (oeis @3136)

-- instance OEIS 260689 where
--   oeis = tablList @260689
-- instance Table 260689 where
--   rowCol n k = (tabf @260689) !! (n - 2) !! (k-1)
--   rowT n = [m | m <- [1, 3 .. 2 * n - 3],
--                        (oeisIx @10051)' (2*n + m) == 1, (oeisIx @10051)' (2*n - m) == 1]
--   tabf = map (rowT @260689) [2..]

-- instance OEIS 260706 where
--   oeisIx = sum . (rowT @260672)

-- instance OEIS 260797 where
--   oeisIx = (oeisIx @98743) . (oeisIx @142)

-- instance OEIS 260798 where
--   import Data.MemoCombinators (memo2, integral)
--   oeisIx n = (oeis @260798) !! (n - 1)
--   oeis = map (subtract 1 . pMemo 2) (oeis @40) where
--      pMemo = memo2 integral integral p
--      p _ 0 = 1
--      p k m | m < k     = 0
--            | otherwise = pMemo k (m - k) + pMemo (k + 1) m

-- instance OEIS 260822 where
--   oeisIx n = (oeis @260822) !! (n - 1)
--   oeis = f 1 [1..] where
--      f x zs = g zs where
--        g (y:ys) = if y /= x && (oeisIx @10051)' (x + y) == 0
--                      then y : f (x + 1) (delete y zs) else g ys

-- instance OEIS 260895 where
--   oeisIx = sum . map (oeisIx @10051)' . (rowT @77664)

-- instance OEIS 260910 where
--   oeis = tablList @260910
-- instance Table 260910 where
--   rowCol = rowCol_off @260910 @1 @1
--   rowT   = rowT_off   @260910 @1
--   tabl = zipWith (map . sylvester) [1..] (tabl @77664) where
--      sylvester u v = u * v - u - v

-- instance OEIS 260933 where
--   oeisIx n = (oeis @260933) !! (n - 1)
--   oeis = f 1 [1..] where
--      f x zs = g zs where
--        g (y:ys) = if (oeisIx @10051)' (x + y) == 0 && (oeisIx @10051)' (x + y + 1) == 0
--                      then y : f (x + 1) (delete y zs) else g ys

-- instance OEIS 260936 where
--   oeis = [x | x <- [1..], (oeisIx @260933) x == x]

-- instance OEIS 260987 where
--   (oeis, (oeis @260633)) = unzip $ f 1 0 where
--      f x r = if y > r then (y, x) : f (x + 1) y else f (x + 1) r
--              where y = (oeisIx @8480) x

-- instance OEIS 261009 where
--   oeisIx = (oeisIx @53735) . (oeisIx @79)

-- instance OEIS 261012 where
--   oeisIx = signum
--   oeis = -1 : 0 : [1, 1 ..]

-- instance OEIS 261016 where
--   oeisIx = sum . zipWith (*) [0..] . (rowT @261019)'

-- instance OEIS 261017 where
--   oeisIx = subtract 1 . length . (rowT @261019)

-- instance OEIS 261018 where
--   oeis = zipWith (-) (tail (oeis @260273)) (oeis @260273)

-- instance OEIS 261019 where
--   oeis = tablList @261019
-- instance Table 261019 where
--   rowCol n k = (tabf @261019) !! (n - 1) !! k
--   rowT n = (tabf @261019) !! (n - 1)
--   tabf = map (i 0 . group . sort . map f) (tabf @76478)
--      where f bs = g (tabf @30308) where
--              g (cs:css) | isInfixOf cs bs = g css
--                         | otherwise = foldr (\d v -> 2 * v + d) 0 cs
--            i _ [] = []
--            i r gss'@ (gs:gss) | head gs == r = (length gs) : i (r + 1) gss
--                              | otherwise    = 0 : i (r + 1) gss'

-- instance OEIS 261036 where
--   import Data.MemoCombinators (memo2, integral, Memo)
--   oeisIx n k = (tabf @261036) !! (n - 1) !! (k-1)
--   oeisIx_row n = (tabf @261036) !! (n - 1)
--   oeisIx_tabf = zipWith (map . flip dMemo) [1..] (tabf @122197) where
--      dMemo = memo2 integral integral d
--      d 0 _ = 0
--      d _ 0 = 0
--      d 1 _ = 1
--      d k n | n <= 2 * k - 2 = 0
--            | n <= 3 * k - 2 = dMemo (k - 1) (n - 1)
--            | otherwise      = dMemo (k - 1) (n - 1) + dMemo k (n - k)

-- instance OEIS 261089 where
--   oeisIx = fromJust . (`elemIndex` (oeis @155043))

-- instance OEIS 261121 where
--   oeisIx = (oeisIx @98743) . (oeisIx @2110)

-- instance OEIS 261189 where
--   import Data.List.Ordered (isect)
--   oeisIx n = (oeis @261189) !! (n - 1)
--   oeis = (oeis @52382) `isect` (oeis @52413)

-- instance OEIS 261255 where
--   oeisIx n = fromJust (findIndex (== (oeisIx @7335) n) (oeis @3586)) + 1

-- instance OEIS 261256 where
--   oeisIx n = (oeisIx @257851) n (n - 1)

-- instance OEIS 261279 where
--   oeis = [x | x <- [0..], (oeisIx @65649) x == x]

-- instance OEIS 261293 where
--   oeisIx = (oeisIx @65649) . (oeisIx @65649)

-- instance OEIS 261294 where
--   oeisIx = (oeisIx @65650) . (oeisIx @65650)

-- instance OEIS 261301 where
--   oeis = 1 : map abs
--      (zipWith (-) (oeis @261301) (zipWith gcd [1..] (oeis @261301)))

-- instance OEIS 261333 where
--   oeis = zipWith (+) (map ((* 10) . subtract 1) (oeis @256100)) (oeis @7376)

-- instance OEIS 261334 where
--   oeisIx = fromJust . (`elemIndex` (oeis @261333))

-- instance OEIS 261335 where
--   oeis = [x | x <- [0..], (oeisIx @261333) x == x]

-- instance OEIS 261351 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @84385))

-- instance OEIS 261363 where
--   oeis = tablList @261363
-- instance Table 261363 where
--   rowT n = (tabl @261363) !! n
--   tabl = map (scanl1 (+)) (tabl @47999)

-- instance OEIS 261366 where
--   oeisIx = sum . map ((1 -) . flip mod 2) . (rowT @261363)

-- instance OEIS 261392 where
--   oeisIx = maximum . (rowT @261019)

-- instance OEIS 261396 where
--   oeis = f 1 1 (oeis @260273) where
--      f z k (x:xs) | x >= z    = k : f (2 * z) (k + 1) xs
--                   | otherwise = f z (k + 1) xs

-- instance OEIS 261423 where
--   oeis = tail (oeis @261914)

-- instance OEIS 261441 where
--   oeisIx 0 = 0
--   oeisIx n = (oeisIx @261019)' (n + 3) 5

-- instance OEIS 261442 where
--   oeisIx n = (oeisIx @261019)' (n + 6) 6

-- instance OEIS 261443 where
--   oeisIx n = (oeisIx @261019)' (n + 5) 7

-- instance OEIS 261461 where
--   oeisIx x = f $ tail (tabf @30308) where
--      f (cs:css) = if isInfixOf cs (oeisIx_row x)
--                      then f css else foldr (\d v -> 2 * v + d) 0 cs

-- instance OEIS 261466 where
--   (oeis, (oeis @261467)) = unzip $ (0, 1) : f 0 1 where
--      f i x | y > x     = (y, i) : f (i + 1) y
--            | otherwise = f (i + 1) x
--            where y = (oeisIx @261461) i

-- instance OEIS 261467 where

instance OEIS 261470 where
  oeis = zipWith (-) (drop 2 (oeis @1223)) (oeis @1223)

-- instance OEIS 261518 where
--   oeis = 1 : zipWith (-)
--                  (map (oeisIx @40) (zipWith (+) (oeis @261518) [1..])) (oeis @40) [1]

-- instance OEIS 261525 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @31131)) . (* 2)

-- instance OEIS 261575 where
--   oeis = tablList @261575
-- instance Table 261575 where
--   rowCol n k = (tabf @261575) !! n !! k
--   rowT n = (tabf @261575) !! n
--   tabf = [0] : [1] :
--      zipWith (add 0) (tail (tabf @261575)) (tabf @261575) where
--      add c (a:as) (b:bs) = y : add c' as bs where (c', y) = divMod (a+b+c) 60
--      add c (a:as) [] = y : add c' as [] where (c', y) = divMod (a+c) 60
--      add 1 _ _ = [1]
--      add _ _ _ = []

-- instance OEIS 261585 where
--   oeisIx = genericLength . (rowT @261575)

-- instance OEIS 261587 where
--   oeisIx = sum . (rowT @261575)

-- instance OEIS 261598 where
--   oeisIx = product . (rowT @261575)

-- instance OEIS 261606 where
--   oeis = 0 : 1 : map (flip mod 60)
--                              (zipWith (+) (oeis @261606) $ tail (oeis @261606))

-- instance OEIS 261607 where
--   oeisIx = last . (rowT @261575)

-- instance OEIS 261644 where
--   oeis = zipWith (-)
--                  (map (oeisIx @62383) (oeis @260273)) $ map fi (oeis @260273)
--   oeisIx_tabf = [1] : f (tail $ zip (oeis @261645) (oeis @261644)) where
--      f dxs = (map snd (dxs'' ++ [dx])) : f dxs' where
--        (dxs'', dx:dxs') = span ((<= 0) . fst) dxs
--   oeisIx_row n = (tabf @261644) !! (n - 1)

-- instance OEIS 261645 where
--   oeis = zipWith (-) (tail (oeis @261644)) (oeis @261644)

-- instance OEIS 261646 where
--   oeisIx = genericLength . (rowT @261644)

-- instance OEIS 261712 where
--   oeis = tablList @261712
-- instance Table 261712 where
--   rowCol n k = (tabf @261712) !! (n - 1) !! (k-1)
--   rowT n = (tabf @261712) !! (n - 1)
--   tabf = map reverse (tabf @261644)

-- instance OEIS 261723 where
--   oeis = concat $ transpose [tail (oeis @52548), tail (oeis @51)]

-- instance OEIS 261727 where
--   oeis = map (length . takeWhile (== 0)) $
--                      zipWith (zipWith (-)) (tabf @261712) $ tail (tabf @261712)

-- instance OEIS 261786 where
--   oeis = iterate (\x -> x + (oeisIx @261787) x) 1

-- instance OEIS 261787 where
--   oeisIx x = f $ tail (tabf @30341) where
--      f (cs:css) = if isInfixOf cs (oeisIx_row x)
--                      then f css else foldr (\d v -> 3 * v + d) 0 cs

-- instance OEIS 261788 where
--   oeis = f 1 1 (oeis @261786)' where
--      f z k (x:xs) | x >= z    = k : f (3 * z) (k + 1) xs
--                   | otherwise = f z (k + 1) xs

-- instance OEIS 261789 where
--   oeis = zipWith (-) (tail (oeis @261786)') (oeis @261786)'

-- instance OEIS 261793 where
--   oeis = iterate (\x -> x + (oeisIx @261794) x) 1

-- instance OEIS 261794 where
--   oeisIx x = f $ tail (tabf @31298) where
--      f (cs:css) = if isInfixOf cs (oeisIx_row x)
--                      then f css else foldr (\d v -> 10 * v + d) 0 cs

-- instance OEIS 261795 where
--   oeis = zipWith (-) (tail (oeis @261793)') (oeis @261793)'

-- instance OEIS 261869 where
--   oeisIx n = genericIndex (oeis @261869) (n - 1)
--   oeis = zipWith (-) (tail (oeis @55615)) (oeis @55615)

-- instance OEIS 261890 where
--   oeisIx n = genericIndex (oeis @261890) (n - 1)
--   oeis = zipWith (-) (tail (oeis @261869)) (oeis @261869)

-- instance OEIS 261893 where
--   oeisIx n = n * (n * (n + 2) + 3) + 1
--   oeis = zipWith (-) (tail (oeis @578)) (oeis @290)

-- instance OEIS 261897 where
--   oeis = tablList @261897
-- instance Table 261897 where
--   rowCol n k = (tabl @261897) !! n !! (k-1)
--   rowT n = (tabl @261897) !! n
--   tabl = [1] : f 1 0 [1] where
--      f t h xs | t <= (h + 1) ^ 2  = ys : f (t + 1) h ys
--               | otherwise         = ys' : f (t + 1) (h + 1) ys'
--               where ys = zipWith (+) ([0] ++ xs) (xs ++ [0])
--                     ys' = zipWith (+) ([0] ++ xs) (us ++ (0:vs) ++ [0])
--                     (us, _:vs) = splitAt h xs

-- instance OEIS 261914 where
--   oeis = f 0 (oeis @2113) where
--      f n ps@ (p:ps'@ (p':_)) = p : f (n + 1) (if n < p' then ps else ps')

-- instance OEIS 261922 where
--   oeisIx x = f (tabf @30308) where
--      f (cs:css) = if isInfixOf cs (oeisIx_row x)
--                      then f css else foldr (\d v -> 2 * v + d) 0 cs

-- instance OEIS 261923 where
--   oeisIx n = fst $ until ((== 0) . snd)
--                           (\ (step, x) -> (step + 1, (oeisIx @261922) x)) (0, n)

-- instance OEIS 261930 where
--   oeisIx = sum . (rowT @261897)

-- instance OEIS 261969 where
--   oeisIx n = product $ map fst $ filter ((== emax) . snd) $ zip ps es
--       where emax = maximum es
--             ps = (rowT @27748) n; es = (rowT @124010) n

-- instance OEIS 262038 where
--   oeis = f 0 (oeis @2113) where
--      f n ps'@ (p:ps) = p : f (n + 1) (if p > n then ps' else ps)

-- instance OEIS 262065 where
--   import Data.List.Ordered (union)
--   oeisIx n = (oeis @262065) !! (n - 1)
--   oeis = union us vs where
--      us = [val60 $ bs ++ reverse bs | bs <- bss]
--      vs = [0..59] ++ [val60 $ bs ++ cs ++ reverse bs |
--             bs <- tail bss, cs <- take 60 bss]
--      bss = iterate s [0] where
--            s [] = [1]; s (59:ds) = 0 : s ds; s (d:ds) = (d + 1) : ds
--      val60 = foldr (\b v -> 60 * v + b) 0

-- instance OEIS 262069 where
--   -- import Data.List.Ordered (isect)
--   oeisIx n = (oeis @262069) !! (n - 1)
--   oeis = isect (oeis @2113) (oeis @262065)

-- instance OEIS 262079 where
--   oeis = zipWith (-) (tail (oeis @262065)) (oeis @262065)

-- instance OEIS 262095 where
--   oeisIx = sum . map ((1 -) . (oeisIx @64911)) . (rowT @27750)

-- instance OEIS 262138 where
--   oeisIx n = (oeis @262138) !! (n - 1)
--   oeis = concat $ transpose [oeis, (oeis @36263)]

-- instance OEIS 262188 where
--   oeis = tablList @262188
-- instance Table 262188 where
--   rowCol n k = (tabf @262188) !! n !! k
--   rowT n = (tabf @262188) !! n
--   tabf = map (sort . nub . map (foldr (\d v -> 10 * v + d) 0) .
--      filter (\xs -> length xs == 1 || last xs > 0 && reverse xs == xs) .
--             concatMap (tail . inits) . tails) (tabf @31298)

-- instance OEIS 262198 where
--   oeis = [x | x <- [0..], (oeisIx @55642) x /= (oeisIx @262190) x]

-- instance OEIS 262223 where
--   oeisIx n = n + (oeisIx @47813) n

-- instance OEIS 262224 where
--   oeisIx' n = (oeis @262224)' !! n
--   oeis' = iterate (oeisIx @262223) 1

-- instance OEIS 262243 where
--   oeis = zipWith (-) (tail (oeis @262224)) (oeis @262224)

-- instance OEIS 262255 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @262323))

-- instance OEIS 262257 where
--   oeisIx n = genericIndex (oeis @262257) n
--   oeis = zipWith (levenshtein `on` show) [0..] (oeis @261423) where
--      levenshtein us vs = last $ foldl transform [0..length us] vs where
--        transform xs@ (x:xs') c = scanl compute (x+1) (zip3 us xs xs') where
--          compute z (c', x, y) = minimum [y+1, z+1, x + fromEnum (c' /= c)]

-- instance OEIS 262277 where
--   oeisIx n = (oeis @262277) !! (n - 1)
--   oeis = filter f [1..] where
--      f x = sort ds' == sort (map (9 -) ds') where
--        ds' = nub $ ds x
--        ds 0 = []; ds z = d : ds z' where (z', d) = divMod z 10

-- instance OEIS 262279 where
--   oeisIx = fromJust . (`elemIndex` (oeis @261923))

-- instance OEIS 262282 where
--   oeisIx n = (oeis @262282) !! (n - 1)
--   oeis = 11 : f "1" (map show (delete 11 (oeis @40))) where
--      f xs pss = (read ys :: Integer) :
--                 f (dropWhile (== '0') ys') (delete ys pss)
--                 where ys@ (_:ys') = head $ filter (isPrefixOf xs) pss

-- instance OEIS 262283 where
--   oeisIx n = (oeis @262283) !! (n - 1)
--   oeis = 2 : f "" (map show $ tail (oeis @40)) where
--      f xs pss = (read ys :: Integer) :
--                 f (dropWhile (== '0') ys') (delete ys pss)
--                 where ys@ (_:ys') = head $ filter (isPrefixOf xs) pss

-- instance OEIS 262323 where
--   oeisIx n = (oeis @262323) !! (n - 1)
--   oeis = 1 : f "1" (map show [2..]) where
--      f xs zss = g zss where
--        g (ys:yss) | null (intersect its $ tail $ inits ys) &&
--                     null (intersect tis $ init $ tails ys) = g yss
--                   | otherwise = (read ys :: Int) : f ys (delete ys zss)
--        its = init $ tails xs; tis = tail $ inits xs

-- instance OEIS 262356 where
--   import Data.Set (singleton, notMember, insert)
--   oeisIx n = (oeis @262356) !! (n - 1)
--   oeis = 1 : f "" (singleton "1") where
--      f xs s = (read ys :: Int) : f (dropWhile (== '0') ys') (insert ys s)
--        where ys@ (_:ys') = head
--                [vs | vs <- zss, isPrefixOf xs vs, notMember vs s]
--      zss = map show [2..]

-- instance OEIS 262358 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @262356))

-- instance OEIS 262360 where
--   oeis = [x | x <- [1..], (oeisIx @262356) x == x]

-- instance OEIS 262363 where
--   oeis = filter ((== 1) . (oeisIx @10051)') (oeis @262356)

-- instance OEIS 262367 where
--   oeis = [x | x <- [1..], (oeisIx @262323) x == x]

-- instance OEIS 262371 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @262356)) [1..]

-- instance OEIS 262377 where
--   oeis = filter ((== 1) . (oeisIx @10051)') $ map (oeisIx @262358) [1..]

-- instance OEIS 262378 where
--   oeis = filter ((== 1) . (oeisIx @10051)' . (oeisIx @262358)) [1..]

-- instance OEIS 262390 where
--   oeis = filter ((== 1) . (oeisIx @30)) (oeis @262356)

-- instance OEIS 262393 where
--   oeis = filter ((== 1) . (oeisIx @30) . (oeisIx @262356)) [1..]

-- instance OEIS 262401 where
--   oeisIx = product . map (oeisIx @54055) . (rowT @27746)'

-- instance OEIS 262411 where
--   oeisIx n = genericIndex (oeis @262411) (n - 1)
--   oeis = 1 : f [1] (drop 2 (tabf @30341)) where
--      f xs tss = g tss where
--        g (ys:yss) | null (intersect its $ tail $ inits ys) &&
--                     null (intersect tis $ init $ tails ys) = g yss
--                   | otherwise = (foldr (\t v -> 3 * v + t) 0 ys) :
--                                 f ys (delete ys tss)
--        its = init $ tails xs; tis = tail $ inits xs

-- instance OEIS 262412 where
--   oeisIx n = (oeis @262412) !! (n - 1)
--   oeis = 1 : f [1] (drop 2 (tabf @30341)) where
--      f xs tss = g tss where
--        g (ys:yss) | null (intersect its $ tail $ inits ys) &&
--                     null (intersect tis $ init $ tails ys) = g yss
--                   | otherwise = (foldr (\t v -> 10 * v + t) 0 ys) :
--                                 f ys (delete ys tss)
--        its = init $ tails xs; tis = tail $ inits xs

-- instance OEIS 262429 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @262411))

-- instance OEIS 262435 where
--   oeis = [x | x <- [1..], (oeisIx @262411) x == x]

-- instance OEIS 262437 where
--   oeis = tablList @262437
-- instance Table 262437 where
--   rowCol n k = (tabf @262437) !! n !! k
--   rowT n = (tabf @262437) !! n
--   tabf = iterate succ [0] where
--      succ []      = [1]
--      succ (15:hs) = 0 : succ hs
--      succ (h:hs)  = (h + 1) : hs

-- instance OEIS 262438 where
--   oeisIx = genericLength . (rowT @262437)

-- instance OEIS 262460 where
--   oeisIx n = genericIndex (oeis @262460) (n - 1)
--   oeis = 1 : f [1] (drop 2 (tabf @262437)) where
--      f xs tss = g tss where
--        g (ys:yss) | null (intersect its $ tail $ inits ys) &&
--                     null (intersect tis $ init $ tails ys) = g yss
--                   | otherwise = (foldr (\t v -> 16 * v + t) 0 ys) :
--                                 f ys (delete ys tss)
--        its = init $ tails xs; tis = tail $ inits xs

-- instance OEIS 262461 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @262460))

-- instance OEIS 262481 where
--   oeis = filter (\x -> (oeisIx @120) x == (oeisIx @20639) x) [1..]

-- instance OEIS 262530 where
--   oeisIx n = (oeis @262530) !! (n - 1)
--   oeis = filter f [1..] where
--      f = g d10' . show where
--        g _ [] = True
--        g ts (d:ds) = elem d ts && g (delete d ts) ds
--      d10' = d10 ++ d10; d10 = "0123456789"

-- instance OEIS 262557 where
--   oeis = 0 : f [[0]] where
--      f xss = if x < 9 then (map (read . concatMap show) zss) ++ f zss else []
--              where zss = (map (z :) $ map tail xss) ++ (map (z :) xss)
--                    z = x + 1; x = head $ head xss

instance OEIS 262564 where
  oeis = [2, 3, 5, 4] ++ [6..]

instance OEIS 262565 where
  oeis = cycle [2,3,5,5,3,2]

-- instance OEIS 262604 where
--   oeis = zipWith (-) (tail (oeis @252022)) (oeis @252022)

-- instance OEIS 262663 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @75348))

-- instance OEIS 262665 where
--   oeis = [x | x <- [1..], (oeisIx @75348)' x == x]

-- instance OEIS 262675 where
--   oeis = filter
--      (all (== 1) . map (oeisIx . fi) . (rowT @124010)) [1..]

-- instance OEIS 262703 where
--   oeis = zipWith (-) (tail (oeis @252001)) (oeis @252001)

-- instance OEIS 263017 where
--   import Data.IntMap (empty, findWithDefault, insert)
--   oeisIx n = (oeis @263017) !! (n - 1)
--   oeis = f 1 empty where
--      f x m = y : f (x + 1) (insert h (y + 1) m) where
--              y = findWithDefault 1 h m
--              h = (oeisIx @120) x

-- instance OEIS 263109 where
--   import Data.IntMap (empty, findWithDefault, insert)
--   oeisIx n = (oeis @263109) !! (n - 1)
--   oeis = f 1 empty where
--      f x m = y : f (x + 1) (insert q (y + 1) m) where
--              y = findWithDefault 1 q m; q = (oeisIx @53832) x

-- instance OEIS 263110 where
--   import Data.IntMap (empty, findWithDefault, insert)
--   oeisIx n = (oeis @263110) !! (n - 1)
--   oeis = f 1 empty where
--      f x m = y : f (x + 1) (insert q (y + 1) m) where
--              y = findWithDefault 1 q m; q = (oeisIx @53836) x

-- instance OEIS 263231 where
--   oeisIx n = n * (25 * n - 39) `div` 2
--   oeis = 0 : -7 : 11 : zipWith (+) (oeis @263231)
--      (map (* 3) $ tail $ zipWith (-) (tail (oeis @263231)) (oeis @263231))

-- instance OEIS 263327 where
--   oeisIx 0 = 0
--   oeisIx n = head [x | x <- [1..1023], (oeisIx @262557) x == (oeisIx @9995)' n]

-- instance OEIS 263328 where
--   oeisIx 0 = 0
--   oeisIx n = head [x | x <- [1..1023], (oeisIx @9995)' x == (oeisIx @262557) n]

-- instance OEIS 263329 where
--   oeis = [x | x <- [0..1023], (oeisIx @263327) x == x]

-- instance OEIS 263355 where
--   oeis = tablList @263355
-- instance Table 263355 where
--   rowCol n k = (tabf @263355) !! (n - 1) !! (k-1)
--   rowT n = (tabf @263355) !! (n - 1)
--   tabf = sort $ cc (oeis @263327) where
--      cc [] = []
--      cc (x:xs) = (reverse $ sort ys) : cc (xs \\ ys)
--         where ys = x : c x
--               c z = if y /= x then y : c y else []
--                     where y = (oeisIx @263327) z

-- instance OEIS 263383 where
--   oeisIx = genericLength . (rowT @263355)

-- instance OEIS 263451 where
--   oeis = iterate (oeisIx . (* 2)) 1

-- instance OEIS 263766 where
--   oeis = scanl (*) 1 (oeis @8865)

-- instance OEIS 263774 where
--   oeisIx 1 = 1
--   oeisIx n = foldl (-) (oeisIx n) $ zipWith (^) (map a' $ reverse ds) ds
--               where a' x = if x == n then 0 else (oeisIx @263774) x
--                     ds = (rowT @27750) n

-- instance OEIS 263808 where
--   oeis = filter essicran [1..] where
--      essicran x = last (takeWhile (>= -x) es) == -x where
--        es = scanl (-) x (cycle $ map (read . return) $ show x)

-- instance OEIS 263837 where
--   oeis = filter (\x -> (oeisIx @1065) x <= x) [1..]

-- instance OEIS 263838 where
--   import Data.List.Ordered (union)
--   oeisIx n = (oeis @263838) !! (n - 1)
--   oeis = union (oeis @257719) (oeis @257720)

-- instance OEIS 263845 where
--   oeis = filter (> 0) (oeis @258059)

-- instance OEIS 263847 where
--   oeis = 0 : zipWith (-)
--      (zipWith (-) (tail qs) qs) (drop 2 (oeis @41))
--      where qs = es $ tail (oeis @41)
--            es [] = []; es [x] = []; es (_:x:xs) = x : es xs

-- instance OEIS 263856 where
--   oeisIx n = (oeis @263856) !! (n - 1)
--   oeis = f [] (oeis @4676) where
--      f bps (x:xs) = y : f bps' xs where
--        y = fromJust (elemIndex x bps') + 1
--        bps' = insertBy (compare `on` (reverse . show)) x bps

-- instance OEIS 263896 where
--   oeisIx n = (oeisIx @75383) (2 * n - 1) n

-- instance OEIS 263922 where
--   oeisIx = (oeisIx @51903) . (oeisIx @984)

-- instance OEIS 263924 where
--   import Math.NumberTheory.Primes.Factorisation (factorise)
--   oeisIx n = (oeis @263924) !! (n - 1)
--   oeis = filter f [2..] where
--      f x = not (null pe23s) && any ((> e23) . snd) pes' where
--            e23 = maximum (map snd pe23s)
--            (pe23s, pes') = span ((<= 3) . fst) $ factorise $ (oeisIx @984) x

-- instance OEIS 264164 where
--   oeis = filter ((== 0) . (oeisIx @65333) . (oeisIx @5)') (oeis @3586)

-- instance OEIS 264165 where
--   oeis = filter ((== 1) . (oeisIx @65333) . (oeisIx @5)') (oeis @3586)

-- instance OEIS 264526 where
--   oeisIx = head . (rowT @260689)

-- instance OEIS 264527 where
--   oeisIx = last . (rowT @260689)

-- instance OEIS 264618 where
--   oeisIx n = foldr (\b v -> 2 * v + b) 0 $ (reverse bs ++ (0 : bs))
--               where bs = map fi $ (rowT @30308) n

-- instance OEIS 264619 where
--   oeisIx 0 = 1
--   oeisIx n = foldr (\b v -> 2 * v + b) 0 $ (reverse bs ++ (1 : bs))
--               where bs = map fi $ (rowT @30308) n

-- instance OEIS 264646 where
--   oeisIx n = (oeis @264646) !! (n - 1)
--   oeis = 11 : f 2 [0, 1, 1] where
--      f x digs = (foldl (\v d -> 10 * v + d) 0 ys) : f (x + 1) (digs ++ ys)
--        where ys = map (read . return) (show x) ++ [genericIndex digs x]

-- instance OEIS 264647 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @263856))

-- instance OEIS 264662 where
--   oeis = tablList @264662
-- instance Table 264662 where
--   rowCol = rowCol_off @264662 @1 @1
--   rowT   = rowT_off   @264662 @1
--   tabl = map (sortBy (compare `on` (reverse . show . (oeisIx @7088)))) $
--                      tail $ inits (oeis @40)

-- instance OEIS 264666 where
--   oeis = tablList @264666
-- instance Table 264666 where
--   rowCol = rowCol_off @264666 @1 @1
--   rowT   = rowT_off   @264666 @1
--   tabl = map (scanl1 (*)) (tabl @264662)

-- instance OEIS 264717 where
--   oeisIx n = (oeisIx @100326) (2 * n) n

-- instance OEIS 264739 where
--   import Data.List.Ordered (has)
--   oeisIx n = if (oeis @2202) `has` n then 1 else 0

-- instance OEIS 264740 where
--   oeisIx = sum . map (oeisIx @265) . (rowT @27750)'

instance OEIS 264749 where
  oeisIx n = div n $ (oeisIx @70939) n

-- instance OEIS 264782 where
--   oeisIx n = sum $ zipWith (^) (map (oeisIx @8683) divs) (reverse divs)
--               where divs = (rowT @27750) n

-- instance OEIS 264784 where
--   oeisIx n = (oeis @264784) !! (n - 1)
--   oeis = map length $ filter ((== 0) . head) $ group (oeis @265158)

-- instance OEIS 264810 where
--   oeis = scanl1 (+) (oeis @264739)

-- instance OEIS 264856 where
--   oeisIx n = fromJust $ findIndex (elem n) (tabl @125605)

-- instance OEIS 264893 where
--   oeis = zipWith (-) (tail (oeis @155043)) (oeis @155043)

-- instance OEIS 264898 where
--   oeis = filter ((== 0) . (oeisIx @264893)) [0..]

-- instance OEIS 264959 where
--   oeisIx n = (oeisIx @257851) n n

-- instance OEIS 264997 where
--   import Data.MemoCombinators (memo2, list, integral)
--   oeisIx n = (oeis @264997) !! (n - 1)
--   oeis = f 0 [] (oeis @3593) where
--      f u vs ws'@ (w:ws) | u < w = (p' vs u) : f (u + 1) vs ws'
--                        | otherwise = f u (vs ++ [w]) ws
--      p' = memo2 (list integral) integral p
--      p _  0 = 1
--      p [] _ = 0
--      p (k:ks) m = if m < k then 0 else p' ks (m - k) + p' ks m

-- instance OEIS 264998 where
--   import Data.MemoCombinators (memo2, list, integral)
--   oeisIx n = (oeis @264998) !! (n - 1)
--   oeis = f 0 [] (1 : 2 : tail (oeis @3593)) where
--      f u vs ws'@ (w:ws) | u < w = (p' vs u) : f (u + 1) vs ws'
--                        | otherwise = f u (vs ++ [w]) ws
--      p' = memo2 (list integral) integral p
--      p _  0 = 1
--      p [] _ = 0
--      p (k:ks) m = if m < k then 0 else p' ks (m - k) + p' ks m

-- instance OEIS 265008 where
--   oeisIx n = genericLength [ () | let cs = (rowT @165416) n, c <- cs,
--               let as = takeWhile (<= c) cs, a <- as, b <- as, a * b == c]

-- instance OEIS 265012 where
--   import Math.NumberTheory.Moduli (powerMod)
--   oeisIx n = powerMod 10 (p - 1) (p ^ 2) where p = (oeisIx @40) n

-- instance OEIS 265110 where
--   oeis = tablList @265110
-- instance Table 265110 where
--   rowCol n k = (tabf @265110) !! (n - 1) !! (k-1)
--   rowT n = (tabf @265110) !! (n - 1)
--   tabf = map (scanl1 (*)) (tabf @27746)

-- instance OEIS 265111 where
--   oeis = 1 : f 1 [] 0 1 where
--      f u [] w x = f 1 (reverse $ (rowT @27746)' (u * x)) w (x + 1)
--      f u (v:vs) w x | v == w    = f (u * v) vs w x
--                     | otherwise = v : f u vs v x

-- instance OEIS 265125 where
--   oeis = scanl1 (*) (oeis @265111)

-- instance OEIS 265158 where
--   oeisIx n = (oeis @265158) !! (n - 1)
--   oeis = 1 : concat
--      (transpose [map (* 2) (oeis @265158), map (flip div 2) (oeis @265158)])

-- instance OEIS 265182 where
--   oeisIx n = genericLength [ () | let cs = dropWhile (== 0) $ (rowT @218978) n, c <- cs,
--               let as = takeWhile (<= c) cs, a <- as, b <- as, a * b == c]

-- instance OEIS 265183 where
--   oeisIx n = genericLength [ () | let cs = (rowT @218978) n, a <- cs, b <- cs, c <- cs,
--                            a * b == c || c == 0 && a * b == 0]

-- instance OEIS 265236 where
--   oeisIx n = genericLength [ () | let cs = (rowT @119709) n, a <- cs, b <- cs, c <- cs,
--                            a * b == c || c == 0 && a * b == 0]

-- instance OEIS 265327 where
--   oeisIx = (+ 1) . fromJust . (`elemIndex` (oeis @238324))

-- instance OEIS 265377 where
--   import Data.Set (singleton, deleteFindMin, insert, Set)
--   oeisIx n = (oeis @265377) !! (n - 1)
--   oeis = f (singleton (1 + 2^3, (1, 2))) (-1) where
--      f s z = if y /= z then y : f s'' y else f s'' y
--                 where s'' = (insert (y', (i, j')) $
--                              insert (y' - i ^ 3 , (i + 1, j')) s')
--                       y' = y + j' ^ 3; j' = j + 1
--                       ((y, (i, j)), s') = deleteFindMin s

-- instance OEIS 265509 where
--   oeis = f (tail (tabf @30308)) [[]] where
--      f (bs:_:bss) pss = y : f bss pss' where
--        y = foldr (\d v -> 2 * v + d) 0 ys
--        (ys:_) = dropWhile (\ps -> not $ and $ zipWith (<=) ps bs) pss'
--        pss' = if bs /= reverse bs then pss else bs : pss

-- instance OEIS 265510 where
--   oeisIx = (oeisIx @7088) . (oeisIx @265509)

-- instance OEIS 265525 where
--   oeis = f (tabf @31298) [[]] where
--      f (ds:dss) pss = y : f dss pss' where
--        y = foldr (\d v -> 10 * v + d) 0 ys
--        (ys:_) = dropWhile (\ps -> not $ and $ zipWith (<=) ps ds) pss'
--        pss' = if ds /= reverse ds then pss else ds : pss

-- instance OEIS 265652 where
--   oeis = tablList @265652
-- instance Table 265652 where
--   rowCol = rowCol_off @265652 @1 @1
--   rowT   = rowT_off   @265652 @1
--   tabl = zipWith (zipWith (-))
--      (zipWith (map . (+)) (oeis @203) (tabl @245093)) (tabl @132442)

-- instance OEIS 265668 where
--   import Math.NumberTheory.Primes.Factorisation (factorise)
--   oeisIx n k = (tabf @265668) !! (n - 1) !! (k-1)
--   oeisIx_row n = (tabf @265668) !! (n - 1)
--   oeisIx_tabf = [1] : mapMaybe f [2..] where
--      f x = if all (== 1) es then Just ps else Nothing
--            where (ps, es) = unzip $ factorise x

-- instance OEIS 265675 where
--   oeisIx n = (oeis @265675) !! (n - 1)
--   oeis = map (\ (x:xs) -> length $ filter ((== 1) . gcd x) xs) $
--                      map reverse $ tail $ inits (oeis @5117)

instance Table 265705 where
  tabl = map (rowT @265705) [0..]
  rowT n = map (rowCol @265705 n) [0..n]
  rowCol n k = k `bimpl` n
instance OEIS 265705 where
  oeis = tablList @265705

instance OEIS 265716 where
  oeisIx n = n `bimpl` (2 * n)

instance OEIS 265736 where
  oeisIx = sum . (rowT @265705)

-- instance OEIS 265845 where
--   import Data.Set (singleton, deleteFindMin, insert, Set)
--   oeisIx n = (oeis @265845) !! (n - 1)
--   oeis = f (singleton (1, (1, 1))) 0 0 where
--      f s z z' = if y == z && z' /= z then y : f s'' y z else f s'' y z
--                 where s'' = (insert (y', (i, j')) $
--                              insert (y' - i ^ 3 , (i + 1, j')) s')
--                       y' = y + j' ^ 3; j' = j + 1
--                       ((y, (i, j)), s') = deleteFindMin s

-- instance OEIS 265848 where
--   oeis = tablList @265848
-- instance Table 265848 where
--   rowT n = (tabl @265848) !! n
--   tabl = zipWith (++) ([] : (tabf @14413)) (tabf @34868)

-- instance OEIS 265885 where
--   oeisIx n = n `bimpl` (oeisIx @40) n where
--      bimpl 0 0 = 0
--      bimpl p q = 2 * bimpl p' q' + if u <= v then 1 else 0
--                  where (p', u) = divMod p 2; (q', v) = divMod q 2

-- instance OEIS 265912 where
--   oeisIx = fromJust . (flip findIndex (tabl @7318)) . elem . (oeisIx @14631)

instance OEIS 266089 where
  oeis = 0 : f 0 (zip [1..] $ tail (oeis @120)) where
     f x zws = g zws where
       g (yw@ (y, w) : yws) | abs (x - w) /= 1 = g yws
                           | otherwise = y : f w (delete yw zws)

instance OEIS 266154 where
  oeisIx = fi . fromJust . (`elemIndex` (oeis @266089))

instance OEIS 266161 where
  oeisIx = (oeisIx @120) . (oeisIx @266089)

instance OEIS 269347 where
  oeis = 1 : map a [2..] where
    a n = sum $ filter ((==) 0 . mod n . (oeisIx @269347 . pred)) [1..n - 1]

-- instance OEIS 269526 where
--   oeisIx n = head $ [1..] \\ map (oeisIx @269526) (oeisIx_row n)

instance OEIS 271268 where
  oeis = 8 : cycle [88, 1664, 17144, 17112, 1214]

instance OEIS 273156 where
  oeisIx = product . (rowT @35516)

-- instance OEIS 273191 where
--   oeisIx n = (oeis @273191) !! (n - 1)
--   oeis = (map length . group) $ map (oeisIx @273190) [0..]

-- instance OEIS 273620 where
--   oeisIxT :: Integral a => a -> a -> a
--   oeisIxT n k = floor $ sqrt k' * c where
--     (n', k') = (fi n, fi k)
--     c = fi $ floor $ n' / sqrt k' + 1

-- instance OEIS 273823 where
--   oeisIx n = genericIndex (oeis @273823) (n - 1)
--   oeis = concatMap (rowT @273823) [1..]
--   oeisIx_tabf = map (rowT @273823) [1..]
--   oeisIx_row n
--     | a_i == 0  = []
--     | otherwise = a_i : (rowT @273823) a_i where
--       a_i = (oeisIx @271439) n

-- instance OEIS 273824 where
--   oeisIx n = genericIndex (oeis @273824) (n - 1)
--   oeis = concatMap (rowT @273824) [1..]
--   oeisIx_tabf = map (rowT @273824) [1..]
--   oeisIx_row n
--     | a_i == 0  = []
--     | otherwise = a_i : (rowT @273824) a_i where
--       a_i = (oeisIx @271439) (n - 1)

-- instance OEIS 273825 where
--   oeisIx n = genericIndex (oeis @273825) (n - 1)
--   oeis = concatMap (rowT @273825) [1..]
--   oeisIx_tabf = map (rowT @273825) [1..]
--   oeisIx_row n
--     | a_i == 0  = []
--     | otherwise = a_i : (rowT @273825) a_i where
--       a_i = (oeisIx @271439) $ (oeisIx @271439) (n - 1)

-- instance OEIS 274079 where
--   oeis = concatMap (rowT @274079) [1..]
--   oeisIx_tabf = map (rowT @274079) [1..]
--   oeisIx_row n = [n - 1, n-2..n - (oeisIx @2262) (n - 1)]

-- instance OEIS 274080 where
--   oeisIx n = (oeis @274080) !! (n - 1)
--   oeis = concatMap (rowT @274080) [1..]
--   oeisIx_tabf = map (rowT @274080) [1..]
--   oeisIx_row n = nub $ sort $ concatMap (\f -> f n) [oeisIx_row, (rowT @273825), (rowT @273824), (rowT @273823)]

instance OEIS 275673 where
  oeis = scanl (+) 1 $ concatMap (replicate 6) [1..]

-- instance OEIS 276127 where
--   oeisIx 1 = 1
--   oeisIx n = (oeisIx @1414) $ (oeisIx @64413) n

instance OEIS 276163 where
  oeisIx n = maximum $ map minimax $ permutations [1..n]

-- instance OEIS 276165 where
--   oeisIx = minimax . (rowT @66099)

-- instance OEIS 276166 where
--   minimaxDifference [] = 0
--   minimaxDifference as = max (head as - minimaxDifference (tail as)) (last as - minimaxDifference (init as))
--   minimaxScore as = (sum as + minimaxDifference as) `div` 2
--   oeisIx = minimaxScore . (rowT @66099)

-- instance OEIS 276167 where
--   minimaxDifference [] = 0
--   minimaxDifference as = max (head as - minimaxDifference (tail as)) (last as - minimaxDifference (init as))
--   minimaxScore2 as = (sum as - minimaxDifference as) `div` 2
--   oeisIx = minimaxScore2 . (rowT @66099)

instance OEIS 276168 where
  oeisIx n = minimum $ map minimax $ permutations [1..n]

-- instance OEIS 276374 where
--   oeis = filter (\i -> (oeisIx @240024) i == (oeisIx @2808) i) [1..]

-- instance OEIS 276375 where
--   oeis = filter (\i -> (oeisIx @240024) (i + 1) == (oeisIx @2808) i) [1..]

-- instance OEIS 277278 where
--   oeisIx n
--     | isSquare n = n
--     | otherwise = last $ fromJust $ find (isSquare . sum) s
--     where
--       s = map ((n:) . map (n+)) (tabf @48793)
--       isSquare m = m == (integerRoot * integerRoot) where integerRoot = isqrtA m

-- instance OEIS 277516 where
--   oeisIx n = (oeisIx @277278) n - n

-- instance OEIS 279968 where
--   oeisIx n = genericIndex (oeis @279968) (n - 1)
--   oeis = map count [1..] where
--     count n = genericLength $ filter (odd . (n+)) adjacentLabels where
--       adjacentLabels = map (oeisIx @279968) (oeisIx_row n)

instance OEIS 287355 where
  oeisIx = go 0 2 . succ
    where
      go a r n
        | n >= c             = go (a+t) (r+1) (n - c)
        | n >= r*div n r + m = a + 2*div n r + 1
        | n >= r*div n r + m' + 1 = a + 2*div n r + 1
        | otherwise          = a + 2*div n r
        where
          t  = totient r
          c  = div (r*t) 2
          m  = midnum r
          m' = midnum (r - 1)
      midnum r = head [a | a<-[div (r+1) 2..], gcd a r==1]

-- instance OEIS 288208 where
--   pairs l = zip l (drop 1 l)
--   d n = filter (all (uncurry (/=)) . zip [1..]) $ Data.List.permutations [1..n]
--   a n = length $ filter (all ((1<) . abs . uncurry (-)) . pairs) $ d n

-- instance OEIS 290151 where
  -- oeisIx 1 = []
  -- oeisIx n | l<-f$n - 1 = l++[head [i |i<-[2..],gcd i n<2,all (/=i)l,abs (n-i)>1]]

-- instance OEIS 301851 where
--   oeis = tablList @301851
-- instance Table 301851 where
--   rowCol n k = length $ nub [i^2 + j^2 | i <- [0..n - 1], j <- [0..k-1]]

instance OEIS 305461 where
  oeisIx (succ->n) = genericLength $ filter (\i -> (i^3 - i^2) `mod` n == 0) [0..n - 1]

instance OEIS 306216 where
  oeis = 1 : 1 : concat (unfoldr nextGeneration [1,1]) where
    nextGeneration l = Just (diff l, l ++ diff l)
    diff xs =  zipWith subtract xs (tail xs)

-- instance OEIS 306998 where
--   -- Very poor Haskell code, but let it stand until someone contributes the
--   -- used to produce the data given.
--   isPrime :: Int -> Bool
--   isPrime = isPrime1 2
--   isPrime1 :: Int -> Int -> Bool
--   isPrime1 d n = n /= 1 && (d^2 > n || mod n d /= 0 && isPrime1 (d+1) n)
--   count :: (a -> Bool) -> [a] -> Int
--   count f [] = 0
--   count f (x:xs) = (if f x then 1 else 0) + count f xs
--   pdf :: Int -> Double
--   pdf n = fi (count isPrime [1..n]) / fi n
--   isRecord :: Int -> Bool
--   isRecord n = (n == 2) || (pdf n) < (minimum (map pdf [2.. (n - 1)]))
--   records :: [Int]
--   records = filter isRecord [2..100]

-- instance OEIS 308267 where
--   import Data.Numbers.Primes
--   bintodec :: [Int] -> Int
--   bintodec = sum . zipWith (*) (iterate (*2) 1) . reverse
--   decomp :: (Integer, [Integer]) -> (Integer, [Integer])
--   decomp (x, ys) = if even x then (x `div` 2, 0:ys) else (x - 1, 1:ys)
--   zeck :: Integer -> String
--   zeck n = bintodec (1 : snd (last $ takeWhile (\ (x, ys) -> x > 0) $ iterate decomp (n, [])))
--   output :: [Integer]
--   output = filter (\x -> 0 == zeck x `mod` x) [1..100]

-- instance OEIS 308339 where
--   twinLowX [] = []
--   twinLowX [_] = []
--   twinLowX (n : (m : ns))
--       | m == n + 1 = 1 : (map succ (twinLowX (m : ns)))
--       | otherwise = (map succ (twinLowX (m : ns)))
--   oeisIx n = (twinLowX (oeis @7304)) !! (n - 1)

-- instance OEIS 308495 where
--   -- expected to be part of (oeisIx @27748)
--   oeis = concat (map (rowT @27748) [1..])
--   minIdx [] _ = []
--   minIdx _ [] = []
--   minIdx (a:as) (b:bs)
--       | a == b = 1 : (map succ (minIdx as bs))
--       | otherwise = map succ (minIdx as (b:bs))
--   oeis = minIdx (oeis @27748) (oeis @40)
--   oeisIx n = (oeis @308495) !! (n - 1)

-- instance OEIS 308576 where
--   a 0 = 1
--   a n = (a (n - 1)) + (a (a (n - 1) `mod` n)) + 1

-- instance OEIS 309096 where
--   wheelSeeds = [2, 3, 5, 7, 11, 13]
--   wheelOffsets = filter (\c -> all (\s -> mod c s /= 0) wheelSeeds) [1..product wheelSeeds]
--   restOfWheel = (concat (map (replicate (length wheelOffsets)) (map (* (product wheelSeeds)) [1..])))
--   wheel = wheelSeeds ++ (tail wheelOffsets) ++ (zipWith (+) (cycle wheelOffsets) restOfWheel)
--   isPrime n = and [n > 1, all (\c -> mod n c /= 0) (takeWhile (\c -> c * c <= n) wheel)]
--   primes = filter isPrime wheel
--   exponents bases acc n =
--       if (n == 1)
--           then (dropWhile (== 0) acc)
--           else if (mod n (head bases) == 0)
--               then (exponents bases (((head acc) + 1) : (tail acc)) (div n (head bases)))
--               else (exponents (tail bases) (0 : acc) n)
--   a = filter (\n -> all (\e -> elem e (takeWhile (<= e) a)) (exponents primes [0] n)) [1..]

-- instance OEIS 309415 where
--   oeisIx n = genericLength $ nub $ permutations $ show $ fact n
--     map (oeisIx @309415) [0..]

-- instance OEIS 309979 where
--   hash :: Double -> Inthash = read . sort . take 6 . filter (/='0') . drop 1 . dropWhile (/='.') . show . (** 0.03125)
--   main :: IO ()main = print $ map (floor . fst) . filter ((==234477) . snd) $ map (\x -> (x, hash x)) [2..1000000]

-- instance OEIS 316343 where
--   oeisIx_count :: Integer -> Int
--   oeisIx_count n = fi ((v + 1) ^ 2) where
--       v
--           | n `mod` 2 == 1 = 0
--           | otherwise      = 1 + (n `div` 2)
--   oeisIx_S :: Integer -> [Integer]
--   oeisIx_S n = 0 : (replicate (oeisIx_count n) 1)
--   oeisIx :: [Integer]
--   oeisIx = concatMap (oeisIx @316343)_S [1..]

-- instance OEIS 316532 where
--   divides :: Integer -> Integer -> Bool
--   divides a b = a `mod` b == 0
--   partitions :: [[Integer]]
--   partitions = concat $ map (partitions_of_n) [0..]
--   partitions_of_n :: Integer -> [[Integer]]
--   partitions_of_n n = partitions_at_most n n
--   partitions_at_most :: Integer -> Integer -> [[Integer]]
--   partitions_at_most _ 0 = [[]]
--   partitions_at_most 0 _ = []
--   partitions_at_most m n = concat $ map (\k -> map ([k] ++) (partitions_at_most k (n-k))) ( reverse [1.. (min m n)])
--   prime_signature :: [Integer] -> Integer
--   prime_signature p = product $ zipWith (^) primes p
--   seq :: [Integer]
--   seq = map prime_signature $ filter compare_first_second partitions
--       where
--     compare_first_second p
--           | length p == 0 = True
--           | length p == 1 = False
--           | otherwise = p!!0 == p!!1

instance OEIS 323186 where
  oeisIx 0 = 0
  oeisIx 1 = -1
  oeisIx 2 = -1
  oeisIx n
    | a (n - 2) == 0 = a (n - 1) + a' (n - 1) - a'' (n - 1)
    | otherwise      = a (n - 1) + a' (n - 1) + a'' (n - 1)
    where a     = oeisIx @323186
          a'  n = a  n - a (n - 1)
          a'' n = a' n - a' (n - 1)

instance OEIS 325902 where
  oeis = filter (\n -> sumPartitionable $ primeFactors (n - 1) ++ primeFactors (n+1)) [2..]
    where
      sumPartitionable ns
        | p <- \ms -> sum ms == sum (ns \\ ms)
        = any p $ subsequences ns


minimax [] = 0
minimax as = max (head as - minimax (tail as)) (last as - minimax (init as))

bimpl 0 0 = 0
bimpl p q = 2 * bimpl p' q' + if u <= v then 1 else 0
            where (p', u) = divMod p 2; (q', v) = divMod q 2

uss = [] : [] : [] : f 2 1 [3..] where
  f x y zs = g zs [] where
      g (v:vs) ws | gcd v y > 1 || gcd v x > 1 = g vs (v : ws)
                  | otherwise = ws : f v x (delete v zs)
